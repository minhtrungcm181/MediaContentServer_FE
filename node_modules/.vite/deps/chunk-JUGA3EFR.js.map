{
  "version": 3,
  "sources": ["../../paho.mqtt.js/src/mqttws31.js"],
  "sourcesContent": ["/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *    Guozhen Huang - improve to umd library\n *******************************************************************************/\n\n(function(factory) {\n    var root = (typeof self == 'object' && self.self === self && self) ||\n      (typeof global == 'object' && global.global === global && global);\n\n    if (typeof define === 'function' && define.amd) {\n      define([], function () {\n        return factory(root)\n      });\n    } else if (typeof exports === 'object') {\n      module.exports = factory(root);\n    } else {\n      if (typeof root.Paho === 'undefined') {\n        root.Paho = {};\n      }\n      root.Paho.MQTT = factory(root);\n    }\n})(function(global) {\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\n\tvar version = \"@VERSION@\";\n\tvar buildLevel = \"@BUILDLEVEL@\";\n\n\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\tvar MESSAGE_TYPE = {\n\t\tCONNECT: 1,\n\t\tCONNACK: 2,\n\t\tPUBLISH: 3,\n\t\tPUBACK: 4,\n\t\tPUBREC: 5,\n\t\tPUBREL: 6,\n\t\tPUBCOMP: 7,\n\t\tSUBSCRIBE: 8,\n\t\tSUBACK: 9,\n\t\tUNSUBSCRIBE: 10,\n\t\tUNSUBACK: 11,\n\t\tPINGREQ: 12,\n\t\tPINGRESP: 13,\n\t\tDISCONNECT: 14\n\t};\n\n\t// Collection of utility methods used to simplify module code\n\t// and promote the DRY pattern.\n\n\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\tvar validate = function(obj, keys) {\n\t\tfor (var key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t   throw new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t} else {\n\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\tfor (var key in keys)\n\t\t\t\t\t\tif (keys.hasOwnProperty(key))\n\t\t\t\t\t\t\terrorStr = errorStr+\" \"+key;\n\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\tvar scope = function (f, scope) {\n\t\treturn function () {\n\t\t\treturn f.apply(scope, arguments);\n\t\t};\n\t};\n\n\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\tvar ERROR = {\n\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t};\n\n\t/** CONNACK RC Meaning. */\n\tvar CONNACK_RC = {\n\t\t0:\"Connection Accepted\",\n\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t2:\"Connection Refused: identifier rejected\",\n\t\t3:\"Connection Refused: server unavailable\",\n\t\t4:\"Connection Refused: bad user name or password\",\n\t\t5:\"Connection Refused: not authorized\"\n\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR.KEY value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\tvar format = function(error, substitutions) {\n\t\tvar text = error.text;\n\t\tif (substitutions) {\n\t\t  var field,start;\n\t\t  for (var i=0; i<substitutions.length; i++) {\n\t\t\tfield = \"{\"+i+\"}\";\n\t\t\tstart = text.indexOf(field);\n\t\t\tif(start > 0) {\n\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t}\n\t\t  }\n\t\t}\n\t\treturn text;\n\t};\n\n\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\tvar WireMessage = function (type, options) {\n\t\tthis.type = type;\n\t\tfor (var name in options) {\n\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\tthis[name] = options[name];\n\t\t\t}\n\t\t}\n\t};\n\n\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\tvar remLength = 0;\n\t\tvar topicStrLength = new Array();\n\t\tvar destinationNameLength = 0;\n\n\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\tif (this.messageIdentifier != undefined)\n\t\t\tremLength += 2;\n\n\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage != undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\tvar willMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName != undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password != undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t;\n\t\t}\n\n\t\t// Now we can allocate a buffer for the message\n\n\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t//Write the fixed header into the buffer\n\t\tbyteStream[0] = first;\n\t\tbyteStream.set(mbi,1);\n\n\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar connectFlags = 0;\n\t\t\tif (this.cleanSession)\n\t\t\t\tconnectFlags = 0x02;\n\t\t\tif (this.willMessage != undefined ) {\n\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.userName != undefined)\n\t\t\t\tconnectFlags |= 0x80;\n\t\t\tif (this.password != undefined)\n\t\t\t\tconnectFlags |= 0x40;\n\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t}\n\n\t\t// Output the messageIdentifier - if there is one\n\t\tif (this.messageIdentifier != undefined)\n\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage != undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\tif (this.userName != undefined)\n\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\tif (this.password != undefined)\n\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n//    \t    case MESSAGE_TYPE.PUBREC:\n//    \t    case MESSAGE_TYPE.PUBREL:\n//    \t    case MESSAGE_TYPE.PUBCOMP:\n//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t}\n\n\t\treturn buffer;\n\t}\n\n\tfunction decodeMessage(input,pos) {\n\t    var startingPos = pos;\n\t\tvar first = input[pos];\n\t\tvar type = first >> 4;\n\t\tvar messageInfo = first &= 0x0f;\n\t\tpos += 1;\n\n\n\t\t// Decode the remaining length (MBI format)\n\n\t\tvar digit;\n\t\tvar remLength = 0;\n\t\tvar multiplier = 1;\n\t\tdo {\n\t\t\tif (pos == input.length) {\n\t\t\t    return [null,startingPos];\n\t\t\t}\n\t\t\tdigit = input[pos++];\n\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\tmultiplier *= 128;\n\t\t} while ((digit & 0x80) != 0);\n\n\t\tvar endPos = pos+remLength;\n\t\tif (endPos > input.length) {\n\t\t    return [null,startingPos];\n\t\t}\n\n\t\tvar wireMessage = new WireMessage(type);\n\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\n\t\t\t\tvar message = new Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t;\n\t\t}\n\n\t\treturn [wireMessage,endPos];\n\t}\n\n\tfunction writeUint16(input, buffer, offset) {\n\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\tbuffer[offset++] = input % 256;     //LSB\n\t\treturn offset;\n\t}\n\n\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\tstringToUTF8(input, buffer, offset);\n\t\treturn offset + utf8Length;\n\t}\n\n\tfunction readUint16(buffer, offset) {\n\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t}\n\n\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\tfunction encodeMBI(number) {\n\t\tvar output = new Array(1);\n\t\tvar numBytes = 0;\n\n\t\tdo {\n\t\t\tvar digit = number % 128;\n\t\t\tnumber = number >> 7;\n\t\t\tif (number > 0) {\n\t\t\t\tdigit |= 0x80;\n\t\t\t}\n\t\t\toutput[numBytes++] = digit;\n\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\treturn output;\n\t}\n\n\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\tfunction UTF8Length(input) {\n\t\tvar output = 0;\n\t\tfor (var i = 0; i<input.length; i++)\n\t\t{\n\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t   {\n\t\t\t\t\t  // Surrogate pair means its a 4 byte character\n\t\t\t\t\t  if (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t  i++;\n\t\t\t\t\t\t  output++;\n\t\t\t\t\t\t}\n\t\t\t\t   output +=3;\n\t\t\t\t   }\n\t\t\telse if (charCode > 0x7F)\n\t\t\t\toutput +=2;\n\t\t\telse\n\t\t\t\toutput++;\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\tfunction stringToUTF8(input, output, start) {\n\t\tvar pos = start;\n\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t// Check for a surrogate pair.\n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t}\n\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t}\n\n\t\t\tif (charCode <= 0x7F) {\n\t\t\t\toutput[pos++] = charCode;\n\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t} else {\n\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t};\n\t\t}\n\t\treturn output;\n\t}\n\n\tfunction parseUTF8(input, offset, length) {\n\t\tvar output = \"\";\n\t\tvar utf16;\n\t\tvar pos = offset;\n\n\t\twhile (pos < offset+length)\n\t\t{\n\t\t\tvar byte1 = input[pos++];\n\t\t\tif (byte1 < 128)\n\t\t\t\tutf16 = byte1;\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\tif (byte2 < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t   var byte4 = input[pos++]-128;\n\t\t\t\t\t\t\t\t   if (byte4 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\t\t   if (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\t\t\t   utf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t   else                     // longer encodings are not supported\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t  {\n\t\t\t\t\t utf16 -= 0x10000;\n\t\t\t\t\t output += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\t utf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t  }\n\t\t\toutput += String.fromCharCode(utf16);\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\tvar Pinger = function(client, window, keepAliveInterval) {\n\t\tthis._client = client;\n\t\tthis._window = window;\n\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\tthis.isReset = false;\n\n\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\tvar doTimeout = function (pinger) {\n\t\t\treturn function () {\n\t\t\t\treturn doPing.apply(pinger);\n\t\t\t};\n\t\t};\n\n\t\t/** @ignore */\n\t\tvar doPing = function() {\n\t\t\tif (!this.isReset) {\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t} else {\n\t\t\t\tthis.isReset = false;\n\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\tthis.timeout = this._window.setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t}\n\t\t}\n\n\t\tthis.reset = function() {\n\t\t\tthis.isReset = true;\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t}\n\n\t\tthis.cancel = function() {\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t}\n\t };\n\n\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\tvar Timeout = function(client, window, timeoutSeconds, action, args) {\n\t\tthis._window = window;\n\t\tif (!timeoutSeconds)\n\t\t\ttimeoutSeconds = 30;\n\n\t\tvar doTimeout = function (action, client, args) {\n\t\t\treturn function () {\n\t\t\t\treturn action.apply(client, args);\n\t\t\t};\n\t\t};\n\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\tthis.cancel = function() {\n\t\t\tthis._window.clearTimeout(this.timeout);\n\t\t}\n\t};\n\n\t/*\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.MQTT.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\tif (!(\"WebSocket\" in global && global[\"WebSocket\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t}\n\t\tif (!(\"localStorage\" in global && global[\"localStorage\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"localStorage\"]));\n\t\t}\n\t\tif (!(\"ArrayBuffer\" in global && global[\"ArrayBuffer\"] !== null)) {\n\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t}\n\t\tthis._trace(\"Paho.MQTT.Client\", uri, host, port, path, clientId);\n\n\t\tthis.host = host;\n\t\tthis.port = port;\n\t\tthis.path = path;\n\t\tthis.uri = uri;\n\t\tthis.clientId = clientId;\n\n\t\t// Local storagekeys are qualified with the following string.\n\t\t// The conditional inclusion of path in the key is for backward\n\t\t// compatibility to when the path was not configurable and assumed to\n\t\t// be /mqtt\n\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t// Create private instance-only message queue\n\t\t// Internal queue of messages to be sent, in sending order.\n\t\tthis._msg_queue = [];\n\n\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\tthis._sentMessages = {};\n\n\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t// indexed by their respective message ids.\n\t\tthis._receivedMessages = {};\n\n\t\t// Internal list of callbacks to be executed when messages\n\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\tthis._notify_msg_sent = {};\n\n\t\t// Unique identifier for SEND messages, incrementing\n\t\t// counter as messages are sent.\n\t\tthis._message_identifier = 1;\n\n\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\tthis._sequence = 0;\n\n\n\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\tfor (var key in localStorage)\n\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) == 0\n\t\t\t\t|| key.indexOf(\"Received:\"+this._localKey) == 0)\n\t\t\tthis.restore(key);\n\t};\n\n\t// Messaging Client public instance members.\n\tClientImpl.prototype.host;\n\tClientImpl.prototype.port;\n\tClientImpl.prototype.path;\n\tClientImpl.prototype.uri;\n\tClientImpl.prototype.clientId;\n\n\t// Messaging Client private instance members.\n\tClientImpl.prototype.socket;\n\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\tClientImpl.prototype.connected = false;\n\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t */\n\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\tClientImpl.prototype.connectOptions;\n\tClientImpl.prototype.hostIndex;\n\tClientImpl.prototype.onConnectionLost;\n\tClientImpl.prototype.onMessageDelivered;\n\tClientImpl.prototype.onMessageArrived;\n\tClientImpl.prototype.traceFunction;\n\tClientImpl.prototype._msg_queue = null;\n\tClientImpl.prototype._connectTimeout;\n\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\tClientImpl.prototype.sendPinger = null;\n\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\tClientImpl.prototype.receivePinger = null;\n\n\tClientImpl.prototype.receiveBuffer = null;\n\n\tClientImpl.prototype._traceBuffer = null;\n\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\tClientImpl.prototype.connect = function (connectOptions) {\n\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\tif (this.connected)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\tif (this.socket)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\tthis.connectOptions = connectOptions;\n\n\t\tif (connectOptions.uris) {\n\t\t\tthis.hostIndex = 0;\n\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t} else {\n\t\t\tthis._doConnect(this.uri);\n\t\t}\n\n\t};\n\n\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\tif (!this.connected)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n\t\twireMessage.topics=[filter];\n\t\tif (subscribeOptions.qos != undefined)\n\t\t\twireMessage.requestedQos = [subscribeOptions.qos];\n\t\telse\n\t\t\twireMessage.requestedQos = [0];\n\n\t\tif (subscribeOptions.onSuccess) {\n\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t}\n\n\t\tif (subscribeOptions.onFailure) {\n\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode});};\n\t\t}\n\n\t\tif (subscribeOptions.timeout) {\n\t\t\twireMessage.timeOut = new Timeout(this, window, subscribeOptions.timeout, subscribeOptions.onFailure\n\t\t\t\t\t, [{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t}\n\n\t\t// All subscriptions return a SUBACK.\n\t\tthis._requires_ack(wireMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\tif (!this.connected)\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n\t\twireMessage.topics = [filter];\n\n\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t}\n\t\tif (unsubscribeOptions.timeout) {\n\t\t\twireMessage.timeOut = new Timeout(this, window, unsubscribeOptions.timeout, unsubscribeOptions.onFailure\n\t\t\t\t\t, [{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t}\n\n\t\t// All unsubscribes return a SUBACK.\n\t\tthis._requires_ack(wireMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\n\tClientImpl.prototype.send = function (message) {\n\t\tthis._trace(\"Client.send\", message);\n\n\t\tif (!this.connected)\n\t\t   throw new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\twireMessage.payloadMessage = message;\n\n\t\tif (message.qos > 0)\n\t\t\tthis._requires_ack(wireMessage);\n\t\telse if (this.onMessageDelivered)\n\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\tthis._schedule_message(wireMessage);\n\t};\n\n\tClientImpl.prototype.disconnect = function () {\n\t\tthis._trace(\"Client.disconnect\");\n\n\t\tif (!this.socket)\n\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\twireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t// in case of a failure later on in the disconnect processing.\n\t\t// as a consequence, the _disconected call back may be run several times.\n\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\tthis._schedule_message(wireMessage);\n\t};\n\n\tClientImpl.prototype.getTraceLog = function () {\n\t\tif ( this._traceBuffer !== null ) {\n\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\tfor (var key in this._sentMessages)\n\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\treturn this._traceBuffer;\n\t\t}\n\t};\n\n\tClientImpl.prototype.startTrace = function () {\n\t\tif ( this._traceBuffer === null ) {\n\t\t\tthis._traceBuffer = [];\n\t\t}\n\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t};\n\n\tClientImpl.prototype.stopTrace = function () {\n\t\tdelete this._traceBuffer;\n\t};\n\n\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\tif (this.connectOptions.useSSL) {\n\t\t    var uriParts = wsurl.split(\":\");\n\t\t    uriParts[0] = \"wss\";\n\t\t    wsurl = uriParts.join(\":\");\n\t\t}\n\t\tthis.connected = false;\n\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t} else {\n\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t}\n\t\tthis.socket.binaryType = 'arraybuffer';\n\n\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\tthis.sendPinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\n\t\tthis.receivePinger = new Pinger(this, window, this.connectOptions.keepAliveInterval);\n\n\t\tthis._connectTimeout = new Timeout(this, window, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t};\n\n\n\t// Schedule a new message to be sent over the WebSockets\n\t// connection. CONNECT messages cause WebSocket connection\n\t// to be started. All other messages are queued internally\n\t// until this has happened. When WS connection starts, process\n\t// all outstanding messages.\n\tClientImpl.prototype._schedule_message = function (message) {\n\t\tthis._msg_queue.push(message);\n\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\tif (this.connected) {\n\t\t\tthis._process_queue();\n\t\t}\n\t};\n\n\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\tswitch(wireMessage.type) {\n\t\t  case MESSAGE_TYPE.PUBLISH:\n\t\t\t  if(wireMessage.pubRecReceived)\n\t\t\t\t  storedMessage.pubRecReceived = true;\n\n\t\t\t  // Convert the payload to a hex string.\n\t\t\t  storedMessage.payloadMessage = {};\n\t\t\t  var hex = \"\";\n\t\t\t  var messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t  for (var i=0; i<messageBytes.length; i++) {\n\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t  hex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\telse\n\t\t\t\t  hex = hex+messageBytes[i].toString(16);\n\t\t\t  }\n\t\t\t  storedMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t  storedMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t  storedMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t  if (wireMessage.payloadMessage.duplicate)\n\t\t\t\t  storedMessage.payloadMessage.duplicate = true;\n\t\t\t  if (wireMessage.payloadMessage.retained)\n\t\t\t\t  storedMessage.payloadMessage.retained = true;\n\n\t\t\t  // Add a sequence number to sent messages.\n\t\t\t  if ( prefix.indexOf(\"Sent:\") == 0 ) {\n\t\t\t\t  if ( wireMessage.sequence === undefined )\n\t\t\t\t\t  wireMessage.sequence = ++this._sequence;\n\t\t\t\t  storedMessage.sequence = wireMessage.sequence;\n\t\t\t  }\n\t\t\t  break;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, storedMessage]));\n\t\t}\n\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t};\n\n\tClientImpl.prototype.restore = function(key) {\n\t\tvar value = localStorage.getItem(key);\n\t\tvar storedMessage = JSON.parse(value);\n\n\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\tswitch(storedMessage.type) {\n\t\t  case MESSAGE_TYPE.PUBLISH:\n\t\t\t  // Replace the payload message with a Message object.\n\t\t\t  var hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t  var buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t  var byteStream = new Uint8Array(buffer);\n\t\t\t  var i = 0;\n\t\t\t  while (hex.length >= 2) {\n\t\t\t\t  var x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t  hex = hex.substring(2, hex.length);\n\t\t\t\t  byteStream[i++] = x;\n\t\t\t  }\n\t\t\t  var payloadMessage = new Message(byteStream);\n\n\t\t\t  payloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t  payloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t  if (storedMessage.payloadMessage.duplicate)\n\t\t\t\t  payloadMessage.duplicate = true;\n\t\t\t  if (storedMessage.payloadMessage.retained)\n\t\t\t\t  payloadMessage.retained = true;\n\t\t\t  wireMessage.payloadMessage = payloadMessage;\n\n\t\t\t  break;\n\n\t\t\tdefault:\n\t\t\t  throw Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t}\n\n\t\tif (key.indexOf(\"Sent:\"+this._localKey) == 0) {\n\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t} else if (key.indexOf(\"Received:\"+this._localKey) == 0) {\n\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t}\n\t};\n\n\tClientImpl.prototype._process_queue = function () {\n\t\tvar message = null;\n\t\t// Process messages in order they were added\n\t\tvar fifo = this._msg_queue.reverse();\n\n\t\t// Send all queued messages down socket connection\n\t\twhile ((message = fifo.pop())) {\n\t\t\tthis._socket_send(message);\n\t\t\t// Notify listeners that message was successfully sent\n\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\tthis._message_identifier++;\n\t\t}\n\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t}\n\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\tthis._message_identifier = 1;\n\t\t}\n\t};\n\n\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\twireMessage.clientId = this.clientId;\n\t\tthis._socket_send(wireMessage);\n\t};\n\n\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\tClientImpl.prototype._on_socket_message = function (event) {\n\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t// Reset the receive ping timer, we now have evidence the server is alive.\n\t\tthis.receivePinger.reset();\n\t\tvar messages = this._deframeMessages(event.data);\n\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t    this._handleMessage(messages[i]);\n\t\t}\n\t}\n\n\tClientImpl.prototype._deframeMessages = function(data) {\n\t\tvar byteArray = new Uint8Array(data);\n\t    if (this.receiveBuffer) {\n\t        var newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t        newData.set(this.receiveBuffer);\n\t        newData.set(byteArray,this.receiveBuffer.length);\n\t        byteArray = newData;\n\t        delete this.receiveBuffer;\n\t    }\n\t\ttry {\n\t\t    var offset = 0;\n\t\t    var messages = [];\n\t\t    while(offset < byteArray.length) {\n\t\t        var result = decodeMessage(byteArray,offset);\n\t\t        var wireMessage = result[0];\n\t\t        offset = result[1];\n\t\t        if (wireMessage !== null) {\n\t\t            messages.push(wireMessage);\n\t\t        } else {\n\t\t            break;\n\t\t        }\n\t\t    }\n\t\t    if (offset < byteArray.length) {\n\t\t    \tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t    }\n\t\t} catch (error) {\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,error.stack.toString()]));\n\t\t\treturn;\n\t\t}\n\t\treturn messages;\n\t}\n\n\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\ttry {\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tthis._connectTimeout.cancel();\n\n\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t}\n\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t}\n\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t}\n\t\t\t\t// Client connected and ready for business.\n\t\t\t\tif (wireMessage.returnCode === 0) {\n\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\t\t\t\t} else {\n\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Resend messages.\n\t\t\t\tvar sequencedMessages = new Array();\n\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t}\n\n\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t}\n\n\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\tthis._process_queue();\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t // If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\tif (receivedMessage) {\n\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubCompMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\twireMessage.returnCode.indexOf = Array.prototype.indexOf;\n\t\t\t\t\tif (wireMessage.returnCode.indexOf(0x80) !== -1) {\n\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\tif (sentMessage) {\n\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t}\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\tthis.sendPinger.reset();\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,error.stack.toString()]));\n\t\t\treturn;\n\t\t}\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._on_socket_error = function (error) {\n\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._on_socket_close = function () {\n\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\tif (wireMessage.type == 1) {\n\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t}\n\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\tthis.socket.send(wireMessage.encode());\n\t\t/* We have proved to the server we are alive. */\n\t\tthis.sendPinger.reset();\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\"+wireMmessage.payloadMessage.qos);\n\t\t};\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\tif (this.onMessageArrived) {\n\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t}\n\t};\n\n\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\tthis.sendPinger.cancel();\n\t\tthis.receivePinger.cancel();\n\t\tif (this._connectTimeout)\n\t\t\tthis._connectTimeout.cancel();\n\t\t// Clear message buffers.\n\t\tthis._msg_queue = [];\n\t\tthis._notify_msg_sent = {};\n\n\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\tthis.socket.onopen = null;\n\t\t\tthis.socket.onmessage = null;\n\t\t\tthis.socket.onerror = null;\n\t\t\tthis.socket.onclose = null;\n\t\t\tif (this.socket.readyState === 1)\n\t\t\t\tthis.socket.close();\n\t\t\tdelete this.socket;\n\t\t}\n\n\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\tthis.hostIndex++;\n\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\n\t\t} else {\n\n\t\t\tif (errorCode === undefined) {\n\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t}\n\n\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\tif (this.connected) {\n\t\t\t\tthis.connected = false;\n\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\tif (this.onConnectionLost)\n\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText});\n\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\")\n\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t}\n\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\tif (this.traceFunction) {\n\t\t\tfor (var i in arguments)\n\t\t\t{\n\t\t\t\tif (typeof arguments[i] !== \"undefined\")\n\t\t\t\t\targuments[i] = JSON.stringify(arguments[i]);\n\t\t\t}\n\t\t\tvar record = Array.prototype.slice.call(arguments).join(\"\");\n\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t}\n\n\t\t//buffer style trace\n\t\tif ( this._traceBuffer !== null ) {\n\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t}\n\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t   };\n\t\t};\n\t};\n\n\t/** @ignore */\n\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\tvar traceObjectMasked = {};\n\t\tfor (var attr in traceObject) {\n\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\tif (attr == masked)\n\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\telse\n\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t}\n\t\t}\n\t\treturn traceObjectMasked;\n\t};\n\n\t// ------------------------------------------------------------------------\n\t// Public Programming interface.\n\t// ------------------------------------------------------------------------\n\n\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.MQTT.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.MQTT.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.MQTT.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.MQTT.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived called when a message has arrived in this Paho.MQTT.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.MQTT.Message} that has arrived.\n\t *                            </ol>\n\t */\n\tvar Client = function (host, port, path, clientId) {\n\n\t    var uri;\n\n\t\tif (typeof host !== \"string\")\n\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t    if (arguments.length == 2) {\n\t        // host: must be full ws:// uri\n\t        // port: clientId\n\t        clientId = port;\n\t        uri = host;\n\t        var match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t        if (match) {\n\t            host = match[4]||match[2];\n\t            port = parseInt(match[7]);\n\t            path = match[8];\n\t        } else {\n\t            throw new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t        }\n\t    } else {\n\t        if (arguments.length == 3) {\n\t\t\t\tclientId = path;\n\t\t\t\tpath = \"/mqtt\";\n\t\t\t}\n\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\tif (typeof path !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") != -1 && host.slice(0,1) != \"[\" && host.slice(-1) != \"]\");\n\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t}\n\n\t\tvar clientIdLength = 0;\n\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t i++; // Surrogate pair.\n\t\t\t}\n\t\t\tclientIdLength++;\n\t\t}\n\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\t\tthis._getHost =  function() { return host; };\n\t\tthis._setHost = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getPort = function() { return port; };\n\t\tthis._setPort = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getPath = function() { return path; };\n\t\tthis._setPath = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getURI = function() { return uri; };\n\t\tthis._setURI = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getClientId = function() { return client.clientId; };\n\t\tthis._setClientId = function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); };\n\n\t\tthis._getOnConnectionLost = function() { return client.onConnectionLost; };\n\t\tthis._setOnConnectionLost = function(newOnConnectionLost) {\n\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\telse\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t};\n\n\t\tthis._getOnMessageDelivered = function() { return client.onMessageDelivered; };\n\t\tthis._setOnMessageDelivered = function(newOnMessageDelivered) {\n\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\telse\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t};\n\n\t\tthis._getOnMessageArrived = function() { return client.onMessageArrived; };\n\t\tthis._setOnMessageArrived = function(newOnMessageArrived) {\n\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\telse\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t};\n\n\t\tthis._getTrace = function() { return client.traceFunction; };\n\t\tthis._setTrace = function(trace) {\n\t\t\tif(typeof trace === \"function\"){\n\t\t\t\tclient.traceFunction = trace;\n\t\t\t}else{\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.MQTT.Client#connect\n\t\t * @function\n\t\t * @param {Object} connectOptions - attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.MQTT.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {Number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t\t * @config {function} [onFailure] called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t\t * @config {Array} [hosts] If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://example.com:1883/mqtt), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t\t * @config {Array} [ports] If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t\t * @throws {InvalidState} if the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\tthis.connect = function (connectOptions) {\n\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\t\t\t\t\t   userName:\"string\",\n\t\t\t\t\t\t\t\t\t   password:\"string\",\n\t\t\t\t\t\t\t\t\t   willMessage:\"object\",\n\t\t\t\t\t\t\t\t\t   keepAliveInterval:\"number\",\n\t\t\t\t\t\t\t\t\t   cleanSession:\"boolean\",\n\t\t\t\t\t\t\t\t\t   useSSL:\"boolean\",\n\t\t\t\t\t\t\t\t\t   invocationContext:\"object\",\n\t\t\t\t\t\t\t\t\t   onSuccess:\"function\",\n\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t   hosts:\"object\",\n\t\t\t\t\t\t\t\t\t   ports:\"object\",\n\t\t\t\t\t\t\t\t\t   mqttVersion:\"number\"});\n\n\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t}\n\n\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t} else {\n\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t}\n\n\t\t\t//Check that if password is set, so is username\n\t\t\tif (connectOptions.password === undefined && connectOptions.userName !== undefined)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]))\n\n\t\t\tif (connectOptions.willMessage) {\n\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\tconnectOptions.willMessage.stringPayload;\n\n\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t}\n\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\tvar usingURIs = false;\n\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!usingURIs) {\n\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\tif (connectOptions.hosts.length != connectOptions.ports.length)\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") != -1);\n\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tclient.connect(connectOptions);\n\t\t};\n\n\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.MQTT.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maiximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\tif (typeof filter !== \"string\")\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\t\t\t\t\t\t invocationContext:\"object\",\n\t\t\t\t\t\t\t\t\t\t onSuccess:\"function\",\n\t\t\t\t\t\t\t\t\t\t onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t\t timeout:\"number\"\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\tif (typeof subscribeOptions.qos !== \"undefined\"\n\t\t\t\t&& !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.MQTT.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t                                      or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\tif (typeof filter !== \"string\")\n\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\t\t\t\t\t\t   onSuccess:\"function\",\n\t\t\t\t\t\t\t\t\t\t   onFailure:\"function\",\n\t\t\t\t\t\t\t\t\t\t   timeout:\"number\"\n\t\t\t\t\t\t\t\t\t\t  });\n\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t};\n\n\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.MQTT.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.MQTT.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.MQTT.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\tvar message ;\n\n\t\t\tif(arguments.length == 0){\n\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\tmessage = topic;\n\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\tclient.send(message);\n\n\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\tmessage = new Message(payload);\n\t\t\t\tmessage.destinationName = topic;\n\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\tmessage.qos = qos;\n\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\tmessage.retained = retained;\n\t\t\t\tclient.send(message);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.MQTT.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\tthis.disconnect = function () {\n\t\t\tclient.disconnect();\n\t\t};\n\n\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.MQTT.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\tthis.getTraceLog = function () {\n\t\t\treturn client.getTraceLog();\n\t\t}\n\n\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.MQTT.Client#startTrace\n\t\t * @function\n\t\t */\n\t\tthis.startTrace = function () {\n\t\t\tclient.startTrace();\n\t\t};\n\n\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.MQTT.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\tthis.stopTrace = function () {\n\t\t\tclient.stopTrace();\n\t\t};\n\n\t\tthis.isConnected = function() {\n\t\t\treturn client.connected;\n\t\t};\n\t};\n\n\tClient.prototype = {\n\t\tget host() { return this._getHost(); },\n\t\tset host(newHost) { this._setHost(newHost); },\n\n\t\tget port() { return this._getPort(); },\n\t\tset port(newPort) { this._setPort(newPort); },\n\n\t\tget path() { return this._getPath(); },\n\t\tset path(newPath) { this._setPath(newPath); },\n\n\t\tget clientId() { return this._getClientId(); },\n\t\tset clientId(newClientId) { this._setClientId(newClientId); },\n\n\t\tget onConnectionLost() { return this._getOnConnectionLost(); },\n\t\tset onConnectionLost(newOnConnectionLost) { this._setOnConnectionLost(newOnConnectionLost); },\n\n\t\tget onMessageDelivered() { return this._getOnMessageDelivered(); },\n\t\tset onMessageDelivered(newOnMessageDelivered) { this._setOnMessageDelivered(newOnMessageDelivered); },\n\n\t\tget onMessageArrived() { return this._getOnMessageArrived(); },\n\t\tset onMessageArrived(newOnMessageArrived) { this._setOnMessageArrived(newOnMessageArrived); },\n\n\t\tget trace() { return this._getTrace(); },\n\t\tset trace(newTraceFunction) { this._setTrace(newTraceFunction); }\n\n\t};\n\n\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.MQTT.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\tvar Message = function (newPayload) {\n\t\tvar payload;\n\t\tif (   typeof newPayload === \"string\"\n\t\t\t|| newPayload instanceof ArrayBuffer\n\t\t\t|| newPayload instanceof Int8Array\n\t\t\t|| newPayload instanceof Uint8Array\n\t\t\t|| newPayload instanceof Int16Array\n\t\t\t|| newPayload instanceof Uint16Array\n\t\t\t|| newPayload instanceof Int32Array\n\t\t\t|| newPayload instanceof Uint32Array\n\t\t\t|| newPayload instanceof Float32Array\n\t\t\t|| newPayload instanceof Float64Array\n\t\t   ) {\n\t\t\tpayload = newPayload;\n\t\t} else {\n\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t}\n\n\t\tthis._getPayloadString = function () {\n\t\t\tif (typeof payload === \"string\")\n\t\t\t\treturn payload;\n\t\t\telse\n\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t};\n\n\t\tthis._getPayloadBytes = function() {\n\t\t\tif (typeof payload === \"string\") {\n\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\treturn byteStream;\n\t\t\t} else {\n\t\t\t\treturn payload;\n\t\t\t};\n\t\t};\n\n\t\tvar destinationName = undefined;\n\t\tthis._getDestinationName = function() { return destinationName; };\n\t\tthis._setDestinationName = function(newDestinationName) {\n\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\tdestinationName = newDestinationName;\n\t\t\telse\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t};\n\n\t\tvar qos = 0;\n\t\tthis._getQos = function() { return qos; };\n\t\tthis._setQos = function(newQos) {\n\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\tqos = newQos;\n\t\t\telse\n\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t};\n\n\t\tvar retained = false;\n\t\tthis._getRetained = function() { return retained; };\n\t\tthis._setRetained = function(newRetained) {\n\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\tretained = newRetained;\n\t\t\telse\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t};\n\n\t\tvar duplicate = false;\n\t\tthis._getDuplicate = function() { return duplicate; };\n\t\tthis._setDuplicate = function(newDuplicate) { duplicate = newDuplicate; };\n\t};\n\n\tMessage.prototype = {\n\t\tget payloadString() { return this._getPayloadString(); },\n\t\tget payloadBytes() { return this._getPayloadBytes(); },\n\n\t\tget destinationName() { return this._getDestinationName(); },\n\t\tset destinationName(newDestinationName) { this._setDestinationName(newDestinationName); },\n\n\t\tget qos() { return this._getQos(); },\n\t\tset qos(newQos) { this._setQos(newQos); },\n\n\t\tget retained() { return this._getRetained(); },\n\t\tset retained(newRetained) { this._setRetained(newRetained); },\n\n\t\tget duplicate() { return this._getDuplicate(); },\n\t\tset duplicate(newDuplicate) { this._setDuplicate(newDuplicate); }\n\t};\n\n\t// Module contents.\n\treturn {\n\t\tClient: Client,\n\t\tMessage: Message\n\t};\n\n});\n"],
  "mappings": "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",
  "names": ["global", "key", "scope", "wireMessage", "window", "action", "client", "args", "i", "host", "port"]
}
