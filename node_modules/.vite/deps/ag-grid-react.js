import {
  require_react_dom
} from "./chunk-2ZBI5GWI.js";
import {
  require_react
} from "./chunk-UASDUK73.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-3TEUGPMP.js";

// node_modules/ag-grid-community/dist/ag-grid-community.auto.esm.js
var ag_grid_community_auto_esm_exports = {};
__export(ag_grid_community_auto_esm_exports, {
  AbstractHeaderCellCtrl: () => AbstractHeaderCellCtrl,
  AgAbstractField: () => AgAbstractField,
  AgAbstractLabel: () => AgAbstractLabel,
  AgAutocomplete: () => AgAutocomplete,
  AgCheckbox: () => AgCheckbox,
  AgDialog: () => AgDialog,
  AgGroupComponent: () => AgGroupComponent,
  AgInputDateField: () => AgInputDateField,
  AgInputNumberField: () => AgInputNumberField,
  AgInputRange: () => AgInputRange,
  AgInputTextArea: () => AgInputTextArea,
  AgInputTextField: () => AgInputTextField,
  AgMenuItemComponent: () => AgMenuItemComponent,
  AgMenuList: () => AgMenuList,
  AgMenuPanel: () => AgMenuPanel,
  AgPanel: () => AgPanel,
  AgPickerField: () => AgPickerField,
  AgPromise: () => AgPromise,
  AgPromiseStatus: () => AgPromiseStatus,
  AgRadioButton: () => AgRadioButton,
  AgRichSelect: () => AgRichSelect,
  AgSelect: () => AgSelect,
  AgSlider: () => AgSlider,
  AgStackComponentsRegistry: () => AgStackComponentsRegistry,
  AgToggleButton: () => AgToggleButton,
  AlignedGridsService: () => AlignedGridsService,
  AllCommunityModules: () => AllCommunityModules,
  AnimateShowChangeCellRenderer: () => AnimateShowChangeCellRenderer,
  AnimateSlideCellRenderer: () => AnimateSlideCellRenderer,
  AnimationFrameService: () => AnimationFrameService,
  AutoScrollService: () => AutoScrollService,
  AutoWidthCalculator: () => AutoWidthCalculator,
  Autowired: () => Autowired,
  BarColumnLabelPlacement: () => BarColumnLabelPlacement,
  BaseComponentWrapper: () => BaseComponentWrapper,
  BaseCreator: () => BaseCreator,
  BaseGridSerializingSession: () => BaseGridSerializingSession,
  Bean: () => Bean,
  BeanStub: () => BeanStub,
  Beans: () => Beans,
  BodyDropPivotTarget: () => BodyDropPivotTarget,
  BodyDropTarget: () => BodyDropTarget,
  CHART_TOOLBAR_ALLOW_LIST: () => CHART_TOOLBAR_ALLOW_LIST,
  CHART_TOOL_PANEL_ALLOW_LIST: () => CHART_TOOL_PANEL_ALLOW_LIST,
  CHART_TOOL_PANEL_MENU_OPTIONS: () => CHART_TOOL_PANEL_MENU_OPTIONS,
  CellComp: () => CellComp,
  CellCtrl: () => CellCtrl,
  CellNavigationService: () => CellNavigationService,
  CellPositionUtils: () => CellPositionUtils,
  CellRangeType: () => CellRangeType,
  ChangedPath: () => ChangedPath,
  CheckboxCellEditor: () => CheckboxCellEditor,
  CheckboxCellRenderer: () => CheckboxCellRenderer,
  CheckboxSelectionComponent: () => CheckboxSelectionComponent,
  ClientSideRowModelModule: () => ClientSideRowModelModule,
  ClientSideRowModelSteps: () => ClientSideRowModelSteps,
  ColDefUtil: () => ColDefUtil,
  Column: () => Column,
  ColumnApi: () => ColumnApi,
  ColumnFactory: () => ColumnFactory,
  ColumnGroup: () => ColumnGroup,
  ColumnKeyCreator: () => ColumnKeyCreator,
  ColumnModel: () => ColumnModel,
  ColumnUtils: () => ColumnUtils,
  Component: () => Component,
  ComponentUtil: () => ComponentUtil,
  Context: () => Context,
  CssClassApplier: () => CssClassApplier,
  CssClassManager: () => CssClassManager,
  CsvCreator: () => CsvCreator,
  CsvExportModule: () => CsvExportModule,
  CtrlsService: () => CtrlsService,
  CustomTooltipFeature: () => CustomTooltipFeature,
  DEFAULT_CHART_GROUPS: () => DEFAULT_CHART_GROUPS,
  DataTypeService: () => DataTypeService,
  DateCellEditor: () => DateCellEditor,
  DateFilter: () => DateFilter,
  DateStringCellEditor: () => DateStringCellEditor,
  DisplayedGroupCreator: () => DisplayedGroupCreator,
  Downloader: () => Downloader,
  DragAndDropService: () => DragAndDropService,
  DragService: () => DragService,
  DragSourceType: () => DragSourceType,
  Environment: () => Environment,
  EventService: () => EventService,
  Events: () => Events,
  ExcelFactoryMode: () => ExcelFactoryMode,
  ExpressionService: () => ExpressionService,
  FilterManager: () => FilterManager,
  FloatingFilterMapper: () => FloatingFilterMapper,
  FocusService: () => FocusService,
  GROUP_AUTO_COLUMN_ID: () => GROUP_AUTO_COLUMN_ID,
  Grid: () => Grid,
  GridApi: () => GridApi,
  GridBodyComp: () => GridBodyComp,
  GridBodyCtrl: () => GridBodyCtrl,
  GridComp: () => GridComp,
  GridCoreCreator: () => GridCoreCreator,
  GridCtrl: () => GridCtrl,
  GridHeaderComp: () => GridHeaderComp,
  GridHeaderCtrl: () => GridHeaderCtrl,
  GridOptionsService: () => GridOptionsService,
  GridSerializer: () => GridSerializer,
  GroupCellRenderer: () => GroupCellRenderer,
  GroupCellRendererCtrl: () => GroupCellRendererCtrl,
  GroupInstanceIdCreator: () => GroupInstanceIdCreator,
  HeaderCellCtrl: () => HeaderCellCtrl,
  HeaderFilterCellComp: () => HeaderFilterCellComp,
  HeaderFilterCellCtrl: () => HeaderFilterCellCtrl,
  HeaderGroupCellCtrl: () => HeaderGroupCellCtrl,
  HeaderNavigationDirection: () => HeaderNavigationDirection,
  HeaderNavigationService: () => HeaderNavigationService,
  HeaderPositionUtils: () => HeaderPositionUtils,
  HeaderRowComp: () => HeaderRowComp,
  HeaderRowContainerComp: () => HeaderRowContainerComp,
  HeaderRowContainerCtrl: () => HeaderRowContainerCtrl,
  HeaderRowCtrl: () => HeaderRowCtrl,
  HeaderRowType: () => HeaderRowType,
  HorizontalDirection: () => HorizontalDirection,
  HorizontalResizeService: () => HorizontalResizeService,
  InfiniteRowModelModule: () => InfiniteRowModelModule,
  KeyCode: () => KeyCode,
  LargeTextCellEditor: () => LargeTextCellEditor,
  LayoutCssClasses: () => LayoutCssClasses,
  LocaleService: () => LocaleService,
  Logger: () => Logger,
  LoggerFactory: () => LoggerFactory,
  ManagedFocusFeature: () => ManagedFocusFeature,
  ModuleNames: () => ModuleNames,
  ModuleRegistry: () => ModuleRegistry,
  MouseEventService: () => MouseEventService,
  MoveColumnFeature: () => MoveColumnFeature,
  NavigationService: () => NavigationService,
  NumberCellEditor: () => NumberCellEditor,
  NumberFilter: () => NumberFilter,
  NumberSequence: () => NumberSequence,
  Optional: () => Optional,
  PaginationProxy: () => PaginationProxy,
  PinnedRowModel: () => PinnedRowModel,
  PopupComponent: () => PopupComponent,
  PopupEditorWrapper: () => PopupEditorWrapper,
  PopupService: () => PopupService,
  PositionableFeature: () => PositionableFeature,
  PostConstruct: () => PostConstruct,
  PreConstruct: () => PreConstruct,
  PreDestroy: () => PreDestroy,
  PropertyKeys: () => PropertyKeys,
  ProvidedColumnGroup: () => ProvidedColumnGroup,
  ProvidedFilter: () => ProvidedFilter,
  Qualifier: () => Qualifier,
  QuerySelector: () => QuerySelector,
  RefSelector: () => RefSelector,
  ResizeObserverService: () => ResizeObserverService,
  RowAnimationCssClasses: () => RowAnimationCssClasses,
  RowContainerComp: () => RowContainerComp,
  RowContainerCtrl: () => RowContainerCtrl,
  RowContainerName: () => RowContainerName,
  RowContainerType: () => RowContainerType,
  RowCtrl: () => RowCtrl,
  RowHighlightPosition: () => RowHighlightPosition,
  RowNode: () => RowNode,
  RowNodeBlock: () => RowNodeBlock,
  RowNodeBlockLoader: () => RowNodeBlockLoader,
  RowNodeSorter: () => RowNodeSorter,
  RowPositionUtils: () => RowPositionUtils,
  RowRenderer: () => RowRenderer,
  RowType: () => RowType,
  ScalarFilter: () => ScalarFilter,
  ScrollVisibleService: () => ScrollVisibleService,
  SelectCellEditor: () => SelectCellEditor,
  SelectableService: () => SelectableService,
  SelectionHandleType: () => SelectionHandleType,
  ServerSideTransactionResultStatus: () => ServerSideTransactionResultStatus,
  SetLeftFeature: () => SetLeftFeature,
  SimpleFilter: () => SimpleFilter,
  SortController: () => SortController,
  SortIndicatorComp: () => SortIndicatorComp,
  StandardMenuFactory: () => StandardMenuFactory,
  StylingService: () => StylingService,
  TabGuardClassNames: () => TabGuardClassNames,
  TabGuardComp: () => TabGuardComp,
  TabGuardCtrl: () => TabGuardCtrl,
  TabbedLayout: () => TabbedLayout,
  TemplateService: () => TemplateService,
  TextCellEditor: () => TextCellEditor,
  TextFilter: () => TextFilter,
  TextFloatingFilter: () => TextFloatingFilter,
  Timer: () => Timer,
  TooltipFeature: () => TooltipFeature,
  TouchListener: () => TouchListener,
  UserComponentFactory: () => UserComponentFactory,
  UserComponentRegistry: () => UserComponentRegistry,
  ValueCache: () => ValueCache,
  ValueFormatterService: () => ValueFormatterService,
  ValueParserService: () => ValueParserService,
  ValueService: () => ValueService,
  VanillaFrameworkOverrides: () => VanillaFrameworkOverrides,
  VerticalDirection: () => VerticalDirection,
  VirtualList: () => VirtualList,
  VirtualListDragFeature: () => VirtualListDragFeature,
  XmlFactory: () => XmlFactory,
  ZipContainer: () => ZipContainer,
  _: () => _,
  __FORCE_MODULE_DETECTION: () => __FORCE_MODULE_DETECTION,
  getRowContainerTypeForName: () => getRowContainerTypeForName,
  simpleHttpRequest: () => simpleHttpRequest
});
function makeNull(value) {
  if (value == null || value === "") {
    return null;
  }
  return value;
}
function exists(value, allowEmptyString) {
  if (allowEmptyString === void 0) {
    allowEmptyString = false;
  }
  return value != null && (value !== "" || allowEmptyString);
}
function missing(value) {
  return !exists(value);
}
function missingOrEmpty(value) {
  return value == null || value.length === 0;
}
function toStringOrNull(value) {
  return value != null && typeof value.toString === "function" ? value.toString() : null;
}
function attrToNumber(value) {
  if (value === void 0) {
    return;
  }
  if (value === null || value === "") {
    return null;
  }
  if (typeof value === "number") {
    return isNaN(value) ? void 0 : value;
  }
  var valueParsed = parseInt(value, 10);
  return isNaN(valueParsed) ? void 0 : valueParsed;
}
function attrToBoolean(value) {
  if (value === void 0) {
    return;
  }
  if (value === null || value === "") {
    return false;
  }
  if (typeof value === "boolean") {
    return value;
  }
  return /true/i.test(value);
}
function attrToString(value) {
  if (value == null || value === "") {
    return;
  }
  return value;
}
function referenceCompare(left, right) {
  if (left == null && right == null) {
    return true;
  }
  if (left == null && right != null) {
    return false;
  }
  if (left != null && right == null) {
    return false;
  }
  return left === right;
}
function jsonEquals(val1, val2) {
  var val1Json = val1 ? JSON.stringify(val1) : null;
  var val2Json = val2 ? JSON.stringify(val2) : null;
  return val1Json === val2Json;
}
function defaultComparator(valueA, valueB, accentedCompare) {
  if (accentedCompare === void 0) {
    accentedCompare = false;
  }
  var valueAMissing = valueA == null;
  var valueBMissing = valueB == null;
  if (valueA && valueA.toNumber) {
    valueA = valueA.toNumber();
  }
  if (valueB && valueB.toNumber) {
    valueB = valueB.toNumber();
  }
  if (valueAMissing && valueBMissing) {
    return 0;
  }
  if (valueAMissing) {
    return -1;
  }
  if (valueBMissing) {
    return 1;
  }
  function doQuickCompare(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }
  if (typeof valueA !== "string") {
    return doQuickCompare(valueA, valueB);
  }
  if (!accentedCompare) {
    return doQuickCompare(valueA, valueB);
  }
  try {
    return valueA.localeCompare(valueB);
  } catch (e) {
    return doQuickCompare(valueA, valueB);
  }
}
function values(object) {
  if (object instanceof Set || object instanceof Map) {
    var arr_1 = [];
    object.forEach(function(value) {
      return arr_1.push(value);
    });
    return arr_1;
  }
  return Object.values(object);
}
function iterateObject(object, callback) {
  var e_1, _a;
  if (object == null) {
    return;
  }
  if (Array.isArray(object)) {
    for (var i = 0; i < object.length; i++) {
      callback(i.toString(), object[i]);
    }
    return;
  }
  try {
    for (var _b = __values$8(Object.entries(object)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var _d = __read$z(_c.value, 2), key = _d[0], value = _d[1];
      callback(key, value);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}
function cloneObject(object) {
  var copy = {};
  var keys2 = Object.keys(object);
  for (var i = 0; i < keys2.length; i++) {
    var key = keys2[i];
    var value = object[key];
    copy[key] = value;
  }
  return copy;
}
function deepCloneObject(object) {
  return JSON.parse(JSON.stringify(object));
}
function deepCloneDefinition(object, keysToSkip) {
  if (!object) {
    return;
  }
  var obj = object;
  var res = {};
  Object.keys(obj).forEach(function(key) {
    if (keysToSkip && keysToSkip.indexOf(key) >= 0) {
      return;
    }
    var value = obj[key];
    var sourceIsSimpleObject = isNonNullObject(value) && value.constructor === Object;
    if (sourceIsSimpleObject) {
      res[key] = deepCloneDefinition(value);
    } else {
      res[key] = value;
    }
  });
  return res;
}
function getProperty(object, key) {
  return object[key];
}
function setProperty(object, key, value) {
  object[key] = value;
}
function copyPropertiesIfPresent(source, target) {
  var properties = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    properties[_i - 2] = arguments[_i];
  }
  properties.forEach(function(p) {
    return copyPropertyIfPresent(source, target, p);
  });
}
function copyPropertyIfPresent(source, target, property, transform) {
  var value = getProperty(source, property);
  if (value !== void 0) {
    setProperty(target, property, transform ? transform(value) : value);
  }
}
function getAllKeysInObjects(objects) {
  var allValues = {};
  objects.filter(function(obj) {
    return obj != null;
  }).forEach(function(obj) {
    Object.keys(obj).forEach(function(key) {
      return allValues[key] = null;
    });
  });
  return Object.keys(allValues);
}
function getAllValuesInObject(obj) {
  if (!obj) {
    return [];
  }
  var anyObject = Object;
  if (typeof anyObject.values === "function") {
    return anyObject.values(obj);
  }
  var ret = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key) && obj.propertyIsEnumerable(key)) {
      ret.push(obj[key]);
    }
  }
  return ret;
}
function mergeDeep(dest, source, copyUndefined, makeCopyOfSimpleObjects) {
  if (copyUndefined === void 0) {
    copyUndefined = true;
  }
  if (makeCopyOfSimpleObjects === void 0) {
    makeCopyOfSimpleObjects = false;
  }
  if (!exists(source)) {
    return;
  }
  iterateObject(source, function(key, sourceValue) {
    var destValue = dest[key];
    if (destValue === sourceValue) {
      return;
    }
    if (makeCopyOfSimpleObjects) {
      var objectIsDueToBeCopied = destValue == null && sourceValue != null;
      if (objectIsDueToBeCopied) {
        var sourceIsSimpleObject = typeof sourceValue === "object" && sourceValue.constructor === Object;
        var dontCopy = sourceIsSimpleObject;
        if (dontCopy) {
          destValue = {};
          dest[key] = destValue;
        }
      }
    }
    if (isNonNullObject(sourceValue) && isNonNullObject(destValue) && !Array.isArray(destValue)) {
      mergeDeep(destValue, sourceValue, copyUndefined, makeCopyOfSimpleObjects);
    } else if (copyUndefined || sourceValue !== void 0) {
      dest[key] = sourceValue;
    }
  });
}
function missingOrEmptyObject(value) {
  return missing(value) || Object.keys(value).length === 0;
}
function get(source, expression, defaultValue) {
  if (source == null) {
    return defaultValue;
  }
  var keys2 = expression.split(".");
  var objectToRead = source;
  while (keys2.length > 1) {
    objectToRead = objectToRead[keys2.shift()];
    if (objectToRead == null) {
      return defaultValue;
    }
  }
  var value = objectToRead[keys2[0]];
  return value != null ? value : defaultValue;
}
function set(target, expression, value) {
  if (target == null) {
    return;
  }
  var keys2 = expression.split(".");
  var objectToUpdate = target;
  keys2.forEach(function(key, i) {
    if (!objectToUpdate[key]) {
      objectToUpdate[key] = {};
    }
    if (i < keys2.length - 1) {
      objectToUpdate = objectToUpdate[key];
    }
  });
  objectToUpdate[keys2[keys2.length - 1]] = value;
}
function getValueUsingField(data, field, fieldContainsDots) {
  if (!field || !data) {
    return;
  }
  if (!fieldContainsDots) {
    return data[field];
  }
  var fields = field.split(".");
  var currentObject = data;
  for (var i = 0; i < fields.length; i++) {
    if (currentObject == null) {
      return void 0;
    }
    currentObject = currentObject[fields[i]];
  }
  return currentObject;
}
function removeAllReferences(obj, objectName) {
  Object.keys(obj).forEach(function(key) {
    var value = obj[key];
    if (typeof value === "object") {
      obj[key] = void 0;
    }
  });
  var proto = Object.getPrototypeOf(obj);
  var properties = {};
  Object.keys(proto).forEach(function(key) {
    var value = proto[key];
    if (typeof value === "function") {
      var func = function() {
        console.warn("AG Grid: " + objectName + " function " + key + "() cannot be called as the grid has been destroyed.\n                     Please don't call grid API functions on destroyed grids - as a matter of fact you shouldn't\n                     be keeping the API reference, your application has a memory leak! Remove the API reference\n                     when the grid is destroyed.");
      };
      properties[key] = { value: func, writable: true };
    }
  });
  Object.defineProperties(obj, properties);
}
function isNonNullObject(value) {
  return typeof value === "object" && value !== null;
}
function doOnce(func, key) {
  if (doOnceFlags[key]) {
    return;
  }
  func();
  doOnceFlags[key] = true;
}
function getFunctionName(funcConstructor) {
  if (funcConstructor.name) {
    return funcConstructor.name;
  }
  var matches = /function\s+([^\(]+)/.exec(funcConstructor.toString());
  return matches && matches.length === 2 ? matches[1].trim() : null;
}
function isFunction(val) {
  return !!(val && val.constructor && val.call && val.apply);
}
function executeInAWhile(funcs) {
  executeAfter(funcs, 400);
}
function executeNextVMTurn(func) {
  executeNextVMTurnFuncs.push(func);
  if (executeNextVMTurnPending) {
    return;
  }
  executeNextVMTurnPending = true;
  window.setTimeout(function() {
    var funcsCopy = executeNextVMTurnFuncs.slice();
    executeNextVMTurnFuncs.length = 0;
    executeNextVMTurnPending = false;
    funcsCopy.forEach(function(func2) {
      return func2();
    });
  }, 0);
}
function executeAfter(funcs, milliseconds) {
  if (milliseconds === void 0) {
    milliseconds = 0;
  }
  if (funcs.length > 0) {
    window.setTimeout(function() {
      return funcs.forEach(function(func) {
        return func();
      });
    }, milliseconds);
  }
}
function debounce(func, delay) {
  var timeout;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var context = this;
    window.clearTimeout(timeout);
    timeout = window.setTimeout(function() {
      func.apply(context, args);
    }, delay);
  };
}
function throttle(func, wait) {
  var previousCall = 0;
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var context = this;
    var currentCall = (/* @__PURE__ */ new Date()).getTime();
    if (currentCall - previousCall < wait) {
      return;
    }
    previousCall = currentCall;
    func.apply(context, args);
  };
}
function waitUntil(condition, callback, timeout, timeoutMessage) {
  if (timeout === void 0) {
    timeout = 100;
  }
  var timeStamp = (/* @__PURE__ */ new Date()).getTime();
  var interval = null;
  var executed = false;
  var internalCallback = function() {
    var reachedTimeout = (/* @__PURE__ */ new Date()).getTime() - timeStamp > timeout;
    if (condition() || reachedTimeout) {
      callback();
      executed = true;
      if (interval != null) {
        window.clearInterval(interval);
        interval = null;
      }
      if (reachedTimeout && timeoutMessage) {
        console.warn(timeoutMessage);
      }
    }
  };
  internalCallback();
  if (!executed) {
    interval = window.setInterval(internalCallback, 10);
  }
}
function compose() {
  var fns = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }
  return function(arg) {
    return fns.reduce(function(composed, f) {
      return f(composed);
    }, arg);
  };
}
function callIfPresent(func) {
  if (func) {
    func();
  }
}
function PreConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.preConstructMethods) {
    props.preConstructMethods = [];
  }
  props.preConstructMethods.push(methodName);
}
function PostConstruct(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.postConstructMethods) {
    props.postConstructMethods = [];
  }
  props.postConstructMethods.push(methodName);
}
function PreDestroy(target, methodName, descriptor) {
  var props = getOrCreateProps$1(target.constructor);
  if (!props.preDestroyMethods) {
    props.preDestroyMethods = [];
  }
  props.preDestroyMethods.push(methodName);
}
function Bean(beanName) {
  return function(classConstructor) {
    var props = getOrCreateProps$1(classConstructor);
    props.beanName = beanName;
  };
}
function Autowired(name) {
  return function(target, propertyKey, descriptor) {
    autowiredFunc(target, name, false, target, propertyKey, null);
  };
}
function Optional(name) {
  return function(target, propertyKey, descriptor) {
    autowiredFunc(target, name, true, target, propertyKey, null);
  };
}
function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
  if (name === null) {
    console.error("AG Grid: Autowired name should not be null");
    return;
  }
  if (typeof index === "number") {
    console.error("AG Grid: Autowired should be on an attribute");
    return;
  }
  var props = getOrCreateProps$1(target.constructor);
  if (!props.agClassAttributes) {
    props.agClassAttributes = [];
  }
  props.agClassAttributes.push({
    attributeName: methodOrAttributeName,
    beanName: name,
    optional
  });
}
function Qualifier(name) {
  return function(classPrototype, methodOrAttributeName, index) {
    var constructor = typeof classPrototype == "function" ? classPrototype : classPrototype.constructor;
    var props;
    if (typeof index === "number") {
      var methodName = void 0;
      if (methodOrAttributeName) {
        props = getOrCreateProps$1(constructor);
        methodName = methodOrAttributeName;
      } else {
        props = getOrCreateProps$1(constructor);
        methodName = "agConstructor";
      }
      if (!props.autowireMethods) {
        props.autowireMethods = {};
      }
      if (!props.autowireMethods[methodName]) {
        props.autowireMethods[methodName] = {};
      }
      props.autowireMethods[methodName][index] = name;
    }
  };
}
function getOrCreateProps$1(target) {
  if (!target.hasOwnProperty("__agBeanMetaData")) {
    target.__agBeanMetaData = {};
  }
  return target.__agBeanMetaData;
}
function getNextColInstanceId() {
  return instanceIdSequence$4++;
}
function firstExistingValue() {
  var values2 = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values2[_i] = arguments[_i];
  }
  for (var i = 0; i < values2.length; i++) {
    var value = values2[i];
    if (exists(value)) {
      return value;
    }
  }
  return null;
}
function existsAndNotEmpty(value) {
  return value != null && value.length > 0;
}
function last(arr) {
  if (!arr || !arr.length) {
    return;
  }
  return arr[arr.length - 1];
}
function areEqual(a, b, comparator) {
  if (a == null && b == null) {
    return true;
  }
  return a != null && b != null && a.length === b.length && a.every(function(value, index) {
    return comparator ? comparator(value, b[index]) : b[index] === value;
  });
}
function shallowCompare(arr1, arr2) {
  return areEqual(arr1, arr2);
}
function sortNumerically(array) {
  return array.sort(function(a, b) {
    return a - b;
  });
}
function removeRepeatsFromArray(array, object) {
  if (!array) {
    return;
  }
  for (var index = array.length - 2; index >= 0; index--) {
    var thisOneMatches = array[index] === object;
    var nextOneMatches = array[index + 1] === object;
    if (thisOneMatches && nextOneMatches) {
      array.splice(index + 1, 1);
    }
  }
}
function removeFromUnorderedArray(array, object) {
  var index = array.indexOf(object);
  if (index >= 0) {
    array[index] = array[array.length - 1];
    array.pop();
  }
}
function removeFromArray(array, object) {
  var index = array.indexOf(object);
  if (index >= 0) {
    array.splice(index, 1);
  }
}
function removeAllFromUnorderedArray(array, toRemove) {
  for (var i = 0; i < toRemove.length; i++) {
    removeFromUnorderedArray(array, toRemove[i]);
  }
}
function removeAllFromArray(array, toRemove) {
  for (var i = 0; i < toRemove.length; i++) {
    removeFromArray(array, toRemove[i]);
  }
}
function insertIntoArray(array, object, toIndex) {
  array.splice(toIndex, 0, object);
}
function insertArrayIntoArray(dest, src, toIndex) {
  if (dest == null || src == null) {
    return;
  }
  for (var i = src.length - 1; i >= 0; i--) {
    var item = src[i];
    insertIntoArray(dest, item, toIndex);
  }
}
function moveInArray(array, objectsToMove, toIndex) {
  removeAllFromArray(array, objectsToMove);
  objectsToMove.slice().reverse().forEach(function(obj) {
    return insertIntoArray(array, obj, toIndex);
  });
}
function includes(array, value) {
  return array.indexOf(value) > -1;
}
function flatten(arrayOfArrays) {
  return [].concat.apply([], arrayOfArrays);
}
function pushAll(target, source) {
  if (source == null || target == null) {
    return;
  }
  source.forEach(function(value) {
    return target.push(value);
  });
}
function toStrings(array) {
  return array.map(toStringOrNull);
}
function forEachReverse(list, action) {
  if (list == null) {
    return;
  }
  for (var i = list.length - 1; i >= 0; i--) {
    action(list[i], i);
  }
}
function stopPropagationForAgGrid(event) {
  event[AG_GRID_STOP_PROPAGATION] = true;
}
function isStopPropagationForAgGrid(event) {
  return event[AG_GRID_STOP_PROPAGATION] === true;
}
function getCtrlForEventTarget(gridOptionsService, eventTarget, type) {
  var sourceElement = eventTarget;
  while (sourceElement) {
    var renderedComp = gridOptionsService.getDomData(sourceElement, type);
    if (renderedComp) {
      return renderedComp;
    }
    sourceElement = sourceElement.parentElement;
  }
  return null;
}
function isElementInEventPath(element, event) {
  if (!event || !element) {
    return false;
  }
  return getEventPath(event).indexOf(element) >= 0;
}
function createEventPath(event) {
  var res = [];
  var pointer = event.target;
  while (pointer) {
    res.push(pointer);
    pointer = pointer.parentElement;
  }
  return res;
}
function getEventPath(event) {
  var eventNoType = event;
  if (eventNoType.path) {
    return eventNoType.path;
  }
  if (eventNoType.composedPath) {
    return eventNoType.composedPath();
  }
  return createEventPath(eventNoType);
}
function addSafePassiveEventListener(frameworkOverrides, eElement, event, listener) {
  var isPassive = includes(PASSIVE_EVENTS$1, event);
  var options = isPassive ? { passive: true } : void 0;
  if (frameworkOverrides && frameworkOverrides.addEventListener) {
    frameworkOverrides.addEventListener(eElement, event, listener, options);
  }
}
function utf8_encode(s) {
  var stringFromCharCode = String.fromCharCode;
  function ucs2decode(string) {
    var output = [];
    if (!string) {
      return [];
    }
    var len = string.length;
    var counter = 0;
    var value;
    var extra;
    while (counter < len) {
      value = string.charCodeAt(counter++);
      if (value >= 55296 && value <= 56319 && counter < len) {
        extra = string.charCodeAt(counter++);
        if ((extra & 64512) == 56320) {
          output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
        } else {
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }
  function checkScalarValue(point) {
    if (point >= 55296 && point <= 57343) {
      throw Error("Lone surrogate U+" + point.toString(16).toUpperCase() + " is not a scalar value");
    }
  }
  function createByte(point, shift) {
    return stringFromCharCode(point >> shift & 63 | 128);
  }
  function encodeCodePoint(point) {
    if (point >= 0 && point <= 31 && point !== 10) {
      var convertedCode = point.toString(16).toUpperCase();
      var paddedCode = convertedCode.padStart(4, "0");
      return "_x" + paddedCode + "_";
    }
    if ((point & 4294967168) == 0) {
      return stringFromCharCode(point);
    }
    var symbol = "";
    if ((point & 4294965248) == 0) {
      symbol = stringFromCharCode(point >> 6 & 31 | 192);
    } else if ((point & 4294901760) == 0) {
      checkScalarValue(point);
      symbol = stringFromCharCode(point >> 12 & 15 | 224);
      symbol += createByte(point, 6);
    } else if ((point & 4292870144) == 0) {
      symbol = stringFromCharCode(point >> 18 & 7 | 240);
      symbol += createByte(point, 12);
      symbol += createByte(point, 6);
    }
    symbol += stringFromCharCode(point & 63 | 128);
    return symbol;
  }
  var codePoints = ucs2decode(s);
  var length = codePoints.length;
  var index = -1;
  var codePoint;
  var byteString = "";
  while (++index < length) {
    codePoint = codePoints[index];
    byteString += encodeCodePoint(codePoint);
  }
  return byteString;
}
function capitalise(str) {
  return str[0].toUpperCase() + str.substr(1).toLowerCase();
}
function escapeString(toEscape, skipEscapingHtmlChars) {
  if (toEscape == null) {
    return null;
  }
  var stringResult = toEscape.toString().toString();
  if (skipEscapingHtmlChars) {
    return stringResult;
  }
  return stringResult.replace(reUnescapedHtml, function(chr) {
    return HTML_ESCAPES[chr];
  });
}
function camelCaseToHumanText(camelCase) {
  if (!camelCase || camelCase == null) {
    return null;
  }
  var rex = /([a-z])([A-Z])/g;
  var rexCaps = /([A-Z]+)([A-Z])([a-z])/g;
  var words = camelCase.replace(rex, "$1 $2").replace(rexCaps, "$1 $2$3").replace(/\./g, " ").split(" ");
  return words.map(function(word) {
    return word.substring(0, 1).toUpperCase() + (word.length > 1 ? word.substring(1, word.length) : "");
  }).join(" ");
}
function camelCaseToHyphenated(camelCase) {
  return camelCase.replace(/[A-Z]/g, function(s) {
    return "-" + s.toLocaleLowerCase();
  });
}
function convertToMap(arr) {
  var map = /* @__PURE__ */ new Map();
  arr.forEach(function(pair) {
    return map.set(pair[0], pair[1]);
  });
  return map;
}
function mapById(arr, callback) {
  var map = /* @__PURE__ */ new Map();
  arr.forEach(function(item) {
    return map.set(callback(item), item);
  });
  return map;
}
function keys(map) {
  var arr = [];
  map.forEach(function(_2, key) {
    return arr.push(key);
  });
  return arr;
}
function fuzzyCheckStrings(inputValues, validValues, allSuggestions) {
  var fuzzyMatches = {};
  var invalidInputs = inputValues.filter(function(inputValue) {
    return !validValues.some(function(validValue) {
      return validValue === inputValue;
    });
  });
  if (invalidInputs.length > 0) {
    invalidInputs.forEach(function(invalidInput) {
      return fuzzyMatches[invalidInput] = fuzzySuggestions(invalidInput, allSuggestions).values;
    });
  }
  return fuzzyMatches;
}
function fuzzySuggestions(inputValue, allSuggestions, hideIrrelevant, filterByPercentageOfBestMatch) {
  var e_1, _a;
  var thisSuggestions = allSuggestions.map(function(text, idx) {
    return {
      value: text,
      relevance: stringWeightedDistances(inputValue.toLowerCase(), text.toLocaleLowerCase()),
      idx
    };
  });
  thisSuggestions.sort(function(a, b) {
    return b.relevance - a.relevance;
  });
  if (hideIrrelevant) {
    thisSuggestions = thisSuggestions.filter(function(suggestion2) {
      return suggestion2.relevance !== 0;
    });
  }
  if (thisSuggestions.length > 0 && filterByPercentageOfBestMatch && filterByPercentageOfBestMatch > 0) {
    var bestMatch = thisSuggestions[0].relevance;
    var limit_1 = bestMatch * filterByPercentageOfBestMatch;
    thisSuggestions = thisSuggestions.filter(function(suggestion2) {
      return limit_1 - suggestion2.relevance < 0;
    });
  }
  var values2 = [];
  var indices = [];
  try {
    for (var thisSuggestions_1 = __values$7(thisSuggestions), thisSuggestions_1_1 = thisSuggestions_1.next(); !thisSuggestions_1_1.done; thisSuggestions_1_1 = thisSuggestions_1.next()) {
      var suggestion = thisSuggestions_1_1.value;
      values2.push(suggestion.value);
      indices.push(suggestion.idx);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (thisSuggestions_1_1 && !thisSuggestions_1_1.done && (_a = thisSuggestions_1.return))
        _a.call(thisSuggestions_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return { values: values2, indices };
}
function stringWeightedDistances(str1, str2) {
  var a = str1.replace(/\s/g, "");
  var b = str2.replace(/\s/g, "");
  var weight = 0;
  var lastIndex = -1;
  for (var i = 0; i < a.length; i++) {
    var idx = b.indexOf(a[i], lastIndex + 1);
    if (idx === -1) {
      continue;
    }
    lastIndex = idx;
    weight += 100 - lastIndex * 100 / 1e4 * 100;
  }
  return weight;
}
function logDeprecation(version, oldProp, newProp, message) {
  var newPropMsg = newProp ? "Please use '" + newProp + "' instead. " : "";
  doOnce(function() {
    return console.warn("AG Grid: since v" + version + ", '" + oldProp + "' is deprecated. " + newPropMsg + (message !== null && message !== void 0 ? message : ""));
  }, "Deprecated_" + oldProp);
}
function matchesGroupDisplayType(toMatch, supplied) {
  var groupDisplayTypeValues = ["groupRows", "multipleColumns", "custom", "singleColumn"];
  if (groupDisplayTypeValues.indexOf(supplied) < 0) {
    console.warn("AG Grid: '" + supplied + "' is not a valid groupDisplayType value - possible values are: '" + groupDisplayTypeValues.join("', '") + "'");
    return false;
  }
  return supplied === toMatch;
}
function matchesTreeDataDisplayType(toMatch, supplied) {
  var treeDataDisplayTypeValues = ["auto", "custom"];
  if (treeDataDisplayTypeValues.indexOf(supplied) < 0) {
    console.warn("AG Grid: '" + supplied + "' is not a valid treeDataDisplayType value - possible values are: '" + treeDataDisplayTypeValues.join("', '") + "'");
    return false;
  }
  return supplied === toMatch;
}
function toggleAriaAttribute(element, attribute, value) {
  if (value == null || value == "") {
    removeAriaAttribute(element, attribute);
  } else {
    setAriaAttribute(element, attribute, value);
  }
}
function setAriaAttribute(element, attribute, value) {
  element.setAttribute(ariaAttributeName(attribute), value.toString());
}
function removeAriaAttribute(element, attribute) {
  element.removeAttribute(ariaAttributeName(attribute));
}
function ariaAttributeName(attribute) {
  return "aria-" + attribute;
}
function setAriaRole(element, role) {
  if (role) {
    element.setAttribute("role", role);
  } else {
    element.removeAttribute("role");
  }
}
function getAriaSortState(sortDirection) {
  var sort;
  if (sortDirection === "asc") {
    sort = "ascending";
  } else if (sortDirection === "desc") {
    sort = "descending";
  } else if (sortDirection === "mixed") {
    sort = "other";
  } else {
    sort = "none";
  }
  return sort;
}
function getAriaLevel(element) {
  return parseInt(element.getAttribute("aria-level"), 10);
}
function getAriaPosInSet(element) {
  return parseInt(element.getAttribute("aria-posinset"), 10);
}
function getAriaDescribedBy(element) {
  return element.getAttribute("aria-describedby") || "";
}
function setAriaLabel(element, label) {
  toggleAriaAttribute(element, "label", label);
}
function setAriaLabelledBy(element, labelledBy) {
  toggleAriaAttribute(element, "labelledby", labelledBy);
}
function setAriaDescription(element, description) {
  toggleAriaAttribute(element, "description", description);
}
function setAriaDescribedBy(element, describedby) {
  toggleAriaAttribute(element, "describedby", describedby);
}
function setAriaLive(element, live) {
  toggleAriaAttribute(element, "live", live);
}
function setAriaLevel(element, level) {
  toggleAriaAttribute(element, "level", level);
}
function setAriaDisabled(element, disabled) {
  toggleAriaAttribute(element, "disabled", disabled);
}
function setAriaHidden(element, hidden) {
  toggleAriaAttribute(element, "hidden", hidden);
}
function setAriaActiveDescendant(element, descendantId) {
  toggleAriaAttribute(element, "activedescendant", descendantId);
}
function setAriaExpanded(element, expanded) {
  setAriaAttribute(element, "expanded", expanded);
}
function removeAriaExpanded(element) {
  removeAriaAttribute(element, "expanded");
}
function setAriaSetSize(element, setsize) {
  setAriaAttribute(element, "setsize", setsize);
}
function setAriaPosInSet(element, position) {
  setAriaAttribute(element, "posinset", position);
}
function setAriaMultiSelectable(element, multiSelectable) {
  setAriaAttribute(element, "multiselectable", multiSelectable);
}
function setAriaRowCount(element, rowCount) {
  setAriaAttribute(element, "rowcount", rowCount);
}
function setAriaRowIndex(element, rowIndex) {
  setAriaAttribute(element, "rowindex", rowIndex);
}
function setAriaColCount(element, colCount) {
  setAriaAttribute(element, "colcount", colCount);
}
function setAriaColIndex(element, colIndex) {
  setAriaAttribute(element, "colindex", colIndex);
}
function setAriaColSpan(element, colSpan) {
  setAriaAttribute(element, "colspan", colSpan);
}
function setAriaSort(element, sort) {
  setAriaAttribute(element, "sort", sort);
}
function removeAriaSort(element) {
  removeAriaAttribute(element, "sort");
}
function setAriaSelected(element, selected) {
  toggleAriaAttribute(element, "selected", selected);
}
function setAriaChecked(element, checked) {
  setAriaAttribute(element, "checked", checked === void 0 ? "mixed" : checked);
}
function setAriaControls(controllerElement, controlledElement) {
  toggleAriaAttribute(controllerElement, "controls", controlledElement.id);
  setAriaLabelledBy(controlledElement, controllerElement.id);
}
function getAriaCheckboxStateName(translate, state) {
  return state === void 0 ? translate("ariaIndeterminate", "indeterminate") : state === true ? translate("ariaChecked", "checked") : translate("ariaUnchecked", "unchecked");
}
function isBrowserSafari() {
  if (isSafari === void 0) {
    isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  }
  return isSafari;
}
function getSafariVersion() {
  if (safariVersion === void 0) {
    if (isBrowserSafari()) {
      var versionMatch = navigator.userAgent.match(/version\/(\d+)/i);
      if (versionMatch) {
        safariVersion = versionMatch[1] != null ? parseFloat(versionMatch[1]) : 0;
      }
    } else {
      safariVersion = 0;
    }
  }
  return safariVersion;
}
function isBrowserChrome() {
  if (isChrome === void 0) {
    var win = window;
    isChrome = !!win.chrome && (!!win.chrome.webstore || !!win.chrome.runtime) || /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
  }
  return isChrome;
}
function isBrowserFirefox() {
  if (isFirefox === void 0) {
    isFirefox = /(firefox)/i.test(navigator.userAgent);
  }
  return isFirefox;
}
function isMacOsUserAgent() {
  if (isMacOs === void 0) {
    isMacOs = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);
  }
  return isMacOs;
}
function isIOSUserAgent() {
  if (isIOS === void 0) {
    isIOS = /iPad|iPhone|iPod/.test(navigator.platform) || // eslint-disable-next-line
    navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1;
  }
  return isIOS;
}
function browserSupportsPreventScroll() {
  return !isBrowserSafari() || getSafariVersion() >= 15;
}
function getTabIndex(el) {
  if (!el) {
    return null;
  }
  var numberTabIndex = el.tabIndex;
  var tabIndex = el.getAttribute("tabIndex");
  if (numberTabIndex === -1 && (tabIndex === null || tabIndex === "" && !isBrowserFirefox())) {
    return null;
  }
  return numberTabIndex.toString();
}
function getMaxDivHeight() {
  if (!document.body) {
    return -1;
  }
  var res = 1e6;
  var testUpTo = navigator.userAgent.toLowerCase().match(/firefox/) ? 6e6 : 1e9;
  var div = document.createElement("div");
  document.body.appendChild(div);
  while (true) {
    var test = res * 2;
    div.style.height = test + "px";
    if (test > testUpTo || div.clientHeight !== test) {
      break;
    } else {
      res = test;
    }
  }
  document.body.removeChild(div);
  return res;
}
function getBodyWidth() {
  var _a, _b, _c;
  return (_b = (_a = document.body) === null || _a === void 0 ? void 0 : _a.clientWidth) !== null && _b !== void 0 ? _b : window.innerHeight || ((_c = document.documentElement) === null || _c === void 0 ? void 0 : _c.clientWidth) || -1;
}
function getBodyHeight() {
  var _a, _b, _c;
  return (_b = (_a = document.body) === null || _a === void 0 ? void 0 : _a.clientHeight) !== null && _b !== void 0 ? _b : window.innerHeight || ((_c = document.documentElement) === null || _c === void 0 ? void 0 : _c.clientHeight) || -1;
}
function getScrollbarWidth() {
  if (browserScrollbarWidth == null) {
    initScrollbarWidthAndVisibility();
  }
  return browserScrollbarWidth;
}
function initScrollbarWidthAndVisibility() {
  var body = document.body;
  var div = document.createElement("div");
  div.style.width = div.style.height = "100px";
  div.style.opacity = "0";
  div.style.overflow = "scroll";
  div.style.msOverflowStyle = "scrollbar";
  div.style.position = "absolute";
  body.appendChild(div);
  var width = div.offsetWidth - div.clientWidth;
  if (width === 0 && div.clientWidth === 0) {
    width = null;
  }
  if (div.parentNode) {
    div.parentNode.removeChild(div);
  }
  if (width != null) {
    browserScrollbarWidth = width;
    invisibleScrollbar = width === 0;
  }
}
function isInvisibleScrollbar() {
  if (invisibleScrollbar == null) {
    initScrollbarWidthAndVisibility();
  }
  return invisibleScrollbar;
}
function padStartWidthZeros(value, totalStringSize) {
  return value.toString().padStart(totalStringSize, "0");
}
function createArrayOfNumbers(first, last2) {
  var result = [];
  for (var i = first; i <= last2; i++) {
    result.push(i);
  }
  return result;
}
function cleanNumber(value) {
  if (typeof value === "string") {
    value = parseInt(value, 10);
  }
  if (typeof value === "number") {
    return Math.floor(value);
  }
  return null;
}
function decToHex(number, bytes) {
  var hex = "";
  for (var i = 0; i < bytes; i++) {
    hex += String.fromCharCode(number & 255);
    number >>>= 8;
  }
  return hex;
}
function formatNumberTwoDecimalPlacesAndCommas(value, thousandSeparator, decimalSeparator) {
  if (typeof value !== "number") {
    return "";
  }
  return formatNumberCommas(Math.round(value * 100) / 100, thousandSeparator, decimalSeparator);
}
function formatNumberCommas(value, thousandSeparator, decimalSeparator) {
  if (typeof value !== "number") {
    return "";
  }
  return value.toString().replace(".", decimalSeparator).replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + thousandSeparator);
}
function sum(values2) {
  return values2 == null ? null : values2.reduce(function(total, value) {
    return total + value;
  }, 0);
}
function zeroOrGreater(value, defaultValue) {
  if (value >= 0) {
    return value;
  }
  return defaultValue;
}
function oneOrGreater(value, defaultValue) {
  var valueNumber = parseInt(value, 10);
  if (!isNaN(valueNumber) && isFinite(valueNumber) && valueNumber > 0) {
    return valueNumber;
  }
  return defaultValue;
}
function serialiseDate(date, includeTime, separator) {
  if (includeTime === void 0) {
    includeTime = true;
  }
  if (separator === void 0) {
    separator = "-";
  }
  if (!date) {
    return null;
  }
  var serialised = [date.getFullYear(), date.getMonth() + 1, date.getDate()].map(function(part) {
    return padStartWidthZeros(part, 2);
  }).join(separator);
  if (includeTime) {
    serialised += " " + [date.getHours(), date.getMinutes(), date.getSeconds()].map(function(part) {
      return padStartWidthZeros(part, 2);
    }).join(":");
  }
  return serialised;
}
function dateToFormattedString(date, format) {
  if (format === void 0) {
    format = "YYYY-MM-DD";
  }
  var fullYear = padStartWidthZeros(date.getFullYear(), 4);
  var months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  var days = [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ];
  var replace = {
    YYYY: function() {
      return fullYear.slice(fullYear.length - 4, fullYear.length);
    },
    YY: function() {
      return fullYear.slice(fullYear.length - 2, fullYear.length);
    },
    Y: function() {
      return "" + date.getFullYear();
    },
    MMMM: function() {
      return months[date.getMonth()];
    },
    MMM: function() {
      return months[date.getMonth()].slice(0, 3);
    },
    MM: function() {
      return padStartWidthZeros(date.getMonth() + 1, 2);
    },
    Mo: function() {
      return "" + (date.getMonth() + 1) + calculateOrdinal(date.getMonth() + 1);
    },
    M: function() {
      return "" + (date.getMonth() + 1);
    },
    Do: function() {
      return "" + date.getDate() + calculateOrdinal(date.getDate());
    },
    DD: function() {
      return padStartWidthZeros(date.getDate(), 2);
    },
    D: function() {
      return "" + date.getDate();
    },
    dddd: function() {
      return days[date.getDay()];
    },
    ddd: function() {
      return days[date.getDay()].slice(0, 3);
    },
    dd: function() {
      return days[date.getDay()].slice(0, 2);
    },
    do: function() {
      return "" + date.getDay() + calculateOrdinal(date.getDay());
    },
    d: function() {
      return "" + date.getDay();
    }
  };
  var regexp = new RegExp(Object.keys(replace).join("|"), "g");
  return format.replace(regexp, function(match) {
    if (match in replace) {
      return replace[match]();
    }
    return match;
  });
}
function parseDateTimeFromString(value) {
  if (!value) {
    return null;
  }
  var _a = __read$r(value.split(" "), 2), dateStr = _a[0], timeStr = _a[1];
  if (!dateStr) {
    return null;
  }
  var fields = dateStr.split("-").map(function(f) {
    return parseInt(f, 10);
  });
  if (fields.filter(function(f) {
    return !isNaN(f);
  }).length !== 3) {
    return null;
  }
  var _b = __read$r(fields, 3), year = _b[0], month = _b[1], day = _b[2];
  var date = new Date(year, month - 1, day);
  if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {
    return null;
  }
  if (!timeStr || timeStr === "00:00:00") {
    return date;
  }
  var _c = __read$r(timeStr.split(":").map(function(part) {
    return parseInt(part, 10);
  }), 3), hours = _c[0], minutes = _c[1], seconds = _c[2];
  if (hours >= 0 && hours < 24) {
    date.setHours(hours);
  }
  if (minutes >= 0 && minutes < 60) {
    date.setMinutes(minutes);
  }
  if (seconds >= 0 && seconds < 60) {
    date.setSeconds(seconds);
  }
  return date;
}
function radioCssClass(element, elementClass, otherElementClass) {
  var parent = element.parentElement;
  var sibling = parent && parent.firstChild;
  while (sibling) {
    if (elementClass) {
      sibling.classList.toggle(elementClass, sibling === element);
    }
    if (otherElementClass) {
      sibling.classList.toggle(otherElementClass, sibling !== element);
    }
    sibling = sibling.nextSibling;
  }
}
function isFocusableFormField(element) {
  var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
  var inputSelector = "input, select, button, textarea";
  var isFocusable = matches.call(element, inputSelector);
  var isNotFocusable = matches.call(element, FOCUSABLE_EXCLUDE);
  var isElementVisible = isVisible(element);
  var focusable = isFocusable && !isNotFocusable && isElementVisible;
  return focusable;
}
function setDisplayed(element, displayed, options) {
  if (options === void 0) {
    options = {};
  }
  var skipAriaHidden = options.skipAriaHidden;
  element.classList.toggle("ag-hidden", !displayed);
  if (!skipAriaHidden) {
    setAriaHidden(element, !displayed);
  }
}
function setVisible(element, visible, options) {
  if (options === void 0) {
    options = {};
  }
  var skipAriaHidden = options.skipAriaHidden;
  element.classList.toggle("ag-invisible", !visible);
  if (!skipAriaHidden) {
    setAriaHidden(element, !visible);
  }
}
function setDisabled(element, disabled) {
  var attributeName = "disabled";
  var addOrRemoveDisabledAttribute = disabled ? function(e) {
    return e.setAttribute(attributeName, "");
  } : function(e) {
    return e.removeAttribute(attributeName);
  };
  addOrRemoveDisabledAttribute(element);
  nodeListForEach(element.querySelectorAll("input"), function(input) {
    return addOrRemoveDisabledAttribute(input);
  });
}
function isElementChildOfClass(element, cls, maxNest) {
  var counter = 0;
  while (element) {
    if (element.classList.contains(cls)) {
      return true;
    }
    element = element.parentElement;
    if (typeof maxNest == "number") {
      if (++counter > maxNest) {
        break;
      }
    } else if (element === maxNest) {
      break;
    }
  }
  return false;
}
function getElementSize(el) {
  var _a = window.getComputedStyle(el), height = _a.height, width = _a.width, borderTopWidth = _a.borderTopWidth, borderRightWidth = _a.borderRightWidth, borderBottomWidth = _a.borderBottomWidth, borderLeftWidth = _a.borderLeftWidth, paddingTop = _a.paddingTop, paddingRight = _a.paddingRight, paddingBottom = _a.paddingBottom, paddingLeft = _a.paddingLeft, marginTop = _a.marginTop, marginRight = _a.marginRight, marginBottom = _a.marginBottom, marginLeft = _a.marginLeft, boxSizing = _a.boxSizing;
  return {
    height: parseFloat(height),
    width: parseFloat(width),
    borderTopWidth: parseFloat(borderTopWidth),
    borderRightWidth: parseFloat(borderRightWidth),
    borderBottomWidth: parseFloat(borderBottomWidth),
    borderLeftWidth: parseFloat(borderLeftWidth),
    paddingTop: parseFloat(paddingTop),
    paddingRight: parseFloat(paddingRight),
    paddingBottom: parseFloat(paddingBottom),
    paddingLeft: parseFloat(paddingLeft),
    marginTop: parseFloat(marginTop),
    marginRight: parseFloat(marginRight),
    marginBottom: parseFloat(marginBottom),
    marginLeft: parseFloat(marginLeft),
    boxSizing
  };
}
function getInnerHeight(el) {
  var size = getElementSize(el);
  if (size.boxSizing === "border-box") {
    return size.height - size.paddingTop - size.paddingBottom;
  }
  return size.height;
}
function getInnerWidth(el) {
  var size = getElementSize(el);
  if (size.boxSizing === "border-box") {
    return size.width - size.paddingLeft - size.paddingRight;
  }
  return size.width;
}
function getAbsoluteHeight(el) {
  var size = getElementSize(el);
  var marginRight = size.marginBottom + size.marginTop;
  return Math.ceil(el.offsetHeight + marginRight);
}
function getAbsoluteWidth(el) {
  var size = getElementSize(el);
  var marginWidth = size.marginLeft + size.marginRight;
  return Math.ceil(el.offsetWidth + marginWidth);
}
function getElementRectWithOffset(el) {
  var offsetElementRect = el.getBoundingClientRect();
  var _a = getElementSize(el), borderTopWidth = _a.borderTopWidth, borderLeftWidth = _a.borderLeftWidth, borderRightWidth = _a.borderRightWidth, borderBottomWidth = _a.borderBottomWidth;
  return {
    top: offsetElementRect.top + (borderTopWidth || 0),
    left: offsetElementRect.left + (borderLeftWidth || 0),
    right: offsetElementRect.right + (borderRightWidth || 0),
    bottom: offsetElementRect.bottom + (borderBottomWidth || 0)
  };
}
function isRtlNegativeScroll() {
  if (typeof rtlNegativeScroll === "boolean") {
    return rtlNegativeScroll;
  }
  var template = document.createElement("div");
  template.style.direction = "rtl";
  template.style.width = "1px";
  template.style.height = "1px";
  template.style.position = "fixed";
  template.style.top = "0px";
  template.style.overflow = "hidden";
  template.dir = "rtl";
  template.innerHTML = /* html */
  '<div style="width: 2px">\n            <span style="display: inline-block; width: 1px"></span>\n            <span style="display: inline-block; width: 1px"></span>\n        </div>';
  document.body.appendChild(template);
  template.scrollLeft = 1;
  rtlNegativeScroll = Math.floor(template.scrollLeft) === 0;
  document.body.removeChild(template);
  return rtlNegativeScroll;
}
function getScrollLeft(element, rtl) {
  var scrollLeft = element.scrollLeft;
  if (rtl) {
    scrollLeft = Math.abs(scrollLeft);
    if (isBrowserChrome() && !isRtlNegativeScroll()) {
      scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
    }
  }
  return scrollLeft;
}
function setScrollLeft(element, value, rtl) {
  if (rtl) {
    if (isRtlNegativeScroll()) {
      value *= -1;
    } else if (isBrowserSafari() || isBrowserChrome()) {
      value = element.scrollWidth - element.clientWidth - value;
    }
  }
  element.scrollLeft = value;
}
function clearElement(el) {
  while (el && el.firstChild) {
    el.removeChild(el.firstChild);
  }
}
function removeElement(parent, cssSelector) {
  removeFromParent(parent.querySelector(cssSelector));
}
function removeFromParent(node) {
  if (node && node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function isVisible(element) {
  return element.offsetParent !== null;
}
function loadTemplate(template) {
  var tempDiv = document.createElement("div");
  tempDiv.innerHTML = (template || "").trim();
  return tempDiv.firstChild;
}
function appendHtml(eContainer, htmlTemplate) {
  if (eContainer.lastChild) {
    eContainer.insertAdjacentHTML("afterbegin", htmlTemplate);
  } else {
    eContainer.innerHTML = htmlTemplate;
  }
}
function getElementAttribute(element, attributeName) {
  if (element.attributes && element.attributes[attributeName]) {
    var attribute = element.attributes[attributeName];
    return attribute.value;
  }
  return null;
}
function offsetHeight(element) {
  return element && element.clientHeight ? element.clientHeight : 0;
}
function offsetWidth(element) {
  return element && element.clientWidth ? element.clientWidth : 0;
}
function ensureDomOrder(eContainer, eChild, eChildBefore) {
  if (eChildBefore && eChildBefore.nextSibling === eChild) {
    return;
  }
  var focusedEl = document.activeElement;
  var eChildHasFocus = eChild.contains(focusedEl);
  if (eChildBefore) {
    if (eChildBefore.nextSibling) {
      eContainer.insertBefore(eChild, eChildBefore.nextSibling);
    } else {
      eContainer.appendChild(eChild);
    }
  } else {
    if (eContainer.firstChild && eContainer.firstChild !== eChild) {
      eContainer.insertAdjacentElement("afterbegin", eChild);
    }
  }
  if (eChildHasFocus && focusedEl && browserSupportsPreventScroll()) {
    focusedEl.focus({ preventScroll: true });
  }
}
function setDomChildOrder(eContainer, orderedChildren) {
  for (var i = 0; i < orderedChildren.length; i++) {
    var correctCellAtIndex = orderedChildren[i];
    var actualCellAtIndex = eContainer.children[i];
    if (actualCellAtIndex !== correctCellAtIndex) {
      eContainer.insertBefore(correctCellAtIndex, actualCellAtIndex);
    }
  }
}
function insertWithDomOrder(eContainer, eToInsert, eChildBefore) {
  if (eChildBefore) {
    eChildBefore.insertAdjacentElement("afterend", eToInsert);
  } else {
    if (eContainer.firstChild) {
      eContainer.insertAdjacentElement("afterbegin", eToInsert);
    } else {
      eContainer.appendChild(eToInsert);
    }
  }
}
function prependDC(parent, documentFragment) {
  if (exists(parent.firstChild)) {
    parent.insertBefore(documentFragment, parent.firstChild);
  } else {
    parent.appendChild(documentFragment);
  }
}
function addStylesToElement(eElement, styles) {
  var e_1, _a;
  if (!styles) {
    return;
  }
  try {
    for (var _b = __values$5(Object.entries(styles)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var _d = __read$q(_c.value, 2), key = _d[0], value = _d[1];
      if (!key || !key.length || value == null) {
        continue;
      }
      var parsedKey = camelCaseToHyphenated(key);
      var valueAsString = value.toString();
      var parsedValue = valueAsString.replace(/\s*!important/g, "");
      var priority = parsedValue.length != valueAsString.length ? "important" : void 0;
      eElement.style.setProperty(parsedKey, parsedValue, priority);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}
function isHorizontalScrollShowing(element) {
  return element.clientWidth < element.scrollWidth;
}
function isVerticalScrollShowing(element) {
  return element.clientHeight < element.scrollHeight;
}
function setElementWidth(element, width) {
  if (width === "flex") {
    element.style.removeProperty("width");
    element.style.removeProperty("minWidth");
    element.style.removeProperty("maxWidth");
    element.style.flex = "1 1 auto";
  } else {
    setFixedWidth(element, width);
  }
}
function setFixedWidth(element, width) {
  width = formatSize(width);
  element.style.width = width.toString();
  element.style.maxWidth = width.toString();
  element.style.minWidth = width.toString();
}
function setElementHeight(element, height) {
  if (height === "flex") {
    element.style.removeProperty("height");
    element.style.removeProperty("minHeight");
    element.style.removeProperty("maxHeight");
    element.style.flex = "1 1 auto";
  } else {
    setFixedHeight(element, height);
  }
}
function setFixedHeight(element, height) {
  height = formatSize(height);
  element.style.height = height.toString();
  element.style.maxHeight = height.toString();
  element.style.minHeight = height.toString();
}
function formatSize(size) {
  if (typeof size === "number") {
    return size + "px";
  }
  return size;
}
function isNodeOrElement(o) {
  return o instanceof Node || o instanceof HTMLElement;
}
function copyNodeList(nodeList) {
  if (nodeList == null) {
    return [];
  }
  var result = [];
  nodeListForEach(nodeList, function(node) {
    return result.push(node);
  });
  return result;
}
function iterateNamedNodeMap(map, callback) {
  if (!map) {
    return;
  }
  for (var i = 0; i < map.length; i++) {
    var attr = map[i];
    callback(attr.name, attr.value);
  }
}
function addOrRemoveAttribute(element, name, value) {
  if (value == null) {
    element.removeAttribute(name);
  } else {
    element.setAttribute(name, value.toString());
  }
}
function nodeListForEach(nodeList, action) {
  if (nodeList == null) {
    return;
  }
  for (var i = 0; i < nodeList.length; i++) {
    action(nodeList[i]);
  }
}
function bindCellRendererToHtmlElement(cellRendererPromise, eTarget) {
  cellRendererPromise.then(function(cellRenderer) {
    var gui = cellRenderer.getGui();
    if (gui != null) {
      if (typeof gui === "object") {
        eTarget.appendChild(gui);
      } else {
        eTarget.innerHTML = gui;
      }
    }
  });
}
function createIcon(iconName, gridOptionsService, column) {
  var iconContents = createIconNoSpan(iconName, gridOptionsService, column);
  if (iconContents) {
    var className = iconContents.className;
    if (typeof className === "string" && className.indexOf("ag-icon") > -1 || typeof className === "object" && className["ag-icon"]) {
      return iconContents;
    }
  }
  var eResult = document.createElement("span");
  eResult.appendChild(iconContents);
  return eResult;
}
function createIconNoSpan(iconName, gridOptionsService, column, forceCreate) {
  var userProvidedIcon = null;
  var icons = column && column.getColDef().icons;
  if (icons) {
    userProvidedIcon = icons[iconName];
  }
  if (gridOptionsService && !userProvidedIcon) {
    var optionsIcons = gridOptionsService.get("icons");
    if (optionsIcons) {
      userProvidedIcon = optionsIcons[iconName];
    }
  }
  if (userProvidedIcon) {
    var rendererResult = void 0;
    if (typeof userProvidedIcon === "function") {
      rendererResult = userProvidedIcon();
    } else if (typeof userProvidedIcon === "string") {
      rendererResult = userProvidedIcon;
    } else {
      throw new Error("icon from grid options needs to be a string or a function");
    }
    if (typeof rendererResult === "string") {
      return loadTemplate(rendererResult);
    }
    if (isNodeOrElement(rendererResult)) {
      return rendererResult;
    }
    console.warn("AG Grid: iconRenderer should return back a string or a dom object");
  } else {
    var span = document.createElement("span");
    var cssClass = iconNameClassMap[iconName];
    if (!cssClass) {
      if (!forceCreate) {
        console.warn("AG Grid: Did not find icon " + iconName);
        cssClass = "";
      } else {
        cssClass = iconName;
      }
    }
    span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
    span.setAttribute("unselectable", "on");
    setAriaRole(span, "presentation");
    return span;
  }
}
function isEventFromPrintableCharacter(event) {
  if (event.altKey || event.ctrlKey || event.metaKey) {
    return false;
  }
  var printableCharacter = event.key.length === 1;
  return printableCharacter;
}
function isUserSuppressingKeyboardEvent(gridOptionsService, keyboardEvent, rowNode, column, editing) {
  var colDefFunc = column ? column.getColDef().suppressKeyboardEvent : void 0;
  if (!colDefFunc) {
    return false;
  }
  var params = {
    event: keyboardEvent,
    editing,
    column,
    api: gridOptionsService.api,
    node: rowNode,
    data: rowNode.data,
    colDef: column.getColDef(),
    context: gridOptionsService.context,
    columnApi: gridOptionsService.columnApi
  };
  if (colDefFunc) {
    var colDefFuncResult = colDefFunc(params);
    if (colDefFuncResult) {
      return true;
    }
  }
  return false;
}
function isUserSuppressingHeaderKeyboardEvent(gridOptionsService, keyboardEvent, headerRowIndex, column) {
  var colDef = column.getDefinition();
  var colDefFunc = colDef && colDef.suppressHeaderKeyboardEvent;
  if (!exists(colDefFunc)) {
    return false;
  }
  var params = {
    api: gridOptionsService.api,
    columnApi: gridOptionsService.columnApi,
    context: gridOptionsService.context,
    colDef,
    column,
    headerRowIndex,
    event: keyboardEvent
  };
  return !!colDefFunc(params);
}
function normaliseQwertyAzerty(keyboardEvent) {
  var keyCode = keyboardEvent.keyCode;
  var code;
  switch (keyCode) {
    case A_KEYCODE:
      code = KeyCode.A;
      break;
    case C_KEYCODE:
      code = KeyCode.C;
      break;
    case V_KEYCODE:
      code = KeyCode.V;
      break;
    case D_KEYCODE:
      code = KeyCode.D;
      break;
    case Z_KEYCODE:
      code = KeyCode.Z;
      break;
    case Y_KEYCODE:
      code = KeyCode.Y;
      break;
    default:
      code = keyboardEvent.code;
  }
  return code;
}
function isDeleteKey(key, alwaysReturnFalseOnBackspace) {
  if (alwaysReturnFalseOnBackspace === void 0) {
    alwaysReturnFalseOnBackspace = false;
  }
  if (key === KeyCode.DELETE) {
    return true;
  }
  if (!alwaysReturnFalseOnBackspace && key === KeyCode.BACKSPACE) {
    return isMacOsUserAgent();
  }
  return false;
}
function areEventsNear(e1, e2, pixelCount) {
  if (pixelCount === 0) {
    return false;
  }
  var diffX = Math.abs(e1.clientX - e2.clientX);
  var diffY = Math.abs(e1.clientY - e2.clientY);
  return Math.max(diffX, diffY) <= pixelCount;
}
function sortRowNodesByOrder(rowNodes, rowNodeOrder) {
  if (!rowNodes) {
    return false;
  }
  var comparator = function(nodeA, nodeB) {
    var positionA = rowNodeOrder[nodeA.id];
    var positionB = rowNodeOrder[nodeB.id];
    var aHasIndex = positionA !== void 0;
    var bHasIndex = positionB !== void 0;
    var bothNodesAreUserNodes = aHasIndex && bHasIndex;
    var bothNodesAreFillerNodes = !aHasIndex && !bHasIndex;
    if (bothNodesAreUserNodes) {
      return positionA - positionB;
    }
    if (bothNodesAreFillerNodes) {
      return nodeA.__objectId - nodeB.__objectId;
    }
    if (aHasIndex) {
      return 1;
    }
    return -1;
  };
  var rowNodeA;
  var rowNodeB;
  var atLeastOneOutOfOrder = false;
  for (var i = 0; i < rowNodes.length - 1; i++) {
    rowNodeA = rowNodes[i];
    rowNodeB = rowNodes[i + 1];
    if (comparator(rowNodeA, rowNodeB) > 0) {
      atLeastOneOutOfOrder = true;
      break;
    }
  }
  if (atLeastOneOutOfOrder) {
    rowNodes.sort(comparator);
    return true;
  }
  return false;
}
function traverseNodesWithKey(nodes, callback) {
  var keyParts = [];
  recursiveSearchNodes(nodes);
  function recursiveSearchNodes(currentNodes) {
    if (!currentNodes) {
      return;
    }
    currentNodes.forEach(function(node) {
      if (node.group || node.hasChildren()) {
        keyParts.push(node.key);
        var key = keyParts.join("|");
        callback(node, key);
        recursiveSearchNodes(node.childrenAfterGroup);
        keyParts.pop();
      }
    });
  }
}
function convertToSet(list) {
  var set2 = /* @__PURE__ */ new Set();
  list.forEach(function(x) {
    return set2.add(x);
  });
  return set2;
}
function QuerySelector(selector) {
  return querySelectorFunc.bind(this, selector, void 0);
}
function RefSelector(ref) {
  return querySelectorFunc.bind(this, "[ref=" + ref + "]", ref);
}
function querySelectorFunc(selector, refSelector, classPrototype, methodOrAttributeName, index) {
  if (selector === null) {
    console.error("AG Grid: QuerySelector selector should not be null");
    return;
  }
  if (typeof index === "number") {
    console.error("AG Grid: QuerySelector should be on an attribute");
    return;
  }
  addToObjectProps(classPrototype, "querySelectors", {
    attributeName: methodOrAttributeName,
    querySelector: selector,
    refSelector
  });
}
function addToObjectProps(target, key, value) {
  var props = getOrCreateProps(target, getFunctionName(target.constructor));
  if (!props[key]) {
    props[key] = [];
  }
  props[key].push(value);
}
function getOrCreateProps(target, instanceName) {
  if (!target.__agComponentMetaData) {
    target.__agComponentMetaData = {};
  }
  if (!target.__agComponentMetaData[instanceName]) {
    target.__agComponentMetaData[instanceName] = {};
  }
  return target.__agComponentMetaData[instanceName];
}
function getAllowedCharPattern(filterParams) {
  var allowedCharPattern = (filterParams !== null && filterParams !== void 0 ? filterParams : {}).allowedCharPattern;
  return allowedCharPattern !== null && allowedCharPattern !== void 0 ? allowedCharPattern : null;
}
function unwrapUserComp(comp) {
  var compAsAny = comp;
  var isProxy = compAsAny != null && compAsAny.getFrameworkComponentInstance != null;
  return isProxy ? compAsAny.getFrameworkComponentInstance() : comp;
}
function getRowContainerTypeForName(name) {
  switch (name) {
    case RowContainerName.CENTER:
    case RowContainerName.TOP_CENTER:
    case RowContainerName.STICKY_TOP_CENTER:
    case RowContainerName.BOTTOM_CENTER:
      return RowContainerType.CENTER;
    case RowContainerName.LEFT:
    case RowContainerName.TOP_LEFT:
    case RowContainerName.STICKY_TOP_LEFT:
    case RowContainerName.BOTTOM_LEFT:
      return RowContainerType.LEFT;
    case RowContainerName.RIGHT:
    case RowContainerName.TOP_RIGHT:
    case RowContainerName.STICKY_TOP_RIGHT:
    case RowContainerName.BOTTOM_RIGHT:
      return RowContainerType.RIGHT;
    case RowContainerName.FULL_WIDTH:
    case RowContainerName.TOP_FULL_WIDTH:
    case RowContainerName.STICKY_TOP_FULL_WIDTH:
    case RowContainerName.BOTTOM_FULL_WIDTH:
      return RowContainerType.FULL_WIDTH;
    default:
      throw Error("Invalid Row Container Type");
  }
}
function templateFactory() {
  var name = Component.elementGettingCreated.getAttribute("name");
  var cssClasses = RowContainerCtrl.getRowContainerCssClasses(name);
  var res;
  var centerTemplate = name === RowContainerName.CENTER || name === RowContainerName.TOP_CENTER || name === RowContainerName.STICKY_TOP_CENTER || name === RowContainerName.BOTTOM_CENTER;
  if (centerTemplate) {
    res = /* html */
    '<div class="' + cssClasses.viewport + '" ref="eViewport" role="presentation">\n                <div class="' + cssClasses.container + '" ref="eContainer"></div>\n            </div>';
  } else {
    res = /* html */
    '<div class="' + cssClasses.container + '" ref="eContainer"></div>';
  }
  return res;
}
function simpleHttpRequest(params) {
  doOnce(function() {
    return console.warn("AG Grid: Since v29 simpleHttpRequest has been deprecated as it was only meant for use in internal AG Grid documentation examples. Please use the browser fetch api directly.");
  }, "simpleHttpRequest");
  return new AgPromise(function(resolve) {
    var httpRequest = new XMLHttpRequest();
    httpRequest.open("GET", params.url);
    httpRequest.send();
    httpRequest.onreadystatechange = function() {
      if (httpRequest.readyState === 4 && httpRequest.status === 200) {
        resolve(JSON.parse(httpRequest.responseText));
      }
    };
  });
}
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (typeof value == "string") {
    return parseInt(value, 10);
  }
}
function isTrue(value) {
  return value === true || value === "true";
}
var GenericUtils, ColumnKeyCreator, __values$8, __read$z, ObjectUtils, doOnceFlags, executeNextVMTurnFuncs, executeNextVMTurnPending, noop, FunctionUtils, ModuleNames, __read$y, __spreadArray$r, ModuleRegistry, __read$x, __spreadArray$q, Context, __decorate$2J, __param$a, EventService, __decorate$2I, __read$w, __spreadArray$p, instanceIdSequence$4, Column, __decorate$2H, ProvidedColumnGroup, DefaultColumnTypes, ArrayUtils, AG_GRID_STOP_PROPAGATION, PASSIVE_EVENTS$1, supports, isEventSupported, EventUtils, __decorate$2G, BeanStub, __extends$36, __decorate$2F, __param$9, ColumnFactory, __decorate$2E, ColumnGroup, Events, GroupInstanceIdCreator, __extends$35, __decorate$2D, GROUP_AUTO_COLUMN_ID, AutoGroupColService, reUnescapedHtml, HTML_ESCAPES, StringUtils, MapUtils, ColDefUtil, __read$v, __spreadArray$o, PropertyKeys, __assign$n, __read$u, __spreadArray$n, ComponentUtil, __values$7, FuzzyMatchUtils, __decorate$2C, __read$t, __spreadArray$m, VUE_FRAMEWORK_PROPS, GridOptionsValidator, __extends$34, __decorate$2B, __param$8, __rest, __read$s, __spreadArray$l, __values$6, ColumnModel, __extends$33, __decorate$2A, ColumnUtils, __extends$32, __decorate$2z, DisplayedGroupCreator, __extends$31, __decorate$2y, AgStackComponentsRegistry, AriaUtils, isSafari, safariVersion, isChrome, isFirefox, isMacOs, isIOS, invisibleScrollbar, browserScrollbarWidth, BrowserUtils, NumberUtils, __read$r, calculateOrdinal, DateUtils, __values$5, __read$q, rtlNegativeScroll, FOCUSABLE_SELECTOR, FOCUSABLE_EXCLUDE, DomUtils, iconNameClassMap, IconUtils, KeyCode, A_KEYCODE, C_KEYCODE, V_KEYCODE, D_KEYCODE, Z_KEYCODE, Y_KEYCODE, KeyboardUtils, MouseUtils, RowNodeUtils, SetUtils, __assign$m, utils, _, NumberSequence, AgPromiseStatus, AgPromise, Timer, __extends$30, __assign$l, __decorate$2x, TooltipStates, TooltipTrigger, CustomTooltipFeature, CssClassManager, __extends$2$, __decorate$2w, compIdSequence, Component, __extends$2_, __decorate$2v, ReadOnlyFloatingFilter, DateCompWrapper, OptionsFactory, DEFAULT_FILTER_LOCALE_TEXT, __extends$2Z, __assign$k, __decorate$2u, ManagedFocusFeature, __extends$2Y, __decorate$2t, RESIZE_CONTAINER_STYLE, RESIZE_TEMPLATE, PositionableFeature, __extends$2X, __decorate$2s, ProvidedFilter, __extends$2W, __decorate$2r, AgAbstractLabel, __extends$2V, AgAbstractField, __extends$2U, __decorate$2q, TEMPLATE$1, AgPickerField, __extends$2T, __decorate$2p, AgList, __extends$2S, __assign$j, AgSelect, __extends$2R, __decorate$2o, AgAbstractInputField, __extends$2Q, AgCheckbox, __extends$2P, AgRadioButton, __extends$2O, __read$p, __spreadArray$k, SimpleFilterModelFormatter, SimpleFilter, __extends$2N, ScalarFilter, __extends$2M, __assign$i, __decorate$2n, DEFAULT_MIN_YEAR, DEFAULT_MAX_YEAR, DateFilterModelFormatter, DateFilter, __extends$2L, SimpleFloatingFilter, __extends$2K, __decorate$2m, DateFloatingFilter, __extends$2J, __decorate$2l, __read$o, DefaultDateComponent, __extends$2I, AgInputTextField, __extends$2H, AgInputNumberField, __extends$2G, NumberFilterModelFormatter, NumberFilter, __extends$2F, __assign$h, TextFilterModelFormatter, TextFilter, __extends$2E, __decorate$2k, FloatingFilterTextInputService, TextInputFloatingFilter, __extends$2D, FloatingFilterNumberInputService, NumberFloatingFilter, __extends$2C, TextFloatingFilter, TouchListener, __extends$2B, __decorate$2j, SortIndicatorComp, __extends$2A, __decorate$2i, HeaderComp, __extends$2z, __decorate$2h, HeaderGroupComp, __extends$2y, PopupComponent, __extends$2x, __decorate$2g, LargeTextCellEditor, __extends$2w, __decorate$2f, SelectCellEditor, __extends$2v, __decorate$2e, SimpleCellEditor, __extends$2u, TextCellEditorInput, TextCellEditor, __extends$2t, __decorate$2d, ARROW_UP, ARROW_DOWN, AnimateShowChangeCellRenderer, __extends$2s, __decorate$2c, AnimateSlideCellRenderer, __assign$g, RowNode, __extends$2r, __assign$f, __decorate$2b, CheckboxSelectionComponent, __extends$2q, __decorate$2a, __values$4, DragSourceType, VerticalDirection, HorizontalDirection, DragAndDropService, __extends$2p, __decorate$29, RowDragComp, VisibilityStrategy, NonManagedVisibilityStrategy, ManagedVisibilityStrategy, __extends$2o, __assign$e, __decorate$28, GroupCellRendererCtrl, __extends$2n, __decorate$27, GroupCellRenderer, __extends$2m, __decorate$26, LoadingCellRenderer, __extends$2l, LoadingOverlayComponent$1, __extends$2k, NoRowsOverlayComponent$1, __extends$2j, TooltipComponent$1, __extends$2i, NumberCellEditorInput, NumberCellEditor, __extends$2h, DateCellEditorInput, DateCellEditor, __extends$2g, __decorate$25, DateStringCellEditorInput, DateStringCellEditor, __extends$2f, __decorate$24, CheckboxCellRenderer, __extends$2e, __decorate$23, CheckboxCellEditor, __extends$2d, __decorate$22, __read$n, __spreadArray$j, UserComponentRegistry, DateComponent, HeaderComponent, HeaderGroupComponent, CellRendererComponent, CellEditorComponent, InnerRendererComponent, LoadingOverlayComponent, NoRowsOverlayComponent, TooltipComponent, FilterComponent, FloatingFilterComponent, ToolPanelComponent, StatusPanelComponent, FullWidth, FullWidthLoading, FullWidthGroup, FullWidthDetail, FloatingFilterMapper, __extends$2c, __decorate$21, UserComponentFactory, ExcelFactoryMode, __extends$2b, __decorate$20, DragService, AutoScrollService, __extends$2a, __decorate$1$, LIST_ITEM_HOVERED, VirtualListDragFeature, RowHighlightPosition, ClientSideRowModelSteps, __decorate$1_, GridApi, __extends$29, __decorate$1Z, QuickFilterService, __extends$28, __assign$d, __decorate$1Y, FilterManager, __extends$27, AbstractHeaderCellComp, __extends$26, __decorate$1X, HeaderFilterCellComp, __extends$25, __decorate$1W, LayoutCssClasses, LayoutFeature, __extends$24, __assign$c, __decorate$1V, ScrollDirection, ScrollSource, GridBodyScrollFeature, __extends$23, __assign$b, __decorate$1U, __read$m, __spreadArray$i, RowDragFeature, __extends$22, __decorate$1T, RowAnimationCssClasses, CSS_CLASS_FORCE_VERTICAL_SCROLL, CSS_CLASS_CELL_SELECTABLE, CSS_CLASS_COLUMN_MOVING, GridBodyCtrl, SelectionHandleType, CellRangeType, CSS_CELL_RANGE_SELECTED, CSS_CELL_RANGE_CHART, CSS_CELL_RANGE_SINGLE_CELL, CSS_CELL_RANGE_CHART_CATEGORY, CSS_CELL_RANGE_HANDLE, CSS_CELL_RANGE_TOP, CSS_CELL_RANGE_RIGHT, CSS_CELL_RANGE_BOTTOM, CSS_CELL_RANGE_LEFT, CellRangeFeature, __extends$21, CellPositionFeature, __extends$20, CellCustomStyleFeature, __extends$1$, TooltipFeature, __decorate$1S, Beans, __extends$1_, CellMouseListenerFeature, __extends$1Z, CellKeyboardListenerFeature, __extends$1Y, __decorate$1R, DndSourceComp, __extends$1X, __assign$a, CSS_CELL, CSS_AUTO_HEIGHT, CSS_NORMAL_HEIGHT, CSS_CELL_FOCUS, CSS_CELL_FIRST_RIGHT_PINNED, CSS_CELL_LAST_LEFT_PINNED, CSS_CELL_NOT_INLINE_EDITING, CSS_COLUMN_HOVER, CSS_CELL_WRAP_TEXT, instanceIdSequence$3, CellCtrl, __extends$1W, __values$3, __read$l, __spreadArray$h, RowType$1, instanceIdSequence$2, RowCtrl, __extends$1V, __decorate$1Q, __read$k, RowContainerEventsFeature, __extends$1U, __decorate$1P, ViewportSizeFeature, __extends$1T, __decorate$1O, SetPinnedLeftWidthFeature, __extends$1S, __decorate$1N, SetPinnedRightWidthFeature, __extends$1R, __decorate$1M, SetHeightFeature, __extends$1Q, __decorate$1L, DragListenerFeature, __extends$1P, __decorate$1K, CenterWidthFeature, __extends$1O, __decorate$1J, __read$j, __spreadArray$g, RowContainerName, RowContainerType, ContainerCssClasses, ViewportCssClasses, RowContainerCtrl, __extends$1N, __decorate$1I, GRID_BODY_TEMPLATE, GridBodyComp, __extends$1M, __decorate$1H, ScrollVisibleService, __extends$1L, __decorate$1G, MouseEventService, __extends$1K, __assign$9, __decorate$1F, NavigationService, __extends$1J, __decorate$1E, PopupEditorWrapper, __extends$1I, CellComp, __extends$1H, RowComp, __extends$1G, __assign$8, __decorate$1D, RowContainerComp, __decorate$1C, BodyDropPivotTarget, __decorate$1B, __read$i, MoveColumnFeature, __extends$1F, __decorate$1A, BodyDropTarget, __read$h, __spreadArray$f, CssClassApplier, __extends$1E, __decorate$1z, HeaderCellComp, __extends$1D, __decorate$1y, HeaderGroupCellComp, __extends$1C, __decorate$1x, HeaderRowType, HeaderRowComp, __extends$1B, __decorate$1w, instanceIdSequence$1, AbstractHeaderCellCtrl, __extends$1A, __decorate$1v, SetLeftFeature, __extends$1z, __decorate$1u, HoverFeature, __extends$1y, __decorate$1t, HeaderFilterCellCtrl, __extends$1x, __decorate$1s, ResizeFeature, __extends$1w, __decorate$1r, SelectAllFeature, __extends$1v, __decorate$1q, TabGuardClassNames, TabGuardCtrl, __extends$1u, __assign$7, __decorate$1p, __read$g, __spreadArray$e, FocusService, __extends$1t, __decorate$1o, HeaderCellCtrl, __extends$1s, __decorate$1n, GroupResizeFeature, __extends$1r, __decorate$1m, GroupWidthFeature, __extends$1q, __decorate$1l, HeaderGroupCellCtrl, __extends$1p, __decorate$1k, instanceIdSequence, HeaderRowCtrl, __extends$1o, __decorate$1j, __read$f, __spreadArray$d, HeaderRowContainerCtrl, __extends$1n, __decorate$1i, HeaderRowContainerComp, __extends$1m, __decorate$1h, HeaderNavigationDirection, HeaderNavigationService, __extends$1l, __decorate$1g, GridHeaderCtrl, __extends$1k, __decorate$1f, GridHeaderComp, __extends$1j, __decorate$1e, HorizontalResizeService, __extends$1i, __decorate$1d, StandardMenuFactory, __extends$1h, __decorate$1c, TabbedLayout, __extends$1g, __decorate$1b, DEBOUNCE_DELAY, ResizeObserverService, __extends$1f, __decorate$1a, AnimationFrameService, __extends$1e, __decorate$19, AutoWidthCalculator, __extends$1d, __decorate$18, __values$2, __read$e, __spreadArray$c, StickyRowFeature, __extends$1c, __decorate$17, __read$d, __spreadArray$b, __values$1, DEFAULT_KEEP_DETAIL_ROW_COUNT, RowRenderer, RowCtrlCache, __extends$1b, __decorate$16, ValueFormatterService, __extends$1a, __decorate$15, PinnedRowModel, ServerSideTransactionResultStatus, ChangedPath, __extends$19, RowNodeBlock, __extends$18, __decorate$14, __param$7, RowNodeBlockLoader, __extends$17, __decorate$13, PaginationProxy, __extends$16, __decorate$12, StylingService, __extends$15, AgToggleButton, __extends$14, AgInputTextArea, __extends$13, AgInputDateField, __extends$12, AgInputRange, __extends$11, __decorate$11, RichSelectRow, __extends$10, __read$c, __spreadArray$a, TabGuardComp, __extends$$, __decorate$10, VirtualList, __extends$_, __assign$6, __decorate$$, TEMPLATE, AgRichSelect, __extends$Z, __decorate$_, AgSlider, __extends$Y, __decorate$Z, AgGroupComponent, __extends$X, __assign$5, __decorate$Y, AgMenuList, __extends$W, __decorate$X, AgMenuPanel, __extends$V, __decorate$W, AgMenuItemComponent, __extends$U, __decorate$V, AgPanel, __extends$T, __assign$4, __decorate$U, AgDialog, __extends$S, __assign$3, __decorate$T, __read$b, __spreadArray$9, DIRECTION, instanceIdSeq, PopupService, __extends$R, AgAutocompleteRow, __extends$Q, __decorate$S, AgAutocompleteList, __extends$P, __decorate$R, AgAutocomplete, OUTSIDE_ANGULAR_EVENTS, PASSIVE_EVENTS, VanillaFrameworkOverrides, __extends$O, __decorate$Q, __read$a, __spreadArray$8, CellNavigationService, __extends$N, __decorate$P, __param$6, AlignedGridsService, __extends$M, __decorate$O, __param$5, __read$9, SelectionService, __decorate$N, ColumnApi, __extends$L, __decorate$M, ValueService, __extends$K, __decorate$L, __param$4, ExpressionService, __extends$J, __decorate$K, TemplateService, __extends$I, __decorate$J, __param$3, LoggerFactory, Logger, __extends$H, __decorate$I, GridCtrl, __extends$G, __decorate$H, GridComp, __extends$F, __decorate$G, __read$8, __spreadArray$7, SortController, __extends$E, __decorate$F, ColumnHoverService, __extends$D, __decorate$E, ColumnAnimationService, __extends$C, __decorate$D, PaginationAutoPageSizeService, __extends$B, __decorate$C, ValueCache, __extends$A, __decorate$B, SOURCE_PASTE, ChangeDetectionService, __extends$z, __decorate$A, AgComponentUtils, __extends$y, __decorate$z, ComponentMetadataProvider, __extends$x, __decorate$y, __read$7, __spreadArray$6, DEFAULT_ROW_HEIGHT, MIN_COL_WIDTH, MAT_GRID_SIZE, BASE_GRID_SIZE, BALHAM_GRID_SIZE, ALPINE_GRID_SIZE, HARD_CODED_SIZES, SASS_PROPERTY_BUILDER, Environment, __extends$w, __decorate$x, __param$2, RowContainerHeightService, __extends$v, __decorate$w, SelectableService, __extends$u, __decorate$v, PaginationComp, __extends$t, __decorate$u, LoadingType, OverlayWrapperComponent, __extends$s, __decorate$t, RowPositionUtils, __extends$r, __decorate$s, CellPositionUtils, __extends$q, UndoRedoAction, RangeUndoRedoAction, UndoRedoStack, __extends$p, __assign$2, __decorate$r, __read$6, __spreadArray$5, UndoRedoService, __extends$o, __decorate$q, HeaderPositionUtils, __decorate$p, ColumnDefFactory, __decorate$o, RowCssClassCalculator, __extends$n, __decorate$n, RowNodeSorter, __extends$m, __decorate$m, CtrlsService, __extends$l, __decorate$l, CtrlsFactory, __extends$k, __decorate$k, AbstractFakeScrollComp, __extends$j, __decorate$j, FakeHScrollComp, __extends$i, __decorate$i, PinnedWidthService, __extends$h, __decorate$h, RowNodeEventThrottle, __assign$1, __decorate$g, __param$1, __read$5, __spreadArray$4, GridOptionsService, __extends$g, __decorate$f, LocaleService, __extends$f, __decorate$e, FakeVScrollComp, __extends$e, __assign, __decorate$d, __read$4, __spreadArray$3, MONTH_LOCALE_TEXT, MONTH_KEYS, DataTypeService, __extends$d, __decorate$c, ValueParserService, __read$3, __spreadArray$2, Grid, nextGridId, GridCoreCreator, BaseComponentWrapper, DEFAULT_CHART_GROUPS, CHART_TOOL_PANEL_ALLOW_LIST, CHART_TOOLBAR_ALLOW_LIST, CHART_TOOL_PANEL_MENU_OPTIONS, __FORCE_MODULE_DETECTION, BarColumnLabelPlacement, globalObj, __read$2, __spreadArray$1, ClientSideNodeManager, __extends$c, __decorate$b, __read$1, __spreadArray, RecursionType, ClientSideRowModel, __extends$b, __decorate$a, FilterStage, __extends$a, __decorate$9, SortStage, __extends$9, __decorate$8, FlattenStage, __extends$8, __decorate$7, SortService, __extends$7, __decorate$6, FilterService, __extends$6, __decorate$5, __read, ImmutableService, VERSION$2, ClientSideRowModelModule, __extends$5, __decorate$4, InfiniteBlock, __extends$4, __decorate$3, __param, InfiniteCache, __extends$3, __decorate$2, InfiniteRowModel, VERSION$1, InfiniteRowModelModule, BaseCreator, BaseGridSerializingSession, Downloader, __extends$2, LINE_SEPARATOR$1, CsvSerializingSession, __extends$1, __decorate$1, CsvCreator, __extends, __decorate, RowType, GridSerializer, VERSION, CsvExportModule, LINE_SEPARATOR, XmlFactory, __values, crcTable, ZipContainer, AllCommunityModules;
var init_ag_grid_community_auto_esm = __esm({
  "node_modules/ag-grid-community/dist/ag-grid-community.auto.esm.js"() {
    GenericUtils = Object.freeze({
      __proto__: null,
      makeNull,
      exists,
      missing,
      missingOrEmpty,
      toStringOrNull,
      attrToNumber,
      attrToBoolean,
      attrToString,
      referenceCompare,
      jsonEquals,
      defaultComparator,
      values
    });
    ColumnKeyCreator = /** @class */
    function() {
      function ColumnKeyCreator2() {
        this.existingKeys = {};
      }
      ColumnKeyCreator2.prototype.addExistingKeys = function(keys2) {
        for (var i = 0; i < keys2.length; i++) {
          this.existingKeys[keys2[i]] = true;
        }
      };
      ColumnKeyCreator2.prototype.getUniqueKey = function(colId, colField) {
        colId = toStringOrNull(colId);
        var count = 0;
        while (true) {
          var idToTry = void 0;
          if (colId) {
            idToTry = colId;
            if (count !== 0) {
              idToTry += "_" + count;
            }
          } else if (colField) {
            idToTry = colField;
            if (count !== 0) {
              idToTry += "_" + count;
            }
          } else {
            idToTry = count;
          }
          if (!this.existingKeys[idToTry]) {
            this.existingKeys[idToTry] = true;
            return String(idToTry);
          }
          count++;
        }
      };
      return ColumnKeyCreator2;
    }();
    __values$8 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read$z = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    ObjectUtils = Object.freeze({
      __proto__: null,
      iterateObject,
      cloneObject,
      deepCloneObject,
      deepCloneDefinition,
      getProperty,
      setProperty,
      copyPropertiesIfPresent,
      copyPropertyIfPresent,
      getAllKeysInObjects,
      getAllValuesInObject,
      mergeDeep,
      missingOrEmptyObject,
      get,
      set,
      getValueUsingField,
      removeAllReferences,
      isNonNullObject
    });
    doOnceFlags = {};
    executeNextVMTurnFuncs = [];
    executeNextVMTurnPending = false;
    noop = function() {
      return;
    };
    FunctionUtils = Object.freeze({
      __proto__: null,
      doOnce,
      getFunctionName,
      isFunction,
      executeInAWhile,
      executeNextVMTurn,
      executeAfter,
      debounce,
      throttle,
      waitUntil,
      compose,
      callIfPresent,
      noop
    });
    (function(ModuleNames2) {
      ModuleNames2["CommunityCoreModule"] = "@ag-grid-community/core";
      ModuleNames2["InfiniteRowModelModule"] = "@ag-grid-community/infinite-row-model";
      ModuleNames2["ClientSideRowModelModule"] = "@ag-grid-community/client-side-row-model";
      ModuleNames2["CsvExportModule"] = "@ag-grid-community/csv-export";
      ModuleNames2["EnterpriseCoreModule"] = "@ag-grid-enterprise/core";
      ModuleNames2["RowGroupingModule"] = "@ag-grid-enterprise/row-grouping";
      ModuleNames2["ColumnsToolPanelModule"] = "@ag-grid-enterprise/column-tool-panel";
      ModuleNames2["FiltersToolPanelModule"] = "@ag-grid-enterprise/filter-tool-panel";
      ModuleNames2["MenuModule"] = "@ag-grid-enterprise/menu";
      ModuleNames2["SetFilterModule"] = "@ag-grid-enterprise/set-filter";
      ModuleNames2["MultiFilterModule"] = "@ag-grid-enterprise/multi-filter";
      ModuleNames2["StatusBarModule"] = "@ag-grid-enterprise/status-bar";
      ModuleNames2["SideBarModule"] = "@ag-grid-enterprise/side-bar";
      ModuleNames2["RangeSelectionModule"] = "@ag-grid-enterprise/range-selection";
      ModuleNames2["MasterDetailModule"] = "@ag-grid-enterprise/master-detail";
      ModuleNames2["RichSelectModule"] = "@ag-grid-enterprise/rich-select";
      ModuleNames2["GridChartsModule"] = "@ag-grid-enterprise/charts";
      ModuleNames2["ViewportRowModelModule"] = "@ag-grid-enterprise/viewport-row-model";
      ModuleNames2["ServerSideRowModelModule"] = "@ag-grid-enterprise/server-side-row-model";
      ModuleNames2["ExcelExportModule"] = "@ag-grid-enterprise/excel-export";
      ModuleNames2["ClipboardModule"] = "@ag-grid-enterprise/clipboard";
      ModuleNames2["SparklinesModule"] = "@ag-grid-enterprise/sparklines";
      ModuleNames2["AdvancedFilterModule"] = "@ag-grid-enterprise/advanced-filter";
      ModuleNames2["AngularModule"] = "@ag-grid-community/angular";
      ModuleNames2["ReactModule"] = "@ag-grid-community/react";
      ModuleNames2["VueModule"] = "@ag-grid-community/vue";
    })(ModuleNames || (ModuleNames = {}));
    __read$y = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$r = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    ModuleRegistry = /** @class */
    function() {
      function ModuleRegistry2() {
      }
      ModuleRegistry2.register = function(module) {
        ModuleRegistry2.__register(module, true, void 0);
      };
      ModuleRegistry2.registerModules = function(modules) {
        ModuleRegistry2.__registerModules(modules, true, void 0);
      };
      ModuleRegistry2.__register = function(module, moduleBased, gridId) {
        ModuleRegistry2.runVersionChecks(module);
        if (gridId !== void 0) {
          ModuleRegistry2.areGridScopedModules = true;
          if (ModuleRegistry2.gridModulesMap[gridId] === void 0) {
            ModuleRegistry2.gridModulesMap[gridId] = {};
          }
          ModuleRegistry2.gridModulesMap[gridId][module.moduleName] = module;
        } else {
          ModuleRegistry2.globalModulesMap[module.moduleName] = module;
        }
        ModuleRegistry2.setModuleBased(moduleBased);
      };
      ModuleRegistry2.__unRegisterGridModules = function(gridId) {
        delete ModuleRegistry2.gridModulesMap[gridId];
      };
      ModuleRegistry2.__registerModules = function(modules, moduleBased, gridId) {
        ModuleRegistry2.setModuleBased(moduleBased);
        if (!modules) {
          return;
        }
        modules.forEach(function(module) {
          return ModuleRegistry2.__register(module, moduleBased, gridId);
        });
      };
      ModuleRegistry2.isValidModuleVersion = function(module) {
        var _a = __read$y(module.version.split(".") || [], 2), moduleMajor = _a[0], moduleMinor = _a[1];
        var _b = __read$y(ModuleRegistry2.currentModuleVersion.split(".") || [], 2), currentModuleMajor = _b[0], currentModuleMinor = _b[1];
        return moduleMajor === currentModuleMajor && moduleMinor === currentModuleMinor;
      };
      ModuleRegistry2.runVersionChecks = function(module) {
        if (!ModuleRegistry2.currentModuleVersion) {
          ModuleRegistry2.currentModuleVersion = module.version;
        }
        if (!module.version) {
          console.error("AG Grid: You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. '" + module.moduleName + "' is incompatible. Please update all modules to the same version.");
        } else if (!ModuleRegistry2.isValidModuleVersion(module)) {
          console.error("AG Grid: You are using incompatible versions of AG Grid modules. Major and minor versions should always match across modules. '" + module.moduleName + "' is version " + module.version + " but the other modules are version " + this.currentModuleVersion + ". Please update all modules to the same version.");
        }
        if (module.validate) {
          var result = module.validate();
          if (!result.isValid) {
            var errorResult = result;
            console.error("AG Grid: " + errorResult.message);
          }
        }
      };
      ModuleRegistry2.setModuleBased = function(moduleBased) {
        if (ModuleRegistry2.moduleBased === void 0) {
          ModuleRegistry2.moduleBased = moduleBased;
        } else {
          if (ModuleRegistry2.moduleBased !== moduleBased) {
            doOnce(function() {
              console.warn("AG Grid: You are mixing modules (i.e. @ag-grid-community/core) and packages (ag-grid-community) - you can only use one or the other of these mechanisms.");
              console.warn("Please see https://www.ag-grid.com/javascript-grid/packages-modules/ for more information.");
            }, "ModulePackageCheck");
          }
        }
      };
      ModuleRegistry2.__setIsBundled = function() {
        ModuleRegistry2.isBundled = true;
      };
      ModuleRegistry2.__assertRegistered = function(moduleName, reason, gridId) {
        var _a;
        if (this.__isRegistered(moduleName, gridId)) {
          return true;
        }
        var warningKey = reason + moduleName;
        var warningMessage;
        if (ModuleRegistry2.isBundled) {
          {
            warningMessage = "AG Grid: unable to use " + reason + ` as 'ag-grid-enterprise' has not been loaded. Check you are using the Enterprise bundle:
        
        <script src="https://cdn.jsdelivr.net/npm/ag-grid-enterprise@AG_GRID_VERSION/dist/ag-grid-enterprise.min.js"><\/script>
        
For more info see: https://ag-grid.com/javascript-data-grid/getting-started/#getting-started-with-ag-grid-enterprise`;
          }
        } else if (ModuleRegistry2.moduleBased || ModuleRegistry2.moduleBased === void 0) {
          var modName = (_a = Object.entries(ModuleNames).find(function(_a2) {
            var _b = __read$y(_a2, 2);
            _b[0];
            var v = _b[1];
            return v === moduleName;
          })) === null || _a === void 0 ? void 0 : _a[0];
          warningMessage = "AG Grid: unable to use " + reason + " as the " + modName + " is not registered" + (ModuleRegistry2.areGridScopedModules ? " for gridId: " + gridId : "") + ". Check if you have registered the module:\n           \n    import { ModuleRegistry } from '@ag-grid-community/core';\n    import { " + modName + " } from '" + moduleName + "';\n    \n    ModuleRegistry.registerModules([ " + modName + " ]);\n\nFor more info see: https://www.ag-grid.com/javascript-grid/modules/";
        } else {
          warningMessage = "AG Grid: unable to use " + reason + " as package 'ag-grid-enterprise' has not been imported. Check that you have imported the package:\n            \n    import 'ag-grid-enterprise';\n            \nFor more info see: https://www.ag-grid.com/javascript-grid/packages/";
        }
        doOnce(function() {
          console.warn(warningMessage);
        }, warningKey);
        return false;
      };
      ModuleRegistry2.__isRegistered = function(moduleName, gridId) {
        var _a;
        return !!ModuleRegistry2.globalModulesMap[moduleName] || !!((_a = ModuleRegistry2.gridModulesMap[gridId]) === null || _a === void 0 ? void 0 : _a[moduleName]);
      };
      ModuleRegistry2.__getRegisteredModules = function(gridId) {
        return __spreadArray$r(__spreadArray$r([], __read$y(values(ModuleRegistry2.globalModulesMap))), __read$y(values(ModuleRegistry2.gridModulesMap[gridId] || {})));
      };
      ModuleRegistry2.__getGridRegisteredModules = function(gridId) {
        var _a;
        return values((_a = ModuleRegistry2.gridModulesMap[gridId]) !== null && _a !== void 0 ? _a : {}) || [];
      };
      ModuleRegistry2.__isPackageBased = function() {
        return !ModuleRegistry2.moduleBased;
      };
      ModuleRegistry2.globalModulesMap = {};
      ModuleRegistry2.gridModulesMap = {};
      ModuleRegistry2.areGridScopedModules = false;
      return ModuleRegistry2;
    }();
    __read$x = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$q = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Context = /** @class */
    function() {
      function Context2(params, logger) {
        this.beanWrappers = {};
        this.destroyed = false;
        if (!params || !params.beanClasses) {
          return;
        }
        this.contextParams = params;
        this.logger = logger;
        this.logger.log(">> creating ag-Application Context");
        this.createBeans();
        var beanInstances = this.getBeanInstances();
        this.wireBeans(beanInstances);
        this.logger.log(">> ag-Application Context ready - component is alive");
      }
      Context2.prototype.getBeanInstances = function() {
        return values(this.beanWrappers).map(function(beanEntry) {
          return beanEntry.beanInstance;
        });
      };
      Context2.prototype.createBean = function(bean, afterPreCreateCallback) {
        if (!bean) {
          throw Error("Can't wire to bean since it is null");
        }
        this.wireBeans([bean], afterPreCreateCallback);
        return bean;
      };
      Context2.prototype.wireBeans = function(beanInstances, afterPreCreateCallback) {
        this.autoWireBeans(beanInstances);
        this.methodWireBeans(beanInstances);
        this.callLifeCycleMethods(beanInstances, "preConstructMethods");
        if (exists(afterPreCreateCallback)) {
          beanInstances.forEach(afterPreCreateCallback);
        }
        this.callLifeCycleMethods(beanInstances, "postConstructMethods");
      };
      Context2.prototype.createBeans = function() {
        var _this = this;
        this.contextParams.beanClasses.forEach(this.createBeanWrapper.bind(this));
        iterateObject(this.beanWrappers, function(key, beanEntry) {
          var constructorParamsMeta;
          if (beanEntry.bean.__agBeanMetaData && beanEntry.bean.__agBeanMetaData.autowireMethods && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
            constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
          }
          var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
          var newInstance = new (beanEntry.bean.bind.apply(beanEntry.bean, __spreadArray$q([null], __read$x(constructorParams))))();
          beanEntry.beanInstance = newInstance;
        });
        var createdBeanNames = Object.keys(this.beanWrappers).join(", ");
        this.logger.log("created beans: " + createdBeanNames);
      };
      Context2.prototype.createBeanWrapper = function(BeanClass) {
        var metaData = BeanClass.__agBeanMetaData;
        if (!metaData) {
          var beanName = void 0;
          if (BeanClass.prototype.constructor) {
            beanName = getFunctionName(BeanClass.prototype.constructor);
          } else {
            beanName = "" + BeanClass;
          }
          console.error("Context item " + beanName + " is not a bean");
          return;
        }
        var beanEntry = {
          bean: BeanClass,
          beanInstance: null,
          beanName: metaData.beanName
        };
        this.beanWrappers[metaData.beanName] = beanEntry;
      };
      Context2.prototype.autoWireBeans = function(beanInstances) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
            var attributes = metaData.agClassAttributes;
            if (!attributes) {
              return;
            }
            attributes.forEach(function(attribute) {
              var otherBean = _this.lookupBeanInstance(beanName, attribute.beanName, attribute.optional);
              beanInstance[attribute.attributeName] = otherBean;
            });
          });
        });
      };
      Context2.prototype.methodWireBeans = function(beanInstances) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          _this.forEachMetaDataInHierarchy(beanInstance, function(metaData, beanName) {
            iterateObject(metaData.autowireMethods, function(methodName, wireParams) {
              if (methodName === "agConstructor") {
                return;
              }
              var initParams = _this.getBeansForParameters(wireParams, beanName);
              beanInstance[methodName].apply(beanInstance, initParams);
            });
          });
        });
      };
      Context2.prototype.forEachMetaDataInHierarchy = function(beanInstance, callback) {
        var prototype = Object.getPrototypeOf(beanInstance);
        while (prototype != null) {
          var constructor = prototype.constructor;
          if (constructor.hasOwnProperty("__agBeanMetaData")) {
            var metaData = constructor.__agBeanMetaData;
            var beanName = this.getBeanName(constructor);
            callback(metaData, beanName);
          }
          prototype = Object.getPrototypeOf(prototype);
        }
      };
      Context2.prototype.getBeanName = function(constructor) {
        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
          return constructor.__agBeanMetaData.beanName;
        }
        var constructorString = constructor.toString();
        var beanName = constructorString.substring(9, constructorString.indexOf("("));
        return beanName;
      };
      Context2.prototype.getBeansForParameters = function(parameters, beanName) {
        var _this = this;
        var beansList = [];
        if (parameters) {
          iterateObject(parameters, function(paramIndex, otherBeanName) {
            var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
            beansList[Number(paramIndex)] = otherBean;
          });
        }
        return beansList;
      };
      Context2.prototype.lookupBeanInstance = function(wiringBean, beanName, optional) {
        if (optional === void 0) {
          optional = false;
        }
        if (this.destroyed) {
          this.logger.log("AG Grid: bean reference " + beanName + " is used after the grid is destroyed!");
          return null;
        }
        if (beanName === "context") {
          return this;
        }
        if (this.contextParams.providedBeanInstances && this.contextParams.providedBeanInstances.hasOwnProperty(beanName)) {
          return this.contextParams.providedBeanInstances[beanName];
        }
        var beanEntry = this.beanWrappers[beanName];
        if (beanEntry) {
          return beanEntry.beanInstance;
        }
        if (!optional) {
          console.error("AG Grid: unable to find bean reference " + beanName + " while initialising " + wiringBean);
        }
        return null;
      };
      Context2.prototype.callLifeCycleMethods = function(beanInstances, lifeCycleMethod) {
        var _this = this;
        beanInstances.forEach(function(beanInstance) {
          return _this.callLifeCycleMethodsOnBean(beanInstance, lifeCycleMethod);
        });
      };
      Context2.prototype.callLifeCycleMethodsOnBean = function(beanInstance, lifeCycleMethod, methodToIgnore) {
        var allMethods = {};
        this.forEachMetaDataInHierarchy(beanInstance, function(metaData) {
          var methods = metaData[lifeCycleMethod];
          if (methods) {
            methods.forEach(function(methodName) {
              if (methodName != methodToIgnore) {
                allMethods[methodName] = true;
              }
            });
          }
        });
        var allMethodsList = Object.keys(allMethods);
        allMethodsList.forEach(function(methodName) {
          return beanInstance[methodName]();
        });
      };
      Context2.prototype.getBean = function(name) {
        return this.lookupBeanInstance("getBean", name, true);
      };
      Context2.prototype.destroy = function() {
        if (this.destroyed) {
          return;
        }
        this.destroyed = true;
        this.logger.log(">> Shutting down ag-Application Context");
        var beanInstances = this.getBeanInstances();
        this.destroyBeans(beanInstances);
        this.contextParams.providedBeanInstances = null;
        ModuleRegistry.__unRegisterGridModules(this.contextParams.gridId);
        this.logger.log(">> ag-Application Context shut down - component is dead");
      };
      Context2.prototype.destroyBean = function(bean) {
        if (!bean) {
          return;
        }
        this.destroyBeans([bean]);
      };
      Context2.prototype.destroyBeans = function(beans) {
        var _this = this;
        if (!beans) {
          return [];
        }
        beans.forEach(function(bean) {
          _this.callLifeCycleMethodsOnBean(bean, "preDestroyMethods", "destroy");
          var beanAny = bean;
          if (typeof beanAny.destroy === "function") {
            beanAny.destroy();
          }
        });
        return [];
      };
      Context2.prototype.isDestroyed = function() {
        return this.destroyed;
      };
      Context2.prototype.getGridId = function() {
        return this.contextParams.gridId;
      };
      return Context2;
    }();
    __decorate$2J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$a = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    EventService = /** @class */
    function() {
      function EventService2() {
        this.allSyncListeners = /* @__PURE__ */ new Map();
        this.allAsyncListeners = /* @__PURE__ */ new Map();
        this.globalSyncListeners = /* @__PURE__ */ new Set();
        this.globalAsyncListeners = /* @__PURE__ */ new Set();
        this.asyncFunctionsQueue = [];
        this.scheduled = false;
        this.firedEvents = {};
      }
      EventService2.prototype.setBeans = function(loggerFactory, gridOptionsService, frameworkOverrides, globalEventListener, globalSyncEventListener) {
        if (globalEventListener === void 0) {
          globalEventListener = null;
        }
        if (globalSyncEventListener === void 0) {
          globalSyncEventListener = null;
        }
        this.frameworkOverrides = frameworkOverrides;
        this.gridOptionsService = gridOptionsService;
        if (globalEventListener) {
          var async = gridOptionsService.useAsyncEvents();
          this.addGlobalListener(globalEventListener, async);
        }
        if (globalSyncEventListener) {
          this.addGlobalListener(globalSyncEventListener, false);
        }
      };
      EventService2.prototype.getListeners = function(eventType, async, autoCreateListenerCollection) {
        var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
        var listeners = listenerMap.get(eventType);
        if (!listeners && autoCreateListenerCollection) {
          listeners = /* @__PURE__ */ new Set();
          listenerMap.set(eventType, listeners);
        }
        return listeners;
      };
      EventService2.prototype.noRegisteredListenersExist = function() {
        return this.allSyncListeners.size === 0 && this.allAsyncListeners.size === 0 && this.globalSyncListeners.size === 0 && this.globalAsyncListeners.size === 0;
      };
      EventService2.prototype.addEventListener = function(eventType, listener, async) {
        if (async === void 0) {
          async = false;
        }
        this.getListeners(eventType, async, true).add(listener);
      };
      EventService2.prototype.removeEventListener = function(eventType, listener, async) {
        if (async === void 0) {
          async = false;
        }
        var listeners = this.getListeners(eventType, async, false);
        if (!listeners) {
          return;
        }
        listeners.delete(listener);
        if (listeners.size === 0) {
          var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
          listenerMap.delete(eventType);
        }
      };
      EventService2.prototype.addGlobalListener = function(listener, async) {
        if (async === void 0) {
          async = false;
        }
        (async ? this.globalAsyncListeners : this.globalSyncListeners).add(listener);
      };
      EventService2.prototype.removeGlobalListener = function(listener, async) {
        if (async === void 0) {
          async = false;
        }
        (async ? this.globalAsyncListeners : this.globalSyncListeners).delete(listener);
      };
      EventService2.prototype.dispatchEvent = function(event) {
        var agEvent = event;
        if (this.gridOptionsService) {
          var _a = this.gridOptionsService, api = _a.api, columnApi = _a.columnApi, context = _a.context;
          agEvent.api = api;
          agEvent.columnApi = columnApi;
          agEvent.context = context;
        }
        this.dispatchToListeners(agEvent, true);
        this.dispatchToListeners(agEvent, false);
        this.firedEvents[agEvent.type] = true;
      };
      EventService2.prototype.dispatchEventOnce = function(event) {
        if (!this.firedEvents[event.type]) {
          this.dispatchEvent(event);
        }
      };
      EventService2.prototype.dispatchToListeners = function(event, async) {
        var _this = this;
        var eventType = event.type;
        if (async && "event" in event) {
          var browserEvent = event.event;
          if (browserEvent instanceof Event) {
            event.eventPath = browserEvent.composedPath();
          }
        }
        var processEventListeners = function(listeners2) {
          return listeners2.forEach(function(listener) {
            if (async) {
              _this.dispatchAsync(function() {
                return listener(event);
              });
            } else {
              listener(event);
            }
          });
        };
        var listeners = new Set(this.getListeners(eventType, async, false));
        if (listeners.size > 0) {
          processEventListeners(listeners);
        }
        var globalListeners = new Set(async ? this.globalAsyncListeners : this.globalSyncListeners);
        globalListeners.forEach(function(listener) {
          if (async) {
            _this.dispatchAsync(function() {
              return _this.frameworkOverrides.dispatchEvent(eventType, function() {
                return listener(eventType, event);
              }, true);
            });
          } else {
            _this.frameworkOverrides.dispatchEvent(eventType, function() {
              return listener(eventType, event);
            }, true);
          }
        });
      };
      EventService2.prototype.dispatchAsync = function(func) {
        this.asyncFunctionsQueue.push(func);
        if (!this.scheduled) {
          window.setTimeout(this.flushAsyncQueue.bind(this), 0);
          this.scheduled = true;
        }
      };
      EventService2.prototype.flushAsyncQueue = function() {
        this.scheduled = false;
        var queueCopy = this.asyncFunctionsQueue.slice();
        this.asyncFunctionsQueue = [];
        queueCopy.forEach(function(func) {
          return func();
        });
      };
      __decorate$2J([
        __param$a(0, Qualifier("loggerFactory")),
        __param$a(1, Qualifier("gridOptionsService")),
        __param$a(2, Qualifier("frameworkOverrides")),
        __param$a(3, Qualifier("globalEventListener")),
        __param$a(4, Qualifier("globalSyncEventListener"))
      ], EventService2.prototype, "setBeans", null);
      EventService2 = __decorate$2J([
        Bean("eventService")
      ], EventService2);
      return EventService2;
    }();
    __decorate$2I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$w = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$p = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    instanceIdSequence$4 = 0;
    Column = /** @class */
    function() {
      function Column2(colDef, userProvidedColDef, colId, primary) {
        this.instanceId = getNextColInstanceId();
        this.autoHeaderHeight = null;
        this.moving = false;
        this.menuVisible = false;
        this.lastLeftPinned = false;
        this.firstRightPinned = false;
        this.filterActive = false;
        this.eventService = new EventService();
        this.tooltipEnabled = false;
        this.rowGroupActive = false;
        this.pivotActive = false;
        this.aggregationActive = false;
        this.colDef = colDef;
        this.userProvidedColDef = userProvidedColDef;
        this.colId = colId;
        this.primary = primary;
        this.setState(colDef);
      }
      Column2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      Column2.prototype.setState = function(colDef) {
        if (colDef.sort !== void 0) {
          if (colDef.sort === "asc" || colDef.sort === "desc") {
            this.sort = colDef.sort;
          }
        } else {
          if (colDef.initialSort === "asc" || colDef.initialSort === "desc") {
            this.sort = colDef.initialSort;
          }
        }
        var sortIndex = attrToNumber(colDef.sortIndex);
        var initialSortIndex = attrToNumber(colDef.initialSortIndex);
        if (sortIndex !== void 0) {
          if (sortIndex !== null) {
            this.sortIndex = sortIndex;
          }
        } else {
          if (initialSortIndex !== null) {
            this.sortIndex = initialSortIndex;
          }
        }
        var hide = attrToBoolean(colDef.hide);
        var initialHide = attrToBoolean(colDef.initialHide);
        if (hide !== void 0) {
          this.visible = !hide;
        } else {
          this.visible = !initialHide;
        }
        if (colDef.pinned !== void 0) {
          this.setPinned(colDef.pinned);
        } else {
          this.setPinned(colDef.initialPinned);
        }
        var flex = attrToNumber(colDef.flex);
        var initialFlex = attrToNumber(colDef.initialFlex);
        if (flex !== void 0) {
          this.flex = flex;
        } else if (initialFlex !== void 0) {
          this.flex = initialFlex;
        }
      };
      Column2.prototype.setColDef = function(colDef, userProvidedColDef) {
        this.colDef = colDef;
        this.userProvidedColDef = userProvidedColDef;
        this.initMinAndMaxWidths();
        this.initDotNotation();
        this.eventService.dispatchEvent(this.createColumnEvent("colDefChanged", "api"));
      };
      Column2.prototype.getUserProvidedColDef = function() {
        return this.userProvidedColDef;
      };
      Column2.prototype.setParent = function(parent) {
        this.parent = parent;
      };
      Column2.prototype.getParent = function() {
        return this.parent;
      };
      Column2.prototype.setOriginalParent = function(originalParent) {
        this.originalParent = originalParent;
      };
      Column2.prototype.getOriginalParent = function() {
        return this.originalParent;
      };
      Column2.prototype.initialise = function() {
        this.initMinAndMaxWidths();
        this.resetActualWidth("gridInitializing");
        this.initDotNotation();
        this.initTooltip();
        this.validate();
      };
      Column2.prototype.initDotNotation = function() {
        var suppressDotNotation = this.gridOptionsService.is("suppressFieldDotNotation");
        this.fieldContainsDots = exists(this.colDef.field) && this.colDef.field.indexOf(".") >= 0 && !suppressDotNotation;
        this.tooltipFieldContainsDots = exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf(".") >= 0 && !suppressDotNotation;
      };
      Column2.prototype.initMinAndMaxWidths = function() {
        var colDef = this.colDef;
        this.minWidth = this.columnUtils.calculateColMinWidth(colDef);
        this.maxWidth = this.columnUtils.calculateColMaxWidth(colDef);
      };
      Column2.prototype.initTooltip = function() {
        this.tooltipEnabled = exists(this.colDef.tooltipField) || exists(this.colDef.tooltipValueGetter) || exists(this.colDef.tooltipComponent);
      };
      Column2.prototype.resetActualWidth = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var initialWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
        this.setActualWidth(initialWidth, source, true);
      };
      Column2.prototype.isEmptyGroup = function() {
        return false;
      };
      Column2.prototype.isRowGroupDisplayed = function(colId) {
        if (missing(this.colDef) || missing(this.colDef.showRowGroup)) {
          return false;
        }
        var showingAllGroups = this.colDef.showRowGroup === true;
        var showingThisGroup = this.colDef.showRowGroup === colId;
        return showingAllGroups || showingThisGroup;
      };
      Column2.prototype.isPrimary = function() {
        return this.primary;
      };
      Column2.prototype.isFilterAllowed = function() {
        var filterDefined = !!this.colDef.filter;
        return filterDefined;
      };
      Column2.prototype.isFieldContainsDots = function() {
        return this.fieldContainsDots;
      };
      Column2.prototype.isTooltipEnabled = function() {
        return this.tooltipEnabled;
      };
      Column2.prototype.isTooltipFieldContainsDots = function() {
        return this.tooltipFieldContainsDots;
      };
      Column2.prototype.validate = function() {
        var colDefAny = this.colDef;
        function warnOnce(msg, key, obj) {
          doOnce(function() {
            if (obj) {
              console.warn(msg, obj);
            } else {
              doOnce(function() {
                return console.warn(msg);
              }, key);
            }
          }, key);
        }
        var usingCSRM = this.gridOptionsService.isRowModelType("clientSide");
        if (usingCSRM && !ModuleRegistry.__isRegistered(ModuleNames.RowGroupingModule, this.gridOptionsService.getGridId())) {
          var rowGroupingItems = ["enableRowGroup", "rowGroup", "rowGroupIndex", "enablePivot", "enableValue", "pivot", "pivotIndex", "aggFunc"];
          var itemsUsed = rowGroupingItems.filter(function(x) {
            return exists(colDefAny[x]);
          });
          if (itemsUsed.length > 0) {
            ModuleRegistry.__assertRegistered(ModuleNames.RowGroupingModule, itemsUsed.map(function(i) {
              return "colDef." + i;
            }).join(", "), this.gridOptionsService.getGridId());
          }
        }
        if (this.colDef.cellEditor === "agRichSelect" || this.colDef.cellEditor === "agRichSelectCellEditor") {
          ModuleRegistry.__assertRegistered(ModuleNames.RichSelectModule, this.colDef.cellEditor, this.gridOptionsService.getGridId());
        }
        if (this.gridOptionsService.is("treeData")) {
          var itemsNotAllowedWithTreeData = ["rowGroup", "rowGroupIndex", "pivot", "pivotIndex"];
          var itemsUsed = itemsNotAllowedWithTreeData.filter(function(x) {
            return exists(colDefAny[x]);
          });
          if (itemsUsed.length > 0) {
            warnOnce("AG Grid: " + itemsUsed.join() + " is not possible when doing tree data, your column definition should not have " + itemsUsed.join(), "TreeDataCannotRowGroup");
          }
        }
        if (exists(colDefAny.menuTabs)) {
          if (Array.isArray(colDefAny.menuTabs)) {
            var communityMenuTabs_1 = ["filterMenuTab"];
            var enterpriseMenuTabs_1 = ["columnsMenuTab", "generalMenuTab"];
            var itemsUsed = enterpriseMenuTabs_1.filter(function(x) {
              return colDefAny.menuTabs.includes(x);
            });
            if (itemsUsed.length > 0) {
              ModuleRegistry.__assertRegistered(ModuleNames.MenuModule, "menuTab(s): " + itemsUsed.map(function(t) {
                return "'" + t + "'";
              }).join(), this.gridOptionsService.getGridId());
            }
            colDefAny.menuTabs.forEach(function(tab) {
              if (!enterpriseMenuTabs_1.includes(tab) && !communityMenuTabs_1.includes(tab)) {
                warnOnce("AG Grid: '" + tab + "' is not valid for 'colDef.menuTabs'. Valid values are: " + __spreadArray$p(__spreadArray$p([], __read$w(communityMenuTabs_1)), __read$w(enterpriseMenuTabs_1)).map(function(t) {
                  return "'" + t + "'";
                }).join() + ".", "wrongValue_menuTabs_" + tab);
              }
            });
          } else {
            warnOnce("AG Grid: The typeof 'colDef.menuTabs' should be an array not:" + typeof colDefAny.menuTabs, "wrongType_menuTabs");
          }
        }
        if (exists(colDefAny.columnsMenuParams)) {
          ModuleRegistry.__assertRegistered(ModuleNames.MenuModule, "columnsMenuParams", this.gridOptionsService.getGridId());
        }
        if (exists(colDefAny.columnsMenuParams)) {
          ModuleRegistry.__assertRegistered(ModuleNames.ColumnsToolPanelModule, "columnsMenuParams", this.gridOptionsService.getGridId());
        }
        if (exists(this.colDef.width) && typeof this.colDef.width !== "number") {
          warnOnce("AG Grid: colDef.width should be a number, not " + typeof this.colDef.width, "ColumnCheck");
        }
        if (exists(colDefAny.columnGroupShow) && colDefAny.columnGroupShow !== "closed" && colDefAny.columnGroupShow !== "open") {
          warnOnce("AG Grid: '" + colDefAny.columnGroupShow + "' is not valid for columnGroupShow. Valid values are 'open', 'closed', undefined, null", "columnGroupShow_invalid");
        }
      };
      Column2.prototype.addEventListener = function(eventType, listener) {
        this.eventService.addEventListener(eventType, listener);
      };
      Column2.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
      };
      Column2.prototype.createColumnFunctionCallbackParams = function(rowNode) {
        return {
          node: rowNode,
          data: rowNode.data,
          column: this,
          colDef: this.colDef,
          context: this.gridOptionsService.context,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi
        };
      };
      Column2.prototype.isSuppressNavigable = function(rowNode) {
        if (typeof this.colDef.suppressNavigable === "boolean") {
          return this.colDef.suppressNavigable;
        }
        if (typeof this.colDef.suppressNavigable === "function") {
          var params = this.createColumnFunctionCallbackParams(rowNode);
          var userFunc = this.colDef.suppressNavigable;
          return userFunc(params);
        }
        return false;
      };
      Column2.prototype.isCellEditable = function(rowNode) {
        if (rowNode.group && !this.gridOptionsService.is("enableGroupEdit")) {
          return false;
        }
        return this.isColumnFunc(rowNode, this.colDef.editable);
      };
      Column2.prototype.isSuppressFillHandle = function() {
        return !!attrToBoolean(this.colDef.suppressFillHandle);
      };
      Column2.prototype.isAutoHeight = function() {
        return !!attrToBoolean(this.colDef.autoHeight);
      };
      Column2.prototype.isAutoHeaderHeight = function() {
        return !!attrToBoolean(this.colDef.autoHeaderHeight);
      };
      Column2.prototype.isRowDrag = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.rowDrag);
      };
      Column2.prototype.isDndSource = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.dndSource);
      };
      Column2.prototype.isCellCheckboxSelection = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef.checkboxSelection);
      };
      Column2.prototype.isSuppressPaste = function(rowNode) {
        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
      };
      Column2.prototype.isResizable = function() {
        return !!attrToBoolean(this.colDef.resizable);
      };
      Column2.prototype.isColumnFunc = function(rowNode, value) {
        if (typeof value === "boolean") {
          return value;
        }
        if (typeof value === "function") {
          var params = this.createColumnFunctionCallbackParams(rowNode);
          var editableFunc = value;
          return editableFunc(params);
        }
        return false;
      };
      Column2.prototype.setMoving = function(moving, source) {
        if (source === void 0) {
          source = "api";
        }
        this.moving = moving;
        this.eventService.dispatchEvent(this.createColumnEvent("movingChanged", source));
      };
      Column2.prototype.createColumnEvent = function(type, source) {
        return {
          type,
          column: this,
          columns: [this],
          source,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context
        };
      };
      Column2.prototype.isMoving = function() {
        return this.moving;
      };
      Column2.prototype.getSort = function() {
        return this.sort;
      };
      Column2.prototype.setSort = function(sort, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.sort !== sort) {
          this.sort = sort;
          this.eventService.dispatchEvent(this.createColumnEvent("sortChanged", source));
        }
        this.dispatchStateUpdatedEvent("sort");
      };
      Column2.prototype.setMenuVisible = function(visible, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.menuVisible !== visible) {
          this.menuVisible = visible;
          this.eventService.dispatchEvent(this.createColumnEvent("menuVisibleChanged", source));
        }
      };
      Column2.prototype.isMenuVisible = function() {
        return this.menuVisible;
      };
      Column2.prototype.isSortAscending = function() {
        return this.sort === "asc";
      };
      Column2.prototype.isSortDescending = function() {
        return this.sort === "desc";
      };
      Column2.prototype.isSortNone = function() {
        return missing(this.sort);
      };
      Column2.prototype.isSorting = function() {
        return exists(this.sort);
      };
      Column2.prototype.getSortIndex = function() {
        return this.sortIndex;
      };
      Column2.prototype.setSortIndex = function(sortOrder) {
        this.sortIndex = sortOrder;
        this.dispatchStateUpdatedEvent("sortIndex");
      };
      Column2.prototype.setAggFunc = function(aggFunc) {
        this.aggFunc = aggFunc;
        this.dispatchStateUpdatedEvent("aggFunc");
      };
      Column2.prototype.getAggFunc = function() {
        return this.aggFunc;
      };
      Column2.prototype.getLeft = function() {
        return this.left;
      };
      Column2.prototype.getOldLeft = function() {
        return this.oldLeft;
      };
      Column2.prototype.getRight = function() {
        return this.left + this.actualWidth;
      };
      Column2.prototype.setLeft = function(left, source) {
        if (source === void 0) {
          source = "api";
        }
        this.oldLeft = this.left;
        if (this.left !== left) {
          this.left = left;
          this.eventService.dispatchEvent(this.createColumnEvent("leftChanged", source));
        }
      };
      Column2.prototype.isFilterActive = function() {
        return this.filterActive;
      };
      Column2.prototype.setFilterActive = function(active, source, additionalEventAttributes) {
        if (source === void 0) {
          source = "api";
        }
        if (this.filterActive !== active) {
          this.filterActive = active;
          this.eventService.dispatchEvent(this.createColumnEvent("filterActiveChanged", source));
        }
        var filterChangedEvent = this.createColumnEvent("filterChanged", source);
        if (additionalEventAttributes) {
          mergeDeep(filterChangedEvent, additionalEventAttributes);
        }
        this.eventService.dispatchEvent(filterChangedEvent);
      };
      Column2.prototype.isHovered = function() {
        return this.columnHoverService.isHovered(this);
      };
      Column2.prototype.setPinned = function(pinned) {
        if (pinned === true || pinned === "left") {
          this.pinned = "left";
        } else if (pinned === "right") {
          this.pinned = "right";
        } else {
          this.pinned = null;
        }
        this.dispatchStateUpdatedEvent("pinned");
      };
      Column2.prototype.setFirstRightPinned = function(firstRightPinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.firstRightPinned !== firstRightPinned) {
          this.firstRightPinned = firstRightPinned;
          this.eventService.dispatchEvent(this.createColumnEvent("firstRightPinnedChanged", source));
        }
      };
      Column2.prototype.setLastLeftPinned = function(lastLeftPinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.lastLeftPinned !== lastLeftPinned) {
          this.lastLeftPinned = lastLeftPinned;
          this.eventService.dispatchEvent(this.createColumnEvent("lastLeftPinnedChanged", source));
        }
      };
      Column2.prototype.isFirstRightPinned = function() {
        return this.firstRightPinned;
      };
      Column2.prototype.isLastLeftPinned = function() {
        return this.lastLeftPinned;
      };
      Column2.prototype.isPinned = function() {
        return this.pinned === "left" || this.pinned === "right";
      };
      Column2.prototype.isPinnedLeft = function() {
        return this.pinned === "left";
      };
      Column2.prototype.isPinnedRight = function() {
        return this.pinned === "right";
      };
      Column2.prototype.getPinned = function() {
        return this.pinned;
      };
      Column2.prototype.setVisible = function(visible, source) {
        if (source === void 0) {
          source = "api";
        }
        var newValue = visible === true;
        if (this.visible !== newValue) {
          this.visible = newValue;
          this.eventService.dispatchEvent(this.createColumnEvent("visibleChanged", source));
        }
        this.dispatchStateUpdatedEvent("hide");
      };
      Column2.prototype.isVisible = function() {
        return this.visible;
      };
      Column2.prototype.isSpanHeaderHeight = function() {
        var colDef = this.getColDef();
        return !colDef.suppressSpanHeaderHeight && !colDef.autoHeaderHeight;
      };
      Column2.prototype.getColDef = function() {
        return this.colDef;
      };
      Column2.prototype.getColumnGroupShow = function() {
        return this.colDef.columnGroupShow;
      };
      Column2.prototype.getColId = function() {
        return this.colId;
      };
      Column2.prototype.getId = function() {
        return this.colId;
      };
      Column2.prototype.getUniqueId = function() {
        return this.colId;
      };
      Column2.prototype.getDefinition = function() {
        return this.colDef;
      };
      Column2.prototype.getActualWidth = function() {
        return this.actualWidth;
      };
      Column2.prototype.getAutoHeaderHeight = function() {
        return this.autoHeaderHeight;
      };
      Column2.prototype.setAutoHeaderHeight = function(height) {
        var changed = height !== this.autoHeaderHeight;
        this.autoHeaderHeight = height;
        return changed;
      };
      Column2.prototype.createBaseColDefParams = function(rowNode) {
        var params = {
          node: rowNode,
          data: rowNode.data,
          colDef: this.colDef,
          column: this,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context
        };
        return params;
      };
      Column2.prototype.getColSpan = function(rowNode) {
        if (missing(this.colDef.colSpan)) {
          return 1;
        }
        var params = this.createBaseColDefParams(rowNode);
        var colSpan = this.colDef.colSpan(params);
        return Math.max(colSpan, 1);
      };
      Column2.prototype.getRowSpan = function(rowNode) {
        if (missing(this.colDef.rowSpan)) {
          return 1;
        }
        var params = this.createBaseColDefParams(rowNode);
        var rowSpan = this.colDef.rowSpan(params);
        return Math.max(rowSpan, 1);
      };
      Column2.prototype.setActualWidth = function(actualWidth, source, silent) {
        if (source === void 0) {
          source = "api";
        }
        if (silent === void 0) {
          silent = false;
        }
        if (this.minWidth != null) {
          actualWidth = Math.max(actualWidth, this.minWidth);
        }
        if (this.maxWidth != null) {
          actualWidth = Math.min(actualWidth, this.maxWidth);
        }
        if (this.actualWidth !== actualWidth) {
          this.actualWidth = actualWidth;
          if (this.flex && source !== "flex" && source !== "gridInitializing") {
            this.flex = null;
          }
          if (!silent) {
            this.fireColumnWidthChangedEvent(source);
          }
        }
        this.dispatchStateUpdatedEvent("width");
      };
      Column2.prototype.fireColumnWidthChangedEvent = function(source) {
        this.eventService.dispatchEvent(this.createColumnEvent("widthChanged", source));
      };
      Column2.prototype.isGreaterThanMax = function(width) {
        if (this.maxWidth != null) {
          return width > this.maxWidth;
        }
        return false;
      };
      Column2.prototype.getMinWidth = function() {
        return this.minWidth;
      };
      Column2.prototype.getMaxWidth = function() {
        return this.maxWidth;
      };
      Column2.prototype.getFlex = function() {
        return this.flex || 0;
      };
      Column2.prototype.setFlex = function(flex) {
        if (this.flex !== flex) {
          this.flex = flex;
        }
        this.dispatchStateUpdatedEvent("flex");
      };
      Column2.prototype.setMinimum = function(source) {
        if (source === void 0) {
          source = "api";
        }
        if (exists(this.minWidth)) {
          this.setActualWidth(this.minWidth, source);
        }
      };
      Column2.prototype.setRowGroupActive = function(rowGroup, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.rowGroupActive !== rowGroup) {
          this.rowGroupActive = rowGroup;
          this.eventService.dispatchEvent(this.createColumnEvent("columnRowGroupChanged", source));
        }
        this.dispatchStateUpdatedEvent("rowGroup");
      };
      Column2.prototype.isRowGroupActive = function() {
        return this.rowGroupActive;
      };
      Column2.prototype.setPivotActive = function(pivot, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.pivotActive !== pivot) {
          this.pivotActive = pivot;
          this.eventService.dispatchEvent(this.createColumnEvent("columnPivotChanged", source));
        }
        this.dispatchStateUpdatedEvent("pivot");
      };
      Column2.prototype.isPivotActive = function() {
        return this.pivotActive;
      };
      Column2.prototype.isAnyFunctionActive = function() {
        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
      };
      Column2.prototype.isAnyFunctionAllowed = function() {
        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
      };
      Column2.prototype.setValueActive = function(value, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.aggregationActive !== value) {
          this.aggregationActive = value;
          this.eventService.dispatchEvent(this.createColumnEvent("columnValueChanged", source));
        }
      };
      Column2.prototype.isValueActive = function() {
        return this.aggregationActive;
      };
      Column2.prototype.isAllowPivot = function() {
        return this.colDef.enablePivot === true;
      };
      Column2.prototype.isAllowValue = function() {
        return this.colDef.enableValue === true;
      };
      Column2.prototype.isAllowRowGroup = function() {
        return this.colDef.enableRowGroup === true;
      };
      Column2.prototype.getMenuTabs = function(defaultValues) {
        var menuTabs = this.getColDef().menuTabs;
        if (menuTabs == null) {
          menuTabs = defaultValues;
        }
        return menuTabs;
      };
      Column2.prototype.dispatchStateUpdatedEvent = function(key) {
        this.eventService.dispatchEvent({
          type: Column2.EVENT_STATE_UPDATED,
          key
        });
      };
      Column2.EVENT_MOVING_CHANGED = "movingChanged";
      Column2.EVENT_LEFT_CHANGED = "leftChanged";
      Column2.EVENT_WIDTH_CHANGED = "widthChanged";
      Column2.EVENT_LAST_LEFT_PINNED_CHANGED = "lastLeftPinnedChanged";
      Column2.EVENT_FIRST_RIGHT_PINNED_CHANGED = "firstRightPinnedChanged";
      Column2.EVENT_VISIBLE_CHANGED = "visibleChanged";
      Column2.EVENT_FILTER_CHANGED = "filterChanged";
      Column2.EVENT_FILTER_ACTIVE_CHANGED = "filterActiveChanged";
      Column2.EVENT_SORT_CHANGED = "sortChanged";
      Column2.EVENT_COL_DEF_CHANGED = "colDefChanged";
      Column2.EVENT_MENU_VISIBLE_CHANGED = "menuVisibleChanged";
      Column2.EVENT_ROW_GROUP_CHANGED = "columnRowGroupChanged";
      Column2.EVENT_PIVOT_CHANGED = "columnPivotChanged";
      Column2.EVENT_VALUE_CHANGED = "columnValueChanged";
      Column2.EVENT_STATE_UPDATED = "columnStateUpdated";
      __decorate$2I([
        Autowired("gridOptionsService")
      ], Column2.prototype, "gridOptionsService", void 0);
      __decorate$2I([
        Autowired("columnUtils")
      ], Column2.prototype, "columnUtils", void 0);
      __decorate$2I([
        Autowired("columnHoverService")
      ], Column2.prototype, "columnHoverService", void 0);
      __decorate$2I([
        PostConstruct
      ], Column2.prototype, "initialise", null);
      return Column2;
    }();
    __decorate$2H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ProvidedColumnGroup = /** @class */
    function() {
      function ProvidedColumnGroup2(colGroupDef, groupId, padding, level) {
        this.localEventService = new EventService();
        this.expandable = false;
        this.instanceId = getNextColInstanceId();
        this.expandableListenerRemoveCallback = null;
        this.colGroupDef = colGroupDef;
        this.groupId = groupId;
        this.expanded = !!colGroupDef && !!colGroupDef.openByDefault;
        this.padding = padding;
        this.level = level;
      }
      ProvidedColumnGroup2.prototype.destroy = function() {
        if (this.expandableListenerRemoveCallback) {
          this.reset(null, void 0);
        }
      };
      ProvidedColumnGroup2.prototype.reset = function(colGroupDef, level) {
        this.colGroupDef = colGroupDef;
        this.level = level;
        this.originalParent = null;
        if (this.expandableListenerRemoveCallback) {
          this.expandableListenerRemoveCallback();
        }
        this.children = void 0;
        this.expandable = void 0;
      };
      ProvidedColumnGroup2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      ProvidedColumnGroup2.prototype.setOriginalParent = function(originalParent) {
        this.originalParent = originalParent;
      };
      ProvidedColumnGroup2.prototype.getOriginalParent = function() {
        return this.originalParent;
      };
      ProvidedColumnGroup2.prototype.getLevel = function() {
        return this.level;
      };
      ProvidedColumnGroup2.prototype.isVisible = function() {
        if (this.children) {
          return this.children.some(function(child) {
            return child.isVisible();
          });
        }
        return false;
      };
      ProvidedColumnGroup2.prototype.isPadding = function() {
        return this.padding;
      };
      ProvidedColumnGroup2.prototype.setExpanded = function(expanded) {
        this.expanded = expanded === void 0 ? false : expanded;
        var event = {
          type: ProvidedColumnGroup2.EVENT_EXPANDED_CHANGED
        };
        this.localEventService.dispatchEvent(event);
      };
      ProvidedColumnGroup2.prototype.isExpandable = function() {
        return this.expandable;
      };
      ProvidedColumnGroup2.prototype.isExpanded = function() {
        return this.expanded;
      };
      ProvidedColumnGroup2.prototype.getGroupId = function() {
        return this.groupId;
      };
      ProvidedColumnGroup2.prototype.getId = function() {
        return this.getGroupId();
      };
      ProvidedColumnGroup2.prototype.setChildren = function(children) {
        this.children = children;
      };
      ProvidedColumnGroup2.prototype.getChildren = function() {
        return this.children;
      };
      ProvidedColumnGroup2.prototype.getColGroupDef = function() {
        return this.colGroupDef;
      };
      ProvidedColumnGroup2.prototype.getLeafColumns = function() {
        var result = [];
        this.addLeafColumns(result);
        return result;
      };
      ProvidedColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
        if (!this.children) {
          return;
        }
        this.children.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof ProvidedColumnGroup2) {
            child.addLeafColumns(leafColumns);
          }
        });
      };
      ProvidedColumnGroup2.prototype.getColumnGroupShow = function() {
        var colGroupDef = this.colGroupDef;
        if (!colGroupDef) {
          return;
        }
        return colGroupDef.columnGroupShow;
      };
      ProvidedColumnGroup2.prototype.setupExpandable = function() {
        var _this = this;
        this.setExpandable();
        if (this.expandableListenerRemoveCallback) {
          this.expandableListenerRemoveCallback();
        }
        var listener = this.onColumnVisibilityChanged.bind(this);
        this.getLeafColumns().forEach(function(col) {
          return col.addEventListener("visibleChanged", listener);
        });
        this.expandableListenerRemoveCallback = function() {
          _this.getLeafColumns().forEach(function(col) {
            return col.removeEventListener("visibleChanged", listener);
          });
          _this.expandableListenerRemoveCallback = null;
        };
      };
      ProvidedColumnGroup2.prototype.setExpandable = function() {
        if (this.isPadding()) {
          return;
        }
        var atLeastOneShowingWhenOpen = false;
        var atLeastOneShowingWhenClosed = false;
        var atLeastOneChangeable = false;
        var children = this.findChildrenRemovingPadding();
        for (var i = 0, j = children.length; i < j; i++) {
          var abstractColumn = children[i];
          if (!abstractColumn.isVisible()) {
            continue;
          }
          var headerGroupShow = abstractColumn.getColumnGroupShow();
          if (headerGroupShow === "open") {
            atLeastOneShowingWhenOpen = true;
            atLeastOneChangeable = true;
          } else if (headerGroupShow === "closed") {
            atLeastOneShowingWhenClosed = true;
            atLeastOneChangeable = true;
          } else {
            atLeastOneShowingWhenOpen = true;
            atLeastOneShowingWhenClosed = true;
          }
        }
        var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
        if (this.expandable !== expandable) {
          this.expandable = expandable;
          var event_1 = {
            type: ProvidedColumnGroup2.EVENT_EXPANDABLE_CHANGED
          };
          this.localEventService.dispatchEvent(event_1);
        }
      };
      ProvidedColumnGroup2.prototype.findChildrenRemovingPadding = function() {
        var res = [];
        var process2 = function(items) {
          items.forEach(function(item) {
            var skipBecausePadding = item instanceof ProvidedColumnGroup2 && item.isPadding();
            if (skipBecausePadding) {
              process2(item.children);
            } else {
              res.push(item);
            }
          });
        };
        process2(this.children);
        return res;
      };
      ProvidedColumnGroup2.prototype.onColumnVisibilityChanged = function() {
        this.setExpandable();
      };
      ProvidedColumnGroup2.prototype.addEventListener = function(eventType, listener) {
        this.localEventService.addEventListener(eventType, listener);
      };
      ProvidedColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
        this.localEventService.removeEventListener(eventType, listener);
      };
      ProvidedColumnGroup2.EVENT_EXPANDED_CHANGED = "expandedChanged";
      ProvidedColumnGroup2.EVENT_EXPANDABLE_CHANGED = "expandableChanged";
      __decorate$2H([
        PreDestroy
      ], ProvidedColumnGroup2.prototype, "destroy", null);
      return ProvidedColumnGroup2;
    }();
    DefaultColumnTypes = {
      numericColumn: {
        headerClass: "ag-right-aligned-header",
        cellClass: "ag-right-aligned-cell"
      },
      rightAligned: {
        headerClass: "ag-right-aligned-header",
        cellClass: "ag-right-aligned-cell"
      }
    };
    ArrayUtils = Object.freeze({
      __proto__: null,
      firstExistingValue,
      existsAndNotEmpty,
      last,
      areEqual,
      shallowCompare,
      sortNumerically,
      removeRepeatsFromArray,
      removeFromUnorderedArray,
      removeFromArray,
      removeAllFromUnorderedArray,
      removeAllFromArray,
      insertIntoArray,
      insertArrayIntoArray,
      moveInArray,
      includes,
      flatten,
      pushAll,
      toStrings,
      forEachReverse
    });
    AG_GRID_STOP_PROPAGATION = "__ag_Grid_Stop_Propagation";
    PASSIVE_EVENTS$1 = ["touchstart", "touchend", "touchmove", "touchcancel", "scroll"];
    supports = {};
    isEventSupported = function() {
      var tags = {
        select: "input",
        change: "input",
        submit: "form",
        reset: "form",
        error: "img",
        load: "img",
        abort: "img"
      };
      var eventChecker = function(eventName) {
        if (typeof supports[eventName] === "boolean") {
          return supports[eventName];
        }
        var el = document.createElement(tags[eventName] || "div");
        eventName = "on" + eventName;
        return supports[eventName] = eventName in el;
      };
      return eventChecker;
    }();
    EventUtils = Object.freeze({
      __proto__: null,
      stopPropagationForAgGrid,
      isStopPropagationForAgGrid,
      isEventSupported,
      getCtrlForEventTarget,
      isElementInEventPath,
      createEventPath,
      getEventPath,
      addSafePassiveEventListener
    });
    __decorate$2G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    BeanStub = /** @class */
    function() {
      function BeanStub2() {
        var _this = this;
        this.destroyFunctions = [];
        this.destroyed = false;
        this.__v_skip = true;
        this.lastChangeSetIdLookup = {};
        this.propertyListenerId = 0;
        this.isAlive = function() {
          return !_this.destroyed;
        };
      }
      BeanStub2.prototype.getFrameworkOverrides = function() {
        return this.frameworkOverrides;
      };
      BeanStub2.prototype.getContext = function() {
        return this.context;
      };
      BeanStub2.prototype.destroy = function() {
        this.destroyFunctions.forEach(function(func) {
          return func();
        });
        this.destroyFunctions.length = 0;
        this.destroyed = true;
        this.dispatchEvent({ type: BeanStub2.EVENT_DESTROYED });
      };
      BeanStub2.prototype.addEventListener = function(eventType, listener) {
        if (!this.localEventService) {
          this.localEventService = new EventService();
        }
        this.localEventService.addEventListener(eventType, listener);
      };
      BeanStub2.prototype.removeEventListener = function(eventType, listener) {
        if (this.localEventService) {
          this.localEventService.removeEventListener(eventType, listener);
        }
      };
      BeanStub2.prototype.dispatchEventAsync = function(event) {
        var _this = this;
        window.setTimeout(function() {
          return _this.dispatchEvent(event);
        }, 0);
      };
      BeanStub2.prototype.dispatchEvent = function(event) {
        if (this.localEventService) {
          this.localEventService.dispatchEvent(event);
        }
      };
      BeanStub2.prototype.addManagedListener = function(object, event, listener) {
        var _this = this;
        if (this.destroyed) {
          return;
        }
        if (object instanceof HTMLElement) {
          addSafePassiveEventListener(this.getFrameworkOverrides(), object, event, listener);
        } else {
          object.addEventListener(event, listener);
        }
        var destroyFunc = function() {
          object.removeEventListener(event, listener);
          _this.destroyFunctions = _this.destroyFunctions.filter(function(fn) {
            return fn !== destroyFunc;
          });
          return null;
        };
        this.destroyFunctions.push(destroyFunc);
        return destroyFunc;
      };
      BeanStub2.prototype.setupGridOptionListener = function(event, listener) {
        var _this = this;
        this.gridOptionsService.addEventListener(event, listener);
        var destroyFunc = function() {
          _this.gridOptionsService.removeEventListener(event, listener);
          _this.destroyFunctions = _this.destroyFunctions.filter(function(fn) {
            return fn !== destroyFunc;
          });
          return null;
        };
        this.destroyFunctions.push(destroyFunc);
      };
      BeanStub2.prototype.addManagedPropertyListener = function(event, listener) {
        if (this.destroyed) {
          return;
        }
        this.setupGridOptionListener(event, listener);
      };
      BeanStub2.prototype.addManagedPropertyListeners = function(events, listener) {
        var _this = this;
        if (this.destroyed) {
          return;
        }
        var eventsKey = events.join("-") + this.propertyListenerId++;
        var wrappedListener = function(event) {
          if (event.changeSet) {
            if (event.changeSet && event.changeSet.id === _this.lastChangeSetIdLookup[eventsKey]) {
              return;
            }
            _this.lastChangeSetIdLookup[eventsKey] = event.changeSet.id;
          }
          var propertiesChangeEvent = {
            type: "gridPropertyChanged",
            changeSet: event.changeSet
          };
          listener(propertiesChangeEvent);
        };
        events.forEach(function(event) {
          return _this.setupGridOptionListener(event, wrappedListener);
        });
      };
      BeanStub2.prototype.addDestroyFunc = function(func) {
        if (this.isAlive()) {
          this.destroyFunctions.push(func);
        } else {
          func();
        }
      };
      BeanStub2.prototype.createManagedBean = function(bean, context) {
        var res = this.createBean(bean, context);
        this.addDestroyFunc(this.destroyBean.bind(this, bean, context));
        return res;
      };
      BeanStub2.prototype.createBean = function(bean, context, afterPreCreateCallback) {
        return (context || this.getContext()).createBean(bean, afterPreCreateCallback);
      };
      BeanStub2.prototype.destroyBean = function(bean, context) {
        return (context || this.getContext()).destroyBean(bean);
      };
      BeanStub2.prototype.destroyBeans = function(beans, context) {
        var _this = this;
        if (beans) {
          beans.forEach(function(bean) {
            return _this.destroyBean(bean, context);
          });
        }
        return [];
      };
      BeanStub2.EVENT_DESTROYED = "destroyed";
      __decorate$2G([
        Autowired("frameworkOverrides")
      ], BeanStub2.prototype, "frameworkOverrides", void 0);
      __decorate$2G([
        Autowired("context")
      ], BeanStub2.prototype, "context", void 0);
      __decorate$2G([
        Autowired("eventService")
      ], BeanStub2.prototype, "eventService", void 0);
      __decorate$2G([
        Autowired("gridOptionsService")
      ], BeanStub2.prototype, "gridOptionsService", void 0);
      __decorate$2G([
        Autowired("localeService")
      ], BeanStub2.prototype, "localeService", void 0);
      __decorate$2G([
        Autowired("environment")
      ], BeanStub2.prototype, "environment", void 0);
      __decorate$2G([
        PreDestroy
      ], BeanStub2.prototype, "destroy", null);
      return BeanStub2;
    }();
    __extends$36 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$9 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    ColumnFactory = /** @class */
    function(_super) {
      __extends$36(ColumnFactory2, _super);
      function ColumnFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnFactory2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ColumnFactory");
      };
      ColumnFactory2.prototype.createColumnTree = function(defs, primaryColumns, existingTree) {
        var columnKeyCreator = new ColumnKeyCreator();
        var _a = this.extractExistingTreeData(existingTree), existingCols = _a.existingCols, existingGroups = _a.existingGroups, existingColKeys = _a.existingColKeys;
        columnKeyCreator.addExistingKeys(existingColKeys);
        var unbalancedTree = this.recursivelyCreateColumns(defs, 0, primaryColumns, existingCols, columnKeyCreator, existingGroups);
        var treeDept = this.findMaxDept(unbalancedTree, 0);
        this.logger.log("Number of levels for grouped columns is " + treeDept);
        var columnTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
        var deptFirstCallback = function(child, parent) {
          if (child instanceof ProvidedColumnGroup) {
            child.setupExpandable();
          }
          child.setOriginalParent(parent);
        };
        this.columnUtils.depthFirstOriginalTreeSearch(null, columnTree, deptFirstCallback);
        return {
          columnTree,
          treeDept
        };
      };
      ColumnFactory2.prototype.extractExistingTreeData = function(existingTree) {
        var existingCols = [];
        var existingGroups = [];
        var existingColKeys = [];
        if (existingTree) {
          this.columnUtils.depthFirstOriginalTreeSearch(null, existingTree, function(item) {
            if (item instanceof ProvidedColumnGroup) {
              var group = item;
              existingGroups.push(group);
            } else {
              var col = item;
              existingColKeys.push(col.getId());
              existingCols.push(col);
            }
          });
        }
        return { existingCols, existingGroups, existingColKeys };
      };
      ColumnFactory2.prototype.createForAutoGroups = function(autoGroupCols, gridBalancedTree) {
        var _this = this;
        return autoGroupCols.map(function(col) {
          return _this.createAutoGroupTreeItem(gridBalancedTree, col);
        });
      };
      ColumnFactory2.prototype.createAutoGroupTreeItem = function(balancedColumnTree, column) {
        var dept = this.findDepth(balancedColumnTree);
        var nextChild = column;
        for (var i = dept - 1; i >= 0; i--) {
          var autoGroup = new ProvidedColumnGroup(null, "FAKE_PATH_" + column.getId() + "}_" + i, true, i);
          this.createBean(autoGroup);
          autoGroup.setChildren([nextChild]);
          nextChild.setOriginalParent(autoGroup);
          nextChild = autoGroup;
        }
        if (dept === 0) {
          column.setOriginalParent(null);
        }
        return nextChild;
      };
      ColumnFactory2.prototype.findDepth = function(balancedColumnTree) {
        var dept = 0;
        var pointer = balancedColumnTree;
        while (pointer && pointer[0] && pointer[0] instanceof ProvidedColumnGroup) {
          dept++;
          pointer = pointer[0].getChildren();
        }
        return dept;
      };
      ColumnFactory2.prototype.balanceColumnTree = function(unbalancedTree, currentDept, columnDept, columnKeyCreator) {
        var result = [];
        for (var i = 0; i < unbalancedTree.length; i++) {
          var child = unbalancedTree[i];
          if (child instanceof ProvidedColumnGroup) {
            var originalGroup = child;
            var newChildren = this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
            originalGroup.setChildren(newChildren);
            result.push(originalGroup);
          } else {
            var firstPaddedGroup = void 0;
            var currentPaddedGroup = void 0;
            for (var j = columnDept - 1; j >= currentDept; j--) {
              var newColId = columnKeyCreator.getUniqueKey(null, null);
              var colGroupDefMerged = this.createMergedColGroupDef(null);
              var paddedGroup = new ProvidedColumnGroup(colGroupDefMerged, newColId, true, currentDept);
              this.createBean(paddedGroup);
              if (currentPaddedGroup) {
                currentPaddedGroup.setChildren([paddedGroup]);
              }
              currentPaddedGroup = paddedGroup;
              if (!firstPaddedGroup) {
                firstPaddedGroup = currentPaddedGroup;
              }
            }
            if (firstPaddedGroup && currentPaddedGroup) {
              result.push(firstPaddedGroup);
              var hasGroups = unbalancedTree.some(function(leaf) {
                return leaf instanceof ProvidedColumnGroup;
              });
              if (hasGroups) {
                currentPaddedGroup.setChildren([child]);
                continue;
              } else {
                currentPaddedGroup.setChildren(unbalancedTree);
                break;
              }
            }
            result.push(child);
          }
        }
        return result;
      };
      ColumnFactory2.prototype.findMaxDept = function(treeChildren, dept) {
        var maxDeptThisLevel = dept;
        for (var i = 0; i < treeChildren.length; i++) {
          var abstractColumn = treeChildren[i];
          if (abstractColumn instanceof ProvidedColumnGroup) {
            var originalGroup = abstractColumn;
            var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
            if (maxDeptThisLevel < newDept) {
              maxDeptThisLevel = newDept;
            }
          }
        }
        return maxDeptThisLevel;
      };
      ColumnFactory2.prototype.recursivelyCreateColumns = function(defs, level, primaryColumns, existingColsCopy, columnKeyCreator, existingGroups) {
        if (!defs)
          return [];
        var result = new Array(defs.length);
        for (var i = 0; i < result.length; i++) {
          var def = defs[i];
          if (this.isColumnGroup(def)) {
            result[i] = this.createColumnGroup(primaryColumns, def, level, existingColsCopy, columnKeyCreator, existingGroups);
          } else {
            result[i] = this.createColumn(primaryColumns, def, existingColsCopy, columnKeyCreator);
          }
        }
        return result;
      };
      ColumnFactory2.prototype.createColumnGroup = function(primaryColumns, colGroupDef, level, existingColumns, columnKeyCreator, existingGroups) {
        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
        var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId || null, null);
        var providedGroup = new ProvidedColumnGroup(colGroupDefMerged, groupId, false, level);
        this.createBean(providedGroup);
        var existingGroupAndIndex = this.findExistingGroup(colGroupDef, existingGroups);
        if (existingGroupAndIndex) {
          existingGroups.splice(existingGroupAndIndex.idx, 1);
        }
        var existingGroup = existingGroupAndIndex === null || existingGroupAndIndex === void 0 ? void 0 : existingGroupAndIndex.group;
        if (existingGroup) {
          providedGroup.setExpanded(existingGroup.isExpanded());
        }
        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, primaryColumns, existingColumns, columnKeyCreator, existingGroups);
        providedGroup.setChildren(children);
        return providedGroup;
      };
      ColumnFactory2.prototype.createMergedColGroupDef = function(colGroupDef) {
        var colGroupDefMerged = {};
        Object.assign(colGroupDefMerged, this.gridOptionsService.get("defaultColGroupDef"));
        Object.assign(colGroupDefMerged, colGroupDef);
        return colGroupDefMerged;
      };
      ColumnFactory2.prototype.createColumn = function(primaryColumns, colDef, existingColsCopy, columnKeyCreator) {
        var existingColAndIndex = this.findExistingColumn(colDef, existingColsCopy);
        if (existingColAndIndex) {
          existingColsCopy === null || existingColsCopy === void 0 ? void 0 : existingColsCopy.splice(existingColAndIndex.idx, 1);
        }
        var column = existingColAndIndex === null || existingColAndIndex === void 0 ? void 0 : existingColAndIndex.column;
        if (!column) {
          var colId = columnKeyCreator.getUniqueKey(colDef.colId, colDef.field);
          var colDefMerged = this.addColumnDefaultAndTypes(colDef, colId);
          column = new Column(colDefMerged, colDef, colId, primaryColumns);
          this.context.createBean(column);
        } else {
          var colDefMerged = this.addColumnDefaultAndTypes(colDef, column.getColId());
          column.setColDef(colDefMerged, colDef);
          this.applyColumnState(column, colDefMerged);
        }
        this.dataTypeService.addColumnListeners(column);
        return column;
      };
      ColumnFactory2.prototype.applyColumnState = function(column, colDef) {
        var flex = attrToNumber(colDef.flex);
        if (flex !== void 0) {
          column.setFlex(flex);
        }
        var noFlexThisCol = column.getFlex() <= 0;
        if (noFlexThisCol) {
          var width = attrToNumber(colDef.width);
          if (width != null) {
            column.setActualWidth(width);
          } else {
            var widthBeforeUpdate = column.getActualWidth();
            column.setActualWidth(widthBeforeUpdate);
          }
        }
        if (colDef.sort !== void 0) {
          if (colDef.sort == "asc" || colDef.sort == "desc") {
            column.setSort(colDef.sort);
          } else {
            column.setSort(void 0);
          }
        }
        var sortIndex = attrToNumber(colDef.sortIndex);
        if (sortIndex !== void 0) {
          column.setSortIndex(sortIndex);
        }
        var hide = attrToBoolean(colDef.hide);
        if (hide !== void 0) {
          column.setVisible(!hide);
        }
        if (colDef.pinned !== void 0) {
          column.setPinned(colDef.pinned);
        }
      };
      ColumnFactory2.prototype.findExistingColumn = function(newColDef, existingColsCopy) {
        if (!existingColsCopy)
          return void 0;
        for (var i = 0; i < existingColsCopy.length; i++) {
          var def = existingColsCopy[i].getUserProvidedColDef();
          if (!def)
            continue;
          var newHasId = newColDef.colId != null;
          if (newHasId) {
            if (existingColsCopy[i].getId() === newColDef.colId) {
              return { idx: i, column: existingColsCopy[i] };
            }
            continue;
          }
          var newHasField = newColDef.field != null;
          if (newHasField) {
            if (def.field === newColDef.field) {
              return { idx: i, column: existingColsCopy[i] };
            }
            continue;
          }
          if (def === newColDef) {
            return { idx: i, column: existingColsCopy[i] };
          }
        }
        return void 0;
      };
      ColumnFactory2.prototype.findExistingGroup = function(newGroupDef, existingGroups) {
        var newHasId = newGroupDef.groupId != null;
        if (!newHasId) {
          return void 0;
        }
        for (var i = 0; i < existingGroups.length; i++) {
          var existingGroup = existingGroups[i];
          var existingDef = existingGroup.getColGroupDef();
          if (!existingDef) {
            continue;
          }
          if (existingGroup.getId() === newGroupDef.groupId) {
            return { idx: i, group: existingGroup };
          }
        }
        return void 0;
      };
      ColumnFactory2.prototype.addColumnDefaultAndTypes = function(colDef, colId) {
        var res = {};
        var defaultColDef = this.gridOptionsService.get("defaultColDef");
        mergeDeep(res, defaultColDef, false, true);
        var columnType = this.dataTypeService.updateColDefAndGetColumnType(res, colDef, colId);
        if (columnType) {
          this.assignColumnTypes(columnType, res);
        }
        mergeDeep(res, colDef, false, true);
        var autoGroupColDef = this.gridOptionsService.get("autoGroupColumnDef");
        var isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();
        if (colDef.rowGroup && autoGroupColDef && isSortingCoupled) {
          mergeDeep(res, { sort: autoGroupColDef.sort, initialSort: autoGroupColDef.initialSort }, false, true);
        }
        this.dataTypeService.validateColDef(res);
        return res;
      };
      ColumnFactory2.prototype.assignColumnTypes = function(typeKeys, colDefMerged) {
        if (!typeKeys.length) {
          return;
        }
        var allColumnTypes = Object.assign({}, DefaultColumnTypes);
        var userTypes = this.gridOptionsService.get("columnTypes") || {};
        iterateObject(userTypes, function(key, value) {
          if (key in allColumnTypes) {
            console.warn("AG Grid: the column type '" + key + "' is a default column type and cannot be overridden.");
          } else {
            allColumnTypes[key] = value;
          }
        });
        typeKeys.forEach(function(t) {
          var typeColDef = allColumnTypes[t.trim()];
          if (typeColDef) {
            mergeDeep(colDefMerged, typeColDef, false, true);
          } else {
            console.warn("AG Grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
          }
        });
      };
      ColumnFactory2.prototype.isColumnGroup = function(abstractColDef) {
        return abstractColDef.children !== void 0;
      };
      __decorate$2F([
        Autowired("columnUtils")
      ], ColumnFactory2.prototype, "columnUtils", void 0);
      __decorate$2F([
        Autowired("dataTypeService")
      ], ColumnFactory2.prototype, "dataTypeService", void 0);
      __decorate$2F([
        __param$9(0, Qualifier("loggerFactory"))
      ], ColumnFactory2.prototype, "setBeans", null);
      ColumnFactory2 = __decorate$2F([
        Bean("columnFactory")
      ], ColumnFactory2);
      return ColumnFactory2;
    }(BeanStub);
    __decorate$2E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnGroup = /** @class */
    function() {
      function ColumnGroup2(providedColumnGroup, groupId, partId, pinned) {
        this.displayedChildren = [];
        this.localEventService = new EventService();
        this.groupId = groupId;
        this.partId = partId;
        this.providedColumnGroup = providedColumnGroup;
        this.pinned = pinned;
      }
      ColumnGroup2.createUniqueId = function(groupId, instanceId) {
        return groupId + "_" + instanceId;
      };
      ColumnGroup2.prototype.reset = function() {
        this.parent = null;
        this.children = null;
        this.displayedChildren = null;
      };
      ColumnGroup2.prototype.getParent = function() {
        return this.parent;
      };
      ColumnGroup2.prototype.setParent = function(parent) {
        this.parent = parent;
      };
      ColumnGroup2.prototype.getUniqueId = function() {
        return ColumnGroup2.createUniqueId(this.groupId, this.partId);
      };
      ColumnGroup2.prototype.isEmptyGroup = function() {
        return this.displayedChildren.length === 0;
      };
      ColumnGroup2.prototype.isMoving = function() {
        var allLeafColumns = this.getProvidedColumnGroup().getLeafColumns();
        if (!allLeafColumns || allLeafColumns.length === 0) {
          return false;
        }
        return allLeafColumns.every(function(col) {
          return col.isMoving();
        });
      };
      ColumnGroup2.prototype.checkLeft = function() {
        this.displayedChildren.forEach(function(child) {
          if (child instanceof ColumnGroup2) {
            child.checkLeft();
          }
        });
        if (this.displayedChildren.length > 0) {
          if (this.gridOptionsService.is("enableRtl")) {
            var lastChild = last(this.displayedChildren);
            var lastChildLeft = lastChild.getLeft();
            this.setLeft(lastChildLeft);
          } else {
            var firstChildLeft = this.displayedChildren[0].getLeft();
            this.setLeft(firstChildLeft);
          }
        } else {
          this.setLeft(null);
        }
      };
      ColumnGroup2.prototype.getLeft = function() {
        return this.left;
      };
      ColumnGroup2.prototype.getOldLeft = function() {
        return this.oldLeft;
      };
      ColumnGroup2.prototype.setLeft = function(left) {
        this.oldLeft = left;
        if (this.left !== left) {
          this.left = left;
          this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_LEFT_CHANGED));
        }
      };
      ColumnGroup2.prototype.getPinned = function() {
        return this.pinned;
      };
      ColumnGroup2.prototype.createAgEvent = function(type) {
        return { type };
      };
      ColumnGroup2.prototype.addEventListener = function(eventType, listener) {
        this.localEventService.addEventListener(eventType, listener);
      };
      ColumnGroup2.prototype.removeEventListener = function(eventType, listener) {
        this.localEventService.removeEventListener(eventType, listener);
      };
      ColumnGroup2.prototype.getGroupId = function() {
        return this.groupId;
      };
      ColumnGroup2.prototype.getPartId = function() {
        return this.partId;
      };
      ColumnGroup2.prototype.isChildInThisGroupDeepSearch = function(wantedChild) {
        var result = false;
        this.children.forEach(function(foundChild) {
          if (wantedChild === foundChild) {
            result = true;
          }
          if (foundChild instanceof ColumnGroup2) {
            if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
              result = true;
            }
          }
        });
        return result;
      };
      ColumnGroup2.prototype.getActualWidth = function() {
        var groupActualWidth = 0;
        if (this.displayedChildren) {
          this.displayedChildren.forEach(function(child) {
            groupActualWidth += child.getActualWidth();
          });
        }
        return groupActualWidth;
      };
      ColumnGroup2.prototype.isResizable = function() {
        if (!this.displayedChildren) {
          return false;
        }
        var result = false;
        this.displayedChildren.forEach(function(child) {
          if (child.isResizable()) {
            result = true;
          }
        });
        return result;
      };
      ColumnGroup2.prototype.getMinWidth = function() {
        var result = 0;
        this.displayedChildren.forEach(function(groupChild) {
          result += groupChild.getMinWidth() || 0;
        });
        return result;
      };
      ColumnGroup2.prototype.addChild = function(child) {
        if (!this.children) {
          this.children = [];
        }
        this.children.push(child);
      };
      ColumnGroup2.prototype.getDisplayedChildren = function() {
        return this.displayedChildren;
      };
      ColumnGroup2.prototype.getLeafColumns = function() {
        var result = [];
        this.addLeafColumns(result);
        return result;
      };
      ColumnGroup2.prototype.getDisplayedLeafColumns = function() {
        var result = [];
        this.addDisplayedLeafColumns(result);
        return result;
      };
      ColumnGroup2.prototype.getDefinition = function() {
        return this.providedColumnGroup.getColGroupDef();
      };
      ColumnGroup2.prototype.getColGroupDef = function() {
        return this.providedColumnGroup.getColGroupDef();
      };
      ColumnGroup2.prototype.isPadding = function() {
        return this.providedColumnGroup.isPadding();
      };
      ColumnGroup2.prototype.isExpandable = function() {
        return this.providedColumnGroup.isExpandable();
      };
      ColumnGroup2.prototype.isExpanded = function() {
        return this.providedColumnGroup.isExpanded();
      };
      ColumnGroup2.prototype.setExpanded = function(expanded) {
        this.providedColumnGroup.setExpanded(expanded);
      };
      ColumnGroup2.prototype.addDisplayedLeafColumns = function(leafColumns) {
        this.displayedChildren.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof ColumnGroup2) {
            child.addDisplayedLeafColumns(leafColumns);
          }
        });
      };
      ColumnGroup2.prototype.addLeafColumns = function(leafColumns) {
        this.children.forEach(function(child) {
          if (child instanceof Column) {
            leafColumns.push(child);
          } else if (child instanceof ColumnGroup2) {
            child.addLeafColumns(leafColumns);
          }
        });
      };
      ColumnGroup2.prototype.getChildren = function() {
        return this.children;
      };
      ColumnGroup2.prototype.getColumnGroupShow = function() {
        return this.providedColumnGroup.getColumnGroupShow();
      };
      ColumnGroup2.prototype.getProvidedColumnGroup = function() {
        return this.providedColumnGroup;
      };
      ColumnGroup2.prototype.getPaddingLevel = function() {
        var parent = this.getParent();
        if (!this.isPadding() || !parent || !parent.isPadding()) {
          return 0;
        }
        return 1 + parent.getPaddingLevel();
      };
      ColumnGroup2.prototype.calculateDisplayedColumns = function() {
        var _this = this;
        this.displayedChildren = [];
        var parentWithExpansion = this;
        while (parentWithExpansion != null && parentWithExpansion.isPadding()) {
          parentWithExpansion = parentWithExpansion.getParent();
        }
        var isExpandable = parentWithExpansion ? parentWithExpansion.providedColumnGroup.isExpandable() : false;
        if (!isExpandable) {
          this.displayedChildren = this.children;
          this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
          return;
        }
        this.children.forEach(function(child) {
          var emptyGroup = child instanceof ColumnGroup2 && (!child.displayedChildren || !child.displayedChildren.length);
          if (emptyGroup) {
            return;
          }
          var headerGroupShow = child.getColumnGroupShow();
          switch (headerGroupShow) {
            case "open":
              if (parentWithExpansion.providedColumnGroup.isExpanded()) {
                _this.displayedChildren.push(child);
              }
              break;
            case "closed":
              if (!parentWithExpansion.providedColumnGroup.isExpanded()) {
                _this.displayedChildren.push(child);
              }
              break;
            default:
              _this.displayedChildren.push(child);
              break;
          }
        });
        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED));
      };
      ColumnGroup2.EVENT_LEFT_CHANGED = "leftChanged";
      ColumnGroup2.EVENT_DISPLAYED_CHILDREN_CHANGED = "displayedChildrenChanged";
      __decorate$2E([
        Autowired("gridOptionsService")
      ], ColumnGroup2.prototype, "gridOptionsService", void 0);
      return ColumnGroup2;
    }();
    Events = /** @class */
    function() {
      function Events2() {
      }
      Events2.EVENT_COLUMN_EVERYTHING_CHANGED = "columnEverythingChanged";
      Events2.EVENT_NEW_COLUMNS_LOADED = "newColumnsLoaded";
      Events2.EVENT_COLUMN_PIVOT_MODE_CHANGED = "columnPivotModeChanged";
      Events2.EVENT_COLUMN_ROW_GROUP_CHANGED = "columnRowGroupChanged";
      Events2.EVENT_EXPAND_COLLAPSE_ALL = "expandOrCollapseAll";
      Events2.EVENT_COLUMN_PIVOT_CHANGED = "columnPivotChanged";
      Events2.EVENT_GRID_COLUMNS_CHANGED = "gridColumnsChanged";
      Events2.EVENT_COLUMN_VALUE_CHANGED = "columnValueChanged";
      Events2.EVENT_COLUMN_MOVED = "columnMoved";
      Events2.EVENT_COLUMN_VISIBLE = "columnVisible";
      Events2.EVENT_COLUMN_PINNED = "columnPinned";
      Events2.EVENT_COLUMN_GROUP_OPENED = "columnGroupOpened";
      Events2.EVENT_COLUMN_RESIZED = "columnResized";
      Events2.EVENT_DISPLAYED_COLUMNS_CHANGED = "displayedColumnsChanged";
      Events2.EVENT_VIRTUAL_COLUMNS_CHANGED = "virtualColumnsChanged";
      Events2.EVENT_ASYNC_TRANSACTIONS_FLUSHED = "asyncTransactionsFlushed";
      Events2.EVENT_ROW_GROUP_OPENED = "rowGroupOpened";
      Events2.EVENT_ROW_DATA_CHANGED = "rowDataChanged";
      Events2.EVENT_ROW_DATA_UPDATED = "rowDataUpdated";
      Events2.EVENT_PINNED_ROW_DATA_CHANGED = "pinnedRowDataChanged";
      Events2.EVENT_RANGE_SELECTION_CHANGED = "rangeSelectionChanged";
      Events2.EVENT_CHART_CREATED = "chartCreated";
      Events2.EVENT_CHART_RANGE_SELECTION_CHANGED = "chartRangeSelectionChanged";
      Events2.EVENT_CHART_OPTIONS_CHANGED = "chartOptionsChanged";
      Events2.EVENT_CHART_DESTROYED = "chartDestroyed";
      Events2.EVENT_TOOL_PANEL_VISIBLE_CHANGED = "toolPanelVisibleChanged";
      Events2.EVENT_TOOL_PANEL_SIZE_CHANGED = "toolPanelSizeChanged";
      Events2.EVENT_COLUMN_PANEL_ITEM_DRAG_START = "columnPanelItemDragStart";
      Events2.EVENT_COLUMN_PANEL_ITEM_DRAG_END = "columnPanelItemDragEnd";
      Events2.EVENT_MODEL_UPDATED = "modelUpdated";
      Events2.EVENT_CUT_START = "cutStart";
      Events2.EVENT_CUT_END = "cutEnd";
      Events2.EVENT_PASTE_START = "pasteStart";
      Events2.EVENT_PASTE_END = "pasteEnd";
      Events2.EVENT_FILL_START = "fillStart";
      Events2.EVENT_FILL_END = "fillEnd";
      Events2.EVENT_RANGE_DELETE_START = "rangeDeleteStart";
      Events2.EVENT_RANGE_DELETE_END = "rangeDeleteEnd";
      Events2.EVENT_UNDO_STARTED = "undoStarted";
      Events2.EVENT_UNDO_ENDED = "undoEnded";
      Events2.EVENT_REDO_STARTED = "redoStarted";
      Events2.EVENT_REDO_ENDED = "redoEnded";
      Events2.EVENT_KEY_SHORTCUT_CHANGED_CELL_START = "keyShortcutChangedCellStart";
      Events2.EVENT_KEY_SHORTCUT_CHANGED_CELL_END = "keyShortcutChangedCellEnd";
      Events2.EVENT_CELL_CLICKED = "cellClicked";
      Events2.EVENT_CELL_DOUBLE_CLICKED = "cellDoubleClicked";
      Events2.EVENT_CELL_MOUSE_DOWN = "cellMouseDown";
      Events2.EVENT_CELL_CONTEXT_MENU = "cellContextMenu";
      Events2.EVENT_CELL_VALUE_CHANGED = "cellValueChanged";
      Events2.EVENT_CELL_EDIT_REQUEST = "cellEditRequest";
      Events2.EVENT_ROW_VALUE_CHANGED = "rowValueChanged";
      Events2.EVENT_CELL_FOCUSED = "cellFocused";
      Events2.EVENT_CELL_FOCUS_CLEARED = "cellFocusCleared";
      Events2.EVENT_FULL_WIDTH_ROW_FOCUSED = "fullWidthRowFocused";
      Events2.EVENT_ROW_SELECTED = "rowSelected";
      Events2.EVENT_SELECTION_CHANGED = "selectionChanged";
      Events2.EVENT_TOOLTIP_SHOW = "tooltipShow";
      Events2.EVENT_TOOLTIP_HIDE = "tooltipHide";
      Events2.EVENT_CELL_KEY_DOWN = "cellKeyDown";
      Events2.EVENT_CELL_MOUSE_OVER = "cellMouseOver";
      Events2.EVENT_CELL_MOUSE_OUT = "cellMouseOut";
      Events2.EVENT_FILTER_CHANGED = "filterChanged";
      Events2.EVENT_FILTER_MODIFIED = "filterModified";
      Events2.EVENT_FILTER_OPENED = "filterOpened";
      Events2.EVENT_ADVANCED_FILTER_BUILDER_VISIBLE_CHANGED = "advancedFilterBuilderVisibleChanged";
      Events2.EVENT_SORT_CHANGED = "sortChanged";
      Events2.EVENT_VIRTUAL_ROW_REMOVED = "virtualRowRemoved";
      Events2.EVENT_ROW_CLICKED = "rowClicked";
      Events2.EVENT_ROW_DOUBLE_CLICKED = "rowDoubleClicked";
      Events2.EVENT_GRID_READY = "gridReady";
      Events2.EVENT_GRID_PRE_DESTROYED = "gridPreDestroyed";
      Events2.EVENT_GRID_SIZE_CHANGED = "gridSizeChanged";
      Events2.EVENT_VIEWPORT_CHANGED = "viewportChanged";
      Events2.EVENT_SCROLLBAR_WIDTH_CHANGED = "scrollbarWidthChanged";
      Events2.EVENT_FIRST_DATA_RENDERED = "firstDataRendered";
      Events2.EVENT_DRAG_STARTED = "dragStarted";
      Events2.EVENT_DRAG_STOPPED = "dragStopped";
      Events2.EVENT_CHECKBOX_CHANGED = "checkboxChanged";
      Events2.EVENT_ROW_EDITING_STARTED = "rowEditingStarted";
      Events2.EVENT_ROW_EDITING_STOPPED = "rowEditingStopped";
      Events2.EVENT_CELL_EDITING_STARTED = "cellEditingStarted";
      Events2.EVENT_CELL_EDITING_STOPPED = "cellEditingStopped";
      Events2.EVENT_BODY_SCROLL = "bodyScroll";
      Events2.EVENT_BODY_SCROLL_END = "bodyScrollEnd";
      Events2.EVENT_HEIGHT_SCALE_CHANGED = "heightScaleChanged";
      Events2.EVENT_PAGINATION_CHANGED = "paginationChanged";
      Events2.EVENT_COMPONENT_STATE_CHANGED = "componentStateChanged";
      Events2.EVENT_STORE_REFRESHED = "storeRefreshed";
      Events2.EVENT_BODY_HEIGHT_CHANGED = "bodyHeightChanged";
      Events2.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = "displayedColumnsWidthChanged";
      Events2.EVENT_SCROLL_VISIBILITY_CHANGED = "scrollVisibilityChanged";
      Events2.EVENT_COLUMN_HOVER_CHANGED = "columnHoverChanged";
      Events2.EVENT_FLASH_CELLS = "flashCells";
      Events2.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED = "paginationPixelOffsetChanged";
      Events2.EVENT_DISPLAYED_ROWS_CHANGED = "displayedRowsChanged";
      Events2.EVENT_LEFT_PINNED_WIDTH_CHANGED = "leftPinnedWidthChanged";
      Events2.EVENT_RIGHT_PINNED_WIDTH_CHANGED = "rightPinnedWidthChanged";
      Events2.EVENT_ROW_CONTAINER_HEIGHT_CHANGED = "rowContainerHeightChanged";
      Events2.EVENT_HEADER_HEIGHT_CHANGED = "headerHeightChanged";
      Events2.EVENT_COLUMN_HEADER_HEIGHT_CHANGED = "columnHeaderHeightChanged";
      Events2.EVENT_ROW_DRAG_ENTER = "rowDragEnter";
      Events2.EVENT_ROW_DRAG_MOVE = "rowDragMove";
      Events2.EVENT_ROW_DRAG_LEAVE = "rowDragLeave";
      Events2.EVENT_ROW_DRAG_END = "rowDragEnd";
      Events2.EVENT_GRID_STYLES_CHANGED = "gridStylesChanged";
      Events2.EVENT_POPUP_TO_FRONT = "popupToFront";
      Events2.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = "columnRowGroupChangeRequest";
      Events2.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = "columnPivotChangeRequest";
      Events2.EVENT_COLUMN_VALUE_CHANGE_REQUEST = "columnValueChangeRequest";
      Events2.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = "columnAggFuncChangeRequest";
      Events2.EVENT_KEYBOARD_FOCUS = "keyboardFocus";
      Events2.EVENT_MOUSE_FOCUS = "mouseFocus";
      Events2.EVENT_STORE_UPDATED = "storeUpdated";
      Events2.EVENT_FILTER_DESTROYED = "filterDestroyed";
      Events2.EVENT_ROW_DATA_UPDATE_STARTED = "rowDataUpdateStarted";
      Events2.EVENT_ADVANCED_FILTER_ENABLED_CHANGED = "advancedFilterEnabledChanged";
      Events2.EVENT_DATA_TYPES_INFERRED = "dataTypesInferred";
      Events2.EVENT_FIELD_VALUE_CHANGED = "fieldValueChanged";
      Events2.EVENT_FIELD_PICKER_VALUE_SELECTED = "fieldPickerValueSelected";
      return Events2;
    }();
    GroupInstanceIdCreator = /** @class */
    function() {
      function GroupInstanceIdCreator2() {
        this.existingIds = {};
      }
      GroupInstanceIdCreator2.prototype.getInstanceIdForKey = function(key) {
        var lastResult = this.existingIds[key];
        var result;
        if (typeof lastResult !== "number") {
          result = 0;
        } else {
          result = lastResult + 1;
        }
        this.existingIds[key] = result;
        return result;
      };
      return GroupInstanceIdCreator2;
    }();
    __extends$35 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GROUP_AUTO_COLUMN_ID = "ag-Grid-AutoColumn";
    AutoGroupColService = /** @class */
    function(_super) {
      __extends$35(AutoGroupColService2, _super);
      function AutoGroupColService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AutoGroupColService2.prototype.createAutoGroupColumns = function(rowGroupColumns) {
        var _this = this;
        var groupAutoColumns = [];
        var doingTreeData = this.gridOptionsService.is("treeData");
        var doingMultiAutoColumn = this.gridOptionsService.isGroupMultiAutoColumn();
        if (doingTreeData && doingMultiAutoColumn) {
          console.warn('AG Grid: you cannot mix groupDisplayType = "multipleColumns" with treeData, only one column can be used to display groups when doing tree data');
          doingMultiAutoColumn = false;
        }
        if (doingMultiAutoColumn) {
          rowGroupColumns.forEach(function(rowGroupCol, index) {
            groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
          });
        } else {
          groupAutoColumns.push(this.createOneAutoGroupColumn());
        }
        return groupAutoColumns;
      };
      AutoGroupColService2.prototype.updateAutoGroupColumns = function(autoGroupColumns) {
        var _this = this;
        autoGroupColumns.forEach(function(column, index) {
          return _this.updateOneAutoGroupColumn(column, index);
        });
      };
      AutoGroupColService2.prototype.createOneAutoGroupColumn = function(rowGroupCol, index) {
        var colId;
        if (rowGroupCol) {
          colId = GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
        } else {
          colId = GROUP_AUTO_COLUMN_ID;
        }
        var colDef = this.createAutoGroupColDef(colId, rowGroupCol, index);
        colDef.colId = colId;
        var newCol = new Column(colDef, null, colId, true);
        this.context.createBean(newCol);
        return newCol;
      };
      AutoGroupColService2.prototype.updateOneAutoGroupColumn = function(colToUpdate, index) {
        var oldColDef = colToUpdate.getColDef();
        var underlyingColId = typeof oldColDef.showRowGroup == "string" ? oldColDef.showRowGroup : void 0;
        var underlyingColumn = underlyingColId != null ? this.columnModel.getPrimaryColumn(underlyingColId) : void 0;
        var colDef = this.createAutoGroupColDef(colToUpdate.getId(), underlyingColumn !== null && underlyingColumn !== void 0 ? underlyingColumn : void 0, index);
        colToUpdate.setColDef(colDef, null);
        this.columnFactory.applyColumnState(colToUpdate, colDef);
      };
      AutoGroupColService2.prototype.createAutoGroupColDef = function(colId, underlyingColumn, index) {
        var res = this.createBaseColDef(underlyingColumn);
        var autoGroupColumnDef = this.gridOptionsService.get("autoGroupColumnDef");
        mergeDeep(res, autoGroupColumnDef);
        res = this.columnFactory.addColumnDefaultAndTypes(res, colId);
        if (!this.gridOptionsService.is("treeData")) {
          var noFieldOrValueGetter = missing(res.field) && missing(res.valueGetter) && missing(res.filterValueGetter) && res.filter !== "agGroupColumnFilter";
          if (noFieldOrValueGetter) {
            res.filter = false;
          }
        }
        if (index && index > 0) {
          res.headerCheckboxSelection = false;
        }
        var isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();
        var hasOwnData = res.valueGetter || res.field != null;
        if (isSortingCoupled && !hasOwnData) {
          res.sortIndex = void 0;
          res.initialSort = void 0;
        }
        return res;
      };
      AutoGroupColService2.prototype.createBaseColDef = function(rowGroupCol) {
        var userDef = this.gridOptionsService.get("autoGroupColumnDef");
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        var res = {
          headerName: localeTextFunc("group", "Group")
        };
        var userHasProvidedGroupCellRenderer = userDef && (userDef.cellRenderer || userDef.cellRendererSelector);
        if (!userHasProvidedGroupCellRenderer) {
          res.cellRenderer = "agGroupCellRenderer";
        }
        if (rowGroupCol) {
          var colDef = rowGroupCol.getColDef();
          Object.assign(res, {
            // cellRendererParams.groupKey: colDefToCopy.field;
            headerName: this.columnModel.getDisplayNameForColumn(rowGroupCol, "header"),
            headerValueGetter: colDef.headerValueGetter
          });
          if (colDef.cellRenderer) {
            Object.assign(res, {
              cellRendererParams: {
                innerRenderer: colDef.cellRenderer,
                innerRendererParams: colDef.cellRendererParams
              }
            });
          }
          res.showRowGroup = rowGroupCol.getColId();
        } else {
          res.showRowGroup = true;
        }
        return res;
      };
      __decorate$2D([
        Autowired("columnModel")
      ], AutoGroupColService2.prototype, "columnModel", void 0);
      __decorate$2D([
        Autowired("columnFactory")
      ], AutoGroupColService2.prototype, "columnFactory", void 0);
      AutoGroupColService2 = __decorate$2D([
        Bean("autoGroupColService")
      ], AutoGroupColService2);
      return AutoGroupColService2;
    }(BeanStub);
    reUnescapedHtml = /[&<>"']/g;
    HTML_ESCAPES = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    StringUtils = Object.freeze({
      __proto__: null,
      utf8_encode,
      capitalise,
      escapeString,
      camelCaseToHumanText,
      camelCaseToHyphenated
    });
    MapUtils = Object.freeze({
      __proto__: null,
      convertToMap,
      mapById,
      keys
    });
    ColDefUtil = /** @class */
    function() {
      function ColDefUtil2() {
      }
      ColDefUtil2.ColDefPropertyMap = {
        headerName: void 0,
        columnGroupShow: void 0,
        headerClass: void 0,
        toolPanelClass: void 0,
        headerValueGetter: void 0,
        pivotKeys: void 0,
        groupId: void 0,
        colId: void 0,
        sort: void 0,
        initialSort: void 0,
        field: void 0,
        type: void 0,
        cellDataType: void 0,
        tooltipComponent: void 0,
        tooltipField: void 0,
        headerTooltip: void 0,
        cellClass: void 0,
        showRowGroup: void 0,
        filter: void 0,
        initialAggFunc: void 0,
        defaultAggFunc: void 0,
        aggFunc: void 0,
        pinned: void 0,
        initialPinned: void 0,
        chartDataType: void 0,
        cellEditorPopupPosition: void 0,
        headerGroupComponent: void 0,
        headerGroupComponentParams: void 0,
        cellStyle: void 0,
        cellRenderer: void 0,
        cellRendererParams: void 0,
        cellEditor: void 0,
        cellEditorParams: void 0,
        filterParams: void 0,
        pivotValueColumn: void 0,
        headerComponent: void 0,
        headerComponentParams: void 0,
        floatingFilterComponent: void 0,
        floatingFilterComponentParams: void 0,
        tooltipComponentParams: void 0,
        refData: void 0,
        columnsMenuParams: void 0,
        children: void 0,
        sortingOrder: void 0,
        allowedAggFuncs: void 0,
        menuTabs: void 0,
        pivotTotalColumnIds: void 0,
        cellClassRules: void 0,
        icons: void 0,
        sortIndex: void 0,
        initialSortIndex: void 0,
        flex: void 0,
        initialFlex: void 0,
        width: void 0,
        initialWidth: void 0,
        minWidth: void 0,
        maxWidth: void 0,
        rowGroupIndex: void 0,
        initialRowGroupIndex: void 0,
        pivotIndex: void 0,
        initialPivotIndex: void 0,
        suppressCellFlash: void 0,
        suppressColumnsToolPanel: void 0,
        suppressFiltersToolPanel: void 0,
        openByDefault: void 0,
        marryChildren: void 0,
        suppressStickyLabel: void 0,
        hide: void 0,
        initialHide: void 0,
        rowGroup: void 0,
        initialRowGroup: void 0,
        pivot: void 0,
        initialPivot: void 0,
        checkboxSelection: void 0,
        showDisabledCheckboxes: void 0,
        headerCheckboxSelection: void 0,
        headerCheckboxSelectionFilteredOnly: void 0,
        headerCheckboxSelectionCurrentPageOnly: void 0,
        suppressMenu: void 0,
        suppressMovable: void 0,
        lockPosition: void 0,
        lockVisible: void 0,
        lockPinned: void 0,
        unSortIcon: void 0,
        suppressSizeToFit: void 0,
        suppressAutoSize: void 0,
        enableRowGroup: void 0,
        enablePivot: void 0,
        enableValue: void 0,
        editable: void 0,
        suppressPaste: void 0,
        suppressNavigable: void 0,
        enableCellChangeFlash: void 0,
        rowDrag: void 0,
        dndSource: void 0,
        autoHeight: void 0,
        wrapText: void 0,
        sortable: void 0,
        resizable: void 0,
        singleClickEdit: void 0,
        floatingFilter: void 0,
        cellEditorPopup: void 0,
        suppressFillHandle: void 0,
        wrapHeaderText: void 0,
        autoHeaderHeight: void 0,
        dndSourceOnRowDrag: void 0,
        valueGetter: void 0,
        valueSetter: void 0,
        filterValueGetter: void 0,
        keyCreator: void 0,
        valueFormatter: void 0,
        valueParser: void 0,
        comparator: void 0,
        equals: void 0,
        pivotComparator: void 0,
        suppressKeyboardEvent: void 0,
        suppressHeaderKeyboardEvent: void 0,
        colSpan: void 0,
        rowSpan: void 0,
        getQuickFilterText: void 0,
        onCellValueChanged: void 0,
        onCellClicked: void 0,
        onCellDoubleClicked: void 0,
        onCellContextMenu: void 0,
        rowDragText: void 0,
        tooltipValueGetter: void 0,
        cellRendererSelector: void 0,
        cellEditorSelector: void 0,
        suppressSpanHeaderHeight: void 0,
        useValueFormatterForExport: void 0,
        useValueParserForImport: void 0
      };
      ColDefUtil2.ALL_PROPERTIES = Object.keys(ColDefUtil2.ColDefPropertyMap);
      return ColDefUtil2;
    }();
    __read$v = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$o = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    PropertyKeys = /** @class */
    function() {
      function PropertyKeys2() {
      }
      PropertyKeys2.STRING_PROPERTIES = [
        "rowSelection",
        "overlayLoadingTemplate",
        "overlayNoRowsTemplate",
        "gridId",
        "quickFilterText",
        "rowModelType",
        "editType",
        "domLayout",
        "clipboardDelimiter",
        "rowGroupPanelShow",
        "multiSortKey",
        "pivotColumnGroupTotals",
        "pivotRowTotals",
        "pivotPanelShow",
        "fillHandleDirection",
        "serverSideStoreType",
        "groupDisplayType",
        "treeDataDisplayType",
        "colResizeDefault",
        "tooltipTrigger",
        "serverSidePivotResultFieldSeparator"
      ];
      PropertyKeys2.OBJECT_PROPERTIES = [
        "components",
        "rowStyle",
        "context",
        "autoGroupColumnDef",
        "localeText",
        "icons",
        "datasource",
        "serverSideDatasource",
        "viewportDatasource",
        "groupRowRendererParams",
        "aggFuncs",
        "fullWidthCellRendererParams",
        "defaultColGroupDef",
        "defaultColDef",
        "defaultCsvExportParams",
        "defaultExcelExportParams",
        "columnTypes",
        "rowClassRules",
        "detailCellRendererParams",
        "loadingCellRendererParams",
        "loadingOverlayComponentParams",
        "noRowsOverlayComponentParams",
        "popupParent",
        "statusBar",
        "sideBar",
        "chartThemeOverrides",
        "customChartThemes",
        "chartToolPanelsDef",
        "dataTypeDefinitions",
        "advancedFilterModel",
        "advancedFilterParent",
        "advancedFilterBuilderParams"
      ];
      PropertyKeys2.ARRAY_PROPERTIES = [
        "sortingOrder",
        "alignedGrids",
        "rowData",
        "columnDefs",
        "excelStyles",
        "pinnedTopRowData",
        "pinnedBottomRowData",
        "chartThemes",
        "rowClass"
      ];
      PropertyKeys2.NUMBER_PROPERTIES = [
        "rowHeight",
        "detailRowHeight",
        "rowBuffer",
        "headerHeight",
        "groupHeaderHeight",
        "floatingFiltersHeight",
        "pivotHeaderHeight",
        "pivotGroupHeaderHeight",
        "groupDefaultExpanded",
        "pivotDefaultExpanded",
        "viewportRowModelPageSize",
        "viewportRowModelBufferSize",
        "autoSizePadding",
        "maxBlocksInCache",
        "maxConcurrentDatasourceRequests",
        "tooltipShowDelay",
        "tooltipHideDelay",
        "cacheOverflowSize",
        "paginationPageSize",
        "cacheBlockSize",
        "infiniteInitialRowCount",
        "serverSideInitialRowCount",
        "scrollbarWidth",
        "asyncTransactionWaitMillis",
        "blockLoadDebounceMillis",
        "keepDetailRowsCount",
        "undoRedoCellEditingLimit",
        "cellFlashDelay",
        "cellFadeDelay",
        "tabIndex"
      ];
      PropertyKeys2.BOOLEAN_PROPERTIES = [
        "suppressMakeColumnVisibleAfterUnGroup",
        "suppressRowClickSelection",
        "suppressCellFocus",
        "suppressHorizontalScroll",
        "alwaysShowHorizontalScroll",
        "alwaysShowVerticalScroll",
        "debug",
        "enableBrowserTooltips",
        "enableCellExpressions",
        "groupSelectsChildren",
        "groupIncludeTotalFooter",
        "groupSuppressBlankHeader",
        "suppressMenuHide",
        "suppressRowDeselection",
        "unSortIcon",
        "suppressMultiSort",
        "alwaysMultiSort",
        "singleClickEdit",
        "suppressLoadingOverlay",
        "suppressNoRowsOverlay",
        "suppressAutoSize",
        "skipHeaderOnAutoSize",
        "suppressParentsInRowNodes",
        "suppressColumnMoveAnimation",
        "suppressMovableColumns",
        "suppressFieldDotNotation",
        "enableRangeSelection",
        "enableRangeHandle",
        "enableFillHandle",
        "suppressClearOnFillReduction",
        "deltaSort",
        "suppressTouch",
        "suppressAsyncEvents",
        "allowContextMenuWithControlKey",
        "suppressContextMenu",
        "rememberGroupStateWhenNewData",
        "enableCellChangeFlash",
        "suppressDragLeaveHidesColumns",
        "suppressRowGroupHidesColumns",
        "suppressMiddleClickScrolls",
        "suppressPreventDefaultOnMouseWheel",
        "suppressCopyRowsToClipboard",
        "copyHeadersToClipboard",
        "copyGroupHeadersToClipboard",
        "pivotMode",
        "suppressAggFuncInHeader",
        "suppressColumnVirtualisation",
        "alwaysAggregateAtRootLevel",
        "suppressAggAtRootLevel",
        "suppressFocusAfterRefresh",
        "functionsPassive",
        "functionsReadOnly",
        "animateRows",
        "groupSelectsFiltered",
        "groupRemoveSingleChildren",
        "groupRemoveLowestSingleChildren",
        "enableRtl",
        "suppressClickEdit",
        "rowDragEntireRow",
        "rowDragManaged",
        "suppressRowDrag",
        "suppressMoveWhenRowDragging",
        "rowDragMultiRow",
        "enableGroupEdit",
        "embedFullWidthRows",
        "suppressPaginationPanel",
        "groupHideOpenParents",
        "groupAllowUnbalanced",
        "pagination",
        "paginationAutoPageSize",
        "suppressScrollOnNewData",
        "suppressScrollWhenPopupsAreOpen",
        "purgeClosedRowNodes",
        "cacheQuickFilter",
        "includeHiddenColumnsInQuickFilter",
        "excludeHiddenColumnsFromQuickFilter",
        "ensureDomOrder",
        "accentedSort",
        "suppressChangeDetection",
        "valueCache",
        "valueCacheNeverExpires",
        "aggregateOnlyChangedColumns",
        "suppressAnimationFrame",
        "suppressExcelExport",
        "suppressCsvExport",
        "treeData",
        "masterDetail",
        "suppressMultiRangeSelection",
        "enterMovesDown",
        "enterMovesDownAfterEdit",
        "enterNavigatesVerticallyAfterEdit",
        "enterNavigatesVertically",
        "suppressPropertyNamesCheck",
        "rowMultiSelectWithClick",
        "suppressRowHoverHighlight",
        "suppressRowTransform",
        "suppressClipboardPaste",
        "suppressLastEmptyLineOnPaste",
        "enableCharts",
        "enableChartToolPanelsButton",
        "suppressChartToolPanelsButton",
        "suppressMaintainUnsortedOrder",
        "enableCellTextSelection",
        "suppressBrowserResizeObserver",
        "suppressMaxRenderedRowRestriction",
        "excludeChildrenWhenTreeDataFiltering",
        "tooltipMouseTrack",
        "tooltipInteraction",
        "keepDetailRows",
        "paginateChildRows",
        "preventDefaultOnContextMenu",
        "undoRedoCellEditing",
        "allowDragFromColumnsToolPanel",
        "pivotSuppressAutoColumn",
        "suppressExpandablePivotGroups",
        "debounceVerticalScrollbar",
        "detailRowAutoHeight",
        "serverSideFilteringAlwaysResets",
        "serverSideFilterAllLevels",
        "serverSideSortingAlwaysResets",
        "serverSideSortAllLevels",
        "serverSideOnlyRefreshFilteredGroups",
        "serverSideSortOnServer",
        "serverSideFilterOnServer",
        "suppressAggFilteredOnly",
        "showOpenedGroup",
        "suppressClipboardApi",
        "suppressModelUpdateAfterUpdateTransaction",
        "stopEditingWhenCellsLoseFocus",
        "maintainColumnOrder",
        "groupMaintainOrder",
        "columnHoverHighlight",
        "suppressReactUi",
        "readOnlyEdit",
        "suppressRowVirtualisation",
        "enableCellEditingOnBackspace",
        "resetRowDataOnUpdate",
        "removePivotHeaderRowWhenSingleValueColumn",
        "suppressCopySingleCellRanges",
        "suppressGroupRowsSticky",
        "suppressServerSideInfiniteScroll",
        "rowGroupPanelSuppressSort",
        "allowShowChangeAfterFilter",
        "suppressCutToClipboard",
        "enableAdvancedFilter",
        "includeHiddenColumnsInAdvancedFilter"
      ];
      PropertyKeys2.FUNCTIONAL_PROPERTIES = [
        "doesExternalFilterPass",
        "processSecondaryColDef",
        "processSecondaryColGroupDef",
        "processPivotResultColDef",
        "processPivotResultColGroupDef",
        "getBusinessKeyForNode",
        "isRowSelectable",
        "rowDragText",
        "groupRowRenderer",
        "fullWidthCellRenderer",
        "loadingCellRenderer",
        "loadingOverlayComponent",
        "noRowsOverlayComponent",
        "detailCellRenderer",
        "quickFilterParser",
        "quickFilterMatcher"
      ];
      PropertyKeys2.CALLBACK_PROPERTIES = [
        "getLocaleText",
        "isExternalFilterPresent",
        "getRowHeight",
        "getRowClass",
        "getRowStyle",
        "getContextMenuItems",
        "getMainMenuItems",
        "processRowPostCreate",
        "processCellForClipboard",
        "getGroupRowAgg",
        "isFullWidthRow",
        "sendToClipboard",
        "navigateToNextHeader",
        "tabToNextHeader",
        "navigateToNextCell",
        "tabToNextCell",
        "processCellFromClipboard",
        "getDocument",
        "postProcessPopup",
        "getChildCount",
        "getDataPath",
        "isRowMaster",
        "postSortRows",
        "processHeaderForClipboard",
        "processGroupHeaderForClipboard",
        "paginationNumberFormatter",
        "processDataFromClipboard",
        "getServerSideGroupKey",
        "isServerSideGroup",
        "createChartContainer",
        "getChartToolbarItems",
        "fillOperation",
        "isApplyServerSideTransaction",
        "getServerSideStoreParams",
        "getServerSideGroupLevelParams",
        "isServerSideGroupOpenByDefault",
        "isGroupOpenByDefault",
        "initialGroupOrderComparator",
        "groupIncludeFooter",
        "loadingCellRendererSelector",
        "getRowId",
        "groupAggFiltering"
      ];
      PropertyKeys2.FUNCTION_PROPERTIES = __spreadArray$o(__spreadArray$o([], __read$v(PropertyKeys2.FUNCTIONAL_PROPERTIES)), __read$v(PropertyKeys2.CALLBACK_PROPERTIES));
      PropertyKeys2.ALL_PROPERTIES = __spreadArray$o(__spreadArray$o(__spreadArray$o(__spreadArray$o(__spreadArray$o(__spreadArray$o([], __read$v(PropertyKeys2.ARRAY_PROPERTIES)), __read$v(PropertyKeys2.OBJECT_PROPERTIES)), __read$v(PropertyKeys2.STRING_PROPERTIES)), __read$v(PropertyKeys2.NUMBER_PROPERTIES)), __read$v(PropertyKeys2.FUNCTION_PROPERTIES)), __read$v(PropertyKeys2.BOOLEAN_PROPERTIES));
      return PropertyKeys2;
    }();
    __assign$n = function() {
      __assign$n = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$n.apply(this, arguments);
    };
    __read$u = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$n = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    ComponentUtil = /** @class */
    function() {
      function ComponentUtil2() {
      }
      ComponentUtil2.getCallbackForEvent = function(eventName) {
        if (!eventName || eventName.length < 2) {
          return eventName;
        }
        return "on" + eventName[0].toUpperCase() + eventName.substr(1);
      };
      ComponentUtil2.getCoercionLookup = function() {
        var coercionLookup = {};
        __spreadArray$n(__spreadArray$n(__spreadArray$n(__spreadArray$n(__spreadArray$n([], __read$u(ComponentUtil2.ARRAY_PROPERTIES)), __read$u(ComponentUtil2.OBJECT_PROPERTIES)), __read$u(ComponentUtil2.STRING_PROPERTIES)), __read$u(ComponentUtil2.FUNCTION_PROPERTIES)), __read$u(ComponentUtil2.EVENT_CALLBACKS)).forEach(function(key) {
          return coercionLookup[key] = "none";
        });
        ComponentUtil2.BOOLEAN_PROPERTIES.forEach(function(key) {
          return coercionLookup[key] = "boolean";
        });
        ComponentUtil2.NUMBER_PROPERTIES.forEach(function(key) {
          return coercionLookup[key] = "number";
        });
        return coercionLookup;
      };
      ComponentUtil2.getValue = function(key, rawValue) {
        var coercionStep = ComponentUtil2.coercionLookup[key];
        if (coercionStep) {
          var newValue = rawValue;
          switch (coercionStep) {
            case "number": {
              newValue = ComponentUtil2.toNumber(rawValue);
              break;
            }
            case "boolean": {
              newValue = ComponentUtil2.toBoolean(rawValue);
              break;
            }
            case "none": {
              if (key === "groupAggFiltering" && typeof rawValue !== "function") {
                newValue = ComponentUtil2.toBoolean(rawValue);
              }
              break;
            }
          }
          return newValue;
        }
        return void 0;
      };
      ComponentUtil2.getGridOptionKeys = function(component, isVue) {
        return isVue ? Object.keys(ComponentUtil2.coercionLookup) : Object.keys(component);
      };
      ComponentUtil2.copyAttributesToGridOptions = function(gridOptions, component, isVue) {
        if (isVue === void 0) {
          isVue = false;
        }
        if (typeof gridOptions !== "object") {
          gridOptions = {};
        }
        var pGridOptions = gridOptions;
        var keys2 = ComponentUtil2.getGridOptionKeys(component, isVue);
        keys2.forEach(function(key) {
          var value = component[key];
          if (typeof value !== "undefined") {
            var coercedValue = ComponentUtil2.getValue(key, value);
            if (coercedValue !== void 0) {
              pGridOptions[key] = coercedValue;
            }
          }
        });
        return gridOptions;
      };
      ComponentUtil2.processOnChange = function(changes, api) {
        var _this = this;
        if (!changes || Object.keys(changes).length === 0) {
          return;
        }
        this.changeSetId++;
        var changesToApply = __assign$n({}, changes);
        if (changesToApply.columnTypes) {
          api.setColumnTypes(changesToApply.columnTypes.currentValue, "gridOptionsChanged");
          delete changesToApply.columnTypes;
        }
        if (changesToApply.autoGroupColumnDef) {
          api.setAutoGroupColumnDef(changesToApply.autoGroupColumnDef.currentValue, "gridOptionsChanged");
          delete changesToApply.autoGroupColumnDef;
        }
        if (changesToApply.defaultColDef) {
          api.setDefaultColDef(changesToApply.defaultColDef.currentValue, "gridOptionsChanged");
          delete changesToApply.defaultColDef;
        }
        if (changesToApply.columnDefs) {
          api.setColumnDefs(changesToApply.columnDefs.currentValue, "gridOptionsChanged");
          delete changesToApply.columnDefs;
        }
        var updates = Object.keys(changesToApply).map(function(key) {
          var gridKey = key;
          var coercedValue = ComponentUtil2.getValue(gridKey, changesToApply[gridKey].currentValue);
          var isChanged = api.__setPropertyOnly(gridKey, coercedValue);
          return { gridKey, coercedValue, isChanged };
        }).filter(function(u) {
          return u.isChanged;
        });
        var updatedKeys = updates.map(function(u) {
          return u.gridKey;
        });
        updates.forEach(function(u) {
          return api.__updateProperty(u.gridKey, u.coercedValue, u.isChanged, { id: _this.changeSetId, properties: updatedKeys });
        });
        var event = {
          type: Events.EVENT_COMPONENT_STATE_CHANGED
        };
        iterateObject(changes, function(key, value) {
          event[key] = value;
        });
        api.dispatchEvent(event);
      };
      ComponentUtil2.toBoolean = function(value) {
        if (typeof value === "boolean") {
          return value;
        }
        if (typeof value === "string") {
          return value.toUpperCase() === "TRUE" || value == "";
        }
        return false;
      };
      ComponentUtil2.toNumber = function(value) {
        if (typeof value === "number") {
          return value;
        }
        if (typeof value === "string") {
          return Number(value);
        }
      };
      ComponentUtil2.EVENTS = values(Events);
      ComponentUtil2.EXCLUDED_INTERNAL_EVENTS = [
        Events.EVENT_SCROLLBAR_WIDTH_CHANGED,
        Events.EVENT_CHECKBOX_CHANGED,
        Events.EVENT_HEIGHT_SCALE_CHANGED,
        Events.EVENT_BODY_HEIGHT_CHANGED,
        Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
        Events.EVENT_SCROLL_VISIBILITY_CHANGED,
        Events.EVENT_COLUMN_HOVER_CHANGED,
        Events.EVENT_FLASH_CELLS,
        Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED,
        Events.EVENT_DISPLAYED_ROWS_CHANGED,
        Events.EVENT_LEFT_PINNED_WIDTH_CHANGED,
        Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED,
        Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED,
        Events.EVENT_POPUP_TO_FRONT,
        Events.EVENT_KEYBOARD_FOCUS,
        Events.EVENT_MOUSE_FOCUS,
        Events.EVENT_STORE_UPDATED,
        Events.EVENT_COLUMN_PANEL_ITEM_DRAG_START,
        Events.EVENT_COLUMN_PANEL_ITEM_DRAG_END,
        Events.EVENT_FILL_START,
        Events.EVENT_FILL_END,
        Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START,
        Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END,
        Events.EVENT_FULL_WIDTH_ROW_FOCUSED,
        Events.EVENT_HEADER_HEIGHT_CHANGED,
        Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,
        Events.EVENT_CELL_FOCUS_CLEARED,
        Events.EVENT_GRID_STYLES_CHANGED,
        Events.EVENT_FILTER_DESTROYED,
        Events.EVENT_ROW_DATA_UPDATE_STARTED,
        Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED,
        Events.EVENT_DATA_TYPES_INFERRED,
        Events.EVENT_FIELD_VALUE_CHANGED,
        Events.EVENT_FIELD_PICKER_VALUE_SELECTED
      ];
      ComponentUtil2.PUBLIC_EVENTS = ComponentUtil2.EVENTS.filter(function(e) {
        return !includes(ComponentUtil2.EXCLUDED_INTERNAL_EVENTS, e);
      });
      ComponentUtil2.EVENT_CALLBACKS = ComponentUtil2.EVENTS.map(function(event) {
        return ComponentUtil2.getCallbackForEvent(event);
      });
      ComponentUtil2.STRING_PROPERTIES = PropertyKeys.STRING_PROPERTIES;
      ComponentUtil2.OBJECT_PROPERTIES = PropertyKeys.OBJECT_PROPERTIES;
      ComponentUtil2.ARRAY_PROPERTIES = PropertyKeys.ARRAY_PROPERTIES;
      ComponentUtil2.NUMBER_PROPERTIES = PropertyKeys.NUMBER_PROPERTIES;
      ComponentUtil2.BOOLEAN_PROPERTIES = PropertyKeys.BOOLEAN_PROPERTIES;
      ComponentUtil2.FUNCTION_PROPERTIES = PropertyKeys.FUNCTION_PROPERTIES;
      ComponentUtil2.ALL_PROPERTIES = PropertyKeys.ALL_PROPERTIES;
      ComponentUtil2.ALL_PROPERTIES_SET = new Set(PropertyKeys.ALL_PROPERTIES);
      ComponentUtil2.changeSetId = 0;
      ComponentUtil2.coercionLookup = ComponentUtil2.getCoercionLookup();
      return ComponentUtil2;
    }();
    __values$7 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    FuzzyMatchUtils = Object.freeze({
      __proto__: null,
      fuzzyCheckStrings,
      fuzzySuggestions
    });
    __decorate$2C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$t = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$m = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    VUE_FRAMEWORK_PROPS = ["__ob__", "__v_skip", "__metadata__"];
    GridOptionsValidator = /** @class */
    function() {
      function GridOptionsValidator2() {
        this.deprecatedProperties = {
          rememberGroupStateWhenNewData: { version: "24", message: "Now that transaction updates are possible and they keep group state, this feature is no longer needed." },
          serverSideFilteringAlwaysResets: { version: "28.0", newProp: "serverSideOnlyRefreshFilteredGroups", copyToNewProp: true },
          serverSideSortingAlwaysResets: { version: "28.0", newProp: "serverSideSortAllLevels", copyToNewProp: true },
          suppressReactUi: { version: "28", message: "The legacy React rendering engine is deprecated and will be removed in the next major version of the grid." },
          processSecondaryColDef: { version: "28", newProp: "processPivotResultColDef", copyToNewProp: true },
          processSecondaryColGroupDef: { version: "28", newProp: "processPivotResultColGroupDef", copyToNewProp: true },
          getServerSideStoreParams: { version: "28", newProp: "getServerSideGroupLevelParams", copyToNewProp: true },
          serverSideInfiniteScroll: { version: "29", message: "Infinite Scrolling is now the default behaviour. This can be suppressed with `suppressServerSideInfiniteScroll`." },
          enableChartToolPanelsButton: { version: "29", message: "The Chart Tool Panels button is now enabled by default. To hide the Chart Tool Panels button and display the hamburger button instead, set suppressChartToolPanelsButton=true." },
          functionsPassive: { version: "29.2" },
          onColumnRowGroupChangeRequest: { version: "29.2" },
          onColumnPivotChangeRequest: { version: "29.2" },
          onColumnValueChangeRequest: { version: "29.2" },
          onColumnAggFuncChangeRequest: { version: "29.2" },
          serverSideFilterAllLevels: { version: "30", message: "All server-side group levels are now filtered by default. This can be toggled using `serverSideOnlyRefreshFilteredGroups`." },
          suppressAggAtRootLevel: { version: "30", message: "The root level aggregation is now suppressed by default. This can be toggled using  `alwaysAggregateAtRootLevel`." },
          excludeHiddenColumnsFromQuickFilter: { version: "30", message: "Hidden columns are now excluded from the Quick Filter by default. This can be toggled using `includeHiddenColumnsInQuickFilter`." },
          enterMovesDown: { version: "30", newProp: "enterNavigatesVertically", copyToNewProp: true },
          enterMovesDownAfterEdit: { version: "30", newProp: "enterNavigatesVerticallyAfterEdit", copyToNewProp: true },
          suppressParentsInRowNodes: { version: "30.2", message: "Using suppressParentsInRowNodes is no longer recommended. To serialize nodes it is now recommended to instead remove the parent node reference before serialization." }
        };
      }
      GridOptionsValidator2.prototype.pickOneWarning = function(prop1, prop2) {
        console.warn("AG Grid: " + prop1 + " and " + prop2 + " do not work with each other, you need to pick one.");
      };
      GridOptionsValidator2.prototype.init = function() {
        var _this = this;
        this.checkForDeprecated();
        this.checkForViolations();
        if (this.gridOptions.suppressPropertyNamesCheck !== true) {
          this.checkGridOptionsProperties();
          this.checkColumnDefProperties();
        }
        this.checkColumnDefViolations();
        if (this.gridOptionsService.is("groupSelectsChildren") && this.gridOptionsService.is("suppressParentsInRowNodes")) {
          console.warn("AG Grid: 'groupSelectsChildren' does not work with 'suppressParentsInRowNodes', this selection method needs the part in rowNode to work");
        }
        if (this.gridOptionsService.is("groupSelectsChildren")) {
          if (this.gridOptionsService.get("rowSelection") !== "multiple") {
            console.warn("AG Grid: rowSelection must be 'multiple' for groupSelectsChildren to make sense");
          }
        }
        if (this.gridOptionsService.is("groupRemoveSingleChildren") && this.gridOptionsService.is("groupHideOpenParents")) {
          this.pickOneWarning("groupRemoveSingleChildren", "groupHideOpenParents");
        }
        if (this.gridOptionsService.isRowModelType("serverSide")) {
          var msg = function(prop, alt) {
            return "AG Grid: '" + prop + "' is not supported on the Server-Side Row Model." + (alt ? " Please use " + alt + " instead." : "");
          };
          if (this.gridOptionsService.exists("groupDefaultExpanded")) {
            console.warn(msg("groupDefaultExpanded", "isServerSideGroupOpenByDefault callback"));
          }
          if (this.gridOptionsService.exists("groupIncludeFooter") && this.gridOptionsService.is("suppressServerSideInfiniteScroll")) {
            console.warn(msg("groupIncludeFooter"));
          }
          if (this.gridOptionsService.exists("groupIncludeTotalFooter")) {
            console.warn(msg("groupIncludeTotalFooter"));
          }
        }
        if (this.gridOptionsService.is("enableRangeSelection")) {
          ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, "enableRangeSelection", this.gridOptionsService.getGridId());
        } else if (this.gridOptionsService.is("enableRangeHandle") || this.gridOptionsService.is("enableFillHandle")) {
          console.warn("AG Grid: 'enableRangeHandle' or 'enableFillHandle' will not work unless 'enableRangeSelection' is set to true");
        }
        var validateRegistered = function(prop, module) {
          return _this.gridOptionsService.exists(prop) && ModuleRegistry.__assertRegistered(module, prop, _this.gridOptionsService.getGridId());
        };
        validateRegistered("sideBar", ModuleNames.SideBarModule);
        validateRegistered("statusBar", ModuleNames.StatusBarModule);
        validateRegistered("enableCharts", ModuleNames.GridChartsModule);
        validateRegistered("getMainMenuItems", ModuleNames.MenuModule);
        validateRegistered("getContextMenuItems", ModuleNames.MenuModule);
        validateRegistered("allowContextMenuWithControlKey", ModuleNames.MenuModule);
        validateRegistered("enableAdvancedFilter", ModuleNames.AdvancedFilterModule);
        validateRegistered("treeData", ModuleNames.RowGroupingModule);
        validateRegistered("enableRangeSelection", ModuleNames.RangeSelectionModule);
        validateRegistered("masterDetail", ModuleNames.MasterDetailModule);
      };
      GridOptionsValidator2.prototype.checkColumnDefProperties = function() {
        var _this = this;
        if (this.gridOptions.columnDefs == null) {
          return;
        }
        var validProperties = ColDefUtil.ALL_PROPERTIES;
        var validateColDef = function(colDef, propertyName) {
          var userProperties = Object.getOwnPropertyNames(colDef);
          _this.checkProperties(userProperties, __spreadArray$m(__spreadArray$m([], __read$t(validProperties)), __read$t(VUE_FRAMEWORK_PROPS)), validProperties, propertyName, "https://www.ag-grid.com/javascript-data-grid/column-properties/");
          if (colDef.children) {
            colDef.children.forEach(function(child) {
              return validateColDef(child, "columnDefs.children");
            });
          }
        };
        this.gridOptions.columnDefs.forEach(function(colDef) {
          return validateColDef(colDef, "columnDefs");
        });
        if (this.gridOptions.defaultColDef) {
          validateColDef(this.gridOptions.defaultColDef, "defaultColDef");
        }
      };
      GridOptionsValidator2.prototype.checkColumnDefViolations = function() {
        var _a;
        var rowModel = (_a = this.gridOptionsService.get("rowModelType")) !== null && _a !== void 0 ? _a : "clientSide";
        var unsupportedPropertiesMap = {
          infinite: ["headerCheckboxSelection", "headerCheckboxSelectionFilteredOnly", "headerCheckboxSelectionCurrentPageOnly"],
          viewport: ["headerCheckboxSelection", "headerCheckboxSelectionFilteredOnly", "headerCheckboxSelectionCurrentPageOnly"],
          serverSide: ["headerCheckboxSelectionFilteredOnly", "headerCheckboxSelectionCurrentPageOnly"],
          clientSide: []
        };
        var unsupportedProperties = unsupportedPropertiesMap[rowModel];
        if (!unsupportedProperties) {
          return;
        }
        var isMultiSelect = this.gridOptionsService.get("rowSelection") === "multiple";
        var multiSelectDependencies = ["headerCheckboxSelection", "headerCheckboxSelectionFilteredOnly", "headerCheckboxSelectionCurrentPageOnly"];
        var validateColDef = function(colDef) {
          if (!isMultiSelect) {
            multiSelectDependencies.forEach(function(property) {
              if (property in colDef && !!colDef[property]) {
                console.warn("AG Grid: Column property " + property + " is not supported unless rowSelection='multiple'.");
              }
            });
          }
          unsupportedProperties.forEach(function(property) {
            if (property in colDef && !!colDef[property]) {
              console.warn("AG Grid: Column property " + property + " is not supported with the row model type " + rowModel + ".");
            }
          });
        };
        if (this.gridOptions.columnDefs != null) {
          this.gridOptions.columnDefs.forEach(function(colDef) {
            return validateColDef(colDef);
          });
        }
        if (this.gridOptions.autoGroupColumnDef != null) {
          validateColDef(this.gridOptions.autoGroupColumnDef);
        }
        if (this.gridOptions.defaultColDef != null) {
          validateColDef(this.gridOptions.defaultColDef);
        }
      };
      GridOptionsValidator2.prototype.checkGridOptionsProperties = function() {
        var userProperties = Object.getOwnPropertyNames(this.gridOptions);
        var validProperties = __spreadArray$m(__spreadArray$m([], __read$t(PropertyKeys.ALL_PROPERTIES)), __read$t(ComponentUtil.EVENT_CALLBACKS));
        var validPropertiesAndExceptions = __spreadArray$m(__spreadArray$m(__spreadArray$m(__spreadArray$m([], __read$t(validProperties)), ["api", "columnApi"]), __read$t(VUE_FRAMEWORK_PROPS)), __read$t(Object.keys(this.deprecatedProperties)));
        this.checkProperties(userProperties, validPropertiesAndExceptions, validProperties, "gridOptions", "https://www.ag-grid.com/javascript-data-grid/grid-options/");
      };
      GridOptionsValidator2.prototype.checkProperties = function(userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl) {
        var invalidProperties = fuzzyCheckStrings(userProperties, validPropertiesAndExceptions, validProperties);
        iterateObject(invalidProperties, function(key, value) {
          doOnce(function() {
            return console.warn("AG Grid: invalid " + containerName + " property '" + key + "' did you mean any of these: " + value.slice(0, 8).join(", "));
          }, "invalidProperty" + containerName + key);
        });
        if (Object.keys(invalidProperties).length > 0) {
          doOnce(function() {
            return console.warn("AG Grid: to see all the valid " + containerName + " properties please check: " + docsUrl);
          }, "invalidProperties" + containerName + docsUrl);
        }
      };
      GridOptionsValidator2.prototype.checkForDeprecated = function() {
        var options = this.gridOptions;
        Object.entries(this.deprecatedProperties).forEach(function(_a) {
          var _b;
          var _c = __read$t(_a, 2), oldProp = _c[0], details = _c[1];
          var oldPropValue = options[oldProp];
          if (oldPropValue) {
            logDeprecation(details.version, oldProp, details.newProp, details.message);
            if (details.copyToNewProp && details.newProp && options[details.newProp] == null) {
              options[details.newProp] = (_b = details.newPropValue) !== null && _b !== void 0 ? _b : oldPropValue;
            }
          }
        });
        if (options.serverSideStoreType) {
          console.warn("AG Grid: since v29.0, `serverSideStoreType` has been replaced by `suppressServerSideInfiniteScroll`. Set to false to use Partial Store, and true to use Full Store.");
          options.suppressServerSideInfiniteScroll = options.serverSideStoreType !== "partial";
        }
      };
      GridOptionsValidator2.prototype.checkForViolations = function() {
        if (this.gridOptionsService.is("treeData")) {
          this.treeDataViolations();
        }
      };
      GridOptionsValidator2.prototype.treeDataViolations = function() {
        if (this.gridOptionsService.isRowModelType("clientSide")) {
          if (!this.gridOptionsService.exists("getDataPath")) {
            console.warn("AG Grid: property usingTreeData=true with rowModel=clientSide, but you did not provide getDataPath function, please provide getDataPath function if using tree data.");
          }
        }
        if (this.gridOptionsService.isRowModelType("serverSide")) {
          if (!this.gridOptionsService.exists("isServerSideGroup")) {
            console.warn("AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide isServerSideGroup function, please provide isServerSideGroup function if using tree data.");
          }
          if (!this.gridOptionsService.exists("getServerSideGroupKey")) {
            console.warn("AG Grid: property usingTreeData=true with rowModel=serverSide, but you did not provide getServerSideGroupKey function, please provide getServerSideGroupKey function if using tree data.");
          }
        }
      };
      __decorate$2C([
        Autowired("gridOptions")
      ], GridOptionsValidator2.prototype, "gridOptions", void 0);
      __decorate$2C([
        Autowired("gridOptionsService")
      ], GridOptionsValidator2.prototype, "gridOptionsService", void 0);
      __decorate$2C([
        PostConstruct
      ], GridOptionsValidator2.prototype, "init", null);
      GridOptionsValidator2 = __decorate$2C([
        Bean("gridOptionsValidator")
      ], GridOptionsValidator2);
      return GridOptionsValidator2;
    }();
    __extends$34 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$8 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __read$s = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$l = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    __values$6 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    ColumnModel = /** @class */
    function(_super) {
      __extends$34(ColumnModel2, _super);
      function ColumnModel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.primaryHeaderRowCount = 0;
        _this.secondaryHeaderRowCount = 0;
        _this.gridHeaderRowCount = 0;
        _this.displayedColumnsLeft = [];
        _this.displayedColumnsRight = [];
        _this.displayedColumnsCenter = [];
        _this.displayedColumns = [];
        _this.displayedColumnsAndGroupsMap = {};
        _this.viewportColumns = [];
        _this.viewportColumnsHash = "";
        _this.headerViewportColumns = [];
        _this.viewportColumnsCenter = [];
        _this.headerViewportColumnsCenter = [];
        _this.autoHeightActiveAtLeastOnce = false;
        _this.rowGroupColumns = [];
        _this.valueColumns = [];
        _this.pivotColumns = [];
        _this.ready = false;
        _this.autoGroupsNeedBuilding = false;
        _this.forceRecreateAutoGroups = false;
        _this.pivotMode = false;
        _this.bodyWidth = 0;
        _this.leftWidth = 0;
        _this.rightWidth = 0;
        _this.bodyWidthDirty = true;
        _this.shouldQueueResizeOperations = false;
        _this.resizeOperationQueue = [];
        return _this;
      }
      ColumnModel2.prototype.init = function() {
        var _this = this;
        this.suppressColumnVirtualisation = this.gridOptionsService.is("suppressColumnVirtualisation");
        var pivotMode = this.gridOptionsService.is("pivotMode");
        if (this.isPivotSettingAllowed(pivotMode)) {
          this.pivotMode = pivotMode;
        }
        this.addManagedPropertyListeners(["groupDisplayType", "treeData"], function() {
          return _this.buildAutoGroupColumns();
        });
        this.addManagedPropertyListener("autoGroupColumnDef", function() {
          return _this.onAutoGroupColumnDefChanged();
        });
        this.addManagedPropertyListener("defaultColDef", function(params) {
          return _this.onSharedColDefChanged(params.source);
        });
        this.addManagedPropertyListener("columnTypes", function(params) {
          return _this.onSharedColDefChanged(params.source);
        });
      };
      ColumnModel2.prototype.buildAutoGroupColumns = function() {
        if (!this.columnDefs) {
          return;
        }
        this.autoGroupsNeedBuilding = true;
        this.forceRecreateAutoGroups = true;
        this.updateGridColumns();
        this.updateDisplayedColumns("gridOptionsChanged");
      };
      ColumnModel2.prototype.onAutoGroupColumnDefChanged = function() {
        if (this.groupAutoColumns) {
          this.autoGroupColService.updateAutoGroupColumns(this.groupAutoColumns);
        }
      };
      ColumnModel2.prototype.onSharedColDefChanged = function(source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.groupAutoColumns) {
          this.autoGroupColService.updateAutoGroupColumns(this.groupAutoColumns);
        }
        this.createColumnsFromColumnDefs(true, source);
      };
      ColumnModel2.prototype.setColumnDefs = function(columnDefs, source) {
        if (source === void 0) {
          source = "api";
        }
        var colsPreviouslyExisted = !!this.columnDefs;
        this.columnDefs = columnDefs;
        this.createColumnsFromColumnDefs(colsPreviouslyExisted, source);
      };
      ColumnModel2.prototype.recreateColumnDefs = function(source) {
        if (source === void 0) {
          source = "api";
        }
        this.onSharedColDefChanged(source);
      };
      ColumnModel2.prototype.destroyOldColumns = function(oldTree, newTree) {
        var oldObjectsById = {};
        if (!oldTree) {
          return;
        }
        this.columnUtils.depthFirstOriginalTreeSearch(null, oldTree, function(child) {
          oldObjectsById[child.getInstanceId()] = child;
        });
        if (newTree) {
          this.columnUtils.depthFirstOriginalTreeSearch(null, newTree, function(child) {
            oldObjectsById[child.getInstanceId()] = null;
          });
        }
        var colsToDestroy = Object.values(oldObjectsById).filter(function(item) {
          return item != null;
        });
        this.destroyBeans(colsToDestroy);
      };
      ColumnModel2.prototype.destroyColumns = function() {
        this.destroyOldColumns(this.primaryColumnTree);
        this.destroyOldColumns(this.secondaryBalancedTree);
        this.destroyOldColumns(this.groupAutoColsBalancedTree);
      };
      ColumnModel2.prototype.createColumnsFromColumnDefs = function(colsPreviouslyExisted, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        var dispatchEventsFunc = colsPreviouslyExisted ? this.compareColumnStatesAndDispatchEvents(source) : void 0;
        this.valueCache.expire();
        this.autoGroupsNeedBuilding = true;
        var oldPrimaryColumns = this.primaryColumns;
        var oldPrimaryTree = this.primaryColumnTree;
        var balancedTreeResult = this.columnFactory.createColumnTree(this.columnDefs, true, oldPrimaryTree);
        this.destroyOldColumns(this.primaryColumnTree, balancedTreeResult.columnTree);
        this.primaryColumnTree = balancedTreeResult.columnTree;
        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
        this.primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
        this.primaryColumnsMap = {};
        this.primaryColumns.forEach(function(col) {
          return _this.primaryColumnsMap[col.getId()] = col;
        });
        this.extractRowGroupColumns(source, oldPrimaryColumns);
        this.extractPivotColumns(source, oldPrimaryColumns);
        this.extractValueColumns(source, oldPrimaryColumns);
        this.ready = true;
        var gridColsNotProcessed = this.gridColsArePrimary === void 0;
        var processGridCols = this.gridColsArePrimary || gridColsNotProcessed || this.autoGroupsNeedBuilding;
        if (processGridCols) {
          this.updateGridColumns();
          if (colsPreviouslyExisted && this.gridColsArePrimary && !this.gridOptionsService.is("maintainColumnOrder")) {
            this.orderGridColumnsLikePrimary();
          }
          this.updateDisplayedColumns(source);
          this.checkViewportColumns();
        }
        this.dispatchEverythingChanged(source);
        if (dispatchEventsFunc) {
          dispatchEventsFunc();
        }
        this.dispatchNewColumnsLoaded(source);
      };
      ColumnModel2.prototype.dispatchNewColumnsLoaded = function(source) {
        var newColumnsLoadedEvent = {
          type: Events.EVENT_NEW_COLUMNS_LOADED,
          source
        };
        this.eventService.dispatchEvent(newColumnsLoadedEvent);
      };
      ColumnModel2.prototype.dispatchEverythingChanged = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var eventEverythingChanged = {
          type: Events.EVENT_COLUMN_EVERYTHING_CHANGED,
          source
        };
        this.eventService.dispatchEvent(eventEverythingChanged);
      };
      ColumnModel2.prototype.orderGridColumnsLikePrimary = function() {
        var _this = this;
        var primaryColumns = this.primaryColumns;
        if (!primaryColumns) {
          return;
        }
        var primaryColsOrdered = primaryColumns.filter(function(col) {
          return _this.gridColumns.indexOf(col) >= 0;
        });
        var otherCols = this.gridColumns.filter(function(col) {
          return primaryColsOrdered.indexOf(col) < 0;
        });
        this.gridColumns = __spreadArray$l(__spreadArray$l([], __read$s(otherCols)), __read$s(primaryColsOrdered));
        this.gridColumns = this.placeLockedColumns(this.gridColumns);
      };
      ColumnModel2.prototype.getAllDisplayedAutoHeightCols = function() {
        return this.displayedAutoHeightCols;
      };
      ColumnModel2.prototype.setViewport = function() {
        if (this.gridOptionsService.is("enableRtl")) {
          this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
          this.viewportRight = this.bodyWidth - this.scrollPosition;
        } else {
          this.viewportLeft = this.scrollPosition;
          this.viewportRight = this.scrollWidth + this.scrollPosition;
        }
      };
      ColumnModel2.prototype.getDisplayedColumnsStartingAt = function(column) {
        var currentColumn = column;
        var columns = [];
        while (currentColumn != null) {
          columns.push(currentColumn);
          currentColumn = this.getDisplayedColAfter(currentColumn);
        }
        return columns;
      };
      ColumnModel2.prototype.checkViewportColumns = function(afterScroll) {
        if (afterScroll === void 0) {
          afterScroll = false;
        }
        if (this.displayedColumnsCenter == null) {
          return;
        }
        var viewportColumnsChanged = this.extractViewport();
        if (!viewportColumnsChanged) {
          return;
        }
        var event = {
          type: Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
          afterScroll
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.setViewportPosition = function(scrollWidth, scrollPosition, afterScroll) {
        if (afterScroll === void 0) {
          afterScroll = false;
        }
        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
          this.scrollWidth = scrollWidth;
          this.scrollPosition = scrollPosition;
          this.bodyWidthDirty = true;
          this.setViewport();
          if (this.ready) {
            this.checkViewportColumns(afterScroll);
          }
        }
      };
      ColumnModel2.prototype.isPivotMode = function() {
        return this.pivotMode;
      };
      ColumnModel2.prototype.isPivotSettingAllowed = function(pivot) {
        if (pivot && this.gridOptionsService.is("treeData")) {
          console.warn("AG Grid: Pivot mode not available in conjunction Tree Data i.e. 'gridOptions.treeData: true'");
          return false;
        }
        return true;
      };
      ColumnModel2.prototype.setPivotMode = function(pivotMode, source) {
        if (source === void 0) {
          source = "api";
        }
        if (pivotMode === this.pivotMode || !this.isPivotSettingAllowed(this.pivotMode)) {
          return;
        }
        this.pivotMode = pivotMode;
        this.autoGroupsNeedBuilding = true;
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
        var event = {
          type: Events.EVENT_COLUMN_PIVOT_MODE_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
        if (missing(this.secondaryColumns)) {
          return null;
        }
        var valueColumnToFind = this.getPrimaryColumn(valueColKey);
        var foundColumn = null;
        this.secondaryColumns.forEach(function(column) {
          var thisPivotKeys = column.getColDef().pivotKeys;
          var pivotValueColumn = column.getColDef().pivotValueColumn;
          var pivotKeyMatches = areEqual(thisPivotKeys, pivotKeys);
          var pivotValueMatches = pivotValueColumn === valueColumnToFind;
          if (pivotKeyMatches && pivotValueMatches) {
            foundColumn = column;
          }
        });
        return foundColumn;
      };
      ColumnModel2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("columnModel");
      };
      ColumnModel2.prototype.setFirstRightAndLastLeftPinned = function(source) {
        var lastLeft;
        var firstRight;
        if (this.gridOptionsService.is("enableRtl")) {
          lastLeft = this.displayedColumnsLeft ? this.displayedColumnsLeft[0] : null;
          firstRight = this.displayedColumnsRight ? last(this.displayedColumnsRight) : null;
        } else {
          lastLeft = this.displayedColumnsLeft ? last(this.displayedColumnsLeft) : null;
          firstRight = this.displayedColumnsRight ? this.displayedColumnsRight[0] : null;
        }
        this.gridColumns.forEach(function(column) {
          column.setLastLeftPinned(column === lastLeft, source);
          column.setFirstRightPinned(column === firstRight, source);
        });
      };
      ColumnModel2.prototype.autoSizeColumns = function(params) {
        var _this = this;
        if (this.shouldQueueResizeOperations) {
          this.resizeOperationQueue.push(function() {
            return _this.autoSizeColumns(params);
          });
          return;
        }
        var columns = params.columns, skipHeader = params.skipHeader, skipHeaderGroups = params.skipHeaderGroups, stopAtGroup = params.stopAtGroup, _a = params.source, source = _a === void 0 ? "api" : _a;
        this.animationFrameService.flushAllFrames();
        var columnsAutosized = [];
        var changesThisTimeAround = -1;
        var shouldSkipHeader = skipHeader != null ? skipHeader : this.gridOptionsService.is("skipHeaderOnAutoSize");
        var shouldSkipHeaderGroups = skipHeaderGroups != null ? skipHeaderGroups : shouldSkipHeader;
        while (changesThisTimeAround !== 0) {
          changesThisTimeAround = 0;
          this.actionOnGridColumns(columns, function(column) {
            if (columnsAutosized.indexOf(column) >= 0) {
              return false;
            }
            var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column, shouldSkipHeader);
            if (preferredWidth > 0) {
              var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
              column.setActualWidth(newWidth, source);
              columnsAutosized.push(column);
              changesThisTimeAround++;
            }
            return true;
          }, source);
        }
        if (!shouldSkipHeaderGroups) {
          this.autoSizeColumnGroupsByColumns(columns, source, stopAtGroup);
        }
        this.dispatchColumnResizedEvent(columnsAutosized, true, "autosizeColumns");
      };
      ColumnModel2.prototype.dispatchColumnResizedEvent = function(columns, finished, source, flexColumns) {
        if (flexColumns === void 0) {
          flexColumns = null;
        }
        if (columns && columns.length) {
          var event_1 = {
            type: Events.EVENT_COLUMN_RESIZED,
            columns,
            column: columns.length === 1 ? columns[0] : null,
            flexColumns,
            finished,
            source
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ColumnModel2.prototype.dispatchColumnChangedEvent = function(type, columns, source) {
        var event = {
          type,
          columns,
          column: columns && columns.length == 1 ? columns[0] : null,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.dispatchColumnMovedEvent = function(params) {
        var movedColumns = params.movedColumns, source = params.source, toIndex = params.toIndex, finished = params.finished;
        var event = {
          type: Events.EVENT_COLUMN_MOVED,
          columns: movedColumns,
          column: movedColumns && movedColumns.length === 1 ? movedColumns[0] : null,
          toIndex,
          finished,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.dispatchColumnPinnedEvent = function(changedColumns, source) {
        if (!changedColumns.length) {
          return;
        }
        var column = changedColumns.length === 1 ? changedColumns[0] : null;
        var pinned = this.getCommonValue(changedColumns, function(col) {
          return col.getPinned();
        });
        var event = {
          type: Events.EVENT_COLUMN_PINNED,
          // mistake in typing, 'undefined' should be allowed, as 'null' means 'not pinned'
          pinned: pinned != null ? pinned : null,
          columns: changedColumns,
          column,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.dispatchColumnVisibleEvent = function(changedColumns, source) {
        if (!changedColumns.length) {
          return;
        }
        var column = changedColumns.length === 1 ? changedColumns[0] : null;
        var visible = this.getCommonValue(changedColumns, function(col) {
          return col.isVisible();
        });
        var event = {
          type: Events.EVENT_COLUMN_VISIBLE,
          visible,
          columns: changedColumns,
          column,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.autoSizeColumn = function(key, skipHeader, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.autoSizeColumns({ columns: [key], skipHeader, skipHeaderGroups: true, source });
        }
      };
      ColumnModel2.prototype.autoSizeColumnGroupsByColumns = function(keys2, source, stopAtGroup) {
        var e_1, _a, e_2, _b;
        var columnGroups = /* @__PURE__ */ new Set();
        var columns = this.getGridColumns(keys2);
        columns.forEach(function(col) {
          var parent = col.getParent();
          while (parent && parent != stopAtGroup) {
            if (!parent.isPadding()) {
              columnGroups.add(parent);
            }
            parent = parent.getParent();
          }
        });
        var headerGroupCtrl;
        var resizedColumns = [];
        try {
          for (var columnGroups_1 = __values$6(columnGroups), columnGroups_1_1 = columnGroups_1.next(); !columnGroups_1_1.done; columnGroups_1_1 = columnGroups_1.next()) {
            var columnGroup = columnGroups_1_1.value;
            try {
              for (var _c = (e_2 = void 0, __values$6(this.ctrlsService.getHeaderRowContainerCtrls())), _d = _c.next(); !_d.done; _d = _c.next()) {
                var headerContainerCtrl = _d.value;
                headerGroupCtrl = headerContainerCtrl.getHeaderCtrlForColumn(columnGroup);
                if (headerGroupCtrl) {
                  break;
                }
              }
            } catch (e_2_1) {
              e_2 = { error: e_2_1 };
            } finally {
              try {
                if (_d && !_d.done && (_b = _c.return))
                  _b.call(_c);
              } finally {
                if (e_2)
                  throw e_2.error;
              }
            }
            if (headerGroupCtrl) {
              headerGroupCtrl.resizeLeafColumnsToFit(source);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (columnGroups_1_1 && !columnGroups_1_1.done && (_a = columnGroups_1.return))
              _a.call(columnGroups_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return resizedColumns;
      };
      ColumnModel2.prototype.autoSizeAllColumns = function(skipHeader, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        if (this.shouldQueueResizeOperations) {
          this.resizeOperationQueue.push(function() {
            return _this.autoSizeAllColumns(skipHeader, source);
          });
          return;
        }
        var allDisplayedColumns = this.getAllDisplayedColumns();
        this.autoSizeColumns({ columns: allDisplayedColumns, skipHeader, source });
      };
      ColumnModel2.prototype.getColumnsFromTree = function(rootColumns) {
        var result = [];
        var recursiveFindColumns = function(childColumns) {
          for (var i = 0; i < childColumns.length; i++) {
            var child = childColumns[i];
            if (child instanceof Column) {
              result.push(child);
            } else if (child instanceof ProvidedColumnGroup) {
              recursiveFindColumns(child.getChildren());
            }
          }
        };
        recursiveFindColumns(rootColumns);
        return result;
      };
      ColumnModel2.prototype.getAllDisplayedTrees = function() {
        if (this.displayedTreeLeft && this.displayedTreeRight && this.displayedTreeCentre) {
          return this.displayedTreeLeft.concat(this.displayedTreeCentre).concat(this.displayedTreeRight);
        }
        return null;
      };
      ColumnModel2.prototype.getPrimaryColumnTree = function() {
        return this.primaryColumnTree;
      };
      ColumnModel2.prototype.getHeaderRowCount = function() {
        return this.gridHeaderRowCount;
      };
      ColumnModel2.prototype.getDisplayedTreeLeft = function() {
        return this.displayedTreeLeft;
      };
      ColumnModel2.prototype.getDisplayedTreeRight = function() {
        return this.displayedTreeRight;
      };
      ColumnModel2.prototype.getDisplayedTreeCentre = function() {
        return this.displayedTreeCentre;
      };
      ColumnModel2.prototype.isColumnDisplayed = function(column) {
        return this.getAllDisplayedColumns().indexOf(column) >= 0;
      };
      ColumnModel2.prototype.getAllDisplayedColumns = function() {
        return this.displayedColumns;
      };
      ColumnModel2.prototype.getViewportColumns = function() {
        return this.viewportColumns;
      };
      ColumnModel2.prototype.getDisplayedLeftColumnsForRow = function(rowNode) {
        if (!this.colSpanActive) {
          return this.displayedColumnsLeft;
        }
        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsLeft);
      };
      ColumnModel2.prototype.getDisplayedRightColumnsForRow = function(rowNode) {
        if (!this.colSpanActive) {
          return this.displayedColumnsRight;
        }
        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsRight);
      };
      ColumnModel2.prototype.isColSpanActive = function() {
        return this.colSpanActive;
      };
      ColumnModel2.prototype.getDisplayedColumnsForRow = function(rowNode, displayedColumns, filterCallback, emptySpaceBeforeColumn) {
        var result = [];
        var lastConsideredCol = null;
        var _loop_1 = function(i2) {
          var col = displayedColumns[i2];
          var maxAllowedColSpan = displayedColumns.length - i2;
          var colSpan = Math.min(col.getColSpan(rowNode), maxAllowedColSpan);
          var columnsToCheckFilter = [col];
          if (colSpan > 1) {
            var colsToRemove = colSpan - 1;
            for (var j = 1; j <= colsToRemove; j++) {
              columnsToCheckFilter.push(displayedColumns[i2 + j]);
            }
            i2 += colsToRemove;
          }
          var filterPasses;
          if (filterCallback) {
            filterPasses = false;
            columnsToCheckFilter.forEach(function(colForFilter) {
              if (filterCallback(colForFilter)) {
                filterPasses = true;
              }
            });
          } else {
            filterPasses = true;
          }
          if (filterPasses) {
            if (result.length === 0 && lastConsideredCol) {
              var gapBeforeColumn = emptySpaceBeforeColumn ? emptySpaceBeforeColumn(col) : false;
              if (gapBeforeColumn) {
                result.push(lastConsideredCol);
              }
            }
            result.push(col);
          }
          lastConsideredCol = col;
          out_i_1 = i2;
        };
        var out_i_1;
        for (var i = 0; i < displayedColumns.length; i++) {
          _loop_1(i);
          i = out_i_1;
        }
        return result;
      };
      ColumnModel2.prototype.getViewportCenterColumnsForRow = function(rowNode) {
        var _this = this;
        if (!this.colSpanActive) {
          return this.viewportColumnsCenter;
        }
        var emptySpaceBeforeColumn = function(col) {
          var left = col.getLeft();
          return exists(left) && left > _this.viewportLeft;
        };
        var filterCallback = this.suppressColumnVirtualisation ? null : this.isColumnInRowViewport.bind(this);
        return this.getDisplayedColumnsForRow(rowNode, this.displayedColumnsCenter, filterCallback, emptySpaceBeforeColumn);
      };
      ColumnModel2.prototype.getAriaColumnIndex = function(col) {
        return this.getAllGridColumns().indexOf(col) + 1;
      };
      ColumnModel2.prototype.isColumnInHeaderViewport = function(col) {
        if (col.isAutoHeaderHeight()) {
          return true;
        }
        return this.isColumnInRowViewport(col);
      };
      ColumnModel2.prototype.isColumnInRowViewport = function(col) {
        if (col.isAutoHeight()) {
          return true;
        }
        var columnLeft = col.getLeft() || 0;
        var columnRight = columnLeft + col.getActualWidth();
        var leftBounds = this.viewportLeft - 200;
        var rightBounds = this.viewportRight + 200;
        var columnToMuchLeft = columnLeft < leftBounds && columnRight < leftBounds;
        var columnToMuchRight = columnLeft > rightBounds && columnRight > rightBounds;
        return !columnToMuchLeft && !columnToMuchRight;
      };
      ColumnModel2.prototype.getDisplayedColumnsLeftWidth = function() {
        return this.getWidthOfColsInList(this.displayedColumnsLeft);
      };
      ColumnModel2.prototype.getDisplayedColumnsRightWidth = function() {
        return this.getWidthOfColsInList(this.displayedColumnsRight);
      };
      ColumnModel2.prototype.updatePrimaryColumnList = function(keys2, masterList, actionIsAdd, columnCallback, eventType, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        if (!keys2 || missingOrEmpty(keys2)) {
          return;
        }
        var atLeastOne = false;
        keys2.forEach(function(key) {
          var columnToAdd = _this.getPrimaryColumn(key);
          if (!columnToAdd) {
            return;
          }
          if (actionIsAdd) {
            if (masterList.indexOf(columnToAdd) >= 0) {
              return;
            }
            masterList.push(columnToAdd);
          } else {
            if (masterList.indexOf(columnToAdd) < 0) {
              return;
            }
            removeFromArray(masterList, columnToAdd);
          }
          columnCallback(columnToAdd);
          atLeastOne = true;
        });
        if (!atLeastOne) {
          return;
        }
        if (this.autoGroupsNeedBuilding) {
          this.updateGridColumns();
        }
        this.updateDisplayedColumns(source);
        var event = {
          type: eventType,
          columns: masterList,
          column: masterList.length === 1 ? masterList[0] : null,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.setRowGroupColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.setPrimaryColumnList(colKeys, this.rowGroupColumns, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, true, this.setRowGroupActive.bind(this), source);
      };
      ColumnModel2.prototype.setRowGroupActive = function(active, column, source) {
        if (active === column.isRowGroupActive()) {
          return;
        }
        column.setRowGroupActive(active, source);
        if (active && !this.gridOptionsService.is("suppressRowGroupHidesColumns")) {
          this.setColumnVisible(column, false, source);
        }
        if (!active && !this.gridOptionsService.is("suppressMakeColumnVisibleAfterUnGroup")) {
          this.setColumnVisible(column, true, source);
        }
      };
      ColumnModel2.prototype.addRowGroupColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.addRowGroupColumns([key], source);
        }
      };
      ColumnModel2.prototype.addRowGroupColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.updatePrimaryColumnList(keys2, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
      };
      ColumnModel2.prototype.removeRowGroupColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.autoGroupsNeedBuilding = true;
        this.updatePrimaryColumnList(keys2, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), Events.EVENT_COLUMN_ROW_GROUP_CHANGED, source);
      };
      ColumnModel2.prototype.removeRowGroupColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.removeRowGroupColumns([key], source);
        }
      };
      ColumnModel2.prototype.addPivotColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.pivotColumns, true, function(column) {
          return column.setPivotActive(true, source);
        }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
      };
      ColumnModel2.prototype.setPivotColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setPrimaryColumnList(colKeys, this.pivotColumns, Events.EVENT_COLUMN_PIVOT_CHANGED, true, function(added, column) {
          column.setPivotActive(added, source);
        }, source);
      };
      ColumnModel2.prototype.addPivotColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        this.addPivotColumns([key], source);
      };
      ColumnModel2.prototype.removePivotColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.pivotColumns, false, function(column) {
          return column.setPivotActive(false, source);
        }, Events.EVENT_COLUMN_PIVOT_CHANGED, source);
      };
      ColumnModel2.prototype.removePivotColumn = function(key, source) {
        if (source === void 0) {
          source = "api";
        }
        this.removePivotColumns([key], source);
      };
      ColumnModel2.prototype.setPrimaryColumnList = function(colKeys, masterList, eventName, detectOrderChange, columnCallback, source) {
        var _this = this;
        var changes = /* @__PURE__ */ new Map();
        masterList.forEach(function(col, idx) {
          return changes.set(col, idx);
        });
        masterList.length = 0;
        if (exists(colKeys)) {
          colKeys.forEach(function(key) {
            var column = _this.getPrimaryColumn(key);
            if (column) {
              masterList.push(column);
            }
          });
        }
        masterList.forEach(function(col, idx) {
          var oldIndex = changes.get(col);
          if (oldIndex === void 0) {
            changes.set(col, 0);
            return;
          }
          if (detectOrderChange && oldIndex !== idx) {
            return;
          }
          changes.delete(col);
        });
        (this.primaryColumns || []).forEach(function(column) {
          var added = masterList.indexOf(column) >= 0;
          columnCallback(added, column);
        });
        if (this.autoGroupsNeedBuilding) {
          this.updateGridColumns();
        }
        this.updateDisplayedColumns(source);
        this.dispatchColumnChangedEvent(eventName, __spreadArray$l([], __read$s(changes.keys())), source);
      };
      ColumnModel2.prototype.setValueColumns = function(colKeys, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setPrimaryColumnList(colKeys, this.valueColumns, Events.EVENT_COLUMN_VALUE_CHANGED, false, this.setValueActive.bind(this), source);
      };
      ColumnModel2.prototype.setValueActive = function(active, column, source) {
        if (active === column.isValueActive()) {
          return;
        }
        column.setValueActive(active, source);
        if (active && !column.getAggFunc()) {
          var initialAggFunc = this.aggFuncService.getDefaultAggFunc(column);
          column.setAggFunc(initialAggFunc);
        }
      };
      ColumnModel2.prototype.addValueColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.valueColumns, true, this.setValueActive.bind(this, true), Events.EVENT_COLUMN_VALUE_CHANGED, source);
      };
      ColumnModel2.prototype.addValueColumn = function(colKey, source) {
        if (source === void 0) {
          source = "api";
        }
        if (colKey) {
          this.addValueColumns([colKey], source);
        }
      };
      ColumnModel2.prototype.removeValueColumn = function(colKey, source) {
        if (source === void 0) {
          source = "api";
        }
        this.removeValueColumns([colKey], source);
      };
      ColumnModel2.prototype.removeValueColumns = function(keys2, source) {
        if (source === void 0) {
          source = "api";
        }
        this.updatePrimaryColumnList(keys2, this.valueColumns, false, this.setValueActive.bind(this, false), Events.EVENT_COLUMN_VALUE_CHANGED, source);
      };
      ColumnModel2.prototype.normaliseColumnWidth = function(column, newWidth) {
        var minWidth = column.getMinWidth();
        if (exists(minWidth) && newWidth < minWidth) {
          newWidth = minWidth;
        }
        var maxWidth = column.getMaxWidth();
        if (exists(maxWidth) && column.isGreaterThanMax(newWidth)) {
          newWidth = maxWidth;
        }
        return newWidth;
      };
      ColumnModel2.prototype.getPrimaryOrGridColumn = function(key) {
        var column = this.getPrimaryColumn(key);
        return column || this.getGridColumn(key);
      };
      ColumnModel2.prototype.setColumnWidths = function(columnWidths, shiftKey, finished, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        var sets = [];
        columnWidths.forEach(function(columnWidth) {
          var col = _this.getPrimaryOrGridColumn(columnWidth.key);
          if (!col) {
            return;
          }
          sets.push({
            width: columnWidth.newWidth,
            ratios: [1],
            columns: [col]
          });
          var defaultIsShift = _this.gridOptionsService.get("colResizeDefault") === "shift";
          if (defaultIsShift) {
            shiftKey = !shiftKey;
          }
          if (shiftKey) {
            var otherCol = _this.getDisplayedColAfter(col);
            if (!otherCol) {
              return;
            }
            var widthDiff = col.getActualWidth() - columnWidth.newWidth;
            var otherColWidth = otherCol.getActualWidth() + widthDiff;
            sets.push({
              width: otherColWidth,
              ratios: [1],
              columns: [otherCol]
            });
          }
        });
        if (sets.length === 0) {
          return;
        }
        this.resizeColumnSets({
          resizeSets: sets,
          finished,
          source
        });
      };
      ColumnModel2.prototype.checkMinAndMaxWidthsForSet = function(columnResizeSet) {
        var columns = columnResizeSet.columns, width = columnResizeSet.width;
        var minWidthAccumulated = 0;
        var maxWidthAccumulated = 0;
        var maxWidthActive = true;
        columns.forEach(function(col) {
          var minWidth = col.getMinWidth();
          minWidthAccumulated += minWidth || 0;
          var maxWidth = col.getMaxWidth();
          if (exists(maxWidth) && maxWidth > 0) {
            maxWidthAccumulated += maxWidth;
          } else {
            maxWidthActive = false;
          }
        });
        var minWidthPasses = width >= minWidthAccumulated;
        var maxWidthPasses = !maxWidthActive || width <= maxWidthAccumulated;
        return minWidthPasses && maxWidthPasses;
      };
      ColumnModel2.prototype.resizeColumnSets = function(params) {
        var _this = this;
        var resizeSets = params.resizeSets, finished = params.finished, source = params.source;
        var passMinMaxCheck = !resizeSets || resizeSets.every(function(columnResizeSet) {
          return _this.checkMinAndMaxWidthsForSet(columnResizeSet);
        });
        if (!passMinMaxCheck) {
          if (finished) {
            var columns = resizeSets && resizeSets.length > 0 ? resizeSets[0].columns : null;
            this.dispatchColumnResizedEvent(columns, finished, source);
          }
          return;
        }
        var changedCols = [];
        var allResizedCols = [];
        resizeSets.forEach(function(set2) {
          var width = set2.width, columns2 = set2.columns, ratios = set2.ratios;
          var newWidths = {};
          var finishedCols = {};
          columns2.forEach(function(col) {
            return allResizedCols.push(col);
          });
          var finishedColsGrew = true;
          var loopCount = 0;
          var _loop_2 = function() {
            loopCount++;
            if (loopCount > 1e3) {
              console.error("AG Grid: infinite loop in resizeColumnSets");
              return "break";
            }
            finishedColsGrew = false;
            var subsetCols = [];
            var subsetRatioTotal = 0;
            var pixelsToDistribute = width;
            columns2.forEach(function(col, index) {
              var thisColFinished = finishedCols[col.getId()];
              if (thisColFinished) {
                pixelsToDistribute -= newWidths[col.getId()];
              } else {
                subsetCols.push(col);
                var ratioThisCol = ratios[index];
                subsetRatioTotal += ratioThisCol;
              }
            });
            var ratioScale = 1 / subsetRatioTotal;
            subsetCols.forEach(function(col, index) {
              var lastCol = index === subsetCols.length - 1;
              var colNewWidth;
              if (lastCol) {
                colNewWidth = pixelsToDistribute;
              } else {
                colNewWidth = Math.round(ratios[index] * width * ratioScale);
                pixelsToDistribute -= colNewWidth;
              }
              var minWidth = col.getMinWidth();
              var maxWidth = col.getMaxWidth();
              if (exists(minWidth) && colNewWidth < minWidth) {
                colNewWidth = minWidth;
                finishedCols[col.getId()] = true;
                finishedColsGrew = true;
              } else if (exists(maxWidth) && maxWidth > 0 && colNewWidth > maxWidth) {
                colNewWidth = maxWidth;
                finishedCols[col.getId()] = true;
                finishedColsGrew = true;
              }
              newWidths[col.getId()] = colNewWidth;
            });
          };
          while (finishedColsGrew) {
            var state_1 = _loop_2();
            if (state_1 === "break")
              break;
          }
          columns2.forEach(function(col) {
            var newWidth = newWidths[col.getId()];
            var actualWidth = col.getActualWidth();
            if (actualWidth !== newWidth) {
              col.setActualWidth(newWidth, source);
              changedCols.push(col);
            }
          });
        });
        var atLeastOneColChanged = changedCols.length > 0;
        var flexedCols = [];
        if (atLeastOneColChanged) {
          flexedCols = this.refreshFlexedColumns({ resizingCols: allResizedCols, skipSetLeft: true });
          this.setLeftValues(source);
          this.updateBodyWidths();
          this.checkViewportColumns();
        }
        var colsForEvent = allResizedCols.concat(flexedCols);
        if (atLeastOneColChanged || finished) {
          this.dispatchColumnResizedEvent(colsForEvent, finished, source, flexedCols);
        }
      };
      ColumnModel2.prototype.setColumnAggFunc = function(key, aggFunc, source) {
        if (source === void 0) {
          source = "api";
        }
        if (!key) {
          return;
        }
        var column = this.getPrimaryColumn(key);
        if (!column) {
          return;
        }
        column.setAggFunc(aggFunc);
        this.dispatchColumnChangedEvent(Events.EVENT_COLUMN_VALUE_CHANGED, [column], source);
      };
      ColumnModel2.prototype.moveRowGroupColumn = function(fromIndex, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        var column = this.rowGroupColumns[fromIndex];
        var impactedColumns = this.rowGroupColumns.slice(fromIndex, toIndex);
        this.rowGroupColumns.splice(fromIndex, 1);
        this.rowGroupColumns.splice(toIndex, 0, column);
        var event = {
          type: Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
          columns: impactedColumns,
          column: impactedColumns.length === 1 ? impactedColumns[0] : null,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.moveColumns = function(columnsToMoveKeys, toIndex, source, finished) {
        if (source === void 0) {
          source = "api";
        }
        if (finished === void 0) {
          finished = true;
        }
        this.columnAnimationService.start();
        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
          console.warn("AG Grid: tried to insert columns in invalid location, toIndex = " + toIndex);
          console.warn("AG Grid: remember that you should not count the moving columns when calculating the new index");
          return;
        }
        var movedColumns = this.getGridColumns(columnsToMoveKeys);
        var failedRules = !this.doesMovePassRules(movedColumns, toIndex);
        if (failedRules) {
          return;
        }
        moveInArray(this.gridColumns, movedColumns, toIndex);
        this.updateDisplayedColumns(source);
        this.dispatchColumnMovedEvent({ movedColumns, source, toIndex, finished });
        this.columnAnimationService.finish();
      };
      ColumnModel2.prototype.doesMovePassRules = function(columnsToMove, toIndex) {
        var proposedColumnOrder = this.getProposedColumnOrder(columnsToMove, toIndex);
        return this.doesOrderPassRules(proposedColumnOrder);
      };
      ColumnModel2.prototype.doesOrderPassRules = function(gridOrder) {
        if (!this.doesMovePassMarryChildren(gridOrder)) {
          return false;
        }
        if (!this.doesMovePassLockedPositions(gridOrder)) {
          return false;
        }
        return true;
      };
      ColumnModel2.prototype.getProposedColumnOrder = function(columnsToMove, toIndex) {
        var proposedColumnOrder = this.gridColumns.slice();
        moveInArray(proposedColumnOrder, columnsToMove, toIndex);
        return proposedColumnOrder;
      };
      ColumnModel2.prototype.sortColumnsLikeGridColumns = function(cols) {
        var _this = this;
        if (!cols || cols.length <= 1) {
          return;
        }
        var notAllColsInGridColumns = cols.filter(function(c) {
          return _this.gridColumns.indexOf(c) < 0;
        }).length > 0;
        if (notAllColsInGridColumns) {
          return;
        }
        cols.sort(function(a, b) {
          var indexA = _this.gridColumns.indexOf(a);
          var indexB = _this.gridColumns.indexOf(b);
          return indexA - indexB;
        });
      };
      ColumnModel2.prototype.doesMovePassLockedPositions = function(proposedColumnOrder) {
        var lastPlacement = 0;
        var rulePassed = true;
        var lockPositionToPlacement = function(position) {
          if (!position) {
            return 1;
          }
          if (position === true) {
            return 0;
          }
          return position === "left" ? 0 : 2;
        };
        proposedColumnOrder.forEach(function(col) {
          var placement = lockPositionToPlacement(col.getColDef().lockPosition);
          if (placement < lastPlacement) {
            rulePassed = false;
          }
          lastPlacement = placement;
        });
        return rulePassed;
      };
      ColumnModel2.prototype.doesMovePassMarryChildren = function(allColumnsCopy) {
        var rulePassed = true;
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(child) {
          if (!(child instanceof ProvidedColumnGroup)) {
            return;
          }
          var columnGroup = child;
          var colGroupDef = columnGroup.getColGroupDef();
          var marryChildren = colGroupDef && colGroupDef.marryChildren;
          if (!marryChildren) {
            return;
          }
          var newIndexes = [];
          columnGroup.getLeafColumns().forEach(function(col) {
            var newColIndex = allColumnsCopy.indexOf(col);
            newIndexes.push(newColIndex);
          });
          var maxIndex = Math.max.apply(Math, newIndexes);
          var minIndex = Math.min.apply(Math, newIndexes);
          var spread = maxIndex - minIndex;
          var maxSpread = columnGroup.getLeafColumns().length - 1;
          if (spread > maxSpread) {
            rulePassed = false;
          }
        });
        return rulePassed;
      };
      ColumnModel2.prototype.moveColumn = function(key, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        this.moveColumns([key], toIndex, source);
      };
      ColumnModel2.prototype.moveColumnByIndex = function(fromIndex, toIndex, source) {
        if (source === void 0) {
          source = "api";
        }
        var column = this.gridColumns[fromIndex];
        this.moveColumn(column, toIndex, source);
      };
      ColumnModel2.prototype.getColumnDefs = function() {
        var _this = this;
        if (!this.primaryColumns) {
          return;
        }
        var cols = this.primaryColumns.slice();
        if (this.gridColsArePrimary) {
          cols.sort(function(a, b) {
            return _this.gridColumns.indexOf(a) - _this.gridColumns.indexOf(b);
          });
        } else if (this.lastPrimaryOrder) {
          cols.sort(function(a, b) {
            return _this.lastPrimaryOrder.indexOf(a) - _this.lastPrimaryOrder.indexOf(b);
          });
        }
        return this.columnDefFactory.buildColumnDefs(cols, this.rowGroupColumns, this.pivotColumns);
      };
      ColumnModel2.prototype.getBodyContainerWidth = function() {
        return this.bodyWidth;
      };
      ColumnModel2.prototype.getContainerWidth = function(pinned) {
        switch (pinned) {
          case "left":
            return this.leftWidth;
          case "right":
            return this.rightWidth;
          default:
            return this.bodyWidth;
        }
      };
      ColumnModel2.prototype.updateBodyWidths = function() {
        var newBodyWidth = this.getWidthOfColsInList(this.displayedColumnsCenter);
        var newLeftWidth = this.getWidthOfColsInList(this.displayedColumnsLeft);
        var newRightWidth = this.getWidthOfColsInList(this.displayedColumnsRight);
        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
        var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
        if (atLeastOneChanged) {
          this.bodyWidth = newBodyWidth;
          this.leftWidth = newLeftWidth;
          this.rightWidth = newRightWidth;
          var event_2 = {
            type: Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED
          };
          this.eventService.dispatchEvent(event_2);
        }
      };
      ColumnModel2.prototype.getValueColumns = function() {
        return this.valueColumns ? this.valueColumns : [];
      };
      ColumnModel2.prototype.getPivotColumns = function() {
        return this.pivotColumns ? this.pivotColumns : [];
      };
      ColumnModel2.prototype.isPivotActive = function() {
        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
      };
      ColumnModel2.prototype.getRowGroupColumns = function() {
        return this.rowGroupColumns ? this.rowGroupColumns : [];
      };
      ColumnModel2.prototype.getDisplayedCenterColumns = function() {
        return this.displayedColumnsCenter;
      };
      ColumnModel2.prototype.getDisplayedLeftColumns = function() {
        return this.displayedColumnsLeft;
      };
      ColumnModel2.prototype.getDisplayedRightColumns = function() {
        return this.displayedColumnsRight;
      };
      ColumnModel2.prototype.getDisplayedColumns = function(type) {
        switch (type) {
          case "left":
            return this.getDisplayedLeftColumns();
          case "right":
            return this.getDisplayedRightColumns();
          default:
            return this.getDisplayedCenterColumns();
        }
      };
      ColumnModel2.prototype.getAllPrimaryColumns = function() {
        return this.primaryColumns ? this.primaryColumns.slice() : null;
      };
      ColumnModel2.prototype.getSecondaryColumns = function() {
        return this.secondaryColumns ? this.secondaryColumns.slice() : null;
      };
      ColumnModel2.prototype.getAllColumnsForQuickFilter = function() {
        return this.columnsForQuickFilter;
      };
      ColumnModel2.prototype.getAllGridColumns = function() {
        return this.gridColumns;
      };
      ColumnModel2.prototype.isEmpty = function() {
        return missingOrEmpty(this.gridColumns);
      };
      ColumnModel2.prototype.isRowGroupEmpty = function() {
        return missingOrEmpty(this.rowGroupColumns);
      };
      ColumnModel2.prototype.setColumnVisible = function(key, visible, source) {
        if (source === void 0) {
          source = "api";
        }
        this.setColumnsVisible([key], visible, source);
      };
      ColumnModel2.prototype.setColumnsVisible = function(keys2, visible, source) {
        if (visible === void 0) {
          visible = false;
        }
        if (source === void 0) {
          source = "api";
        }
        this.applyColumnState({
          state: keys2.map(function(key) {
            return {
              colId: typeof key === "string" ? key : key.getColId(),
              hide: !visible
            };
          })
        }, source);
      };
      ColumnModel2.prototype.setColumnPinned = function(key, pinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (key) {
          this.setColumnsPinned([key], pinned, source);
        }
      };
      ColumnModel2.prototype.setColumnsPinned = function(keys2, pinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (this.gridOptionsService.isDomLayout("print")) {
          console.warn("AG Grid: Changing the column pinning status is not allowed with domLayout='print'");
          return;
        }
        this.columnAnimationService.start();
        var actualPinned;
        if (pinned === true || pinned === "left") {
          actualPinned = "left";
        } else if (pinned === "right") {
          actualPinned = "right";
        } else {
          actualPinned = null;
        }
        this.actionOnGridColumns(keys2, function(col) {
          if (col.getPinned() !== actualPinned) {
            col.setPinned(actualPinned);
            return true;
          }
          return false;
        }, source, function() {
          var event = {
            type: Events.EVENT_COLUMN_PINNED,
            pinned: actualPinned,
            column: null,
            columns: null,
            source
          };
          return event;
        });
        this.columnAnimationService.finish();
      };
      ColumnModel2.prototype.actionOnGridColumns = function(keys2, action, source, createEvent) {
        var _this = this;
        if (missingOrEmpty(keys2)) {
          return;
        }
        var updatedColumns = [];
        keys2.forEach(function(key) {
          var column = _this.getGridColumn(key);
          if (!column) {
            return;
          }
          var resultOfAction = action(column);
          if (resultOfAction !== false) {
            updatedColumns.push(column);
          }
        });
        if (!updatedColumns.length) {
          return;
        }
        this.updateDisplayedColumns(source);
        if (exists(createEvent) && createEvent) {
          var event_3 = createEvent();
          event_3.columns = updatedColumns;
          event_3.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
          this.eventService.dispatchEvent(event_3);
        }
      };
      ColumnModel2.prototype.getDisplayedColBefore = function(col) {
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var oldIndex = allDisplayedColumns.indexOf(col);
        if (oldIndex > 0) {
          return allDisplayedColumns[oldIndex - 1];
        }
        return null;
      };
      ColumnModel2.prototype.getDisplayedColAfter = function(col) {
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var oldIndex = allDisplayedColumns.indexOf(col);
        if (oldIndex < allDisplayedColumns.length - 1) {
          return allDisplayedColumns[oldIndex + 1];
        }
        return null;
      };
      ColumnModel2.prototype.getDisplayedGroupAfter = function(columnGroup) {
        return this.getDisplayedGroupAtDirection(columnGroup, "After");
      };
      ColumnModel2.prototype.getDisplayedGroupBefore = function(columnGroup) {
        return this.getDisplayedGroupAtDirection(columnGroup, "Before");
      };
      ColumnModel2.prototype.getDisplayedGroupAtDirection = function(columnGroup, direction) {
        var requiredLevel = columnGroup.getProvidedColumnGroup().getLevel() + columnGroup.getPaddingLevel();
        var colGroupLeafColumns = columnGroup.getDisplayedLeafColumns();
        var col = direction === "After" ? last(colGroupLeafColumns) : colGroupLeafColumns[0];
        var getDisplayColMethod = "getDisplayedCol" + direction;
        while (true) {
          var column = this[getDisplayColMethod](col);
          if (!column) {
            return null;
          }
          var groupPointer = this.getColumnGroupAtLevel(column, requiredLevel);
          if (groupPointer !== columnGroup) {
            return groupPointer;
          }
        }
      };
      ColumnModel2.prototype.getColumnGroupAtLevel = function(column, level) {
        var groupPointer = column.getParent();
        var originalGroupLevel;
        var groupPointerLevel;
        while (true) {
          var groupPointerProvidedColumnGroup = groupPointer.getProvidedColumnGroup();
          originalGroupLevel = groupPointerProvidedColumnGroup.getLevel();
          groupPointerLevel = groupPointer.getPaddingLevel();
          if (originalGroupLevel + groupPointerLevel <= level) {
            break;
          }
          groupPointer = groupPointer.getParent();
        }
        return groupPointer;
      };
      ColumnModel2.prototype.isPinningLeft = function() {
        return this.displayedColumnsLeft.length > 0;
      };
      ColumnModel2.prototype.isPinningRight = function() {
        return this.displayedColumnsRight.length > 0;
      };
      ColumnModel2.prototype.getPrimaryAndSecondaryAndAutoColumns = function() {
        var _a;
        return (_a = []).concat.apply(_a, [
          this.primaryColumns || [],
          this.groupAutoColumns || [],
          this.secondaryColumns || []
        ]);
      };
      ColumnModel2.prototype.createStateItemFromColumn = function(column) {
        var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
        var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
        var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
        var sort = column.getSort() != null ? column.getSort() : null;
        var sortIndex = column.getSortIndex() != null ? column.getSortIndex() : null;
        var flex = column.getFlex() != null && column.getFlex() > 0 ? column.getFlex() : null;
        var res = {
          colId: column.getColId(),
          width: column.getActualWidth(),
          hide: !column.isVisible(),
          pinned: column.getPinned(),
          sort,
          sortIndex,
          aggFunc,
          rowGroup: column.isRowGroupActive(),
          rowGroupIndex,
          pivot: column.isPivotActive(),
          pivotIndex,
          flex
        };
        return res;
      };
      ColumnModel2.prototype.getColumnState = function() {
        if (missing(this.primaryColumns) || !this.isAlive()) {
          return [];
        }
        var colsForState = this.getPrimaryAndSecondaryAndAutoColumns();
        var res = colsForState.map(this.createStateItemFromColumn.bind(this));
        this.orderColumnStateList(res);
        return res;
      };
      ColumnModel2.prototype.orderColumnStateList = function(columnStateList) {
        var colIdToGridIndexMap = convertToMap(this.gridColumns.map(function(col, index) {
          return [col.getColId(), index];
        }));
        columnStateList.sort(function(itemA, itemB) {
          var posA = colIdToGridIndexMap.has(itemA.colId) ? colIdToGridIndexMap.get(itemA.colId) : -1;
          var posB = colIdToGridIndexMap.has(itemB.colId) ? colIdToGridIndexMap.get(itemB.colId) : -1;
          return posA - posB;
        });
      };
      ColumnModel2.prototype.resetColumnState = function(source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        var primaryColumns = this.getColumnsFromTree(this.primaryColumnTree);
        var columnStates = [];
        var letRowGroupIndex = 1e3;
        var letPivotIndex = 1e3;
        var colsToProcess = [];
        if (this.groupAutoColumns) {
          colsToProcess = colsToProcess.concat(this.groupAutoColumns);
        }
        if (primaryColumns) {
          colsToProcess = colsToProcess.concat(primaryColumns);
        }
        colsToProcess.forEach(function(column) {
          var stateItem = _this.getColumnStateFromColDef(column);
          if (missing(stateItem.rowGroupIndex) && stateItem.rowGroup) {
            stateItem.rowGroupIndex = letRowGroupIndex++;
          }
          if (missing(stateItem.pivotIndex) && stateItem.pivot) {
            stateItem.pivotIndex = letPivotIndex++;
          }
          columnStates.push(stateItem);
        });
        this.applyColumnState({ state: columnStates, applyOrder: true }, source);
      };
      ColumnModel2.prototype.getColumnStateFromColDef = function(column) {
        var getValueOrNull = function(a, b) {
          return a != null ? a : b != null ? b : null;
        };
        var colDef = column.getColDef();
        var sort = getValueOrNull(colDef.sort, colDef.initialSort);
        var sortIndex = getValueOrNull(colDef.sortIndex, colDef.initialSortIndex);
        var hide = getValueOrNull(colDef.hide, colDef.initialHide);
        var pinned = getValueOrNull(colDef.pinned, colDef.initialPinned);
        var width = getValueOrNull(colDef.width, colDef.initialWidth);
        var flex = getValueOrNull(colDef.flex, colDef.initialFlex);
        var rowGroupIndex = getValueOrNull(colDef.rowGroupIndex, colDef.initialRowGroupIndex);
        var rowGroup = getValueOrNull(colDef.rowGroup, colDef.initialRowGroup);
        if (rowGroupIndex == null && (rowGroup == null || rowGroup == false)) {
          rowGroupIndex = null;
          rowGroup = null;
        }
        var pivotIndex = getValueOrNull(colDef.pivotIndex, colDef.initialPivotIndex);
        var pivot = getValueOrNull(colDef.pivot, colDef.initialPivot);
        if (pivotIndex == null && (pivot == null || pivot == false)) {
          pivotIndex = null;
          pivot = null;
        }
        var aggFunc = getValueOrNull(colDef.aggFunc, colDef.initialAggFunc);
        return {
          colId: column.getColId(),
          sort,
          sortIndex,
          hide,
          pinned,
          width,
          flex,
          rowGroup,
          rowGroupIndex,
          pivot,
          pivotIndex,
          aggFunc
        };
      };
      ColumnModel2.prototype.applyColumnState = function(params, source) {
        var _this = this;
        if (missingOrEmpty(this.primaryColumns)) {
          return false;
        }
        if (params && params.state && !params.state.forEach) {
          console.warn("AG Grid: applyColumnState() - the state attribute should be an array, however an array was not found. Please provide an array of items (one for each col you want to change) for state.");
          return false;
        }
        var applyStates = function(states, existingColumns, getById) {
          var dispatchEventsFunc = _this.compareColumnStatesAndDispatchEvents(source);
          _this.autoGroupsNeedBuilding = true;
          var columnsWithNoState = existingColumns.slice();
          var rowGroupIndexes = {};
          var pivotIndexes = {};
          var autoGroupColumnStates = [];
          var unmatchedAndAutoStates2 = [];
          var unmatchedCount2 = 0;
          var previousRowGroupCols = _this.rowGroupColumns.slice();
          var previousPivotCols = _this.pivotColumns.slice();
          states.forEach(function(state) {
            var colId = state.colId || "";
            var isAutoGroupColumn = colId.startsWith(GROUP_AUTO_COLUMN_ID);
            if (isAutoGroupColumn) {
              autoGroupColumnStates.push(state);
              unmatchedAndAutoStates2.push(state);
              return;
            }
            var column = getById(colId);
            if (!column) {
              unmatchedAndAutoStates2.push(state);
              unmatchedCount2 += 1;
            } else {
              _this.syncColumnWithStateItem(column, state, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
              removeFromArray(columnsWithNoState, column);
            }
          });
          var applyDefaultsFunc = function(col) {
            return _this.syncColumnWithStateItem(col, null, params.defaultState, rowGroupIndexes, pivotIndexes, false, source);
          };
          columnsWithNoState.forEach(applyDefaultsFunc);
          var comparator = function(indexes, oldList, colA, colB) {
            var indexA = indexes[colA.getId()];
            var indexB = indexes[colB.getId()];
            var aHasIndex = indexA != null;
            var bHasIndex = indexB != null;
            if (aHasIndex && bHasIndex) {
              return indexA - indexB;
            }
            if (aHasIndex) {
              return -1;
            }
            if (bHasIndex) {
              return 1;
            }
            var oldIndexA = oldList.indexOf(colA);
            var oldIndexB = oldList.indexOf(colB);
            var aHasOldIndex = oldIndexA >= 0;
            var bHasOldIndex = oldIndexB >= 0;
            if (aHasOldIndex && bHasOldIndex) {
              return oldIndexA - oldIndexB;
            }
            if (aHasOldIndex) {
              return -1;
            }
            return 1;
          };
          _this.rowGroupColumns.sort(comparator.bind(_this, rowGroupIndexes, previousRowGroupCols));
          _this.pivotColumns.sort(comparator.bind(_this, pivotIndexes, previousPivotCols));
          _this.updateGridColumns();
          var autoGroupColsCopy = _this.groupAutoColumns ? _this.groupAutoColumns.slice() : [];
          autoGroupColumnStates.forEach(function(stateItem) {
            var autoCol = _this.getAutoColumn(stateItem.colId);
            removeFromArray(autoGroupColsCopy, autoCol);
            _this.syncColumnWithStateItem(autoCol, stateItem, params.defaultState, null, null, true, source);
          });
          autoGroupColsCopy.forEach(applyDefaultsFunc);
          _this.applyOrderAfterApplyState(params);
          _this.updateDisplayedColumns(source);
          _this.dispatchEverythingChanged(source);
          dispatchEventsFunc();
          return { unmatchedAndAutoStates: unmatchedAndAutoStates2, unmatchedCount: unmatchedCount2 };
        };
        this.columnAnimationService.start();
        var _a = applyStates(params.state || [], this.primaryColumns || [], function(id) {
          return _this.getPrimaryColumn(id);
        }), unmatchedAndAutoStates = _a.unmatchedAndAutoStates, unmatchedCount = _a.unmatchedCount;
        if (unmatchedAndAutoStates.length > 0 || exists(params.defaultState)) {
          unmatchedCount = applyStates(unmatchedAndAutoStates, this.secondaryColumns || [], function(id) {
            return _this.getSecondaryColumn(id);
          }).unmatchedCount;
        }
        this.columnAnimationService.finish();
        return unmatchedCount === 0;
      };
      ColumnModel2.prototype.applyOrderAfterApplyState = function(params) {
        var _this = this;
        if (!params.applyOrder || !params.state) {
          return;
        }
        var newOrder = [];
        var processedColIds = {};
        params.state.forEach(function(item) {
          if (!item.colId || processedColIds[item.colId]) {
            return;
          }
          var col = _this.gridColumnsMap[item.colId];
          if (col) {
            newOrder.push(col);
            processedColIds[item.colId] = true;
          }
        });
        var autoGroupInsertIndex = 0;
        this.gridColumns.forEach(function(col) {
          var colId = col.getColId();
          var alreadyProcessed = processedColIds[colId] != null;
          if (alreadyProcessed) {
            return;
          }
          var isAutoGroupCol = colId.startsWith(GROUP_AUTO_COLUMN_ID);
          if (isAutoGroupCol) {
            insertIntoArray(newOrder, col, autoGroupInsertIndex++);
          } else {
            newOrder.push(col);
          }
        });
        newOrder = this.placeLockedColumns(newOrder);
        if (!this.doesMovePassMarryChildren(newOrder)) {
          console.warn("AG Grid: Applying column order broke a group where columns should be married together. Applying new order has been discarded.");
          return;
        }
        this.gridColumns = newOrder;
      };
      ColumnModel2.prototype.compareColumnStatesAndDispatchEvents = function(source) {
        var _this = this;
        var startState = {
          rowGroupColumns: this.rowGroupColumns.slice(),
          pivotColumns: this.pivotColumns.slice(),
          valueColumns: this.valueColumns.slice()
        };
        var columnStateBefore = this.getColumnState();
        var columnStateBeforeMap = {};
        columnStateBefore.forEach(function(col) {
          columnStateBeforeMap[col.colId] = col;
        });
        return function() {
          var colsForState = _this.getPrimaryAndSecondaryAndAutoColumns();
          var dispatchWhenListsDifferent = function(eventType, colsBefore, colsAfter, idMapper) {
            var beforeList = colsBefore.map(idMapper);
            var afterList = colsAfter.map(idMapper);
            var unchanged = areEqual(beforeList, afterList);
            if (unchanged) {
              return;
            }
            var changes = new Set(colsBefore);
            colsAfter.forEach(function(id) {
              if (!changes.delete(id)) {
                changes.add(id);
              }
            });
            var changesArr = __spreadArray$l([], __read$s(changes));
            var event = {
              type: eventType,
              columns: changesArr,
              column: changesArr.length === 1 ? changesArr[0] : null,
              source
            };
            _this.eventService.dispatchEvent(event);
          };
          var getChangedColumns = function(changedPredicate) {
            var changedColumns = [];
            colsForState.forEach(function(column) {
              var colStateBefore = columnStateBeforeMap[column.getColId()];
              if (colStateBefore && changedPredicate(colStateBefore, column)) {
                changedColumns.push(column);
              }
            });
            return changedColumns;
          };
          var columnIdMapper = function(c) {
            return c.getColId();
          };
          dispatchWhenListsDifferent(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, startState.rowGroupColumns, _this.rowGroupColumns, columnIdMapper);
          dispatchWhenListsDifferent(Events.EVENT_COLUMN_PIVOT_CHANGED, startState.pivotColumns, _this.pivotColumns, columnIdMapper);
          var valueChangePredicate = function(cs, c) {
            var oldActive = cs.aggFunc != null;
            var activeChanged = oldActive != c.isValueActive();
            var aggFuncChanged = oldActive && cs.aggFunc != c.getAggFunc();
            return activeChanged || aggFuncChanged;
          };
          var changedValues = getChangedColumns(valueChangePredicate);
          if (changedValues.length > 0) {
            _this.dispatchColumnChangedEvent(Events.EVENT_COLUMN_VALUE_CHANGED, changedValues, source);
          }
          var resizeChangePredicate = function(cs, c) {
            return cs.width != c.getActualWidth();
          };
          _this.dispatchColumnResizedEvent(getChangedColumns(resizeChangePredicate), true, source);
          var pinnedChangePredicate = function(cs, c) {
            return cs.pinned != c.getPinned();
          };
          _this.dispatchColumnPinnedEvent(getChangedColumns(pinnedChangePredicate), source);
          var visibilityChangePredicate = function(cs, c) {
            return cs.hide == c.isVisible();
          };
          _this.dispatchColumnVisibleEvent(getChangedColumns(visibilityChangePredicate), source);
          var sortChangePredicate = function(cs, c) {
            return cs.sort != c.getSort() || cs.sortIndex != c.getSortIndex();
          };
          if (getChangedColumns(sortChangePredicate).length > 0) {
            _this.sortController.dispatchSortChangedEvents(source);
          }
          _this.normaliseColumnMovedEventForColumnState(columnStateBefore, source);
        };
      };
      ColumnModel2.prototype.getCommonValue = function(cols, valueGetter) {
        if (!cols || cols.length == 0) {
          return void 0;
        }
        var firstValue = valueGetter(cols[0]);
        for (var i = 1; i < cols.length; i++) {
          if (firstValue !== valueGetter(cols[i])) {
            return void 0;
          }
        }
        return firstValue;
      };
      ColumnModel2.prototype.normaliseColumnMovedEventForColumnState = function(colStateBefore, source) {
        var _this = this;
        var colStateAfter = this.getColumnState();
        var colStateAfterMapped = {};
        colStateAfter.forEach(function(s) {
          return colStateAfterMapped[s.colId] = s;
        });
        var colsIntersectIds = {};
        colStateBefore.forEach(function(s) {
          if (colStateAfterMapped[s.colId]) {
            colsIntersectIds[s.colId] = true;
          }
        });
        var beforeFiltered = colStateBefore.filter(function(c) {
          return colsIntersectIds[c.colId];
        });
        var afterFiltered = colStateAfter.filter(function(c) {
          return colsIntersectIds[c.colId];
        });
        var movedColumns = [];
        afterFiltered.forEach(function(csAfter, index) {
          var csBefore = beforeFiltered && beforeFiltered[index];
          if (csBefore && csBefore.colId !== csAfter.colId) {
            var gridCol = _this.getGridColumn(csBefore.colId);
            if (gridCol) {
              movedColumns.push(gridCol);
            }
          }
        });
        if (!movedColumns.length) {
          return;
        }
        this.dispatchColumnMovedEvent({ movedColumns, source, finished: true });
      };
      ColumnModel2.prototype.syncColumnWithStateItem = function(column, stateItem, defaultState, rowGroupIndexes, pivotIndexes, autoCol, source) {
        if (!column) {
          return;
        }
        var getValue = function(key1, key2) {
          var obj = { value1: void 0, value2: void 0 };
          var calculated = false;
          if (stateItem) {
            if (stateItem[key1] !== void 0) {
              obj.value1 = stateItem[key1];
              calculated = true;
            }
            if (exists(key2) && stateItem[key2] !== void 0) {
              obj.value2 = stateItem[key2];
              calculated = true;
            }
          }
          if (!calculated && defaultState) {
            if (defaultState[key1] !== void 0) {
              obj.value1 = defaultState[key1];
            }
            if (exists(key2) && defaultState[key2] !== void 0) {
              obj.value2 = defaultState[key2];
            }
          }
          return obj;
        };
        var hide = getValue("hide").value1;
        if (hide !== void 0) {
          column.setVisible(!hide, source);
        }
        var pinned = getValue("pinned").value1;
        if (pinned !== void 0) {
          column.setPinned(pinned);
        }
        var minColWidth = this.columnUtils.calculateColMinWidth(column.getColDef());
        var flex = getValue("flex").value1;
        if (flex !== void 0) {
          column.setFlex(flex);
        }
        var noFlexThisCol = column.getFlex() <= 0;
        if (noFlexThisCol) {
          var width = getValue("width").value1;
          if (width != null) {
            if (minColWidth != null && width >= minColWidth) {
              column.setActualWidth(width, source);
            }
          }
        }
        var sort = getValue("sort").value1;
        if (sort !== void 0) {
          if (sort === "desc" || sort === "asc") {
            column.setSort(sort, source);
          } else {
            column.setSort(void 0, source);
          }
        }
        var sortIndex = getValue("sortIndex").value1;
        if (sortIndex !== void 0) {
          column.setSortIndex(sortIndex);
        }
        if (autoCol || !column.isPrimary()) {
          return;
        }
        var aggFunc = getValue("aggFunc").value1;
        if (aggFunc !== void 0) {
          if (typeof aggFunc === "string") {
            column.setAggFunc(aggFunc);
            if (!column.isValueActive()) {
              column.setValueActive(true, source);
              this.valueColumns.push(column);
            }
          } else {
            if (exists(aggFunc)) {
              console.warn("AG Grid: stateItem.aggFunc must be a string. if using your own aggregation functions, register the functions first before using them in get/set state. This is because it is intended for the column state to be stored and retrieved as simple JSON.");
            }
            if (column.isValueActive()) {
              column.setValueActive(false, source);
              removeFromArray(this.valueColumns, column);
            }
          }
        }
        var _a = getValue("rowGroup", "rowGroupIndex"), rowGroup = _a.value1, rowGroupIndex = _a.value2;
        if (rowGroup !== void 0 || rowGroupIndex !== void 0) {
          if (typeof rowGroupIndex === "number" || rowGroup) {
            if (!column.isRowGroupActive()) {
              column.setRowGroupActive(true, source);
              this.rowGroupColumns.push(column);
            }
            if (rowGroupIndexes && typeof rowGroupIndex === "number") {
              rowGroupIndexes[column.getId()] = rowGroupIndex;
            }
          } else {
            if (column.isRowGroupActive()) {
              column.setRowGroupActive(false, source);
              removeFromArray(this.rowGroupColumns, column);
            }
          }
        }
        var _b = getValue("pivot", "pivotIndex"), pivot = _b.value1, pivotIndex = _b.value2;
        if (pivot !== void 0 || pivotIndex !== void 0) {
          if (typeof pivotIndex === "number" || pivot) {
            if (!column.isPivotActive()) {
              column.setPivotActive(true, source);
              this.pivotColumns.push(column);
            }
            if (pivotIndexes && typeof pivotIndex === "number") {
              pivotIndexes[column.getId()] = pivotIndex;
            }
          } else {
            if (column.isPivotActive()) {
              column.setPivotActive(false, source);
              removeFromArray(this.pivotColumns, column);
            }
          }
        }
      };
      ColumnModel2.prototype.getGridColumns = function(keys2) {
        return this.getColumns(keys2, this.getGridColumn.bind(this));
      };
      ColumnModel2.prototype.getColumns = function(keys2, columnLookupCallback) {
        var foundColumns = [];
        if (keys2) {
          keys2.forEach(function(key) {
            var column = columnLookupCallback(key);
            if (column) {
              foundColumns.push(column);
            }
          });
        }
        return foundColumns;
      };
      ColumnModel2.prototype.getColumnWithValidation = function(key) {
        if (key == null) {
          return null;
        }
        var column = this.getGridColumn(key);
        if (!column) {
          console.warn("AG Grid: could not find column " + key);
        }
        return column;
      };
      ColumnModel2.prototype.getPrimaryColumn = function(key) {
        if (!this.primaryColumns) {
          return null;
        }
        return this.getColumn(key, this.primaryColumns, this.primaryColumnsMap);
      };
      ColumnModel2.prototype.getGridColumn = function(key) {
        return this.getColumn(key, this.gridColumns, this.gridColumnsMap);
      };
      ColumnModel2.prototype.lookupGridColumn = function(key) {
        return this.gridColumnsMap[key];
      };
      ColumnModel2.prototype.getSecondaryColumn = function(key) {
        if (!this.secondaryColumns) {
          return null;
        }
        return this.getColumn(key, this.secondaryColumns, this.secondaryColumnsMap);
      };
      ColumnModel2.prototype.getColumn = function(key, columnList, columnMap) {
        if (!key) {
          return null;
        }
        if (typeof key == "string" && columnMap[key]) {
          return columnMap[key];
        }
        for (var i = 0; i < columnList.length; i++) {
          if (this.columnsMatch(columnList[i], key)) {
            return columnList[i];
          }
        }
        return this.getAutoColumn(key);
      };
      ColumnModel2.prototype.getSourceColumnsForGroupColumn = function(groupCol) {
        var sourceColumnId = groupCol.getColDef().showRowGroup;
        if (!sourceColumnId) {
          return null;
        }
        if (sourceColumnId === true) {
          return this.rowGroupColumns.slice(0);
        }
        var column = this.getPrimaryColumn(sourceColumnId);
        return column ? [column] : null;
      };
      ColumnModel2.prototype.getAutoColumn = function(key) {
        var _this = this;
        if (!this.groupAutoColumns || !exists(this.groupAutoColumns) || missing(this.groupAutoColumns)) {
          return null;
        }
        return this.groupAutoColumns.find(function(groupCol) {
          return _this.columnsMatch(groupCol, key);
        }) || null;
      };
      ColumnModel2.prototype.columnsMatch = function(column, key) {
        var columnMatches = column === key;
        var colDefMatches = column.getColDef() === key;
        var idMatches = column.getColId() == key;
        return columnMatches || colDefMatches || idMatches;
      };
      ColumnModel2.prototype.getDisplayNameForColumn = function(column, location, includeAggFunc) {
        if (includeAggFunc === void 0) {
          includeAggFunc = false;
        }
        if (!column) {
          return null;
        }
        var headerName = this.getHeaderName(column.getColDef(), column, null, null, location);
        if (includeAggFunc) {
          return this.wrapHeaderNameWithAggFunc(column, headerName);
        }
        return headerName;
      };
      ColumnModel2.prototype.getDisplayNameForProvidedColumnGroup = function(columnGroup, providedColumnGroup, location) {
        var colGroupDef = providedColumnGroup ? providedColumnGroup.getColGroupDef() : null;
        if (colGroupDef) {
          return this.getHeaderName(colGroupDef, null, columnGroup, providedColumnGroup, location);
        }
        return null;
      };
      ColumnModel2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
        return this.getDisplayNameForProvidedColumnGroup(columnGroup, columnGroup.getProvidedColumnGroup(), location);
      };
      ColumnModel2.prototype.getHeaderName = function(colDef, column, columnGroup, providedColumnGroup, location) {
        var headerValueGetter = colDef.headerValueGetter;
        if (headerValueGetter) {
          var params = {
            colDef,
            column,
            columnGroup,
            providedColumnGroup,
            location,
            api: this.gridOptionsService.api,
            columnApi: this.gridOptionsService.columnApi,
            context: this.gridOptionsService.context
          };
          if (typeof headerValueGetter === "function") {
            return headerValueGetter(params);
          } else if (typeof headerValueGetter === "string") {
            return this.expressionService.evaluate(headerValueGetter, params);
          }
          console.warn("AG Grid: headerValueGetter must be a function or a string");
          return "";
        } else if (colDef.headerName != null) {
          return colDef.headerName;
        } else if (colDef.field) {
          return camelCaseToHumanText(colDef.field);
        }
        return "";
      };
      ColumnModel2.prototype.wrapHeaderNameWithAggFunc = function(column, headerName) {
        if (this.gridOptionsService.is("suppressAggFuncInHeader")) {
          return headerName;
        }
        var pivotValueColumn = column.getColDef().pivotValueColumn;
        var pivotActiveOnThisColumn = exists(pivotValueColumn);
        var aggFunc = null;
        var aggFuncFound;
        if (pivotActiveOnThisColumn) {
          var isCollapsedHeaderEnabled = this.gridOptionsService.is("removePivotHeaderRowWhenSingleValueColumn") && this.valueColumns.length === 1;
          var isTotalColumn = column.getColDef().pivotTotalColumnIds !== void 0;
          if (isCollapsedHeaderEnabled && !isTotalColumn) {
            return headerName;
          }
          aggFunc = pivotValueColumn ? pivotValueColumn.getAggFunc() : null;
          aggFuncFound = true;
        } else {
          var measureActive = column.isValueActive();
          var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
          if (measureActive && aggregationPresent) {
            aggFunc = column.getAggFunc();
            aggFuncFound = true;
          } else {
            aggFuncFound = false;
          }
        }
        if (aggFuncFound) {
          var aggFuncString = typeof aggFunc === "string" ? aggFunc : "func";
          var localeTextFunc = this.localeService.getLocaleTextFunc();
          var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
          return aggFuncStringTranslated + "(" + headerName + ")";
        }
        return headerName;
      };
      ColumnModel2.prototype.getColumnGroup = function(colId, partId) {
        if (!colId) {
          return null;
        }
        if (colId instanceof ColumnGroup) {
          return colId;
        }
        var allColumnGroups = this.getAllDisplayedTrees();
        var checkPartId = typeof partId === "number";
        var result = null;
        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
          if (child instanceof ColumnGroup) {
            var columnGroup = child;
            var matched = void 0;
            if (checkPartId) {
              matched = colId === columnGroup.getGroupId() && partId === columnGroup.getPartId();
            } else {
              matched = colId === columnGroup.getGroupId();
            }
            if (matched) {
              result = columnGroup;
            }
          }
        });
        return result;
      };
      ColumnModel2.prototype.isReady = function() {
        return this.ready;
      };
      ColumnModel2.prototype.extractValueColumns = function(source, oldPrimaryColumns) {
        this.valueColumns = this.extractColumns(
          oldPrimaryColumns,
          this.valueColumns,
          function(col, flag) {
            return col.setValueActive(flag, source);
          },
          // aggFunc doesn't have index variant, cos order of value cols doesn't matter, so always return null
          function() {
            return void 0;
          },
          function() {
            return void 0;
          },
          // aggFunc is a string, so return it's existence
          function(colDef) {
            var aggFunc = colDef.aggFunc;
            if (aggFunc === null || aggFunc === "") {
              return null;
            }
            if (aggFunc === void 0) {
              return;
            }
            return !!aggFunc;
          },
          function(colDef) {
            return colDef.initialAggFunc != null && colDef.initialAggFunc != "";
          }
        );
        this.valueColumns.forEach(function(col) {
          var colDef = col.getColDef();
          if (colDef.aggFunc != null && colDef.aggFunc != "") {
            col.setAggFunc(colDef.aggFunc);
          } else {
            if (!col.getAggFunc()) {
              col.setAggFunc(colDef.initialAggFunc);
            }
          }
        });
      };
      ColumnModel2.prototype.extractRowGroupColumns = function(source, oldPrimaryColumns) {
        this.rowGroupColumns = this.extractColumns(oldPrimaryColumns, this.rowGroupColumns, function(col, flag) {
          return col.setRowGroupActive(flag, source);
        }, function(colDef) {
          return colDef.rowGroupIndex;
        }, function(colDef) {
          return colDef.initialRowGroupIndex;
        }, function(colDef) {
          return colDef.rowGroup;
        }, function(colDef) {
          return colDef.initialRowGroup;
        });
      };
      ColumnModel2.prototype.extractColumns = function(oldPrimaryColumns, previousCols, setFlagFunc, getIndexFunc, getInitialIndexFunc, getValueFunc, getInitialValueFunc) {
        if (oldPrimaryColumns === void 0) {
          oldPrimaryColumns = [];
        }
        if (previousCols === void 0) {
          previousCols = [];
        }
        var colsWithIndex = [];
        var colsWithValue = [];
        (this.primaryColumns || []).forEach(function(col) {
          var colIsNew = oldPrimaryColumns.indexOf(col) < 0;
          var colDef = col.getColDef();
          var value = attrToBoolean(getValueFunc(colDef));
          var initialValue = attrToBoolean(getInitialValueFunc(colDef));
          var index = attrToNumber(getIndexFunc(colDef));
          var initialIndex = attrToNumber(getInitialIndexFunc(colDef));
          var include;
          var valuePresent = value !== void 0;
          var indexPresent = index !== void 0;
          var initialValuePresent = initialValue !== void 0;
          var initialIndexPresent = initialIndex !== void 0;
          if (valuePresent) {
            include = value;
          } else if (indexPresent) {
            if (index === null) {
              include = false;
            } else {
              include = index >= 0;
            }
          } else {
            if (colIsNew) {
              if (initialValuePresent) {
                include = initialValue;
              } else if (initialIndexPresent) {
                include = initialIndex != null && initialIndex >= 0;
              } else {
                include = false;
              }
            } else {
              include = previousCols.indexOf(col) >= 0;
            }
          }
          if (include) {
            var useIndex = colIsNew ? index != null || initialIndex != null : index != null;
            useIndex ? colsWithIndex.push(col) : colsWithValue.push(col);
          }
        });
        var getIndexForCol = function(col) {
          var index = getIndexFunc(col.getColDef());
          var defaultIndex = getInitialIndexFunc(col.getColDef());
          return index != null ? index : defaultIndex;
        };
        colsWithIndex.sort(function(colA, colB) {
          var indexA = getIndexForCol(colA);
          var indexB = getIndexForCol(colB);
          if (indexA === indexB) {
            return 0;
          }
          if (indexA < indexB) {
            return -1;
          }
          return 1;
        });
        var res = [].concat(colsWithIndex);
        previousCols.forEach(function(col) {
          if (colsWithValue.indexOf(col) >= 0) {
            res.push(col);
          }
        });
        colsWithValue.forEach(function(col) {
          if (res.indexOf(col) < 0) {
            res.push(col);
          }
        });
        previousCols.forEach(function(col) {
          if (res.indexOf(col) < 0) {
            setFlagFunc(col, false);
          }
        });
        res.forEach(function(col) {
          if (previousCols.indexOf(col) < 0) {
            setFlagFunc(col, true);
          }
        });
        return res;
      };
      ColumnModel2.prototype.extractPivotColumns = function(source, oldPrimaryColumns) {
        this.pivotColumns = this.extractColumns(oldPrimaryColumns, this.pivotColumns, function(col, flag) {
          return col.setPivotActive(flag, source);
        }, function(colDef) {
          return colDef.pivotIndex;
        }, function(colDef) {
          return colDef.initialPivotIndex;
        }, function(colDef) {
          return colDef.pivot;
        }, function(colDef) {
          return colDef.initialPivot;
        });
      };
      ColumnModel2.prototype.resetColumnGroupState = function(source) {
        if (source === void 0) {
          source = "api";
        }
        var stateItems = [];
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.primaryColumnTree, function(child) {
          if (child instanceof ProvidedColumnGroup) {
            var colGroupDef = child.getColGroupDef();
            var groupState = {
              groupId: child.getGroupId(),
              open: !colGroupDef ? void 0 : colGroupDef.openByDefault
            };
            stateItems.push(groupState);
          }
        });
        this.setColumnGroupState(stateItems, source);
      };
      ColumnModel2.prototype.getColumnGroupState = function() {
        var columnGroupState = [];
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
          if (node instanceof ProvidedColumnGroup) {
            columnGroupState.push({
              groupId: node.getGroupId(),
              open: node.isExpanded()
            });
          }
        });
        return columnGroupState;
      };
      ColumnModel2.prototype.setColumnGroupState = function(stateItems, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        this.columnAnimationService.start();
        var impactedGroups = [];
        stateItems.forEach(function(stateItem) {
          var groupKey = stateItem.groupId;
          var newValue = stateItem.open;
          var providedColumnGroup = _this.getProvidedColumnGroup(groupKey);
          if (!providedColumnGroup) {
            return;
          }
          if (providedColumnGroup.isExpanded() === newValue) {
            return;
          }
          _this.logger.log("columnGroupOpened(" + providedColumnGroup.getGroupId() + "," + newValue + ")");
          providedColumnGroup.setExpanded(newValue);
          impactedGroups.push(providedColumnGroup);
        });
        this.updateGroupsAndDisplayedColumns(source);
        this.setFirstRightAndLastLeftPinned(source);
        impactedGroups.forEach(function(providedColumnGroup) {
          var event = {
            type: Events.EVENT_COLUMN_GROUP_OPENED,
            columnGroup: providedColumnGroup
          };
          _this.eventService.dispatchEvent(event);
        });
        this.columnAnimationService.finish();
      };
      ColumnModel2.prototype.setColumnGroupOpened = function(key, newValue, source) {
        if (source === void 0) {
          source = "api";
        }
        var keyAsString;
        if (key instanceof ProvidedColumnGroup) {
          keyAsString = key.getId();
        } else {
          keyAsString = key || "";
        }
        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }], source);
      };
      ColumnModel2.prototype.getProvidedColumnGroup = function(key) {
        if (typeof key !== "string") {
          console.error("AG Grid: group key must be a string");
        }
        var res = null;
        this.columnUtils.depthFirstOriginalTreeSearch(null, this.gridBalancedTree, function(node) {
          if (node instanceof ProvidedColumnGroup) {
            if (node.getId() === key) {
              res = node;
            }
          }
        });
        return res;
      };
      ColumnModel2.prototype.calculateColumnsForDisplay = function() {
        var _this = this;
        var columnsForDisplay;
        if (this.pivotMode && missing(this.secondaryColumns)) {
          columnsForDisplay = this.gridColumns.filter(function(column) {
            var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
            var isValueCol = _this.valueColumns && includes(_this.valueColumns, column);
            return isAutoGroupCol || isValueCol;
          });
        } else {
          columnsForDisplay = this.gridColumns.filter(function(column) {
            var isAutoGroupCol = _this.groupAutoColumns && includes(_this.groupAutoColumns, column);
            return isAutoGroupCol || column.isVisible();
          });
        }
        return columnsForDisplay;
      };
      ColumnModel2.prototype.checkColSpanActiveInCols = function(columns) {
        var result = false;
        columns.forEach(function(col) {
          if (exists(col.getColDef().colSpan)) {
            result = true;
          }
        });
        return result;
      };
      ColumnModel2.prototype.calculateColumnsForGroupDisplay = function() {
        var _this = this;
        this.groupDisplayColumns = [];
        this.groupDisplayColumnsMap = {};
        var checkFunc = function(col) {
          var colDef = col.getColDef();
          var underlyingColumn = colDef.showRowGroup;
          if (colDef && exists(underlyingColumn)) {
            _this.groupDisplayColumns.push(col);
            if (typeof underlyingColumn === "string") {
              _this.groupDisplayColumnsMap[underlyingColumn] = col;
            } else if (underlyingColumn === true) {
              _this.getRowGroupColumns().forEach(function(rowGroupCol) {
                _this.groupDisplayColumnsMap[rowGroupCol.getId()] = col;
              });
            }
          }
        };
        this.gridColumns.forEach(checkFunc);
      };
      ColumnModel2.prototype.getGroupDisplayColumns = function() {
        return this.groupDisplayColumns;
      };
      ColumnModel2.prototype.getGroupDisplayColumnForGroup = function(rowGroupColumnId) {
        return this.groupDisplayColumnsMap[rowGroupColumnId];
      };
      ColumnModel2.prototype.updateDisplayedColumns = function(source) {
        var columnsForDisplay = this.calculateColumnsForDisplay();
        this.buildDisplayedTrees(columnsForDisplay);
        this.updateGroupsAndDisplayedColumns(source);
        this.setFirstRightAndLastLeftPinned(source);
      };
      ColumnModel2.prototype.isSecondaryColumnsPresent = function() {
        return exists(this.secondaryColumns);
      };
      ColumnModel2.prototype.setSecondaryColumns = function(colDefs, source) {
        var _this = this;
        if (source === void 0) {
          source = "api";
        }
        var newColsPresent = colDefs && colDefs.length > 0;
        if (!newColsPresent && missing(this.secondaryColumns)) {
          return;
        }
        if (newColsPresent) {
          this.processSecondaryColumnDefinitions(colDefs);
          var balancedTreeResult = this.columnFactory.createColumnTree(colDefs, false, this.secondaryBalancedTree || this.previousSecondaryColumns || void 0);
          this.destroyOldColumns(this.secondaryBalancedTree, balancedTreeResult.columnTree);
          this.secondaryBalancedTree = balancedTreeResult.columnTree;
          this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
          this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
          this.secondaryColumnsMap = {};
          this.secondaryColumns.forEach(function(col) {
            return _this.secondaryColumnsMap[col.getId()] = col;
          });
          this.previousSecondaryColumns = null;
        } else {
          this.previousSecondaryColumns = this.secondaryBalancedTree;
          this.secondaryBalancedTree = null;
          this.secondaryHeaderRowCount = -1;
          this.secondaryColumns = null;
          this.secondaryColumnsMap = {};
        }
        this.updateGridColumns();
        this.updateDisplayedColumns(source);
      };
      ColumnModel2.prototype.processSecondaryColumnDefinitions = function(colDefs) {
        var columnCallback = this.gridOptionsService.get("processPivotResultColDef") || this.gridOptionsService.get("processSecondaryColDef");
        var groupCallback = this.gridOptionsService.get("processPivotResultColGroupDef") || this.gridOptionsService.get("processSecondaryColGroupDef");
        if (!columnCallback && !groupCallback) {
          return void 0;
        }
        var searchForColDefs = function(colDefs2) {
          colDefs2.forEach(function(abstractColDef) {
            var isGroup = exists(abstractColDef.children);
            if (isGroup) {
              var colGroupDef = abstractColDef;
              if (groupCallback) {
                groupCallback(colGroupDef);
              }
              searchForColDefs(colGroupDef.children);
            } else {
              var colDef = abstractColDef;
              if (columnCallback) {
                columnCallback(colDef);
              }
            }
          });
        };
        if (colDefs) {
          searchForColDefs(colDefs);
        }
      };
      ColumnModel2.prototype.updateGridColumns = function() {
        var _this = this;
        var prevGridCols = this.gridBalancedTree;
        if (this.gridColsArePrimary) {
          this.lastPrimaryOrder = this.gridColumns;
        } else {
          this.lastSecondaryOrder = this.gridColumns;
        }
        var sortOrderToRecover;
        if (this.secondaryColumns && this.secondaryBalancedTree) {
          var hasSameColumns = this.secondaryColumns.every(function(col) {
            return _this.gridColumnsMap[col.getColId()] !== void 0;
          });
          this.gridBalancedTree = this.secondaryBalancedTree.slice();
          this.gridHeaderRowCount = this.secondaryHeaderRowCount;
          this.gridColumns = this.secondaryColumns.slice();
          this.gridColsArePrimary = false;
          if (hasSameColumns) {
            sortOrderToRecover = this.lastSecondaryOrder;
          }
        } else if (this.primaryColumns) {
          this.gridBalancedTree = this.primaryColumnTree.slice();
          this.gridHeaderRowCount = this.primaryHeaderRowCount;
          this.gridColumns = this.primaryColumns.slice();
          this.gridColsArePrimary = true;
          sortOrderToRecover = this.lastPrimaryOrder;
        }
        var areAutoColsChanged = this.createGroupAutoColumnsIfNeeded();
        if (areAutoColsChanged && sortOrderToRecover) {
          var groupAutoColsMap_1 = convertToMap(this.groupAutoColumns.map(function(col) {
            return [col, true];
          }));
          sortOrderToRecover = sortOrderToRecover.filter(function(col) {
            return !groupAutoColsMap_1.has(col);
          });
          sortOrderToRecover = __spreadArray$l(__spreadArray$l([], __read$s(this.groupAutoColumns)), __read$s(sortOrderToRecover));
        }
        this.addAutoGroupToGridColumns();
        this.orderGridColsLike(sortOrderToRecover);
        this.gridColumns = this.placeLockedColumns(this.gridColumns);
        this.calculateColumnsForGroupDisplay();
        this.refreshQuickFilterColumns();
        this.clearDisplayedAndViewportColumns();
        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
        this.gridColumnsMap = {};
        this.gridColumns.forEach(function(col) {
          return _this.gridColumnsMap[col.getId()] = col;
        });
        this.setAutoHeightActive();
        if (!areEqual(prevGridCols, this.gridBalancedTree)) {
          var event_4 = {
            type: Events.EVENT_GRID_COLUMNS_CHANGED
          };
          this.eventService.dispatchEvent(event_4);
        }
      };
      ColumnModel2.prototype.setAutoHeightActive = function() {
        this.autoHeightActive = this.gridColumns.filter(function(col) {
          return col.isAutoHeight();
        }).length > 0;
        if (this.autoHeightActive) {
          this.autoHeightActiveAtLeastOnce = true;
          var supportedRowModel = this.gridOptionsService.isRowModelType("clientSide") || this.gridOptionsService.isRowModelType("serverSide");
          if (!supportedRowModel) {
            var message_1 = "AG Grid - autoHeight columns only work with Client Side Row Model and Server Side Row Model.";
            doOnce(function() {
              return console.warn(message_1);
            }, "autoHeightActive.wrongRowModel");
          }
        }
      };
      ColumnModel2.prototype.orderGridColsLike = function(colsOrder) {
        if (missing(colsOrder)) {
          return;
        }
        var lastOrderMapped = convertToMap(colsOrder.map(function(col, index) {
          return [col, index];
        }));
        var noColsFound = true;
        this.gridColumns.forEach(function(col) {
          if (lastOrderMapped.has(col)) {
            noColsFound = false;
          }
        });
        if (noColsFound) {
          return;
        }
        var gridColsMap = convertToMap(this.gridColumns.map(function(col) {
          return [col, true];
        }));
        var oldColsOrdered = colsOrder.filter(function(col) {
          return gridColsMap.has(col);
        });
        var oldColsMap = convertToMap(oldColsOrdered.map(function(col) {
          return [col, true];
        }));
        var newColsOrdered = this.gridColumns.filter(function(col) {
          return !oldColsMap.has(col);
        });
        var newGridColumns = oldColsOrdered.slice();
        newColsOrdered.forEach(function(newCol) {
          var parent = newCol.getOriginalParent();
          if (!parent) {
            newGridColumns.push(newCol);
            return;
          }
          var siblings = [];
          while (!siblings.length && parent) {
            var leafCols = parent.getLeafColumns();
            leafCols.forEach(function(leafCol) {
              var presentInNewGriColumns = newGridColumns.indexOf(leafCol) >= 0;
              var noYetInSiblings = siblings.indexOf(leafCol) < 0;
              if (presentInNewGriColumns && noYetInSiblings) {
                siblings.push(leafCol);
              }
            });
            parent = parent.getOriginalParent();
          }
          if (!siblings.length) {
            newGridColumns.push(newCol);
            return;
          }
          var indexes = siblings.map(function(col) {
            return newGridColumns.indexOf(col);
          });
          var lastIndex = Math.max.apply(Math, __spreadArray$l([], __read$s(indexes)));
          insertIntoArray(newGridColumns, newCol, lastIndex + 1);
        });
        this.gridColumns = newGridColumns;
      };
      ColumnModel2.prototype.isPrimaryColumnGroupsPresent = function() {
        return this.primaryHeaderRowCount > 1;
      };
      ColumnModel2.prototype.refreshQuickFilterColumns = function() {
        var _a;
        var columnsForQuickFilter = (_a = this.isPivotMode() ? this.secondaryColumns : this.primaryColumns) !== null && _a !== void 0 ? _a : [];
        if (this.groupAutoColumns) {
          columnsForQuickFilter = columnsForQuickFilter.concat(this.groupAutoColumns);
        }
        this.columnsForQuickFilter = this.gridOptionsService.is("includeHiddenColumnsInQuickFilter") ? columnsForQuickFilter : columnsForQuickFilter.filter(function(col) {
          return col.isVisible() || col.isRowGroupActive();
        });
      };
      ColumnModel2.prototype.placeLockedColumns = function(cols) {
        var left = [];
        var normal = [];
        var right = [];
        cols.forEach(function(col) {
          var position = col.getColDef().lockPosition;
          if (position === "right") {
            right.push(col);
          } else if (position === "left" || position === true) {
            left.push(col);
          } else {
            normal.push(col);
          }
        });
        return __spreadArray$l(__spreadArray$l(__spreadArray$l([], __read$s(left)), __read$s(normal)), __read$s(right));
      };
      ColumnModel2.prototype.addAutoGroupToGridColumns = function() {
        if (missing(this.groupAutoColumns)) {
          this.destroyOldColumns(this.groupAutoColsBalancedTree);
          this.groupAutoColsBalancedTree = null;
          return;
        }
        this.gridColumns = this.groupAutoColumns ? this.groupAutoColumns.concat(this.gridColumns) : this.gridColumns;
        var newAutoColsTree = this.columnFactory.createForAutoGroups(this.groupAutoColumns, this.gridBalancedTree);
        this.destroyOldColumns(this.groupAutoColsBalancedTree, newAutoColsTree);
        this.groupAutoColsBalancedTree = newAutoColsTree;
        this.gridBalancedTree = newAutoColsTree.concat(this.gridBalancedTree);
      };
      ColumnModel2.prototype.clearDisplayedAndViewportColumns = function() {
        this.viewportRowLeft = {};
        this.viewportRowRight = {};
        this.viewportRowCenter = {};
        this.displayedColumnsLeft = [];
        this.displayedColumnsRight = [];
        this.displayedColumnsCenter = [];
        this.displayedColumns = [];
        this.viewportColumns = [];
        this.headerViewportColumns = [];
        this.viewportColumnsHash = "";
      };
      ColumnModel2.prototype.updateGroupsAndDisplayedColumns = function(source) {
        this.updateOpenClosedVisibilityInColumnGroups();
        this.deriveDisplayedColumns(source);
        this.refreshFlexedColumns();
        this.extractViewport();
        this.updateBodyWidths();
        var event = {
          type: Events.EVENT_DISPLAYED_COLUMNS_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnModel2.prototype.deriveDisplayedColumns = function(source) {
        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeLeft, this.displayedColumnsLeft);
        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeCentre, this.displayedColumnsCenter);
        this.derivedDisplayedColumnsFromDisplayedTree(this.displayedTreeRight, this.displayedColumnsRight);
        this.joinDisplayedColumns();
        this.setLeftValues(source);
        this.displayedAutoHeightCols = this.displayedColumns.filter(function(col) {
          return col.isAutoHeight();
        });
      };
      ColumnModel2.prototype.isAutoRowHeightActive = function() {
        return this.autoHeightActive;
      };
      ColumnModel2.prototype.wasAutoRowHeightEverActive = function() {
        return this.autoHeightActiveAtLeastOnce;
      };
      ColumnModel2.prototype.joinDisplayedColumns = function() {
        if (this.gridOptionsService.is("enableRtl")) {
          this.displayedColumns = this.displayedColumnsRight.concat(this.displayedColumnsCenter).concat(this.displayedColumnsLeft);
        } else {
          this.displayedColumns = this.displayedColumnsLeft.concat(this.displayedColumnsCenter).concat(this.displayedColumnsRight);
        }
      };
      ColumnModel2.prototype.setLeftValues = function(source) {
        this.setLeftValuesOfColumns(source);
        this.setLeftValuesOfGroups();
      };
      ColumnModel2.prototype.setLeftValuesOfColumns = function(source) {
        var _this = this;
        if (!this.primaryColumns) {
          return;
        }
        var allColumns = this.primaryColumns.slice(0);
        var doingRtl = this.gridOptionsService.is("enableRtl");
        [
          this.displayedColumnsLeft,
          this.displayedColumnsRight,
          this.displayedColumnsCenter
        ].forEach(function(columns) {
          if (doingRtl) {
            var left_1 = _this.getWidthOfColsInList(columns);
            columns.forEach(function(column) {
              left_1 -= column.getActualWidth();
              column.setLeft(left_1, source);
            });
          } else {
            var left_2 = 0;
            columns.forEach(function(column) {
              column.setLeft(left_2, source);
              left_2 += column.getActualWidth();
            });
          }
          removeAllFromUnorderedArray(allColumns, columns);
        });
        allColumns.forEach(function(column) {
          column.setLeft(null, source);
        });
      };
      ColumnModel2.prototype.setLeftValuesOfGroups = function() {
        [
          this.displayedTreeLeft,
          this.displayedTreeRight,
          this.displayedTreeCentre
        ].forEach(function(columns) {
          columns.forEach(function(column) {
            if (column instanceof ColumnGroup) {
              var columnGroup = column;
              columnGroup.checkLeft();
            }
          });
        });
      };
      ColumnModel2.prototype.derivedDisplayedColumnsFromDisplayedTree = function(tree, columns) {
        columns.length = 0;
        this.columnUtils.depthFirstDisplayedColumnTreeSearch(tree, function(child) {
          if (child instanceof Column) {
            columns.push(child);
          }
        });
      };
      ColumnModel2.prototype.extractViewportColumns = function() {
        if (this.suppressColumnVirtualisation) {
          this.viewportColumnsCenter = this.displayedColumnsCenter;
          this.headerViewportColumnsCenter = this.displayedColumnsCenter;
        } else {
          this.viewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInRowViewport.bind(this));
          this.headerViewportColumnsCenter = this.displayedColumnsCenter.filter(this.isColumnInHeaderViewport.bind(this));
        }
        this.viewportColumns = this.viewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
        this.headerViewportColumns = this.headerViewportColumnsCenter.concat(this.displayedColumnsLeft).concat(this.displayedColumnsRight);
      };
      ColumnModel2.prototype.getVirtualHeaderGroupRow = function(type, dept) {
        var result;
        switch (type) {
          case "left":
            result = this.viewportRowLeft[dept];
            break;
          case "right":
            result = this.viewportRowRight[dept];
            break;
          default:
            result = this.viewportRowCenter[dept];
            break;
        }
        if (missing(result)) {
          result = [];
        }
        return result;
      };
      ColumnModel2.prototype.calculateHeaderRows = function() {
        this.viewportRowLeft = {};
        this.viewportRowRight = {};
        this.viewportRowCenter = {};
        var virtualColIds = {};
        this.headerViewportColumns.forEach(function(col) {
          return virtualColIds[col.getId()] = true;
        });
        var testGroup = function(children, result, dept) {
          var returnValue = false;
          for (var i = 0; i < children.length; i++) {
            var child = children[i];
            var addThisItem = false;
            if (child instanceof Column) {
              addThisItem = virtualColIds[child.getId()] === true;
            } else {
              var columnGroup = child;
              var displayedChildren = columnGroup.getDisplayedChildren();
              if (displayedChildren) {
                addThisItem = testGroup(displayedChildren, result, dept + 1);
              }
            }
            if (addThisItem) {
              returnValue = true;
              if (!result[dept]) {
                result[dept] = [];
              }
              result[dept].push(child);
            }
          }
          return returnValue;
        };
        testGroup(this.displayedTreeLeft, this.viewportRowLeft, 0);
        testGroup(this.displayedTreeRight, this.viewportRowRight, 0);
        testGroup(this.displayedTreeCentre, this.viewportRowCenter, 0);
      };
      ColumnModel2.prototype.extractViewport = function() {
        var hashColumn = function(c) {
          return c.getId() + "-" + (c.getPinned() || "normal");
        };
        this.extractViewportColumns();
        var newHash = this.viewportColumns.map(hashColumn).join("#");
        var changed = this.viewportColumnsHash !== newHash;
        if (changed) {
          this.viewportColumnsHash = newHash;
          this.calculateHeaderRows();
        }
        return changed;
      };
      ColumnModel2.prototype.refreshFlexedColumns = function(params) {
        var _a;
        if (params === void 0) {
          params = {};
        }
        var source = params.source ? params.source : "flex";
        if (params.viewportWidth != null) {
          this.flexViewportWidth = params.viewportWidth;
        }
        if (!this.flexViewportWidth) {
          return [];
        }
        var flexAfterDisplayIndex = -1;
        if (params.resizingCols) {
          var allResizingCols = new Set(params.resizingCols);
          var displayedCols = this.displayedColumnsCenter;
          for (var i = displayedCols.length - 1; i >= 0; i--) {
            if (allResizingCols.has(displayedCols[i])) {
              flexAfterDisplayIndex = i;
              break;
            }
          }
        }
        var knownColumnsWidth = 0;
        var flexingColumns = [];
        var minimumFlexedWidth = 0;
        var totalFlex = 0;
        for (var i = 0; i < this.displayedColumnsCenter.length; i++) {
          var isFlex = this.displayedColumnsCenter[i].getFlex() && i > flexAfterDisplayIndex;
          if (isFlex) {
            flexingColumns.push(this.displayedColumnsCenter[i]);
            totalFlex += this.displayedColumnsCenter[i].getFlex();
            minimumFlexedWidth += (_a = this.displayedColumnsCenter[i].getMinWidth()) !== null && _a !== void 0 ? _a : 0;
          } else {
            knownColumnsWidth += this.displayedColumnsCenter[i].getActualWidth();
          }
        }
        if (!flexingColumns.length) {
          return [];
        }
        var changedColumns = [];
        if (knownColumnsWidth + minimumFlexedWidth > this.flexViewportWidth) {
          flexingColumns.forEach(function(col2) {
            var _a2;
            return col2.setActualWidth((_a2 = col2.getMinWidth()) !== null && _a2 !== void 0 ? _a2 : 0, source);
          });
          changedColumns = flexingColumns;
          flexingColumns = [];
        }
        var flexingColumnSizes = [];
        var spaceForFlexingColumns;
        outer:
          while (true) {
            spaceForFlexingColumns = this.flexViewportWidth - knownColumnsWidth;
            var spacePerFlex = spaceForFlexingColumns / totalFlex;
            for (var i = 0; i < flexingColumns.length; i++) {
              var col = flexingColumns[i];
              var widthByFlexRule = spacePerFlex * col.getFlex();
              var constrainedWidth = 0;
              var minWidth = col.getMinWidth();
              var maxWidth = col.getMaxWidth();
              if (exists(minWidth) && widthByFlexRule < minWidth) {
                constrainedWidth = minWidth;
              } else if (exists(maxWidth) && widthByFlexRule > maxWidth) {
                constrainedWidth = maxWidth;
              }
              if (constrainedWidth) {
                col.setActualWidth(constrainedWidth, source);
                removeFromUnorderedArray(flexingColumns, col);
                totalFlex -= col.getFlex();
                changedColumns.push(col);
                knownColumnsWidth += col.getActualWidth();
                continue outer;
              }
              flexingColumnSizes[i] = Math.round(widthByFlexRule);
            }
            break;
          }
        var remainingSpace = spaceForFlexingColumns;
        flexingColumns.forEach(function(col2, i2) {
          col2.setActualWidth(Math.min(flexingColumnSizes[i2], remainingSpace), source);
          changedColumns.push(col2);
          remainingSpace -= flexingColumnSizes[i2];
        });
        if (!params.skipSetLeft) {
          this.setLeftValues(source);
        }
        if (params.updateBodyWidths) {
          this.updateBodyWidths();
        }
        if (params.fireResizedEvent) {
          this.dispatchColumnResizedEvent(changedColumns, true, source, flexingColumns);
        }
        return flexingColumns;
      };
      ColumnModel2.prototype.sizeColumnsToFit = function(gridWidth, source, silent, params) {
        var _this = this;
        var _a, _b, _c, _d, _e;
        if (source === void 0) {
          source = "sizeColumnsToFit";
        }
        if (this.shouldQueueResizeOperations) {
          this.resizeOperationQueue.push(function() {
            return _this.sizeColumnsToFit(gridWidth, source, silent, params);
          });
          return;
        }
        var limitsMap = {};
        if (params) {
          (_a = params === null || params === void 0 ? void 0 : params.columnLimits) === null || _a === void 0 ? void 0 : _a.forEach(function(_a2) {
            var key = _a2.key, dimensions = __rest(_a2, ["key"]);
            limitsMap[typeof key === "string" ? key : key.getColId()] = dimensions;
          });
        }
        var allDisplayedColumns = this.getAllDisplayedColumns();
        var doColumnsAlreadyFit = gridWidth === this.getWidthOfColsInList(allDisplayedColumns);
        if (gridWidth <= 0 || !allDisplayedColumns.length || doColumnsAlreadyFit) {
          return;
        }
        var colsToSpread = [];
        var colsToNotSpread = [];
        allDisplayedColumns.forEach(function(column2) {
          if (column2.getColDef().suppressSizeToFit === true) {
            colsToNotSpread.push(column2);
          } else {
            colsToSpread.push(column2);
          }
        });
        var colsToDispatchEventFor = colsToSpread.slice(0);
        var finishedResizing = false;
        var moveToNotSpread = function(column2) {
          removeFromArray(colsToSpread, column2);
          colsToNotSpread.push(column2);
        };
        colsToSpread.forEach(function(column2) {
          var _a2, _b2;
          column2.resetActualWidth(source);
          var widthOverride2 = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column2.getId()];
          var minOverride2 = (_a2 = widthOverride2 === null || widthOverride2 === void 0 ? void 0 : widthOverride2.minWidth) !== null && _a2 !== void 0 ? _a2 : params === null || params === void 0 ? void 0 : params.defaultMinWidth;
          var maxOverride2 = (_b2 = widthOverride2 === null || widthOverride2 === void 0 ? void 0 : widthOverride2.maxWidth) !== null && _b2 !== void 0 ? _b2 : params === null || params === void 0 ? void 0 : params.defaultMaxWidth;
          var colWidth = column2.getActualWidth();
          if (typeof minOverride2 === "number" && colWidth < minOverride2) {
            column2.setActualWidth(minOverride2, source, true);
          } else if (typeof maxOverride2 === "number" && colWidth > maxOverride2) {
            column2.setActualWidth(maxOverride2, source, true);
          }
        });
        while (!finishedResizing) {
          finishedResizing = true;
          var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
          if (availablePixels <= 0) {
            colsToSpread.forEach(function(column2) {
              var _a2, _b2;
              var widthOverride2 = (_b2 = (_a2 = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column2.getId()]) === null || _a2 === void 0 ? void 0 : _a2.minWidth) !== null && _b2 !== void 0 ? _b2 : params === null || params === void 0 ? void 0 : params.defaultMinWidth;
              if (typeof widthOverride2 === "number") {
                column2.setActualWidth(widthOverride2, source, true);
                return;
              }
              column2.setMinimum(source);
            });
          } else {
            var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
            var pixelsForLastCol = availablePixels;
            for (var i = colsToSpread.length - 1; i >= 0; i--) {
              var column = colsToSpread[i];
              var widthOverride = limitsMap === null || limitsMap === void 0 ? void 0 : limitsMap[column.getId()];
              var minOverride = (_b = widthOverride === null || widthOverride === void 0 ? void 0 : widthOverride.minWidth) !== null && _b !== void 0 ? _b : params === null || params === void 0 ? void 0 : params.defaultMinWidth;
              var maxOverride = (_c = widthOverride === null || widthOverride === void 0 ? void 0 : widthOverride.maxWidth) !== null && _c !== void 0 ? _c : params === null || params === void 0 ? void 0 : params.defaultMaxWidth;
              var colMinWidth = (_d = column.getMinWidth()) !== null && _d !== void 0 ? _d : 0;
              var colMaxWidth = (_e = column.getMaxWidth()) !== null && _e !== void 0 ? _e : Number.MAX_VALUE;
              var minWidth = typeof minOverride === "number" && minOverride > colMinWidth ? minOverride : column.getMinWidth();
              var maxWidth = typeof maxOverride === "number" && maxOverride < colMaxWidth ? maxOverride : column.getMaxWidth();
              var newWidth = Math.round(column.getActualWidth() * scale);
              if (exists(minWidth) && newWidth < minWidth) {
                newWidth = minWidth;
                moveToNotSpread(column);
                finishedResizing = false;
              } else if (exists(maxWidth) && newWidth > maxWidth) {
                newWidth = maxWidth;
                moveToNotSpread(column);
                finishedResizing = false;
              } else if (i === 0) {
                newWidth = pixelsForLastCol;
              }
              column.setActualWidth(newWidth, source, true);
              pixelsForLastCol -= newWidth;
            }
          }
        }
        colsToDispatchEventFor.forEach(function(col) {
          col.fireColumnWidthChangedEvent(source);
        });
        this.setLeftValues(source);
        this.updateBodyWidths();
        if (silent) {
          return;
        }
        this.dispatchColumnResizedEvent(colsToDispatchEventFor, true, source);
      };
      ColumnModel2.prototype.buildDisplayedTrees = function(visibleColumns) {
        var leftVisibleColumns = [];
        var rightVisibleColumns = [];
        var centerVisibleColumns = [];
        visibleColumns.forEach(function(column) {
          switch (column.getPinned()) {
            case "left":
              leftVisibleColumns.push(column);
              break;
            case "right":
              rightVisibleColumns.push(column);
              break;
            default:
              centerVisibleColumns.push(column);
              break;
          }
        });
        var groupInstanceIdCreator = new GroupInstanceIdCreator();
        this.displayedTreeLeft = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, groupInstanceIdCreator, "left", this.displayedTreeLeft);
        this.displayedTreeRight = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, groupInstanceIdCreator, "right", this.displayedTreeRight);
        this.displayedTreeCentre = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, groupInstanceIdCreator, null, this.displayedTreeCentre);
        this.updateDisplayedMap();
      };
      ColumnModel2.prototype.updateDisplayedMap = function() {
        var _this = this;
        this.displayedColumnsAndGroupsMap = {};
        var func = function(child) {
          _this.displayedColumnsAndGroupsMap[child.getUniqueId()] = child;
        };
        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeCentre, func);
        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeLeft, func);
        this.columnUtils.depthFirstAllColumnTreeSearch(this.displayedTreeRight, func);
      };
      ColumnModel2.prototype.isDisplayed = function(item) {
        var fromMap = this.displayedColumnsAndGroupsMap[item.getUniqueId()];
        return fromMap === item;
      };
      ColumnModel2.prototype.updateOpenClosedVisibilityInColumnGroups = function() {
        var allColumnGroups = this.getAllDisplayedTrees();
        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function(child) {
          if (child instanceof ColumnGroup) {
            child.calculateDisplayedColumns();
          }
        });
      };
      ColumnModel2.prototype.getGroupAutoColumns = function() {
        return this.groupAutoColumns;
      };
      ColumnModel2.prototype.createGroupAutoColumnsIfNeeded = function() {
        var forceRecreateAutoGroups = this.forceRecreateAutoGroups;
        this.forceRecreateAutoGroups = false;
        if (!this.autoGroupsNeedBuilding) {
          return false;
        }
        this.autoGroupsNeedBuilding = false;
        var groupFullWidthRow = this.gridOptionsService.isGroupUseEntireRow(this.pivotMode);
        var suppressAutoColumn = this.pivotMode ? this.gridOptionsService.is("pivotSuppressAutoColumn") : this.isGroupSuppressAutoColumn();
        var groupingActive = this.rowGroupColumns.length > 0 || this.gridOptionsService.is("treeData");
        var needAutoColumns = groupingActive && !suppressAutoColumn && !groupFullWidthRow;
        if (needAutoColumns) {
          var newAutoGroupCols = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
          var autoColsDifferent = !this.autoColsEqual(newAutoGroupCols, this.groupAutoColumns);
          if (autoColsDifferent || forceRecreateAutoGroups) {
            this.groupAutoColumns = newAutoGroupCols;
            return true;
          }
        } else {
          this.groupAutoColumns = null;
        }
        return false;
      };
      ColumnModel2.prototype.isGroupSuppressAutoColumn = function() {
        var groupDisplayType = this.gridOptionsService.get("groupDisplayType");
        var isCustomRowGroups = groupDisplayType ? matchesGroupDisplayType("custom", groupDisplayType) : false;
        if (isCustomRowGroups) {
          return true;
        }
        var treeDataDisplayType = this.gridOptionsService.get("treeDataDisplayType");
        return treeDataDisplayType ? matchesTreeDataDisplayType("custom", treeDataDisplayType) : false;
      };
      ColumnModel2.prototype.autoColsEqual = function(colsA, colsB) {
        return areEqual(colsA, colsB, function(a, b) {
          return a.getColId() === b.getColId();
        });
      };
      ColumnModel2.prototype.getWidthOfColsInList = function(columnList) {
        return columnList.reduce(function(width, col) {
          return width + col.getActualWidth();
        }, 0);
      };
      ColumnModel2.prototype.getGridBalancedTree = function() {
        return this.gridBalancedTree;
      };
      ColumnModel2.prototype.getFirstDisplayedColumn = function() {
        var isRtl = this.gridOptionsService.is("enableRtl");
        var queryOrder = [
          "getDisplayedLeftColumns",
          "getDisplayedCenterColumns",
          "getDisplayedRightColumns"
        ];
        if (isRtl) {
          queryOrder.reverse();
        }
        for (var i = 0; i < queryOrder.length; i++) {
          var container = this[queryOrder[i]]();
          if (container.length) {
            return isRtl ? last(container) : container[0];
          }
        }
        return null;
      };
      ColumnModel2.prototype.setColumnHeaderHeight = function(col, height) {
        var changed = col.setAutoHeaderHeight(height);
        if (changed) {
          var event_5 = {
            type: Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED,
            column: col,
            columns: [col],
            source: "autosizeColumnHeaderHeight"
          };
          this.eventService.dispatchEvent(event_5);
        }
      };
      ColumnModel2.prototype.getColumnGroupHeaderRowHeight = function() {
        if (this.isPivotMode()) {
          return this.getPivotGroupHeaderHeight();
        }
        return this.getGroupHeaderHeight();
      };
      ColumnModel2.prototype.getColumnHeaderRowHeight = function() {
        var defaultHeight = this.isPivotMode() ? this.getPivotHeaderHeight() : this.getHeaderHeight();
        var displayedHeights = this.getAllDisplayedColumns().filter(function(col) {
          return col.isAutoHeaderHeight();
        }).map(function(col) {
          return col.getAutoHeaderHeight() || 0;
        });
        return Math.max.apply(Math, __spreadArray$l([defaultHeight], __read$s(displayedHeights)));
      };
      ColumnModel2.prototype.getHeaderHeight = function() {
        var _a;
        return (_a = this.gridOptionsService.getNum("headerHeight")) !== null && _a !== void 0 ? _a : this.environment.getFromTheme(25, "headerHeight");
      };
      ColumnModel2.prototype.getFloatingFiltersHeight = function() {
        var _a;
        return (_a = this.gridOptionsService.getNum("floatingFiltersHeight")) !== null && _a !== void 0 ? _a : this.getHeaderHeight();
      };
      ColumnModel2.prototype.getGroupHeaderHeight = function() {
        var _a;
        return (_a = this.gridOptionsService.getNum("groupHeaderHeight")) !== null && _a !== void 0 ? _a : this.getHeaderHeight();
      };
      ColumnModel2.prototype.getPivotHeaderHeight = function() {
        var _a;
        return (_a = this.gridOptionsService.getNum("pivotHeaderHeight")) !== null && _a !== void 0 ? _a : this.getHeaderHeight();
      };
      ColumnModel2.prototype.getPivotGroupHeaderHeight = function() {
        var _a;
        return (_a = this.gridOptionsService.getNum("pivotGroupHeaderHeight")) !== null && _a !== void 0 ? _a : this.getGroupHeaderHeight();
      };
      ColumnModel2.prototype.queueResizeOperations = function() {
        this.shouldQueueResizeOperations = true;
      };
      ColumnModel2.prototype.processResizeOperations = function() {
        this.shouldQueueResizeOperations = false;
        this.resizeOperationQueue.forEach(function(resizeOperation) {
          return resizeOperation();
        });
        this.resizeOperationQueue = [];
      };
      ColumnModel2.prototype.resetColumnDefIntoColumn = function(column) {
        var userColDef = column.getUserProvidedColDef();
        if (!userColDef) {
          return false;
        }
        var newColDef = this.columnFactory.addColumnDefaultAndTypes(userColDef, column.getColId());
        column.setColDef(newColDef, userColDef);
        return true;
      };
      ColumnModel2.prototype.generateColumnStateForRowGroupAndPivotIndexes = function(updatedRowGroupColumnState, updatedPivotColumnState) {
        var _this = this;
        var existingColumnStateUpdates = {};
        var orderColumns = function(updatedColumnState, colList, enableProp, initialEnableProp, indexProp, initialIndexProp) {
          if (!colList.length || !_this.primaryColumns) {
            return [];
          }
          var updatedColIdArray = Object.keys(updatedColumnState);
          var updatedColIds = new Set(updatedColIdArray);
          var newColIds = new Set(updatedColIdArray);
          var allColIds = new Set(colList.map(function(column) {
            var colId2 = column.getColId();
            newColIds.delete(colId2);
            return colId2;
          }).concat(updatedColIdArray));
          var colIdsInOriginalOrder = [];
          var originalOrderMap = {};
          var orderIndex = 0;
          for (var i = 0; i < _this.primaryColumns.length; i++) {
            var colId = _this.primaryColumns[i].getColId();
            if (allColIds.has(colId)) {
              colIdsInOriginalOrder.push(colId);
              originalOrderMap[colId] = orderIndex++;
            }
          }
          var index = 1e3;
          var hasAddedNewCols = false;
          var lastIndex = 0;
          var processPrecedingNewCols = function(colId2) {
            var originalOrderIndex = originalOrderMap[colId2];
            for (var i2 = lastIndex; i2 < originalOrderIndex; i2++) {
              var newColId = colIdsInOriginalOrder[i2];
              if (newColIds.has(newColId)) {
                updatedColumnState[newColId][indexProp] = index++;
                newColIds.delete(newColId);
              }
            }
            lastIndex = originalOrderIndex;
          };
          colList.forEach(function(column) {
            var colId2 = column.getColId();
            if (updatedColIds.has(colId2)) {
              processPrecedingNewCols(colId2);
              updatedColumnState[colId2][indexProp] = index++;
            } else {
              var colDef = column.getColDef();
              var missingIndex = colDef[indexProp] === null || colDef[indexProp] === void 0 && colDef[initialIndexProp] == null;
              if (missingIndex) {
                if (!hasAddedNewCols) {
                  var propEnabled = colDef[enableProp] || colDef[enableProp] === void 0 && colDef[initialEnableProp];
                  if (propEnabled) {
                    processPrecedingNewCols(colId2);
                  } else {
                    newColIds.forEach(function(newColId) {
                      updatedColumnState[newColId][indexProp] = index + originalOrderMap[newColId];
                    });
                    index += colIdsInOriginalOrder.length;
                    hasAddedNewCols = true;
                  }
                }
                if (!existingColumnStateUpdates[colId2]) {
                  existingColumnStateUpdates[colId2] = { colId: colId2 };
                }
                existingColumnStateUpdates[colId2][indexProp] = index++;
              }
            }
          });
        };
        orderColumns(updatedRowGroupColumnState, this.rowGroupColumns, "rowGroup", "initialRowGroup", "rowGroupIndex", "initialRowGroupIndex");
        orderColumns(updatedPivotColumnState, this.pivotColumns, "pivot", "initialPivot", "pivotIndex", "initialPivotIndex");
        return Object.values(existingColumnStateUpdates);
      };
      __decorate$2B([
        Autowired("expressionService")
      ], ColumnModel2.prototype, "expressionService", void 0);
      __decorate$2B([
        Autowired("columnFactory")
      ], ColumnModel2.prototype, "columnFactory", void 0);
      __decorate$2B([
        Autowired("displayedGroupCreator")
      ], ColumnModel2.prototype, "displayedGroupCreator", void 0);
      __decorate$2B([
        Autowired("ctrlsService")
      ], ColumnModel2.prototype, "ctrlsService", void 0);
      __decorate$2B([
        Autowired("autoWidthCalculator")
      ], ColumnModel2.prototype, "autoWidthCalculator", void 0);
      __decorate$2B([
        Autowired("columnUtils")
      ], ColumnModel2.prototype, "columnUtils", void 0);
      __decorate$2B([
        Autowired("columnAnimationService")
      ], ColumnModel2.prototype, "columnAnimationService", void 0);
      __decorate$2B([
        Autowired("autoGroupColService")
      ], ColumnModel2.prototype, "autoGroupColService", void 0);
      __decorate$2B([
        Optional("aggFuncService")
      ], ColumnModel2.prototype, "aggFuncService", void 0);
      __decorate$2B([
        Optional("valueCache")
      ], ColumnModel2.prototype, "valueCache", void 0);
      __decorate$2B([
        Optional("animationFrameService")
      ], ColumnModel2.prototype, "animationFrameService", void 0);
      __decorate$2B([
        Autowired("sortController")
      ], ColumnModel2.prototype, "sortController", void 0);
      __decorate$2B([
        Autowired("columnDefFactory")
      ], ColumnModel2.prototype, "columnDefFactory", void 0);
      __decorate$2B([
        PostConstruct
      ], ColumnModel2.prototype, "init", null);
      __decorate$2B([
        PreDestroy
      ], ColumnModel2.prototype, "destroyColumns", null);
      __decorate$2B([
        __param$8(0, Qualifier("loggerFactory"))
      ], ColumnModel2.prototype, "setBeans", null);
      ColumnModel2 = __decorate$2B([
        Bean("columnModel")
      ], ColumnModel2);
      return ColumnModel2;
    }(BeanStub);
    __extends$33 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnUtils = /** @class */
    function(_super) {
      __extends$33(ColumnUtils2, _super);
      function ColumnUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnUtils2.prototype.calculateColMinWidth = function(colDef) {
        return colDef.minWidth != null ? colDef.minWidth : this.environment.getMinColWidth();
      };
      ColumnUtils2.prototype.calculateColMaxWidth = function(colDef) {
        return colDef.maxWidth != null ? colDef.maxWidth : Number.MAX_SAFE_INTEGER;
      };
      ColumnUtils2.prototype.calculateColInitialWidth = function(colDef) {
        var minColWidth = this.calculateColMinWidth(colDef);
        var maxColWidth = this.calculateColMaxWidth(colDef);
        var width;
        var colDefWidth = attrToNumber(colDef.width);
        var colDefInitialWidth = attrToNumber(colDef.initialWidth);
        if (colDefWidth != null) {
          width = colDefWidth;
        } else if (colDefInitialWidth != null) {
          width = colDefInitialWidth;
        } else {
          width = 200;
        }
        return Math.max(Math.min(width, maxColWidth), minColWidth);
      };
      ColumnUtils2.prototype.getOriginalPathForColumn = function(column, originalBalancedTree) {
        var result = [];
        var found = false;
        var recursePath = function(balancedColumnTree, dept) {
          for (var i = 0; i < balancedColumnTree.length; i++) {
            if (found) {
              return;
            }
            var node = balancedColumnTree[i];
            if (node instanceof ProvidedColumnGroup) {
              var nextNode = node;
              recursePath(nextNode.getChildren(), dept + 1);
              result[dept] = node;
            } else if (node === column) {
              found = true;
            }
          }
        };
        recursePath(originalBalancedTree, 0);
        return found ? result : null;
      };
      ColumnUtils2.prototype.depthFirstOriginalTreeSearch = function(parent, tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof ProvidedColumnGroup) {
            _this.depthFirstOriginalTreeSearch(child, child.getChildren(), callback);
          }
          callback(child, parent);
        });
      };
      ColumnUtils2.prototype.depthFirstAllColumnTreeSearch = function(tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof ColumnGroup) {
            _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
          }
          callback(child);
        });
      };
      ColumnUtils2.prototype.depthFirstDisplayedColumnTreeSearch = function(tree, callback) {
        var _this = this;
        if (!tree) {
          return;
        }
        tree.forEach(function(child) {
          if (child instanceof ColumnGroup) {
            _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
          }
          callback(child);
        });
      };
      ColumnUtils2 = __decorate$2A([
        Bean("columnUtils")
      ], ColumnUtils2);
      return ColumnUtils2;
    }(BeanStub);
    __extends$32 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DisplayedGroupCreator = /** @class */
    function(_super) {
      __extends$32(DisplayedGroupCreator2, _super);
      function DisplayedGroupCreator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      DisplayedGroupCreator2.prototype.createDisplayedGroups = function(sortedVisibleColumns, groupInstanceIdCreator, pinned, oldDisplayedGroups) {
        var _this = this;
        var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
        var topLevelResultCols = [];
        var groupsOrColsAtCurrentLevel = sortedVisibleColumns;
        var _loop_1 = function() {
          var currentlyIterating = groupsOrColsAtCurrentLevel;
          groupsOrColsAtCurrentLevel = [];
          var lastGroupedColIdx = 0;
          var createGroupToIndex = function(to) {
            var from = lastGroupedColIdx;
            lastGroupedColIdx = to;
            var previousNode2 = currentlyIterating[from];
            var previousNodeProvided2 = previousNode2 instanceof ColumnGroup ? previousNode2.getProvidedColumnGroup() : previousNode2;
            var previousNodeParent2 = previousNodeProvided2.getOriginalParent();
            if (previousNodeParent2 == null) {
              for (var i2 = from; i2 < to; i2++) {
                topLevelResultCols.push(currentlyIterating[i2]);
              }
              return;
            }
            var newGroup = _this.createColumnGroup(previousNodeParent2, groupInstanceIdCreator, oldColumnsMapped, pinned);
            for (var i2 = from; i2 < to; i2++) {
              newGroup.addChild(currentlyIterating[i2]);
            }
            groupsOrColsAtCurrentLevel.push(newGroup);
          };
          for (var i = 1; i < currentlyIterating.length; i++) {
            var thisNode = currentlyIterating[i];
            var thisNodeProvided = thisNode instanceof ColumnGroup ? thisNode.getProvidedColumnGroup() : thisNode;
            var thisNodeParent = thisNodeProvided.getOriginalParent();
            var previousNode = currentlyIterating[lastGroupedColIdx];
            var previousNodeProvided = previousNode instanceof ColumnGroup ? previousNode.getProvidedColumnGroup() : previousNode;
            var previousNodeParent = previousNodeProvided.getOriginalParent();
            if (thisNodeParent !== previousNodeParent) {
              createGroupToIndex(i);
            }
          }
          if (lastGroupedColIdx < currentlyIterating.length) {
            createGroupToIndex(currentlyIterating.length);
          }
        };
        while (groupsOrColsAtCurrentLevel.length) {
          _loop_1();
        }
        this.setupParentsIntoColumns(topLevelResultCols, null);
        return topLevelResultCols;
      };
      DisplayedGroupCreator2.prototype.createColumnGroup = function(providedGroup, groupInstanceIdCreator, oldColumnsMapped, pinned) {
        var groupId = providedGroup.getGroupId();
        var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
        var uniqueId = ColumnGroup.createUniqueId(groupId, instanceId);
        var columnGroup = oldColumnsMapped[uniqueId];
        if (columnGroup && columnGroup.getProvidedColumnGroup() !== providedGroup) {
          columnGroup = null;
        }
        if (exists(columnGroup)) {
          columnGroup.reset();
        } else {
          columnGroup = new ColumnGroup(providedGroup, groupId, instanceId, pinned);
          this.context.createBean(columnGroup);
        }
        return columnGroup;
      };
      DisplayedGroupCreator2.prototype.mapOldGroupsById = function(displayedGroups) {
        var result = {};
        var recursive = function(columnsOrGroups) {
          columnsOrGroups.forEach(function(columnOrGroup) {
            if (columnOrGroup instanceof ColumnGroup) {
              var columnGroup = columnOrGroup;
              result[columnOrGroup.getUniqueId()] = columnGroup;
              recursive(columnGroup.getChildren());
            }
          });
        };
        if (displayedGroups) {
          recursive(displayedGroups);
        }
        return result;
      };
      DisplayedGroupCreator2.prototype.setupParentsIntoColumns = function(columnsOrGroups, parent) {
        var _this = this;
        columnsOrGroups.forEach(function(columnsOrGroup) {
          columnsOrGroup.setParent(parent);
          if (columnsOrGroup instanceof ColumnGroup) {
            var columnGroup = columnsOrGroup;
            _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
          }
        });
      };
      DisplayedGroupCreator2 = __decorate$2z([
        Bean("displayedGroupCreator")
      ], DisplayedGroupCreator2);
      return DisplayedGroupCreator2;
    }(BeanStub);
    __extends$31 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgStackComponentsRegistry = /** @class */
    function(_super) {
      __extends$31(AgStackComponentsRegistry2, _super);
      function AgStackComponentsRegistry2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.componentsMappedByName = {};
        return _this;
      }
      AgStackComponentsRegistry2.prototype.setupComponents = function(components) {
        var _this = this;
        if (components) {
          components.forEach(function(componentMeta) {
            return _this.addComponent(componentMeta);
          });
        }
      };
      AgStackComponentsRegistry2.prototype.addComponent = function(componentMeta) {
        var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
        var classUpperCase = classEscaped.toUpperCase();
        this.componentsMappedByName[classUpperCase] = componentMeta.componentClass;
      };
      AgStackComponentsRegistry2.prototype.getComponentClass = function(htmlTag) {
        return this.componentsMappedByName[htmlTag];
      };
      AgStackComponentsRegistry2 = __decorate$2y([
        Bean("agStackComponentsRegistry")
      ], AgStackComponentsRegistry2);
      return AgStackComponentsRegistry2;
    }(BeanStub);
    AriaUtils = Object.freeze({
      __proto__: null,
      setAriaRole,
      getAriaSortState,
      getAriaLevel,
      getAriaPosInSet,
      getAriaDescribedBy,
      setAriaLabel,
      setAriaLabelledBy,
      setAriaDescription,
      setAriaDescribedBy,
      setAriaLive,
      setAriaLevel,
      setAriaDisabled,
      setAriaHidden,
      setAriaActiveDescendant,
      setAriaExpanded,
      removeAriaExpanded,
      setAriaSetSize,
      setAriaPosInSet,
      setAriaMultiSelectable,
      setAriaRowCount,
      setAriaRowIndex,
      setAriaColCount,
      setAriaColIndex,
      setAriaColSpan,
      setAriaSort,
      removeAriaSort,
      setAriaSelected,
      setAriaChecked,
      setAriaControls,
      getAriaCheckboxStateName
    });
    BrowserUtils = Object.freeze({
      __proto__: null,
      isBrowserSafari,
      getSafariVersion,
      isBrowserChrome,
      isBrowserFirefox,
      isMacOsUserAgent,
      isIOSUserAgent,
      browserSupportsPreventScroll,
      getTabIndex,
      getMaxDivHeight,
      getBodyWidth,
      getBodyHeight,
      getScrollbarWidth,
      isInvisibleScrollbar
    });
    NumberUtils = Object.freeze({
      __proto__: null,
      padStartWidthZeros,
      createArrayOfNumbers,
      cleanNumber,
      decToHex,
      formatNumberTwoDecimalPlacesAndCommas,
      formatNumberCommas,
      sum,
      zeroOrGreater,
      oneOrGreater
    });
    __read$r = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    calculateOrdinal = function(value) {
      if (value > 3 && value < 21) {
        return "th";
      }
      var remainder = value % 10;
      switch (remainder) {
        case 1:
          return "st";
        case 2:
          return "nd";
        case 3:
          return "rd";
      }
      return "th";
    };
    DateUtils = Object.freeze({
      __proto__: null,
      serialiseDate,
      dateToFormattedString,
      parseDateTimeFromString
    });
    __values$5 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read$q = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    FOCUSABLE_SELECTOR = "[tabindex], input, select, button, textarea, [href]";
    FOCUSABLE_EXCLUDE = ".ag-hidden, .ag-hidden *, [disabled], .ag-disabled:not(.ag-button), .ag-disabled *";
    DomUtils = Object.freeze({
      __proto__: null,
      radioCssClass,
      FOCUSABLE_SELECTOR,
      FOCUSABLE_EXCLUDE,
      isFocusableFormField,
      setDisplayed,
      setVisible,
      setDisabled,
      isElementChildOfClass,
      getElementSize,
      getInnerHeight,
      getInnerWidth,
      getAbsoluteHeight,
      getAbsoluteWidth,
      getElementRectWithOffset,
      isRtlNegativeScroll,
      getScrollLeft,
      setScrollLeft,
      clearElement,
      removeElement,
      removeFromParent,
      isVisible,
      loadTemplate,
      appendHtml,
      getElementAttribute,
      offsetHeight,
      offsetWidth,
      ensureDomOrder,
      setDomChildOrder,
      insertWithDomOrder,
      prependDC,
      addStylesToElement,
      isHorizontalScrollShowing,
      isVerticalScrollShowing,
      setElementWidth,
      setFixedWidth,
      setElementHeight,
      setFixedHeight,
      formatSize,
      isNodeOrElement,
      copyNodeList,
      iterateNamedNodeMap,
      addOrRemoveAttribute,
      nodeListForEach,
      bindCellRendererToHtmlElement
    });
    iconNameClassMap = {
      // header column group shown when expanded (click to contract)
      columnGroupOpened: "expanded",
      // header column group shown when contracted (click to expand)
      columnGroupClosed: "contracted",
      // tool panel column group contracted (click to expand)
      columnSelectClosed: "tree-closed",
      // tool panel column group expanded (click to contract)
      columnSelectOpen: "tree-open",
      // column tool panel header expand/collapse all button, shown when some children are expanded and
      //     others are collapsed
      columnSelectIndeterminate: "tree-indeterminate",
      // shown on ghost icon while dragging column to the side of the grid to pin
      columnMovePin: "pin",
      // shown on ghost icon while dragging over part of the page that is not a drop zone
      columnMoveHide: "eye-slash",
      // shown on ghost icon while dragging columns to reorder
      columnMoveMove: "arrows",
      // animating icon shown when dragging a column to the right of the grid causes horizontal scrolling
      columnMoveLeft: "left",
      // animating icon shown when dragging a column to the left of the grid causes horizontal scrolling
      columnMoveRight: "right",
      // shown on ghost icon while dragging over Row Groups drop zone
      columnMoveGroup: "group",
      // shown on ghost icon while dragging over Values drop zone
      columnMoveValue: "aggregation",
      // shown on ghost icon while dragging over pivot drop zone
      columnMovePivot: "pivot",
      // shown on ghost icon while dragging over drop zone that doesn't support it, e.g.
      //     string column over aggregation drop zone
      dropNotAllowed: "not-allowed",
      // shown on row group when contracted (click to expand)
      groupContracted: "tree-closed",
      // shown on row group when expanded (click to contract)
      groupExpanded: "tree-open",
      // set filter tree list group contracted (click to expand)
      setFilterGroupClosed: "tree-closed",
      // set filter tree list group expanded (click to contract)
      setFilterGroupOpen: "tree-open",
      // set filter tree list expand/collapse all button, shown when some children are expanded and
      //     others are collapsed
      setFilterGroupIndeterminate: "tree-indeterminate",
      // context menu chart item
      chart: "chart",
      // chart window title bar
      close: "cross",
      // X (remove) on column 'pill' after adding it to a drop zone list
      cancel: "cancel",
      // indicates the currently active pin state in the "Pin column" sub-menu of the column menu
      check: "tick",
      // "go to first" button in pagination controls
      first: "first",
      // "go to previous" button in pagination controls
      previous: "previous",
      // "go to next" button in pagination controls
      next: "next",
      // "go to last" button in pagination controls
      last: "last",
      // shown on top right of chart when chart is linked to range data (click to unlink)
      linked: "linked",
      // shown on top right of chart when chart is not linked to range data (click to link)
      unlinked: "unlinked",
      // "Choose colour" button on chart settings tab
      colorPicker: "color-picker",
      // rotating spinner shown by the loading cell renderer
      groupLoading: "loading",
      // button to launch enterprise column menu
      menu: "menu",
      // filter tool panel tab
      filter: "filter",
      // column tool panel tab
      columns: "columns",
      // button in chart regular size window title bar (click to maximise)
      maximize: "maximize",
      // button in chart maximised window title bar (click to make regular size)
      minimize: "minimize",
      // "Pin column" item in column header menu
      menuPin: "pin",
      // "Value aggregation" column menu item (shown on numeric columns when grouping is active)"
      menuValue: "aggregation",
      // "Group by {column-name}" item in column header menu
      menuAddRowGroup: "group",
      // "Un-Group by {column-name}" item in column header menu
      menuRemoveRowGroup: "group",
      // context menu copy item
      clipboardCopy: "copy",
      // context menu cut item
      clipboardCut: "cut",
      // context menu paste item
      clipboardPaste: "paste",
      // identifies the pivot drop zone
      pivotPanel: "pivot",
      // "Row groups" drop zone in column tool panel
      rowGroupPanel: "group",
      // columns tool panel Values drop zone
      valuePanel: "aggregation",
      // drag handle used to pick up draggable columns
      columnDrag: "grip",
      // drag handle used to pick up draggable rows
      rowDrag: "grip",
      // context menu export item
      save: "save",
      // csv export
      csvExport: "csv",
      // excel export,
      excelExport: "excel",
      // icon on dropdown editors
      smallDown: "small-down",
      // version of small-right used in RTL mode
      smallLeft: "small-left",
      // separater between column 'pills' when you add multiple columns to the header drop zone
      smallRight: "small-right",
      smallUp: "small-up",
      // show on column header when column is sorted ascending
      sortAscending: "asc",
      // show on column header when column is sorted descending
      sortDescending: "desc",
      // show on column header when column has no sort, only when enabled with gridOptions.unSortIcon=true
      sortUnSort: "none",
      // Builder button in Advanced Filter
      advancedFilterBuilder: "group",
      // drag handle used to pick up Advanced Filter Builder rows
      advancedFilterBuilderDrag: "grip",
      // Advanced Filter Builder row validation error
      advancedFilterBuilderInvalid: "not-allowed",
      // shown on Advanced Filter Builder rows to move them up
      advancedFilterBuilderMoveUp: "up",
      // shown on Advanced Filter Builder rows to move them down
      advancedFilterBuilderMoveDown: "down",
      // shown on Advanced Filter Builder rows to add new rows
      advancedFilterBuilderAdd: "plus",
      // shown on Advanced Filter Builder rows to remove row
      advancedFilterBuilderRemove: "minus"
    };
    IconUtils = Object.freeze({
      __proto__: null,
      iconNameClassMap,
      createIcon,
      createIconNoSpan
    });
    KeyCode = /** @class */
    function() {
      function KeyCode2() {
      }
      KeyCode2.BACKSPACE = "Backspace";
      KeyCode2.TAB = "Tab";
      KeyCode2.ENTER = "Enter";
      KeyCode2.ESCAPE = "Escape";
      KeyCode2.SPACE = " ";
      KeyCode2.LEFT = "ArrowLeft";
      KeyCode2.UP = "ArrowUp";
      KeyCode2.RIGHT = "ArrowRight";
      KeyCode2.DOWN = "ArrowDown";
      KeyCode2.DELETE = "Delete";
      KeyCode2.F2 = "F2";
      KeyCode2.PAGE_UP = "PageUp";
      KeyCode2.PAGE_DOWN = "PageDown";
      KeyCode2.PAGE_HOME = "Home";
      KeyCode2.PAGE_END = "End";
      KeyCode2.A = "KeyA";
      KeyCode2.C = "KeyC";
      KeyCode2.D = "KeyD";
      KeyCode2.V = "KeyV";
      KeyCode2.X = "KeyX";
      KeyCode2.Y = "KeyY";
      KeyCode2.Z = "KeyZ";
      return KeyCode2;
    }();
    A_KEYCODE = 65;
    C_KEYCODE = 67;
    V_KEYCODE = 86;
    D_KEYCODE = 68;
    Z_KEYCODE = 90;
    Y_KEYCODE = 89;
    KeyboardUtils = Object.freeze({
      __proto__: null,
      isEventFromPrintableCharacter,
      isUserSuppressingKeyboardEvent,
      isUserSuppressingHeaderKeyboardEvent,
      normaliseQwertyAzerty,
      isDeleteKey
    });
    MouseUtils = Object.freeze({
      __proto__: null,
      areEventsNear
    });
    RowNodeUtils = Object.freeze({
      __proto__: null,
      sortRowNodesByOrder,
      traverseNodesWithKey
    });
    SetUtils = Object.freeze({
      __proto__: null,
      convertToSet
    });
    __assign$m = function() {
      __assign$m = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$m.apply(this, arguments);
    };
    utils = __assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m(__assign$m({}, AriaUtils), ArrayUtils), BrowserUtils), DateUtils), DomUtils), EventUtils), FunctionUtils), FuzzyMatchUtils), GenericUtils), IconUtils), KeyboardUtils), MapUtils), MouseUtils), NumberUtils), ObjectUtils), RowNodeUtils), SetUtils), StringUtils);
    _ = utils;
    NumberSequence = /** @class */
    function() {
      function NumberSequence2(initValue, step) {
        if (initValue === void 0) {
          initValue = 0;
        }
        if (step === void 0) {
          step = 1;
        }
        this.nextValue = initValue;
        this.step = step;
      }
      NumberSequence2.prototype.next = function() {
        var valToReturn = this.nextValue;
        this.nextValue += this.step;
        return valToReturn;
      };
      NumberSequence2.prototype.peek = function() {
        return this.nextValue;
      };
      NumberSequence2.prototype.skip = function(count) {
        this.nextValue += count;
      };
      return NumberSequence2;
    }();
    (function(AgPromiseStatus2) {
      AgPromiseStatus2[AgPromiseStatus2["IN_PROGRESS"] = 0] = "IN_PROGRESS";
      AgPromiseStatus2[AgPromiseStatus2["RESOLVED"] = 1] = "RESOLVED";
    })(AgPromiseStatus || (AgPromiseStatus = {}));
    AgPromise = /** @class */
    function() {
      function AgPromise2(callback) {
        var _this = this;
        this.status = AgPromiseStatus.IN_PROGRESS;
        this.resolution = null;
        this.waiters = [];
        callback(function(value) {
          return _this.onDone(value);
        }, function(params) {
          return _this.onReject(params);
        });
      }
      AgPromise2.all = function(promises) {
        return new AgPromise2(function(resolve) {
          var remainingToResolve = promises.length;
          var combinedValues = new Array(remainingToResolve);
          promises.forEach(function(promise, index) {
            promise.then(function(value) {
              combinedValues[index] = value;
              remainingToResolve--;
              if (remainingToResolve === 0) {
                resolve(combinedValues);
              }
            });
          });
        });
      };
      AgPromise2.resolve = function(value) {
        if (value === void 0) {
          value = null;
        }
        return new AgPromise2(function(resolve) {
          return resolve(value);
        });
      };
      AgPromise2.prototype.then = function(func) {
        var _this = this;
        return new AgPromise2(function(resolve) {
          if (_this.status === AgPromiseStatus.RESOLVED) {
            resolve(func(_this.resolution));
          } else {
            _this.waiters.push(function(value) {
              return resolve(func(value));
            });
          }
        });
      };
      AgPromise2.prototype.resolveNow = function(ifNotResolvedValue, ifResolved) {
        return this.status === AgPromiseStatus.RESOLVED ? ifResolved(this.resolution) : ifNotResolvedValue;
      };
      AgPromise2.prototype.onDone = function(value) {
        this.status = AgPromiseStatus.RESOLVED;
        this.resolution = value;
        this.waiters.forEach(function(waiter) {
          return waiter(value);
        });
      };
      AgPromise2.prototype.onReject = function(params) {
        console.warn("TBI");
      };
      return AgPromise2;
    }();
    Timer = /** @class */
    function() {
      function Timer2() {
        this.timestamp = (/* @__PURE__ */ new Date()).getTime();
      }
      Timer2.prototype.print = function(msg) {
        var duration = (/* @__PURE__ */ new Date()).getTime() - this.timestamp;
        console.info(msg + " = " + duration);
        this.timestamp = (/* @__PURE__ */ new Date()).getTime();
      };
      return Timer2;
    }();
    __extends$30 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$l = function() {
      __assign$l = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$l.apply(this, arguments);
    };
    __decorate$2x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(TooltipStates2) {
      TooltipStates2[TooltipStates2["NOTHING"] = 0] = "NOTHING";
      TooltipStates2[TooltipStates2["WAITING_TO_SHOW"] = 1] = "WAITING_TO_SHOW";
      TooltipStates2[TooltipStates2["SHOWING"] = 2] = "SHOWING";
    })(TooltipStates || (TooltipStates = {}));
    (function(TooltipTrigger2) {
      TooltipTrigger2[TooltipTrigger2["HOVER"] = 0] = "HOVER";
      TooltipTrigger2[TooltipTrigger2["FOCUS"] = 1] = "FOCUS";
    })(TooltipTrigger || (TooltipTrigger = {}));
    CustomTooltipFeature = /** @class */
    function(_super) {
      __extends$30(CustomTooltipFeature2, _super);
      function CustomTooltipFeature2(parentComp, tooltipShowDelayOverride, tooltipHideDelayOverride) {
        var _this = _super.call(this) || this;
        _this.parentComp = parentComp;
        _this.tooltipShowDelayOverride = tooltipShowDelayOverride;
        _this.tooltipHideDelayOverride = tooltipHideDelayOverride;
        _this.DEFAULT_SHOW_TOOLTIP_DELAY = 2e3;
        _this.DEFAULT_HIDE_TOOLTIP_DELAY = 1e4;
        _this.SHOW_QUICK_TOOLTIP_DIFF = 1e3;
        _this.FADE_OUT_TOOLTIP_TIMEOUT = 1e3;
        _this.INTERACTIVE_HIDE_DELAY = 100;
        _this.interactionEnabled = false;
        _this.isInteractingWithTooltip = false;
        _this.state = TooltipStates.NOTHING;
        _this.tooltipInstanceCount = 0;
        _this.tooltipMouseTrack = false;
        return _this;
      }
      CustomTooltipFeature2.prototype.postConstruct = function() {
        if (this.gridOptionsService.is("tooltipInteraction")) {
          this.interactionEnabled = true;
        }
        this.tooltipTrigger = this.getTooltipTrigger();
        this.tooltipShowDelay = this.getTooltipDelay("show");
        this.tooltipHideDelay = this.getTooltipDelay("hide");
        this.tooltipMouseTrack = this.gridOptionsService.is("tooltipMouseTrack");
        var el = this.parentComp.getGui();
        if (this.tooltipTrigger === TooltipTrigger.HOVER) {
          this.addManagedListener(el, "mouseenter", this.onMouseEnter.bind(this));
          this.addManagedListener(el, "mouseleave", this.onMouseLeave.bind(this));
        }
        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {
          this.addManagedListener(el, "focusin", this.onFocusIn.bind(this));
          this.addManagedListener(el, "focusout", this.onFocusOut.bind(this));
        }
        this.addManagedListener(el, "mousemove", this.onMouseMove.bind(this));
        if (!this.interactionEnabled) {
          this.addManagedListener(el, "mousedown", this.onMouseDown.bind(this));
          this.addManagedListener(el, "keydown", this.onKeyDown.bind(this));
        }
      };
      CustomTooltipFeature2.prototype.getGridOptionsTooltipDelay = function(delayOption) {
        var delay = this.gridOptionsService.getNum(delayOption);
        if (exists(delay)) {
          if (delay < 0) {
            doOnce(function() {
              return console.warn("AG Grid: " + delayOption + " should not be lower than 0");
            }, delayOption + "Warn");
          }
          return Math.max(200, delay);
        }
        return void 0;
      };
      CustomTooltipFeature2.prototype.getTooltipDelay = function(type) {
        var _a, _b, _c, _d;
        if (type === "show") {
          return (_b = (_a = this.getGridOptionsTooltipDelay("tooltipShowDelay")) !== null && _a !== void 0 ? _a : this.tooltipShowDelayOverride) !== null && _b !== void 0 ? _b : this.DEFAULT_SHOW_TOOLTIP_DELAY;
        } else {
          return (_d = (_c = this.getGridOptionsTooltipDelay("tooltipHideDelay")) !== null && _c !== void 0 ? _c : this.tooltipHideDelayOverride) !== null && _d !== void 0 ? _d : this.DEFAULT_HIDE_TOOLTIP_DELAY;
        }
      };
      CustomTooltipFeature2.prototype.destroy = function() {
        this.setToDoNothing();
        _super.prototype.destroy.call(this);
      };
      CustomTooltipFeature2.prototype.getTooltipTrigger = function() {
        var trigger = this.gridOptionsService.get("tooltipTrigger");
        if (!trigger || trigger === "hover") {
          return TooltipTrigger.HOVER;
        }
        return TooltipTrigger.FOCUS;
      };
      CustomTooltipFeature2.prototype.onMouseEnter = function(e) {
        var _this = this;
        if (this.interactionEnabled && this.interactiveTooltipTimeoutId) {
          this.unlockService();
          this.startHideTimeout();
        }
        if (isIOSUserAgent()) {
          return;
        }
        if (CustomTooltipFeature2.isLocked) {
          this.showTooltipTimeoutId = window.setTimeout(function() {
            _this.prepareToShowTooltip(e);
          }, this.INTERACTIVE_HIDE_DELAY);
        } else {
          this.prepareToShowTooltip(e);
        }
      };
      CustomTooltipFeature2.prototype.onMouseMove = function(e) {
        if (this.lastMouseEvent) {
          this.lastMouseEvent = e;
        }
        if (this.tooltipMouseTrack && this.state === TooltipStates.SHOWING && this.tooltipComp) {
          this.positionTooltip();
        }
      };
      CustomTooltipFeature2.prototype.onMouseDown = function() {
        this.setToDoNothing();
      };
      CustomTooltipFeature2.prototype.onMouseLeave = function() {
        if (this.interactionEnabled) {
          this.lockService();
        } else {
          this.setToDoNothing();
        }
      };
      CustomTooltipFeature2.prototype.onFocusIn = function() {
        this.prepareToShowTooltip();
      };
      CustomTooltipFeature2.prototype.onFocusOut = function(e) {
        var _a;
        var relatedTarget = e.relatedTarget;
        var parentCompGui = this.parentComp.getGui();
        var tooltipGui = (_a = this.tooltipComp) === null || _a === void 0 ? void 0 : _a.getGui();
        if (this.isInteractingWithTooltip || parentCompGui.contains(relatedTarget) || this.interactionEnabled && (tooltipGui === null || tooltipGui === void 0 ? void 0 : tooltipGui.contains(relatedTarget))) {
          return;
        }
        this.setToDoNothing();
      };
      CustomTooltipFeature2.prototype.onKeyDown = function() {
        this.setToDoNothing();
      };
      CustomTooltipFeature2.prototype.prepareToShowTooltip = function(mouseEvent) {
        if (this.state != TooltipStates.NOTHING || CustomTooltipFeature2.isLocked) {
          return false;
        }
        var delay = 0;
        if (mouseEvent) {
          delay = this.isLastTooltipHiddenRecently() ? 200 : this.tooltipShowDelay;
        }
        this.lastMouseEvent = mouseEvent || null;
        this.showTooltipTimeoutId = window.setTimeout(this.showTooltip.bind(this), delay);
        this.state = TooltipStates.WAITING_TO_SHOW;
        return true;
      };
      CustomTooltipFeature2.prototype.isLastTooltipHiddenRecently = function() {
        var now = (/* @__PURE__ */ new Date()).getTime();
        var then = CustomTooltipFeature2.lastTooltipHideTime;
        return now - then < this.SHOW_QUICK_TOOLTIP_DIFF;
      };
      CustomTooltipFeature2.prototype.setToDoNothing = function() {
        if (this.state === TooltipStates.SHOWING) {
          this.hideTooltip();
        }
        if (this.onBodyScrollEventCallback) {
          this.onBodyScrollEventCallback();
          this.onBodyScrollEventCallback = void 0;
        }
        if (this.onColumnMovedEventCallback) {
          this.onColumnMovedEventCallback();
          this.onColumnMovedEventCallback = void 0;
        }
        this.clearTimeouts();
        this.state = TooltipStates.NOTHING;
        this.lastMouseEvent = null;
      };
      CustomTooltipFeature2.prototype.showTooltip = function() {
        var params = __assign$l({}, this.parentComp.getTooltipParams());
        if (!exists(params.value)) {
          this.setToDoNothing();
          return;
        }
        this.state = TooltipStates.SHOWING;
        this.tooltipInstanceCount++;
        var callback = this.newTooltipComponentCallback.bind(this, this.tooltipInstanceCount);
        var userDetails = this.userComponentFactory.getTooltipCompDetails(params);
        userDetails.newAgStackInstance().then(callback);
      };
      CustomTooltipFeature2.prototype.hideTooltip = function(forceHide) {
        if (!forceHide && this.isInteractingWithTooltip) {
          return;
        }
        if (this.tooltipComp) {
          this.destroyTooltipComp();
          CustomTooltipFeature2.lastTooltipHideTime = (/* @__PURE__ */ new Date()).getTime();
        }
        var event = {
          type: Events.EVENT_TOOLTIP_HIDE,
          parentGui: this.parentComp.getGui()
        };
        this.eventService.dispatchEvent(event);
        this.state = TooltipStates.NOTHING;
      };
      CustomTooltipFeature2.prototype.newTooltipComponentCallback = function(tooltipInstanceCopy, tooltipComp) {
        var compNoLongerNeeded = this.state !== TooltipStates.SHOWING || this.tooltipInstanceCount !== tooltipInstanceCopy;
        if (compNoLongerNeeded) {
          this.getContext().destroyBean(tooltipComp);
          return;
        }
        var eGui = tooltipComp.getGui();
        this.tooltipComp = tooltipComp;
        if (!eGui.classList.contains("ag-tooltip")) {
          eGui.classList.add("ag-tooltip-custom");
        }
        if (this.tooltipTrigger === TooltipTrigger.HOVER) {
          eGui.classList.add("ag-tooltip-animate");
        }
        if (this.interactionEnabled) {
          eGui.classList.add("ag-tooltip-interactive");
        }
        var translate = this.localeService.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          eChild: eGui,
          ariaLabel: translate("ariaLabelTooltip", "Tooltip")
        });
        if (addPopupRes) {
          this.tooltipPopupDestroyFunc = addPopupRes.hideFunc;
        }
        this.positionTooltip();
        if (this.tooltipTrigger === TooltipTrigger.FOCUS) {
          this.onBodyScrollEventCallback = this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.setToDoNothing.bind(this));
          this.onColumnMovedEventCallback = this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.setToDoNothing.bind(this));
        }
        if (this.interactionEnabled) {
          if (this.tooltipTrigger === TooltipTrigger.HOVER) {
            this.tooltipMouseEnterListener = this.addManagedListener(eGui, "mouseenter", this.onTooltipMouseEnter.bind(this)) || null;
            this.tooltipMouseLeaveListener = this.addManagedListener(eGui, "mouseleave", this.onTooltipMouseLeave.bind(this)) || null;
          } else {
            this.tooltipFocusInListener = this.addManagedListener(eGui, "focusin", this.onTooltipFocusIn.bind(this)) || null;
            this.tooltipFocusOutListener = this.addManagedListener(eGui, "focusout", this.onTooltipFocusOut.bind(this)) || null;
          }
        }
        var event = {
          type: Events.EVENT_TOOLTIP_SHOW,
          tooltipGui: eGui,
          parentGui: this.parentComp.getGui()
        };
        this.eventService.dispatchEvent(event);
        this.startHideTimeout();
      };
      CustomTooltipFeature2.prototype.onTooltipMouseEnter = function() {
        this.isInteractingWithTooltip = true;
        this.unlockService();
      };
      CustomTooltipFeature2.prototype.onTooltipMouseLeave = function() {
        this.isInteractingWithTooltip = false;
        this.lockService();
      };
      CustomTooltipFeature2.prototype.onTooltipFocusIn = function() {
        this.isInteractingWithTooltip = true;
      };
      CustomTooltipFeature2.prototype.onTooltipFocusOut = function(e) {
        var _a;
        var parentGui = this.parentComp.getGui();
        var tooltipGui = (_a = this.tooltipComp) === null || _a === void 0 ? void 0 : _a.getGui();
        var relatedTarget = e.relatedTarget;
        if (tooltipGui === null || tooltipGui === void 0 ? void 0 : tooltipGui.contains(relatedTarget)) {
          return;
        }
        this.isInteractingWithTooltip = false;
        if (parentGui.contains(relatedTarget)) {
          this.startHideTimeout();
        } else {
          this.hideTooltip();
        }
      };
      CustomTooltipFeature2.prototype.positionTooltip = function() {
        var params = {
          type: "tooltip",
          ePopup: this.tooltipComp.getGui(),
          nudgeY: 18,
          skipObserver: this.tooltipMouseTrack
        };
        if (this.lastMouseEvent) {
          this.popupService.positionPopupUnderMouseEvent(__assign$l(__assign$l({}, params), { mouseEvent: this.lastMouseEvent }));
        } else {
          this.popupService.positionPopupByComponent(__assign$l(__assign$l({}, params), { eventSource: this.parentComp.getGui(), position: "under", keepWithinBounds: true, nudgeY: 5 }));
        }
      };
      CustomTooltipFeature2.prototype.destroyTooltipComp = function() {
        var _this = this;
        this.tooltipComp.getGui().classList.add("ag-tooltip-hiding");
        var tooltipPopupDestroyFunc = this.tooltipPopupDestroyFunc;
        var tooltipComp = this.tooltipComp;
        var delay = this.tooltipTrigger === TooltipTrigger.HOVER ? this.FADE_OUT_TOOLTIP_TIMEOUT : 0;
        window.setTimeout(function() {
          tooltipPopupDestroyFunc();
          _this.getContext().destroyBean(tooltipComp);
        }, delay);
        this.clearTooltipListeners();
        this.tooltipPopupDestroyFunc = void 0;
        this.tooltipComp = void 0;
      };
      CustomTooltipFeature2.prototype.clearTooltipListeners = function() {
        [
          this.tooltipMouseEnterListener,
          this.tooltipMouseLeaveListener,
          this.tooltipFocusInListener,
          this.tooltipFocusOutListener
        ].forEach(function(listener) {
          if (listener) {
            listener();
          }
        });
        this.tooltipMouseEnterListener = this.tooltipMouseLeaveListener = this.tooltipFocusInListener = this.tooltipFocusOutListener = null;
      };
      CustomTooltipFeature2.prototype.lockService = function() {
        var _this = this;
        CustomTooltipFeature2.isLocked = true;
        this.interactiveTooltipTimeoutId = window.setTimeout(function() {
          _this.unlockService();
          _this.setToDoNothing();
        }, this.INTERACTIVE_HIDE_DELAY);
      };
      CustomTooltipFeature2.prototype.unlockService = function() {
        CustomTooltipFeature2.isLocked = false;
        this.clearInteractiveTimeout();
      };
      CustomTooltipFeature2.prototype.startHideTimeout = function() {
        this.clearHideTimeout();
        this.hideTooltipTimeoutId = window.setTimeout(this.hideTooltip.bind(this), this.tooltipHideDelay);
      };
      CustomTooltipFeature2.prototype.clearShowTimeout = function() {
        if (!this.showTooltipTimeoutId) {
          return;
        }
        window.clearTimeout(this.showTooltipTimeoutId);
        this.showTooltipTimeoutId = void 0;
      };
      CustomTooltipFeature2.prototype.clearHideTimeout = function() {
        if (!this.hideTooltipTimeoutId) {
          return;
        }
        window.clearTimeout(this.hideTooltipTimeoutId);
        this.hideTooltipTimeoutId = void 0;
      };
      CustomTooltipFeature2.prototype.clearInteractiveTimeout = function() {
        if (!this.interactiveTooltipTimeoutId) {
          return;
        }
        window.clearTimeout(this.interactiveTooltipTimeoutId);
        this.interactiveTooltipTimeoutId = void 0;
      };
      CustomTooltipFeature2.prototype.clearTimeouts = function() {
        this.clearShowTimeout();
        this.clearHideTimeout();
        this.clearInteractiveTimeout();
      };
      CustomTooltipFeature2.isLocked = false;
      __decorate$2x([
        Autowired("popupService")
      ], CustomTooltipFeature2.prototype, "popupService", void 0);
      __decorate$2x([
        Autowired("userComponentFactory")
      ], CustomTooltipFeature2.prototype, "userComponentFactory", void 0);
      __decorate$2x([
        PostConstruct
      ], CustomTooltipFeature2.prototype, "postConstruct", null);
      return CustomTooltipFeature2;
    }(BeanStub);
    CssClassManager = /** @class */
    function() {
      function CssClassManager2(getGui) {
        this.cssClassStates = {};
        this.getGui = getGui;
      }
      CssClassManager2.prototype.addCssClass = function(className) {
        var _this = this;
        var list = (className || "").split(" ");
        if (list.length > 1) {
          list.forEach(function(cls) {
            return _this.addCssClass(cls);
          });
          return;
        }
        var updateNeeded = this.cssClassStates[className] !== true;
        if (updateNeeded && className.length) {
          var eGui = this.getGui();
          if (eGui) {
            eGui.classList.add(className);
          }
          this.cssClassStates[className] = true;
        }
      };
      CssClassManager2.prototype.removeCssClass = function(className) {
        var _this = this;
        var list = (className || "").split(" ");
        if (list.length > 1) {
          list.forEach(function(cls) {
            return _this.removeCssClass(cls);
          });
          return;
        }
        var updateNeeded = this.cssClassStates[className] !== false;
        if (updateNeeded && className.length) {
          var eGui = this.getGui();
          if (eGui) {
            eGui.classList.remove(className);
          }
          this.cssClassStates[className] = false;
        }
      };
      CssClassManager2.prototype.containsCssClass = function(className) {
        var eGui = this.getGui();
        if (!eGui) {
          return false;
        }
        return eGui.classList.contains(className);
      };
      CssClassManager2.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
        var _this = this;
        if (!className) {
          return;
        }
        if (className.indexOf(" ") >= 0) {
          var list = (className || "").split(" ");
          if (list.length > 1) {
            list.forEach(function(cls) {
              return _this.addOrRemoveCssClass(cls, addOrRemove);
            });
            return;
          }
        }
        var updateNeeded = this.cssClassStates[className] !== addOrRemove;
        if (updateNeeded && className.length) {
          var eGui = this.getGui();
          if (eGui) {
            eGui.classList.toggle(className, addOrRemove);
          }
          this.cssClassStates[className] = addOrRemove;
        }
      };
      return CssClassManager2;
    }();
    __extends$2$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    compIdSequence = new NumberSequence();
    Component = /** @class */
    function(_super) {
      __extends$2$(Component2, _super);
      function Component2(template) {
        var _this = _super.call(this) || this;
        _this.displayed = true;
        _this.visible = true;
        _this.compId = compIdSequence.next();
        _this.cssClassManager = new CssClassManager(function() {
          return _this.eGui;
        });
        if (template) {
          _this.setTemplate(template);
        }
        return _this;
      }
      Component2.prototype.preConstructOnComponent = function() {
        this.usingBrowserTooltips = this.gridOptionsService.is("enableBrowserTooltips");
      };
      Component2.prototype.getCompId = function() {
        return this.compId;
      };
      Component2.prototype.getTooltipParams = function() {
        return {
          value: this.tooltipText,
          location: "UNKNOWN"
        };
      };
      Component2.prototype.setTooltip = function(newTooltipText, showDelayOverride, hideDelayOverride) {
        var _this = this;
        var removeTooltip = function() {
          if (_this.usingBrowserTooltips) {
            _this.getGui().removeAttribute("title");
          } else {
            _this.tooltipFeature = _this.destroyBean(_this.tooltipFeature);
          }
        };
        var addTooltip = function() {
          if (_this.usingBrowserTooltips) {
            _this.getGui().setAttribute("title", _this.tooltipText);
          } else {
            _this.tooltipFeature = _this.createBean(new CustomTooltipFeature(_this, showDelayOverride, hideDelayOverride));
          }
        };
        if (this.tooltipText != newTooltipText) {
          if (this.tooltipText) {
            removeTooltip();
          }
          if (newTooltipText != null) {
            this.tooltipText = newTooltipText;
            if (this.tooltipText) {
              addTooltip();
            }
          }
        }
      };
      Component2.prototype.createChildComponentsFromTags = function(parentNode, paramsMap) {
        var _this = this;
        var childNodeList = copyNodeList(parentNode.childNodes);
        childNodeList.forEach(function(childNode) {
          if (!(childNode instanceof HTMLElement)) {
            return;
          }
          var childComp = _this.createComponentFromElement(childNode, function(childComp2) {
            var childGui = childComp2.getGui();
            if (childGui) {
              _this.copyAttributesFromNode(childNode, childComp2.getGui());
            }
          }, paramsMap);
          if (childComp) {
            if (childComp.addItems && childNode.children.length) {
              _this.createChildComponentsFromTags(childNode, paramsMap);
              var items = Array.prototype.slice.call(childNode.children);
              childComp.addItems(items);
            }
            _this.swapComponentForNode(childComp, parentNode, childNode);
          } else if (childNode.childNodes) {
            _this.createChildComponentsFromTags(childNode, paramsMap);
          }
        });
      };
      Component2.prototype.createComponentFromElement = function(element, afterPreCreateCallback, paramsMap) {
        var key = element.nodeName;
        var componentParams = paramsMap ? paramsMap[element.getAttribute("ref")] : void 0;
        var ComponentClass = this.agStackComponentsRegistry.getComponentClass(key);
        if (ComponentClass) {
          Component2.elementGettingCreated = element;
          var newComponent = new ComponentClass(componentParams);
          newComponent.setParentComponent(this);
          this.createBean(newComponent, null, afterPreCreateCallback);
          return newComponent;
        }
        return null;
      };
      Component2.prototype.copyAttributesFromNode = function(source, dest) {
        iterateNamedNodeMap(source.attributes, function(name, value) {
          return dest.setAttribute(name, value);
        });
      };
      Component2.prototype.swapComponentForNode = function(newComponent, parentNode, childNode) {
        var eComponent = newComponent.getGui();
        parentNode.replaceChild(eComponent, childNode);
        parentNode.insertBefore(document.createComment(childNode.nodeName), eComponent);
        this.addDestroyFunc(this.destroyBean.bind(this, newComponent));
        this.swapInComponentForQuerySelectors(newComponent, childNode);
      };
      Component2.prototype.swapInComponentForQuerySelectors = function(newComponent, childNode) {
        var thisNoType = this;
        this.iterateOverQuerySelectors(function(querySelector) {
          if (thisNoType[querySelector.attributeName] === childNode) {
            thisNoType[querySelector.attributeName] = newComponent;
          }
        });
      };
      Component2.prototype.iterateOverQuerySelectors = function(action) {
        var thisPrototype = Object.getPrototypeOf(this);
        while (thisPrototype != null) {
          var metaData = thisPrototype.__agComponentMetaData;
          var currentProtoName = getFunctionName(thisPrototype.constructor);
          if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
            metaData[currentProtoName].querySelectors.forEach(function(querySelector) {
              return action(querySelector);
            });
          }
          thisPrototype = Object.getPrototypeOf(thisPrototype);
        }
      };
      Component2.prototype.activateTabIndex = function(elements) {
        var tabIndex = this.gridOptionsService.getNum("tabIndex") || 0;
        if (!elements) {
          elements = [];
        }
        if (!elements.length) {
          elements.push(this.getGui());
        }
        elements.forEach(function(el) {
          return el.setAttribute("tabindex", tabIndex.toString());
        });
      };
      Component2.prototype.setTemplate = function(template, paramsMap) {
        var eGui = loadTemplate(template);
        this.setTemplateFromElement(eGui, paramsMap);
      };
      Component2.prototype.setTemplateFromElement = function(element, paramsMap) {
        this.eGui = element;
        this.eGui.__agComponent = this;
        this.wireQuerySelectors();
        if (!!this.getContext()) {
          this.createChildComponentsFromTags(this.getGui(), paramsMap);
        }
      };
      Component2.prototype.createChildComponentsPreConstruct = function() {
        if (!!this.getGui()) {
          this.createChildComponentsFromTags(this.getGui());
        }
      };
      Component2.prototype.wireQuerySelectors = function() {
        var _this = this;
        if (!this.eGui) {
          return;
        }
        var thisNoType = this;
        this.iterateOverQuerySelectors(function(querySelector) {
          var setResult = function(result) {
            return thisNoType[querySelector.attributeName] = result;
          };
          var topLevelRefMatch = querySelector.refSelector && _this.getAttribute("ref") === querySelector.refSelector;
          if (topLevelRefMatch) {
            setResult(_this.eGui);
          } else {
            var resultOfQuery = _this.eGui.querySelector(querySelector.querySelector);
            if (resultOfQuery) {
              setResult(resultOfQuery.__agComponent || resultOfQuery);
            }
          }
        });
      };
      Component2.prototype.getGui = function() {
        return this.eGui;
      };
      Component2.prototype.getFocusableElement = function() {
        return this.eGui;
      };
      Component2.prototype.getAriaElement = function() {
        return this.getFocusableElement();
      };
      Component2.prototype.setParentComponent = function(component) {
        this.parentComponent = component;
      };
      Component2.prototype.getParentComponent = function() {
        return this.parentComponent;
      };
      Component2.prototype.setGui = function(eGui) {
        this.eGui = eGui;
      };
      Component2.prototype.queryForHtmlElement = function(cssSelector) {
        return this.eGui.querySelector(cssSelector);
      };
      Component2.prototype.queryForHtmlInputElement = function(cssSelector) {
        return this.eGui.querySelector(cssSelector);
      };
      Component2.prototype.appendChild = function(newChild, container) {
        if (newChild == null) {
          return;
        }
        if (!container) {
          container = this.eGui;
        }
        if (isNodeOrElement(newChild)) {
          container.appendChild(newChild);
        } else {
          var childComponent = newChild;
          container.appendChild(childComponent.getGui());
        }
      };
      Component2.prototype.isDisplayed = function() {
        return this.displayed;
      };
      Component2.prototype.setVisible = function(visible, options) {
        if (options === void 0) {
          options = {};
        }
        if (visible !== this.visible) {
          this.visible = visible;
          var skipAriaHidden = options.skipAriaHidden;
          setVisible(this.eGui, visible, { skipAriaHidden });
        }
      };
      Component2.prototype.setDisplayed = function(displayed, options) {
        if (options === void 0) {
          options = {};
        }
        if (displayed !== this.displayed) {
          this.displayed = displayed;
          var skipAriaHidden = options.skipAriaHidden;
          setDisplayed(this.eGui, displayed, { skipAriaHidden });
          var event_1 = {
            type: Component2.EVENT_DISPLAYED_CHANGED,
            visible: this.displayed
          };
          this.dispatchEvent(event_1);
        }
      };
      Component2.prototype.destroy = function() {
        if (this.tooltipFeature) {
          this.tooltipFeature = this.destroyBean(this.tooltipFeature);
        }
        if (this.parentComponent) {
          this.parentComponent = void 0;
        }
        var eGui = this.eGui;
        if (eGui && eGui.__agComponent) {
          eGui.__agComponent = void 0;
        }
        _super.prototype.destroy.call(this);
      };
      Component2.prototype.addGuiEventListener = function(event, listener, options) {
        var _this = this;
        this.eGui.addEventListener(event, listener, options);
        this.addDestroyFunc(function() {
          return _this.eGui.removeEventListener(event, listener);
        });
      };
      Component2.prototype.addCssClass = function(className) {
        this.cssClassManager.addCssClass(className);
      };
      Component2.prototype.removeCssClass = function(className) {
        this.cssClassManager.removeCssClass(className);
      };
      Component2.prototype.containsCssClass = function(className) {
        return this.cssClassManager.containsCssClass(className);
      };
      Component2.prototype.addOrRemoveCssClass = function(className, addOrRemove) {
        this.cssClassManager.addOrRemoveCssClass(className, addOrRemove);
      };
      Component2.prototype.getAttribute = function(key) {
        var eGui = this.eGui;
        return eGui ? eGui.getAttribute(key) : null;
      };
      Component2.prototype.getRefElement = function(refName) {
        return this.queryForHtmlElement('[ref="' + refName + '"]');
      };
      Component2.EVENT_DISPLAYED_CHANGED = "displayedChanged";
      __decorate$2w([
        Autowired("agStackComponentsRegistry")
      ], Component2.prototype, "agStackComponentsRegistry", void 0);
      __decorate$2w([
        PreConstruct
      ], Component2.prototype, "preConstructOnComponent", null);
      __decorate$2w([
        PreConstruct
      ], Component2.prototype, "createChildComponentsPreConstruct", null);
      return Component2;
    }(BeanStub);
    __extends$2_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ReadOnlyFloatingFilter = /** @class */
    function(_super) {
      __extends$2_(ReadOnlyFloatingFilter2, _super);
      function ReadOnlyFloatingFilter2() {
        return _super.call(
          this,
          /* html */
          '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eFloatingFilterText"></ag-input-text-field>\n            </div>'
        ) || this;
      }
      ReadOnlyFloatingFilter2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      ReadOnlyFloatingFilter2.prototype.init = function(params) {
        this.params = params;
        var displayName = this.columnModel.getDisplayNameForColumn(params.column, "header", true);
        var translate = this.localeService.getLocaleTextFunc();
        this.eFloatingFilterText.setDisabled(true).setInputAriaLabel(displayName + " " + translate("ariaFilterInput", "Filter Input"));
      };
      ReadOnlyFloatingFilter2.prototype.onParentModelChanged = function(parentModel) {
        var _this = this;
        if (!parentModel) {
          this.eFloatingFilterText.setValue("");
          return;
        }
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance.getModelAsString) {
            var modelAsString = filterInstance.getModelAsString(parentModel);
            _this.eFloatingFilterText.setValue(modelAsString);
          }
        });
      };
      ReadOnlyFloatingFilter2.prototype.onParamsUpdated = function(params) {
        this.init(params);
      };
      __decorate$2v([
        RefSelector("eFloatingFilterText")
      ], ReadOnlyFloatingFilter2.prototype, "eFloatingFilterText", void 0);
      __decorate$2v([
        Autowired("columnModel")
      ], ReadOnlyFloatingFilter2.prototype, "columnModel", void 0);
      return ReadOnlyFloatingFilter2;
    }(Component);
    DateCompWrapper = /** @class */
    function() {
      function DateCompWrapper2(context, userComponentFactory, dateComponentParams, eParent) {
        var _this = this;
        this.alive = true;
        this.context = context;
        this.eParent = eParent;
        var compDetails = userComponentFactory.getDateCompDetails(dateComponentParams);
        var promise = compDetails.newAgStackInstance();
        promise.then(function(dateComp) {
          if (!_this.alive) {
            context.destroyBean(dateComp);
            return;
          }
          _this.dateComp = dateComp;
          if (!dateComp) {
            return;
          }
          eParent.appendChild(dateComp.getGui());
          if (dateComp.afterGuiAttached) {
            dateComp.afterGuiAttached();
          }
          if (_this.tempValue) {
            dateComp.setDate(_this.tempValue);
          }
          if (_this.disabled != null) {
            _this.setDateCompDisabled(_this.disabled);
          }
        });
      }
      DateCompWrapper2.prototype.destroy = function() {
        this.alive = false;
        this.dateComp = this.context.destroyBean(this.dateComp);
      };
      DateCompWrapper2.prototype.getDate = function() {
        return this.dateComp ? this.dateComp.getDate() : this.tempValue;
      };
      DateCompWrapper2.prototype.setDate = function(value) {
        if (this.dateComp) {
          this.dateComp.setDate(value);
        } else {
          this.tempValue = value;
        }
      };
      DateCompWrapper2.prototype.setDisabled = function(disabled) {
        if (this.dateComp) {
          this.setDateCompDisabled(disabled);
        } else {
          this.disabled = disabled;
        }
      };
      DateCompWrapper2.prototype.setDisplayed = function(displayed) {
        setDisplayed(this.eParent, displayed);
      };
      DateCompWrapper2.prototype.setInputPlaceholder = function(placeholder) {
        if (this.dateComp && this.dateComp.setInputPlaceholder) {
          this.dateComp.setInputPlaceholder(placeholder);
        }
      };
      DateCompWrapper2.prototype.setInputAriaLabel = function(label) {
        if (this.dateComp && this.dateComp.setInputAriaLabel) {
          this.dateComp.setInputAriaLabel(label);
        }
      };
      DateCompWrapper2.prototype.afterGuiAttached = function(params) {
        if (this.dateComp && typeof this.dateComp.afterGuiAttached === "function") {
          this.dateComp.afterGuiAttached(params);
        }
      };
      DateCompWrapper2.prototype.updateParams = function(params) {
        var _a;
        if (((_a = this.dateComp) === null || _a === void 0 ? void 0 : _a.onParamsUpdated) && typeof this.dateComp.onParamsUpdated === "function") {
          this.dateComp.onParamsUpdated(params);
        }
      };
      DateCompWrapper2.prototype.setDateCompDisabled = function(disabled) {
        if (this.dateComp == null) {
          return;
        }
        if (this.dateComp.setDisabled == null) {
          return;
        }
        this.dateComp.setDisabled(disabled);
      };
      return DateCompWrapper2;
    }();
    OptionsFactory = /** @class */
    function() {
      function OptionsFactory2() {
        this.customFilterOptions = {};
      }
      OptionsFactory2.prototype.init = function(params, defaultOptions) {
        this.filterOptions = params.filterOptions || defaultOptions;
        this.mapCustomOptions();
        this.selectDefaultItem(params);
      };
      OptionsFactory2.prototype.getFilterOptions = function() {
        return this.filterOptions;
      };
      OptionsFactory2.prototype.mapCustomOptions = function() {
        var _this = this;
        if (!this.filterOptions) {
          return;
        }
        this.filterOptions.forEach(function(filterOption) {
          if (typeof filterOption === "string") {
            return;
          }
          var requiredProperties = [["displayKey"], ["displayName"], ["predicate", "test"]];
          var propertyCheck = function(keys2) {
            if (!keys2.some(function(key) {
              return filterOption[key] != null;
            })) {
              console.warn("AG Grid: ignoring FilterOptionDef as it doesn't contain one of '" + keys2 + "'");
              return false;
            }
            return true;
          };
          if (!requiredProperties.every(propertyCheck)) {
            _this.filterOptions = _this.filterOptions.filter(function(v) {
              return v === filterOption;
            }) || [];
            return;
          }
          _this.customFilterOptions[filterOption.displayKey] = filterOption;
        });
      };
      OptionsFactory2.prototype.selectDefaultItem = function(params) {
        if (params.defaultOption) {
          this.defaultOption = params.defaultOption;
        } else if (this.filterOptions.length >= 1) {
          var firstFilterOption = this.filterOptions[0];
          if (typeof firstFilterOption === "string") {
            this.defaultOption = firstFilterOption;
          } else if (firstFilterOption.displayKey) {
            this.defaultOption = firstFilterOption.displayKey;
          } else {
            console.warn("AG Grid: invalid FilterOptionDef supplied as it doesn't contain a 'displayKey'");
          }
        } else {
          console.warn("AG Grid: no filter options for filter");
        }
      };
      OptionsFactory2.prototype.getDefaultOption = function() {
        return this.defaultOption;
      };
      OptionsFactory2.prototype.getCustomOption = function(name) {
        return this.customFilterOptions[name];
      };
      return OptionsFactory2;
    }();
    DEFAULT_FILTER_LOCALE_TEXT = {
      applyFilter: "Apply",
      clearFilter: "Clear",
      resetFilter: "Reset",
      cancelFilter: "Cancel",
      textFilter: "Text Filter",
      numberFilter: "Number Filter",
      dateFilter: "Date Filter",
      setFilter: "Set Filter",
      filterOoo: "Filter...",
      empty: "Choose One",
      equals: "Equals",
      notEqual: "Not equal",
      lessThan: "Less than",
      greaterThan: "Greater than",
      inRange: "In range",
      inRangeStart: "From",
      inRangeEnd: "To",
      lessThanOrEqual: "Less than or equals",
      greaterThanOrEqual: "Greater than or equals",
      contains: "Contains",
      notContains: "Not contains",
      startsWith: "Starts with",
      endsWith: "Ends with",
      blank: "Blank",
      notBlank: "Not blank",
      andCondition: "AND",
      orCondition: "OR",
      dateFormatOoo: "yyyy-mm-dd"
    };
    __extends$2Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$k = function() {
      __assign$k = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$k.apply(this, arguments);
    };
    __decorate$2u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ManagedFocusFeature = /** @class */
    function(_super) {
      __extends$2Z(ManagedFocusFeature2, _super);
      function ManagedFocusFeature2(eFocusableElement, callbacks) {
        if (callbacks === void 0) {
          callbacks = {};
        }
        var _this = _super.call(this) || this;
        _this.eFocusableElement = eFocusableElement;
        _this.callbacks = callbacks;
        _this.callbacks = __assign$k({ shouldStopEventPropagation: function() {
          return false;
        }, onTabKeyDown: function(e) {
          if (e.defaultPrevented) {
            return;
          }
          var nextRoot = _this.focusService.findNextFocusableElement(_this.eFocusableElement, false, e.shiftKey);
          if (!nextRoot) {
            return;
          }
          nextRoot.focus();
          e.preventDefault();
        } }, callbacks);
        return _this;
      }
      ManagedFocusFeature2.prototype.postConstruct = function() {
        this.eFocusableElement.classList.add(ManagedFocusFeature2.FOCUS_MANAGED_CLASS);
        this.addKeyDownListeners(this.eFocusableElement);
        if (this.callbacks.onFocusIn) {
          this.addManagedListener(this.eFocusableElement, "focusin", this.callbacks.onFocusIn);
        }
        if (this.callbacks.onFocusOut) {
          this.addManagedListener(this.eFocusableElement, "focusout", this.callbacks.onFocusOut);
        }
      };
      ManagedFocusFeature2.prototype.addKeyDownListeners = function(eGui) {
        var _this = this;
        this.addManagedListener(eGui, "keydown", function(e) {
          if (e.defaultPrevented || isStopPropagationForAgGrid(e)) {
            return;
          }
          if (_this.callbacks.shouldStopEventPropagation(e)) {
            stopPropagationForAgGrid(e);
            return;
          }
          if (e.key === KeyCode.TAB) {
            _this.callbacks.onTabKeyDown(e);
          } else if (_this.callbacks.handleKeyDown) {
            _this.callbacks.handleKeyDown(e);
          }
        });
      };
      ManagedFocusFeature2.FOCUS_MANAGED_CLASS = "ag-focus-managed";
      __decorate$2u([
        Autowired("focusService")
      ], ManagedFocusFeature2.prototype, "focusService", void 0);
      __decorate$2u([
        PostConstruct
      ], ManagedFocusFeature2.prototype, "postConstruct", null);
      return ManagedFocusFeature2;
    }(BeanStub);
    __extends$2Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RESIZE_CONTAINER_STYLE = "ag-resizer-wrapper";
    RESIZE_TEMPLATE = /* html */
    '<div class="' + RESIZE_CONTAINER_STYLE + '">\n        <div ref="eTopLeftResizer" class="ag-resizer ag-resizer-topLeft"></div>\n        <div ref="eTopResizer" class="ag-resizer ag-resizer-top"></div>\n        <div ref="eTopRightResizer" class="ag-resizer ag-resizer-topRight"></div>\n        <div ref="eRightResizer" class="ag-resizer ag-resizer-right"></div>\n        <div ref="eBottomRightResizer" class="ag-resizer ag-resizer-bottomRight"></div>\n        <div ref="eBottomResizer" class="ag-resizer ag-resizer-bottom"></div>\n        <div ref="eBottomLeftResizer" class="ag-resizer ag-resizer-bottomLeft"></div>\n        <div ref="eLeftResizer" class="ag-resizer ag-resizer-left"></div>\n    </div>';
    PositionableFeature = /** @class */
    function(_super) {
      __extends$2Y(PositionableFeature2, _super);
      function PositionableFeature2(element, config) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.dragStartPosition = {
          x: 0,
          y: 0
        };
        _this.position = {
          x: 0,
          y: 0
        };
        _this.lastSize = {
          width: -1,
          height: -1
        };
        _this.positioned = false;
        _this.resizersAdded = false;
        _this.resizeListeners = [];
        _this.boundaryEl = null;
        _this.isResizing = false;
        _this.isMoving = false;
        _this.resizable = {};
        _this.movable = false;
        _this.currentResizer = null;
        _this.config = Object.assign({}, { popup: false }, config);
        return _this;
      }
      PositionableFeature2.prototype.center = function() {
        var _a = this.offsetParent, clientHeight = _a.clientHeight, clientWidth = _a.clientWidth;
        var x = clientWidth / 2 - this.getWidth() / 2;
        var y = clientHeight / 2 - this.getHeight() / 2;
        this.offsetElement(x, y);
      };
      PositionableFeature2.prototype.initialisePosition = function() {
        if (this.positioned) {
          return;
        }
        var _a = this.config, centered = _a.centered, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent, minWidth = _a.minWidth, width = _a.width, minHeight = _a.minHeight, height = _a.height, x = _a.x, y = _a.y;
        if (!this.offsetParent) {
          this.setOffsetParent();
        }
        var computedMinHeight = 0;
        var computedMinWidth = 0;
        var isVisible2 = !!this.element.offsetParent;
        if (isVisible2) {
          var boundaryEl = this.findBoundaryElement();
          var offsetParentComputedStyles = window.getComputedStyle(boundaryEl);
          if (offsetParentComputedStyles.minWidth != null) {
            var paddingWidth = boundaryEl.offsetWidth - this.element.offsetWidth;
            computedMinWidth = parseInt(offsetParentComputedStyles.minWidth, 10) - paddingWidth;
          }
          if (offsetParentComputedStyles.minHeight != null) {
            var paddingHeight = boundaryEl.offsetHeight - this.element.offsetHeight;
            computedMinHeight = parseInt(offsetParentComputedStyles.minHeight, 10) - paddingHeight;
          }
        }
        this.minHeight = minHeight || computedMinHeight;
        this.minWidth = minWidth || computedMinWidth;
        if (width) {
          this.setWidth(width);
        }
        if (height) {
          this.setHeight(height);
        }
        if (!width || !height) {
          this.refreshSize();
        }
        if (centered) {
          this.center();
        } else if (x || y) {
          this.offsetElement(x, y);
        } else if (isVisible2 && forcePopupParentAsOffsetParent) {
          var boundaryEl = this.boundaryEl;
          var initialisedDuringPositioning = true;
          if (!boundaryEl) {
            boundaryEl = this.findBoundaryElement();
            initialisedDuringPositioning = false;
          }
          if (boundaryEl) {
            var top_1 = parseFloat(boundaryEl.style.top);
            var left = parseFloat(boundaryEl.style.left);
            if (initialisedDuringPositioning) {
              this.offsetElement(isNaN(left) ? 0 : left, isNaN(top_1) ? 0 : top_1);
            } else {
              this.setPosition(left, top_1);
            }
          }
        }
        this.positioned = !!this.offsetParent;
      };
      PositionableFeature2.prototype.isPositioned = function() {
        return this.positioned;
      };
      PositionableFeature2.prototype.getPosition = function() {
        return this.position;
      };
      PositionableFeature2.prototype.setMovable = function(movable, moveElement) {
        if (!this.config.popup || movable === this.movable) {
          return;
        }
        this.movable = movable;
        var params = this.moveElementDragListener || {
          eElement: moveElement,
          onDragStart: this.onMoveStart.bind(this),
          onDragging: this.onMove.bind(this),
          onDragStop: this.onMoveEnd.bind(this)
        };
        if (movable) {
          this.dragService.addDragSource(params);
          this.moveElementDragListener = params;
        } else {
          this.dragService.removeDragSource(params);
          this.moveElementDragListener = void 0;
        }
      };
      PositionableFeature2.prototype.setResizable = function(resizable) {
        var _this = this;
        this.clearResizeListeners();
        if (resizable) {
          this.addResizers();
        } else {
          this.removeResizers();
        }
        if (typeof resizable === "boolean") {
          if (resizable === false) {
            return;
          }
          resizable = {
            topLeft: resizable,
            top: resizable,
            topRight: resizable,
            right: resizable,
            bottomRight: resizable,
            bottom: resizable,
            bottomLeft: resizable,
            left: resizable
          };
        }
        Object.keys(resizable).forEach(function(side) {
          var resizableStructure = resizable;
          var isSideResizable = !!resizableStructure[side];
          var resizerEl = _this.getResizerElement(side);
          var params = {
            dragStartPixels: 0,
            eElement: resizerEl,
            onDragStart: function(e) {
              return _this.onResizeStart(e, side);
            },
            onDragging: _this.onResize.bind(_this),
            onDragStop: function(e) {
              return _this.onResizeEnd(e, side);
            }
          };
          if (isSideResizable || !_this.isAlive() && !isSideResizable) {
            if (isSideResizable) {
              _this.dragService.addDragSource(params);
              _this.resizeListeners.push(params);
              resizerEl.style.pointerEvents = "all";
            } else {
              resizerEl.style.pointerEvents = "none";
            }
            _this.resizable[side] = isSideResizable;
          }
        });
      };
      PositionableFeature2.prototype.removeSizeFromEl = function() {
        this.element.style.removeProperty("height");
        this.element.style.removeProperty("width");
        this.element.style.removeProperty("flex");
      };
      PositionableFeature2.prototype.restoreLastSize = function() {
        this.element.style.flex = "0 0 auto";
        var _a = this.lastSize, height = _a.height, width = _a.width;
        if (width !== -1) {
          this.element.style.width = width + "px";
        }
        if (height !== -1) {
          this.element.style.height = height + "px";
        }
      };
      PositionableFeature2.prototype.getHeight = function() {
        return this.element.offsetHeight;
      };
      PositionableFeature2.prototype.setHeight = function(height) {
        var popup = this.config.popup;
        var eGui = this.element;
        var isPercent = false;
        if (typeof height === "string" && height.indexOf("%") !== -1) {
          setFixedHeight(eGui, height);
          height = getAbsoluteHeight(eGui);
          isPercent = true;
        } else {
          height = Math.max(this.minHeight, height);
          if (this.positioned) {
            var availableHeight = this.getAvailableHeight();
            if (availableHeight && height > availableHeight) {
              height = availableHeight;
            }
          }
        }
        if (this.getHeight() === height) {
          return;
        }
        if (!isPercent) {
          if (popup) {
            setFixedHeight(eGui, height);
          } else {
            eGui.style.height = height + "px";
            eGui.style.flex = "0 0 auto";
            this.lastSize.height = typeof height === "number" ? height : parseFloat(height);
          }
        } else {
          eGui.style.maxHeight = "unset";
          eGui.style.minHeight = "unset";
        }
      };
      PositionableFeature2.prototype.getAvailableHeight = function() {
        var _a = this.config, popup = _a.popup, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent;
        if (!this.positioned) {
          this.initialisePosition();
        }
        var clientHeight = this.offsetParent.clientHeight;
        if (!clientHeight) {
          return null;
        }
        var elRect = this.element.getBoundingClientRect();
        var offsetParentRect = this.offsetParent.getBoundingClientRect();
        var yPosition = popup ? this.position.y : elRect.top;
        var parentTop = popup ? 0 : offsetParentRect.top;
        var additionalHeight = 0;
        if (forcePopupParentAsOffsetParent) {
          var parentEl = this.element.parentElement;
          if (parentEl) {
            var bottom = parentEl.getBoundingClientRect().bottom;
            additionalHeight = bottom - elRect.bottom;
          }
        }
        var availableHeight = clientHeight + parentTop - yPosition - additionalHeight;
        return availableHeight;
      };
      PositionableFeature2.prototype.getWidth = function() {
        return this.element.offsetWidth;
      };
      PositionableFeature2.prototype.setWidth = function(width) {
        var eGui = this.element;
        var popup = this.config.popup;
        var isPercent = false;
        if (typeof width === "string" && width.indexOf("%") !== -1) {
          setFixedWidth(eGui, width);
          width = getAbsoluteWidth(eGui);
          isPercent = true;
        } else if (this.positioned) {
          width = Math.max(this.minWidth, width);
          var clientWidth = this.offsetParent.clientWidth;
          var xPosition = popup ? this.position.x : this.element.getBoundingClientRect().left;
          if (clientWidth && width + xPosition > clientWidth) {
            width = clientWidth - xPosition;
          }
        }
        if (this.getWidth() === width) {
          return;
        }
        if (!isPercent) {
          if (this.config.popup) {
            setFixedWidth(eGui, width);
          } else {
            eGui.style.width = width + "px";
            eGui.style.flex = " unset";
            this.lastSize.width = typeof width === "number" ? width : parseFloat(width);
          }
        } else {
          eGui.style.maxWidth = "unset";
          eGui.style.minWidth = "unset";
        }
      };
      PositionableFeature2.prototype.offsetElement = function(x, y) {
        if (x === void 0) {
          x = 0;
        }
        if (y === void 0) {
          y = 0;
        }
        var forcePopupParentAsOffsetParent = this.config.forcePopupParentAsOffsetParent;
        var ePopup = forcePopupParentAsOffsetParent ? this.boundaryEl : this.element;
        if (!ePopup) {
          return;
        }
        this.popupService.positionPopup({
          ePopup,
          keepWithinBounds: true,
          skipObserver: this.movable || this.isResizable(),
          updatePosition: function() {
            return { x, y };
          }
        });
        this.setPosition(parseFloat(ePopup.style.left), parseFloat(ePopup.style.top));
      };
      PositionableFeature2.prototype.constrainSizeToAvailableHeight = function(constrain) {
        var _this = this;
        if (!this.config.forcePopupParentAsOffsetParent) {
          return;
        }
        var applyMaxHeightToElement = function() {
          var availableHeight = _this.getAvailableHeight();
          _this.element.style.setProperty("max-height", availableHeight + "px");
        };
        if (constrain) {
          this.resizeObserverSubscriber = this.resizeObserverService.observeResize(this.popupService.getPopupParent(), applyMaxHeightToElement);
        } else {
          this.element.style.removeProperty("max-height");
          if (this.resizeObserverSubscriber) {
            this.resizeObserverSubscriber();
            this.resizeObserverSubscriber = void 0;
          }
        }
      };
      PositionableFeature2.prototype.setPosition = function(x, y) {
        this.position.x = x;
        this.position.y = y;
      };
      PositionableFeature2.prototype.updateDragStartPosition = function(x, y) {
        this.dragStartPosition = { x, y };
      };
      PositionableFeature2.prototype.calculateMouseMovement = function(params) {
        var e = params.e, isLeft = params.isLeft, isTop = params.isTop, anywhereWithin = params.anywhereWithin, topBuffer = params.topBuffer;
        var xDiff = e.clientX - this.dragStartPosition.x;
        var yDiff = e.clientY - this.dragStartPosition.y;
        var movementX = this.shouldSkipX(e, !!isLeft, !!anywhereWithin, xDiff) ? 0 : xDiff;
        var movementY = this.shouldSkipY(e, !!isTop, topBuffer, yDiff) ? 0 : yDiff;
        return { movementX, movementY };
      };
      PositionableFeature2.prototype.shouldSkipX = function(e, isLeft, anywhereWithin, diff) {
        var elRect = this.element.getBoundingClientRect();
        var parentRect = this.offsetParent.getBoundingClientRect();
        var boundaryElRect = this.boundaryEl.getBoundingClientRect();
        var xPosition = this.config.popup ? this.position.x : elRect.left;
        var skipX = xPosition <= 0 && parentRect.left >= e.clientX || parentRect.right <= e.clientX && parentRect.right <= boundaryElRect.right;
        if (skipX) {
          return true;
        }
        if (isLeft) {
          skipX = // skip if we are moving to the left and the cursor
          // is positioned to the right of the left side anchor
          diff < 0 && e.clientX > xPosition + parentRect.left || // skip if we are moving to the right and the cursor
          // is positioned to the left of the dialog
          diff > 0 && e.clientX < xPosition + parentRect.left;
        } else {
          if (anywhereWithin) {
            skipX = diff < 0 && e.clientX > boundaryElRect.right || diff > 0 && e.clientX < xPosition + parentRect.left;
          } else {
            skipX = // if the movement is bound to the right side of the dialog
            // we skip if we are moving to the left and the cursor
            // is to the right of the dialog
            diff < 0 && e.clientX > boundaryElRect.right || // or skip if we are moving to the right and the cursor
            // is to the left of the right side anchor
            diff > 0 && e.clientX < boundaryElRect.right;
          }
        }
        return skipX;
      };
      PositionableFeature2.prototype.shouldSkipY = function(e, isTop, topBuffer, diff) {
        if (topBuffer === void 0) {
          topBuffer = 0;
        }
        var elRect = this.element.getBoundingClientRect();
        var parentRect = this.offsetParent.getBoundingClientRect();
        var boundaryElRect = this.boundaryEl.getBoundingClientRect();
        var yPosition = this.config.popup ? this.position.y : elRect.top;
        var skipY = yPosition <= 0 && parentRect.top >= e.clientY || parentRect.bottom <= e.clientY && parentRect.bottom <= boundaryElRect.bottom;
        if (skipY) {
          return true;
        }
        if (isTop) {
          skipY = // skip if we are moving to towards top and the cursor is
          // below the top anchor + topBuffer
          // note: topBuffer is used when moving the dialog using the title bar
          diff < 0 && e.clientY > yPosition + parentRect.top + topBuffer || // skip if we are moving to the bottom and the cursor is
          // above the top anchor
          diff > 0 && e.clientY < yPosition + parentRect.top;
        } else {
          skipY = // skip if we are moving towards the top and the cursor
          // is below the bottom anchor
          diff < 0 && e.clientY > boundaryElRect.bottom || // skip if we are moving towards the bottom and the cursor
          // is above the bottom anchor
          diff > 0 && e.clientY < boundaryElRect.bottom;
        }
        return skipY;
      };
      PositionableFeature2.prototype.createResizeMap = function() {
        var eGui = this.element;
        this.resizerMap = {
          topLeft: { element: eGui.querySelector("[ref=eTopLeftResizer]") },
          top: { element: eGui.querySelector("[ref=eTopResizer]") },
          topRight: { element: eGui.querySelector("[ref=eTopRightResizer]") },
          right: { element: eGui.querySelector("[ref=eRightResizer]") },
          bottomRight: { element: eGui.querySelector("[ref=eBottomRightResizer]") },
          bottom: { element: eGui.querySelector("[ref=eBottomResizer]") },
          bottomLeft: { element: eGui.querySelector("[ref=eBottomLeftResizer]") },
          left: { element: eGui.querySelector("[ref=eLeftResizer]") }
        };
      };
      PositionableFeature2.prototype.addResizers = function() {
        if (this.resizersAdded) {
          return;
        }
        var eGui = this.element;
        if (!eGui) {
          return;
        }
        var parser = new DOMParser();
        var resizers = parser.parseFromString(RESIZE_TEMPLATE, "text/html").body;
        eGui.appendChild(resizers.firstChild);
        this.createResizeMap();
        this.resizersAdded = true;
      };
      PositionableFeature2.prototype.removeResizers = function() {
        this.resizerMap = void 0;
        var resizerEl = this.element.querySelector("." + RESIZE_CONTAINER_STYLE);
        if (resizerEl) {
          this.element.removeChild(resizerEl);
        }
        this.resizersAdded = false;
      };
      PositionableFeature2.prototype.getResizerElement = function(side) {
        return this.resizerMap[side].element;
      };
      PositionableFeature2.prototype.onResizeStart = function(e, side) {
        this.boundaryEl = this.findBoundaryElement();
        if (!this.positioned) {
          this.initialisePosition();
        }
        this.currentResizer = {
          isTop: !!side.match(/top/i),
          isRight: !!side.match(/right/i),
          isBottom: !!side.match(/bottom/i),
          isLeft: !!side.match(/left/i)
        };
        this.element.classList.add("ag-resizing");
        this.resizerMap[side].element.classList.add("ag-active");
        var _a = this.config, popup = _a.popup, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent;
        if (!popup && !forcePopupParentAsOffsetParent) {
          this.applySizeToSiblings(this.currentResizer.isBottom || this.currentResizer.isTop);
        }
        this.isResizing = true;
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      PositionableFeature2.prototype.getSiblings = function() {
        var element = this.element;
        var parent = element.parentElement;
        if (!parent) {
          return null;
        }
        return Array.prototype.slice.call(parent.children).filter(function(el) {
          return !el.classList.contains("ag-hidden");
        });
      };
      PositionableFeature2.prototype.getMinSizeOfSiblings = function() {
        var siblings = this.getSiblings() || [];
        var height = 0;
        var width = 0;
        for (var i = 0; i < siblings.length; i++) {
          var currentEl = siblings[i];
          var isFlex = !!currentEl.style.flex && currentEl.style.flex !== "0 0 auto";
          if (currentEl === this.element) {
            continue;
          }
          var nextHeight = this.minHeight || 0;
          var nextWidth = this.minWidth || 0;
          if (isFlex) {
            var computedStyle = window.getComputedStyle(currentEl);
            if (computedStyle.minHeight) {
              nextHeight = parseInt(computedStyle.minHeight, 10);
            }
            if (computedStyle.minWidth) {
              nextWidth = parseInt(computedStyle.minWidth, 10);
            }
          } else {
            nextHeight = currentEl.offsetHeight;
            nextWidth = currentEl.offsetWidth;
          }
          height += nextHeight;
          width += nextWidth;
        }
        return { height, width };
      };
      PositionableFeature2.prototype.applySizeToSiblings = function(vertical) {
        var containerToFlex = null;
        var siblings = this.getSiblings();
        if (!siblings) {
          return;
        }
        for (var i = 0; i < siblings.length; i++) {
          var el = siblings[i];
          if (el === containerToFlex) {
            continue;
          }
          if (vertical) {
            el.style.height = el.offsetHeight + "px";
          } else {
            el.style.width = el.offsetWidth + "px";
          }
          el.style.flex = "0 0 auto";
          if (el === this.element) {
            containerToFlex = siblings[i + 1];
          }
        }
        if (containerToFlex) {
          containerToFlex.style.removeProperty("height");
          containerToFlex.style.removeProperty("min-height");
          containerToFlex.style.removeProperty("max-height");
          containerToFlex.style.flex = "1 1 auto";
        }
      };
      PositionableFeature2.prototype.isResizable = function() {
        return Object.values(this.resizable).some(function(value) {
          return value;
        });
      };
      PositionableFeature2.prototype.onResize = function(e) {
        if (!this.isResizing || !this.currentResizer) {
          return;
        }
        var _a = this.config, popup = _a.popup, forcePopupParentAsOffsetParent = _a.forcePopupParentAsOffsetParent;
        var _b = this.currentResizer, isTop = _b.isTop, isRight = _b.isRight, isBottom = _b.isBottom, isLeft = _b.isLeft;
        var isHorizontal = isRight || isLeft;
        var isVertical = isBottom || isTop;
        var _c = this.calculateMouseMovement({ e, isLeft, isTop }), movementX = _c.movementX, movementY = _c.movementY;
        var xPosition = this.position.x;
        var yPosition = this.position.y;
        var offsetLeft = 0;
        var offsetTop = 0;
        if (isHorizontal && movementX) {
          var direction = isLeft ? -1 : 1;
          var oldWidth = this.getWidth();
          var newWidth = oldWidth + movementX * direction;
          var skipWidth = false;
          if (isLeft) {
            offsetLeft = oldWidth - newWidth;
            if (xPosition + offsetLeft <= 0 || newWidth <= this.minWidth) {
              skipWidth = true;
              offsetLeft = 0;
            }
          }
          if (!skipWidth) {
            this.setWidth(newWidth);
          }
        }
        if (isVertical && movementY) {
          var direction = isTop ? -1 : 1;
          var oldHeight = this.getHeight();
          var newHeight = oldHeight + movementY * direction;
          var skipHeight = false;
          if (isTop) {
            offsetTop = oldHeight - newHeight;
            if (yPosition + offsetTop <= 0 || newHeight <= this.minHeight) {
              skipHeight = true;
              offsetTop = 0;
            }
          } else {
            if (!this.config.popup && !this.config.forcePopupParentAsOffsetParent && oldHeight < newHeight && this.getMinSizeOfSiblings().height + newHeight > this.element.parentElement.offsetHeight) {
              skipHeight = true;
            }
          }
          if (!skipHeight) {
            this.setHeight(newHeight);
          }
        }
        this.updateDragStartPosition(e.clientX, e.clientY);
        if ((popup || forcePopupParentAsOffsetParent) && offsetLeft || offsetTop) {
          this.offsetElement(xPosition + offsetLeft, yPosition + offsetTop);
        }
      };
      PositionableFeature2.prototype.onResizeEnd = function(e, side) {
        this.isResizing = false;
        this.currentResizer = null;
        this.boundaryEl = null;
        var params = {
          type: "resize",
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi
        };
        this.element.classList.remove("ag-resizing");
        this.resizerMap[side].element.classList.remove("ag-active");
        this.dispatchEvent(params);
      };
      PositionableFeature2.prototype.refreshSize = function() {
        var eGui = this.element;
        if (this.config.popup) {
          if (!this.config.width) {
            this.setWidth(eGui.offsetWidth);
          }
          if (!this.config.height) {
            this.setHeight(eGui.offsetHeight);
          }
        }
      };
      PositionableFeature2.prototype.onMoveStart = function(e) {
        this.boundaryEl = this.findBoundaryElement();
        if (!this.positioned) {
          this.initialisePosition();
        }
        this.isMoving = true;
        this.element.classList.add("ag-moving");
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      PositionableFeature2.prototype.onMove = function(e) {
        if (!this.isMoving) {
          return;
        }
        var _a = this.position, x = _a.x, y = _a.y;
        var topBuffer;
        if (this.config.calculateTopBuffer) {
          topBuffer = this.config.calculateTopBuffer();
        }
        var _b = this.calculateMouseMovement({
          e,
          isTop: true,
          anywhereWithin: true,
          topBuffer
        }), movementX = _b.movementX, movementY = _b.movementY;
        this.offsetElement(x + movementX, y + movementY);
        this.updateDragStartPosition(e.clientX, e.clientY);
      };
      PositionableFeature2.prototype.onMoveEnd = function() {
        this.isMoving = false;
        this.boundaryEl = null;
        this.element.classList.remove("ag-moving");
      };
      PositionableFeature2.prototype.setOffsetParent = function() {
        if (this.config.forcePopupParentAsOffsetParent) {
          this.offsetParent = this.popupService.getPopupParent();
        } else {
          this.offsetParent = this.element.offsetParent;
        }
      };
      PositionableFeature2.prototype.findBoundaryElement = function() {
        var el = this.element;
        while (el) {
          if (window.getComputedStyle(el).position !== "static") {
            return el;
          }
          el = el.parentElement;
        }
        return this.element;
      };
      PositionableFeature2.prototype.clearResizeListeners = function() {
        while (this.resizeListeners.length) {
          var params = this.resizeListeners.pop();
          this.dragService.removeDragSource(params);
        }
      };
      PositionableFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        if (this.moveElementDragListener) {
          this.dragService.removeDragSource(this.moveElementDragListener);
        }
        this.constrainSizeToAvailableHeight(false);
        this.clearResizeListeners();
        this.removeResizers();
      };
      __decorate$2t([
        Autowired("popupService")
      ], PositionableFeature2.prototype, "popupService", void 0);
      __decorate$2t([
        Autowired("resizeObserverService")
      ], PositionableFeature2.prototype, "resizeObserverService", void 0);
      __decorate$2t([
        Autowired("dragService")
      ], PositionableFeature2.prototype, "dragService", void 0);
      return PositionableFeature2;
    }(BeanStub);
    __extends$2X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ProvidedFilter = /** @class */
    function(_super) {
      __extends$2X(ProvidedFilter2, _super);
      function ProvidedFilter2(filterNameKey) {
        var _this = _super.call(this) || this;
        _this.filterNameKey = filterNameKey;
        _this.applyActive = false;
        _this.hidePopup = null;
        _this.debouncePending = false;
        _this.appliedModel = null;
        return _this;
      }
      ProvidedFilter2.prototype.postConstruct = function() {
        this.resetTemplate();
        this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {
          handleKeyDown: this.handleKeyDown.bind(this)
        }));
        this.positionableFeature = new PositionableFeature(this.getPositionableElement(), {
          forcePopupParentAsOffsetParent: true
        });
        this.createBean(this.positionableFeature);
      };
      ProvidedFilter2.prototype.handleKeyDown = function(e) {
      };
      ProvidedFilter2.prototype.getFilterTitle = function() {
        return this.translate(this.filterNameKey);
      };
      ProvidedFilter2.prototype.isFilterActive = function() {
        return !!this.appliedModel;
      };
      ProvidedFilter2.prototype.resetTemplate = function(paramsMap) {
        var eGui = this.getGui();
        if (eGui) {
          eGui.removeEventListener("submit", this.onFormSubmit);
        }
        var templateString = (
          /* html */
          '\n            <form class="ag-filter-wrapper">\n                <div class="ag-filter-body-wrapper ag-' + this.getCssIdentifier() + '-body-wrapper" ref="eFilterBody">\n                    ' + this.createBodyTemplate() + "\n                </div>\n            </form>"
        );
        this.setTemplate(templateString, paramsMap);
        eGui = this.getGui();
        if (eGui) {
          eGui.addEventListener("submit", this.onFormSubmit);
        }
      };
      ProvidedFilter2.prototype.isReadOnly = function() {
        return !!this.providedFilterParams.readOnly;
      };
      ProvidedFilter2.prototype.init = function(params) {
        var _this = this;
        this.setParams(params);
        this.resetUiToDefaults(true).then(function() {
          _this.updateUiVisibility();
          _this.setupOnBtApplyDebounce();
        });
      };
      ProvidedFilter2.prototype.setParams = function(params) {
        this.providedFilterParams = params;
        this.applyActive = ProvidedFilter2.isUseApplyButton(params);
        this.createButtonPanel();
      };
      ProvidedFilter2.prototype.createButtonPanel = function() {
        var _this = this;
        var buttons = this.providedFilterParams.buttons;
        if (!buttons || buttons.length < 1 || this.isReadOnly()) {
          return;
        }
        var eButtonsPanel = document.createElement("div");
        eButtonsPanel.classList.add("ag-filter-apply-panel");
        var addButton = function(type) {
          var text;
          var clickListener;
          switch (type) {
            case "apply":
              text = _this.translate("applyFilter");
              clickListener = function(e) {
                return _this.onBtApply(false, false, e);
              };
              break;
            case "clear":
              text = _this.translate("clearFilter");
              clickListener = function() {
                return _this.onBtClear();
              };
              break;
            case "reset":
              text = _this.translate("resetFilter");
              clickListener = function() {
                return _this.onBtReset();
              };
              break;
            case "cancel":
              text = _this.translate("cancelFilter");
              clickListener = function(e) {
                _this.onBtCancel(e);
              };
              break;
            default:
              console.warn("AG Grid: Unknown button type specified");
              return;
          }
          var buttonType = type === "apply" ? "submit" : "button";
          var button = loadTemplate(
            /* html */
            '<button\n                    type="' + buttonType + '"\n                    ref="' + type + 'FilterButton"\n                    class="ag-button ag-standard-button ag-filter-apply-panel-button"\n                >' + text + "\n                </button>"
          );
          eButtonsPanel.appendChild(button);
          _this.addManagedListener(button, "click", clickListener);
        };
        convertToSet(buttons).forEach(function(type) {
          return addButton(type);
        });
        this.getGui().appendChild(eButtonsPanel);
      };
      ProvidedFilter2.prototype.getDefaultDebounceMs = function() {
        return 0;
      };
      ProvidedFilter2.prototype.setupOnBtApplyDebounce = function() {
        var _this = this;
        var debounceMs = ProvidedFilter2.getDebounceMs(this.providedFilterParams, this.getDefaultDebounceMs());
        var debounceFunc = debounce(this.checkApplyDebounce.bind(this), debounceMs);
        this.onBtApplyDebounce = function() {
          _this.debouncePending = true;
          debounceFunc();
        };
      };
      ProvidedFilter2.prototype.checkApplyDebounce = function() {
        if (this.debouncePending) {
          this.debouncePending = false;
          this.onBtApply();
        }
      };
      ProvidedFilter2.prototype.getModel = function() {
        return this.appliedModel ? this.appliedModel : null;
      };
      ProvidedFilter2.prototype.setModel = function(model) {
        var _this = this;
        var promise = model != null ? this.setModelIntoUi(model) : this.resetUiToDefaults();
        return promise.then(function() {
          _this.updateUiVisibility();
          _this.applyModel("api");
        });
      };
      ProvidedFilter2.prototype.onBtCancel = function(e) {
        var _this = this;
        this.resetUiToActiveModel(this.getModel(), function() {
          _this.handleCancelEnd(e);
        });
      };
      ProvidedFilter2.prototype.handleCancelEnd = function(e) {
        if (this.providedFilterParams.closeOnApply) {
          this.close(e);
        }
      };
      ProvidedFilter2.prototype.resetUiToActiveModel = function(currentModel, afterUiUpdatedFunc) {
        var _this = this;
        var afterAppliedFunc = function() {
          _this.onUiChanged(false, "prevent");
          afterUiUpdatedFunc === null || afterUiUpdatedFunc === void 0 ? void 0 : afterUiUpdatedFunc();
        };
        if (currentModel != null) {
          this.setModelIntoUi(currentModel).then(afterAppliedFunc);
        } else {
          this.resetUiToDefaults().then(afterAppliedFunc);
        }
      };
      ProvidedFilter2.prototype.onBtClear = function() {
        var _this = this;
        this.resetUiToDefaults().then(function() {
          return _this.onUiChanged();
        });
      };
      ProvidedFilter2.prototype.onBtReset = function() {
        this.onBtClear();
        this.onBtApply();
      };
      ProvidedFilter2.prototype.applyModel = function(source) {
        var newModel = this.getModelFromUi();
        if (!this.isModelValid(newModel)) {
          return false;
        }
        var previousModel = this.appliedModel;
        this.appliedModel = newModel;
        return !this.areModelsEqual(previousModel, newModel);
      };
      ProvidedFilter2.prototype.isModelValid = function(model) {
        return true;
      };
      ProvidedFilter2.prototype.onFormSubmit = function(e) {
        e.preventDefault();
      };
      ProvidedFilter2.prototype.onBtApply = function(afterFloatingFilter, afterDataChange, e) {
        if (afterFloatingFilter === void 0) {
          afterFloatingFilter = false;
        }
        if (afterDataChange === void 0) {
          afterDataChange = false;
        }
        if (e) {
          e.preventDefault();
        }
        if (this.applyModel(afterDataChange ? "rowDataUpdated" : "ui")) {
          var source = "columnFilter";
          this.providedFilterParams.filterChangedCallback({ afterFloatingFilter, afterDataChange, source });
        }
        var closeOnApply = this.providedFilterParams.closeOnApply;
        if (closeOnApply && this.applyActive && !afterFloatingFilter && !afterDataChange) {
          this.close(e);
        }
      };
      ProvidedFilter2.prototype.onNewRowsLoaded = function() {
      };
      ProvidedFilter2.prototype.close = function(e) {
        if (!this.hidePopup) {
          return;
        }
        var keyboardEvent = e;
        var key = keyboardEvent && keyboardEvent.key;
        var params;
        if (key === "Enter" || key === "Space") {
          params = { keyboardEvent };
        }
        this.hidePopup(params);
        this.hidePopup = null;
      };
      ProvidedFilter2.prototype.onUiChanged = function(fromFloatingFilter, apply) {
        if (fromFloatingFilter === void 0) {
          fromFloatingFilter = false;
        }
        this.updateUiVisibility();
        this.providedFilterParams.filterModifiedCallback();
        if (this.applyActive && !this.isReadOnly()) {
          var isValid = this.isModelValid(this.getModelFromUi());
          setDisabled(this.getRefElement("applyFilterButton"), !isValid);
        }
        if (fromFloatingFilter && !apply || apply === "immediately") {
          this.onBtApply(fromFloatingFilter);
        } else if (!this.applyActive && !apply || apply === "debounce") {
          this.onBtApplyDebounce();
        }
      };
      ProvidedFilter2.prototype.afterGuiAttached = function(params) {
        if (params) {
          this.hidePopup = params.hidePopup;
        }
        this.refreshFilterResizer(params === null || params === void 0 ? void 0 : params.container);
      };
      ProvidedFilter2.prototype.refreshFilterResizer = function(containerType) {
        if (!this.positionableFeature || containerType === "toolPanel") {
          return;
        }
        var isFloatingFilter = containerType === "floatingFilter";
        var _a = this, positionableFeature = _a.positionableFeature, gridOptionsService = _a.gridOptionsService;
        if (isFloatingFilter) {
          positionableFeature.restoreLastSize();
          positionableFeature.setResizable(gridOptionsService.is("enableRtl") ? { bottom: true, bottomLeft: true, left: true } : { bottom: true, bottomRight: true, right: true });
        } else {
          this.positionableFeature.removeSizeFromEl();
          this.positionableFeature.setResizable(false);
        }
        this.positionableFeature.constrainSizeToAvailableHeight(true);
      };
      ProvidedFilter2.prototype.afterGuiDetached = function() {
        this.checkApplyDebounce();
        if (this.positionableFeature) {
          this.positionableFeature.constrainSizeToAvailableHeight(false);
        }
      };
      ProvidedFilter2.getDebounceMs = function(params, debounceDefault) {
        if (ProvidedFilter2.isUseApplyButton(params)) {
          if (params.debounceMs != null) {
            console.warn("AG Grid: debounceMs is ignored when apply button is present");
          }
          return 0;
        }
        return params.debounceMs != null ? params.debounceMs : debounceDefault;
      };
      ProvidedFilter2.isUseApplyButton = function(params) {
        return !!params.buttons && params.buttons.indexOf("apply") >= 0;
      };
      ProvidedFilter2.prototype.destroy = function() {
        var eGui = this.getGui();
        if (eGui) {
          eGui.removeEventListener("submit", this.onFormSubmit);
        }
        this.hidePopup = null;
        if (this.positionableFeature) {
          this.positionableFeature = this.destroyBean(this.positionableFeature);
        }
        _super.prototype.destroy.call(this);
      };
      ProvidedFilter2.prototype.translate = function(key) {
        var translate = this.localeService.getLocaleTextFunc();
        return translate(key, DEFAULT_FILTER_LOCALE_TEXT[key]);
      };
      ProvidedFilter2.prototype.getCellValue = function(rowNode) {
        var _a = this.providedFilterParams, api = _a.api, colDef = _a.colDef, column = _a.column, columnApi = _a.columnApi, context = _a.context;
        return this.providedFilterParams.valueGetter({
          api,
          colDef,
          column,
          columnApi,
          context,
          data: rowNode.data,
          getValue: function(field) {
            return rowNode.data[field];
          },
          node: rowNode
        });
      };
      ProvidedFilter2.prototype.getPositionableElement = function() {
        return this.eFilterBody;
      };
      __decorate$2s([
        Autowired("rowModel")
      ], ProvidedFilter2.prototype, "rowModel", void 0);
      __decorate$2s([
        RefSelector("eFilterBody")
      ], ProvidedFilter2.prototype, "eFilterBody", void 0);
      __decorate$2s([
        PostConstruct
      ], ProvidedFilter2.prototype, "postConstruct", null);
      return ProvidedFilter2;
    }(Component);
    __extends$2W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgAbstractLabel = /** @class */
    function(_super) {
      __extends$2W(AgAbstractLabel2, _super);
      function AgAbstractLabel2(config, template) {
        var _this = _super.call(this, template) || this;
        _this.labelSeparator = "";
        _this.labelAlignment = "left";
        _this.disabled = false;
        _this.label = "";
        _this.config = config || {};
        return _this;
      }
      AgAbstractLabel2.prototype.postConstruct = function() {
        this.addCssClass("ag-labeled");
        this.eLabel.classList.add("ag-label");
        var _a = this.config, labelSeparator = _a.labelSeparator, label = _a.label, labelWidth = _a.labelWidth, labelAlignment = _a.labelAlignment;
        if (labelSeparator != null) {
          this.setLabelSeparator(labelSeparator);
        }
        if (label != null) {
          this.setLabel(label);
        }
        if (labelWidth != null) {
          this.setLabelWidth(labelWidth);
        }
        this.setLabelAlignment(labelAlignment || this.labelAlignment);
        this.refreshLabel();
      };
      AgAbstractLabel2.prototype.refreshLabel = function() {
        clearElement(this.eLabel);
        if (typeof this.label === "string") {
          this.eLabel.innerText = this.label + this.labelSeparator;
        } else if (this.label) {
          this.eLabel.appendChild(this.label);
        }
        if (this.label === "") {
          setDisplayed(this.eLabel, false);
          setAriaRole(this.eLabel, "presentation");
        } else {
          setDisplayed(this.eLabel, true);
          setAriaRole(this.eLabel, null);
        }
      };
      AgAbstractLabel2.prototype.setLabelSeparator = function(labelSeparator) {
        if (this.labelSeparator === labelSeparator) {
          return this;
        }
        this.labelSeparator = labelSeparator;
        if (this.label != null) {
          this.refreshLabel();
        }
        return this;
      };
      AgAbstractLabel2.prototype.getLabelId = function() {
        this.eLabel.id = this.eLabel.id || "ag-" + this.getCompId() + "-label";
        return this.eLabel.id;
      };
      AgAbstractLabel2.prototype.getLabel = function() {
        return this.label;
      };
      AgAbstractLabel2.prototype.setLabel = function(label) {
        if (this.label === label) {
          return this;
        }
        this.label = label;
        this.refreshLabel();
        return this;
      };
      AgAbstractLabel2.prototype.setLabelAlignment = function(alignment) {
        var eGui = this.getGui();
        var eGuiClassList = eGui.classList;
        eGuiClassList.toggle("ag-label-align-left", alignment === "left");
        eGuiClassList.toggle("ag-label-align-right", alignment === "right");
        eGuiClassList.toggle("ag-label-align-top", alignment === "top");
        return this;
      };
      AgAbstractLabel2.prototype.setLabelEllipsis = function(hasEllipsis) {
        this.eLabel.classList.toggle("ag-label-ellipsis", hasEllipsis);
        return this;
      };
      AgAbstractLabel2.prototype.setLabelWidth = function(width) {
        if (this.label == null) {
          return this;
        }
        setElementWidth(this.eLabel, width);
        return this;
      };
      AgAbstractLabel2.prototype.setDisabled = function(disabled) {
        disabled = !!disabled;
        var element = this.getGui();
        setDisabled(element, disabled);
        element.classList.toggle("ag-disabled", disabled);
        this.disabled = disabled;
        return this;
      };
      AgAbstractLabel2.prototype.isDisabled = function() {
        return !!this.disabled;
      };
      __decorate$2r([
        PostConstruct
      ], AgAbstractLabel2.prototype, "postConstruct", null);
      return AgAbstractLabel2;
    }(Component);
    __extends$2V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgAbstractField = /** @class */
    function(_super) {
      __extends$2V(AgAbstractField2, _super);
      function AgAbstractField2(config, template, className) {
        var _this = _super.call(this, config, template) || this;
        _this.className = className;
        return _this;
      }
      AgAbstractField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (this.className) {
          this.addCssClass(this.className);
        }
      };
      AgAbstractField2.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        this.addManagedListener(this, Events.EVENT_FIELD_VALUE_CHANGED, function() {
          return callbackFn(_this.getValue());
        });
        return this;
      };
      AgAbstractField2.prototype.getWidth = function() {
        return this.getGui().clientWidth;
      };
      AgAbstractField2.prototype.setWidth = function(width) {
        setFixedWidth(this.getGui(), width);
        return this;
      };
      AgAbstractField2.prototype.getPreviousValue = function() {
        return this.previousValue;
      };
      AgAbstractField2.prototype.getValue = function() {
        return this.value;
      };
      AgAbstractField2.prototype.setValue = function(value, silent) {
        if (this.value === value) {
          return this;
        }
        this.previousValue = this.value;
        this.value = value;
        if (!silent) {
          this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });
        }
        return this;
      };
      return AgAbstractField2;
    }(AgAbstractLabel);
    __extends$2U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TEMPLATE$1 = /* html */
    '\n    <div class="ag-picker-field" role="presentation">\n        <div ref="eLabel"></div>\n            <div ref="eWrapper" class="ag-wrapper ag-picker-field-wrapper ag-picker-collapsed">\n            <div ref="eDisplayField" class="ag-picker-field-display"></div>\n            <div ref="eIcon" class="ag-picker-field-icon" aria-hidden="true"></div>\n        </div>\n    </div>';
    AgPickerField = /** @class */
    function(_super) {
      __extends$2U(AgPickerField2, _super);
      function AgPickerField2(config) {
        var _this = _super.call(this, config, (config === null || config === void 0 ? void 0 : config.template) || TEMPLATE$1, config === null || config === void 0 ? void 0 : config.className) || this;
        _this.isPickerDisplayed = false;
        _this.skipClick = false;
        _this.pickerGap = 4;
        _this.hideCurrentPicker = null;
        _this.ariaRole = config === null || config === void 0 ? void 0 : config.ariaRole;
        _this.onPickerFocusIn = _this.onPickerFocusIn.bind(_this);
        _this.onPickerFocusOut = _this.onPickerFocusOut.bind(_this);
        if (!config) {
          return _this;
        }
        var pickerGap = config.pickerGap, maxPickerHeight = config.maxPickerHeight, variableWidth = config.variableWidth, minPickerWidth = config.minPickerWidth, maxPickerWidth = config.maxPickerWidth;
        if (pickerGap != null) {
          _this.pickerGap = pickerGap;
        }
        _this.variableWidth = !!variableWidth;
        if (maxPickerHeight != null) {
          _this.setPickerMaxHeight(maxPickerHeight);
        }
        if (minPickerWidth != null) {
          _this.setPickerMinWidth(minPickerWidth);
        }
        if (maxPickerWidth != null) {
          _this.setPickerMaxWidth(maxPickerWidth);
        }
        return _this;
      }
      AgPickerField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        this.setupAria();
        var displayId = "ag-" + this.getCompId() + "-display";
        this.eDisplayField.setAttribute("id", displayId);
        var ariaEl = this.getAriaElement();
        setAriaDescribedBy(ariaEl, displayId);
        this.addManagedListener(ariaEl, "keydown", this.onKeyDown.bind(this));
        this.addManagedListener(this.eLabel, "mousedown", this.onLabelOrWrapperMouseDown.bind(this));
        this.addManagedListener(this.eWrapper, "mousedown", this.onLabelOrWrapperMouseDown.bind(this));
        var pickerIcon = this.config.pickerIcon;
        if (pickerIcon) {
          var icon = createIconNoSpan(pickerIcon, this.gridOptionsService);
          if (icon) {
            this.eIcon.appendChild(icon);
          }
        }
      };
      AgPickerField2.prototype.setupAria = function() {
        var ariaEl = this.getAriaElement();
        ariaEl.setAttribute("tabindex", (this.gridOptionsService.getNum("tabIndex") || 0).toString());
        setAriaExpanded(ariaEl, false);
        if (this.ariaRole) {
          setAriaRole(ariaEl, this.ariaRole);
        }
      };
      AgPickerField2.prototype.refreshLabel = function() {
        var _a;
        var ariaEl = this.getAriaElement();
        setAriaLabelledBy(ariaEl, (_a = this.getLabelId()) !== null && _a !== void 0 ? _a : "");
        _super.prototype.refreshLabel.call(this);
      };
      AgPickerField2.prototype.onLabelOrWrapperMouseDown = function(e) {
        if (e) {
          e.preventDefault();
          this.getFocusableElement().focus();
        }
        if (this.skipClick) {
          this.skipClick = false;
          return;
        }
        if (this.isDisabled()) {
          return;
        }
        if (this.isPickerDisplayed) {
          this.hidePicker();
        } else {
          this.showPicker();
        }
      };
      AgPickerField2.prototype.onKeyDown = function(e) {
        switch (e.key) {
          case KeyCode.UP:
          case KeyCode.DOWN:
          case KeyCode.ENTER:
          case KeyCode.SPACE:
            e.preventDefault();
            this.onLabelOrWrapperMouseDown();
            break;
          case KeyCode.ESCAPE:
            if (this.isPickerDisplayed) {
              e.preventDefault();
              e.stopPropagation();
              if (this.hideCurrentPicker) {
                this.hideCurrentPicker();
              }
            }
            break;
        }
      };
      AgPickerField2.prototype.showPicker = function() {
        this.isPickerDisplayed = true;
        if (!this.pickerComponent) {
          this.pickerComponent = this.createPickerComponent();
        }
        var pickerGui = this.pickerComponent.getGui();
        pickerGui.addEventListener("focusin", this.onPickerFocusIn);
        pickerGui.addEventListener("focusout", this.onPickerFocusOut);
        this.hideCurrentPicker = this.renderAndPositionPicker();
        this.toggleExpandedStyles(true);
      };
      AgPickerField2.prototype.renderAndPositionPicker = function() {
        var _this = this;
        var eDocument = this.gridOptionsService.getDocument();
        var ePicker = this.pickerComponent.getGui();
        if (!this.gridOptionsService.is("suppressScrollWhenPopupsAreOpen")) {
          this.destroyMouseWheelFunc = this.addManagedListener(eDocument.body, "wheel", function(e) {
            if (!ePicker.contains(e.target)) {
              _this.hidePicker();
            }
          });
        }
        var translate = this.localeService.getLocaleTextFunc();
        var _a = this.config, pickerType = _a.pickerType, pickerAriaLabelKey = _a.pickerAriaLabelKey, pickerAriaLabelValue = _a.pickerAriaLabelValue, _b = _a.modalPicker, modalPicker = _b === void 0 ? true : _b;
        var popupParams = {
          modal: modalPicker,
          eChild: ePicker,
          closeOnEsc: true,
          closedCallback: function() {
            var shouldRestoreFocus = eDocument.activeElement === eDocument.body;
            _this.beforeHidePicker();
            if (shouldRestoreFocus && _this.isAlive()) {
              _this.getFocusableElement().focus();
            }
          },
          ariaLabel: translate(pickerAriaLabelKey, pickerAriaLabelValue)
        };
        var addPopupRes = this.popupService.addPopup(popupParams);
        var _c = this, maxPickerHeight = _c.maxPickerHeight, minPickerWidth = _c.minPickerWidth, maxPickerWidth = _c.maxPickerWidth, pickerGap = _c.pickerGap, variableWidth = _c.variableWidth;
        if (variableWidth) {
          if (minPickerWidth) {
            ePicker.style.minWidth = minPickerWidth;
          }
          ePicker.style.width = formatSize(getAbsoluteWidth(this.eWrapper));
          if (maxPickerWidth) {
            ePicker.style.maxWidth = maxPickerWidth;
          }
        } else {
          setElementWidth(ePicker, maxPickerWidth !== null && maxPickerWidth !== void 0 ? maxPickerWidth : getAbsoluteWidth(this.eWrapper));
        }
        var maxHeight = maxPickerHeight !== null && maxPickerHeight !== void 0 ? maxPickerHeight : getInnerHeight(this.popupService.getPopupParent()) + "px";
        ePicker.style.setProperty("max-height", maxHeight);
        ePicker.style.position = "absolute";
        var alignSide = this.gridOptionsService.is("enableRtl") ? "right" : "left";
        this.popupService.positionPopupByComponent({
          type: pickerType,
          eventSource: this.eWrapper,
          ePopup: ePicker,
          position: "under",
          alignSide,
          keepWithinBounds: true,
          nudgeY: pickerGap
        });
        return addPopupRes.hideFunc;
      };
      AgPickerField2.prototype.beforeHidePicker = function() {
        if (this.destroyMouseWheelFunc) {
          this.destroyMouseWheelFunc();
          this.destroyMouseWheelFunc = void 0;
        }
        this.toggleExpandedStyles(false);
        var pickerGui = this.pickerComponent.getGui();
        pickerGui.removeEventListener("focusin", this.onPickerFocusIn);
        pickerGui.removeEventListener("focusout", this.onPickerFocusOut);
        this.isPickerDisplayed = false;
        this.pickerComponent = void 0;
        this.hideCurrentPicker = null;
      };
      AgPickerField2.prototype.toggleExpandedStyles = function(expanded) {
        if (!this.isAlive()) {
          return;
        }
        var ariaEl = this.getAriaElement();
        setAriaExpanded(ariaEl, expanded);
        this.eWrapper.classList.toggle("ag-picker-expanded", expanded);
        this.eWrapper.classList.toggle("ag-picker-collapsed", !expanded);
      };
      AgPickerField2.prototype.onPickerFocusIn = function() {
        this.togglePickerHasFocus(true);
      };
      AgPickerField2.prototype.onPickerFocusOut = function(e) {
        var _a;
        if (!((_a = this.pickerComponent) === null || _a === void 0 ? void 0 : _a.getGui().contains(e.relatedTarget))) {
          this.togglePickerHasFocus(false);
        }
      };
      AgPickerField2.prototype.togglePickerHasFocus = function(focused) {
        if (!this.pickerComponent) {
          return;
        }
        this.eWrapper.classList.toggle("ag-picker-has-focus", focused);
      };
      AgPickerField2.prototype.hidePicker = function() {
        if (this.hideCurrentPicker) {
          this.hideCurrentPicker();
        }
      };
      AgPickerField2.prototype.setAriaLabel = function(label) {
        setAriaLabel(this.getAriaElement(), label);
        return this;
      };
      AgPickerField2.prototype.setInputWidth = function(width) {
        setElementWidth(this.eWrapper, width);
        return this;
      };
      AgPickerField2.prototype.getFocusableElement = function() {
        return this.eWrapper;
      };
      AgPickerField2.prototype.setPickerGap = function(gap) {
        this.pickerGap = gap;
        return this;
      };
      AgPickerField2.prototype.setPickerMinWidth = function(width) {
        if (typeof width === "number") {
          width = width + "px";
        }
        this.minPickerWidth = width == null ? void 0 : width;
        return this;
      };
      AgPickerField2.prototype.setPickerMaxWidth = function(width) {
        if (typeof width === "number") {
          width = width + "px";
        }
        this.maxPickerWidth = width == null ? void 0 : width;
        return this;
      };
      AgPickerField2.prototype.setPickerMaxHeight = function(height) {
        if (typeof height === "number") {
          height = height + "px";
        }
        this.maxPickerHeight = height == null ? void 0 : height;
        return this;
      };
      AgPickerField2.prototype.destroy = function() {
        this.hidePicker();
        _super.prototype.destroy.call(this);
      };
      __decorate$2q([
        Autowired("popupService")
      ], AgPickerField2.prototype, "popupService", void 0);
      __decorate$2q([
        RefSelector("eLabel")
      ], AgPickerField2.prototype, "eLabel", void 0);
      __decorate$2q([
        RefSelector("eWrapper")
      ], AgPickerField2.prototype, "eWrapper", void 0);
      __decorate$2q([
        RefSelector("eDisplayField")
      ], AgPickerField2.prototype, "eDisplayField", void 0);
      __decorate$2q([
        RefSelector("eIcon")
      ], AgPickerField2.prototype, "eIcon", void 0);
      return AgPickerField2;
    }(AgAbstractField);
    __extends$2T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgList = /** @class */
    function(_super) {
      __extends$2T(AgList2, _super);
      function AgList2(cssIdentifier) {
        if (cssIdentifier === void 0) {
          cssIdentifier = "default";
        }
        var _this = _super.call(
          this,
          /* html */
          '<div class="ag-list ag-' + cssIdentifier + '-list" role="listbox"></div>'
        ) || this;
        _this.cssIdentifier = cssIdentifier;
        _this.options = [];
        _this.itemEls = [];
        return _this;
      }
      AgList2.prototype.init = function() {
        this.addManagedListener(this.getGui(), "keydown", this.handleKeyDown.bind(this));
      };
      AgList2.prototype.handleKeyDown = function(e) {
        var key = e.key;
        switch (key) {
          case KeyCode.ENTER:
            if (!this.highlightedEl) {
              this.setValue(this.getValue());
            } else {
              var pos = this.itemEls.indexOf(this.highlightedEl);
              this.setValueByIndex(pos);
            }
            break;
          case KeyCode.DOWN:
          case KeyCode.UP:
            var isDown = key === KeyCode.DOWN;
            var itemToHighlight = void 0;
            e.preventDefault();
            if (!this.highlightedEl) {
              itemToHighlight = this.itemEls[isDown ? 0 : this.itemEls.length - 1];
            } else {
              var currentIdx = this.itemEls.indexOf(this.highlightedEl);
              var nextPos = currentIdx + (isDown ? 1 : -1);
              nextPos = Math.min(Math.max(nextPos, 0), this.itemEls.length - 1);
              itemToHighlight = this.itemEls[nextPos];
            }
            this.highlightItem(itemToHighlight);
            break;
        }
      };
      AgList2.prototype.addOptions = function(listOptions) {
        var _this = this;
        listOptions.forEach(function(listOption) {
          return _this.addOption(listOption);
        });
        return this;
      };
      AgList2.prototype.addOption = function(listOption) {
        var value = listOption.value, text = listOption.text;
        var sanitisedText = escapeString(text || value);
        this.options.push({ value, text: sanitisedText });
        this.renderOption(value, sanitisedText);
        this.updateIndices();
        return this;
      };
      AgList2.prototype.updateIndices = function() {
        var options = this.getGui().querySelectorAll(".ag-list-item");
        options.forEach(function(option, idx) {
          setAriaPosInSet(option, idx + 1);
          setAriaSetSize(option, options.length);
        });
      };
      AgList2.prototype.renderOption = function(value, text) {
        var _this = this;
        var itemEl = document.createElement("div");
        setAriaRole(itemEl, "option");
        itemEl.classList.add("ag-list-item", "ag-" + this.cssIdentifier + "-list-item");
        itemEl.innerHTML = "<span>" + text + "</span>";
        itemEl.tabIndex = -1;
        this.itemEls.push(itemEl);
        this.addManagedListener(itemEl, "mouseover", function() {
          return _this.highlightItem(itemEl);
        });
        this.addManagedListener(itemEl, "mouseleave", function() {
          return _this.clearHighlighted();
        });
        this.addManagedListener(itemEl, "click", function() {
          return _this.setValue(value);
        });
        this.getGui().appendChild(itemEl);
      };
      AgList2.prototype.setValue = function(value, silent) {
        if (this.value === value) {
          this.fireItemSelected();
          return this;
        }
        if (value == null) {
          this.reset();
          return this;
        }
        var idx = this.options.findIndex(function(option2) {
          return option2.value === value;
        });
        if (idx !== -1) {
          var option = this.options[idx];
          this.value = option.value;
          this.displayValue = option.text != null ? option.text : option.value;
          this.highlightItem(this.itemEls[idx]);
          if (!silent) {
            this.fireChangeEvent();
          }
        }
        return this;
      };
      AgList2.prototype.setValueByIndex = function(idx) {
        return this.setValue(this.options[idx].value);
      };
      AgList2.prototype.getValue = function() {
        return this.value;
      };
      AgList2.prototype.getDisplayValue = function() {
        return this.displayValue;
      };
      AgList2.prototype.refreshHighlighted = function() {
        var _this = this;
        this.clearHighlighted();
        var idx = this.options.findIndex(function(option) {
          return option.value === _this.value;
        });
        if (idx !== -1) {
          this.highlightItem(this.itemEls[idx]);
        }
      };
      AgList2.prototype.reset = function() {
        this.value = null;
        this.displayValue = null;
        this.clearHighlighted();
        this.fireChangeEvent();
      };
      AgList2.prototype.highlightItem = function(el) {
        if (!el.offsetParent) {
          return;
        }
        this.clearHighlighted();
        this.highlightedEl = el;
        this.highlightedEl.classList.add(AgList2.ACTIVE_CLASS);
        setAriaSelected(this.highlightedEl, true);
        this.highlightedEl.focus();
      };
      AgList2.prototype.clearHighlighted = function() {
        if (!this.highlightedEl || !this.highlightedEl.offsetParent) {
          return;
        }
        this.highlightedEl.classList.remove(AgList2.ACTIVE_CLASS);
        setAriaSelected(this.highlightedEl, false);
        this.highlightedEl = null;
      };
      AgList2.prototype.fireChangeEvent = function() {
        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });
        this.fireItemSelected();
      };
      AgList2.prototype.fireItemSelected = function() {
        this.dispatchEvent({ type: AgList2.EVENT_ITEM_SELECTED });
      };
      AgList2.EVENT_ITEM_SELECTED = "selectedItem";
      AgList2.ACTIVE_CLASS = "ag-active-item";
      __decorate$2p([
        PostConstruct
      ], AgList2.prototype, "init", null);
      return AgList2;
    }(Component);
    __extends$2S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$j = function() {
      __assign$j = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$j.apply(this, arguments);
    };
    AgSelect = /** @class */
    function(_super) {
      __extends$2S(AgSelect2, _super);
      function AgSelect2(config) {
        return _super.call(this, __assign$j({ pickerAriaLabelKey: "ariaLabelSelectField", pickerAriaLabelValue: "Select Field", pickerType: "ag-list", className: "ag-select", pickerIcon: "smallDown", ariaRole: "listbox" }, config)) || this;
      }
      AgSelect2.prototype.postConstruct = function() {
        var _a;
        _super.prototype.postConstruct.call(this);
        this.createListComponent();
        this.eWrapper.tabIndex = (_a = this.gridOptionsService.getNum("tabIndex")) !== null && _a !== void 0 ? _a : 0;
      };
      AgSelect2.prototype.createListComponent = function() {
        var _this = this;
        this.listComponent = this.createBean(new AgList("select"));
        this.listComponent.setParentComponent(this);
        this.listComponent.addGuiEventListener("keydown", function(e) {
          if (e.key === KeyCode.TAB) {
            e.preventDefault();
            e.stopImmediatePropagation();
            _this.getGui().dispatchEvent(new KeyboardEvent("keydown", {
              key: e.key,
              shiftKey: e.shiftKey,
              ctrlKey: e.ctrlKey,
              bubbles: true
            }));
          }
        });
        this.listComponent.addManagedListener(this.listComponent, AgList.EVENT_ITEM_SELECTED, function() {
          _this.hidePicker();
          _this.dispatchEvent({ type: AgSelect2.EVENT_ITEM_SELECTED });
        });
        this.listComponent.addManagedListener(this.listComponent, Events.EVENT_FIELD_VALUE_CHANGED, function() {
          if (!_this.listComponent) {
            return;
          }
          _this.setValue(_this.listComponent.getValue(), false, true);
          _this.hidePicker();
        });
      };
      AgSelect2.prototype.createPickerComponent = function() {
        return this.listComponent;
      };
      AgSelect2.prototype.showPicker = function() {
        if (!this.listComponent) {
          return;
        }
        _super.prototype.showPicker.call(this);
        this.listComponent.refreshHighlighted();
      };
      AgSelect2.prototype.addOptions = function(options) {
        var _this = this;
        options.forEach(function(option) {
          return _this.addOption(option);
        });
        return this;
      };
      AgSelect2.prototype.addOption = function(option) {
        this.listComponent.addOption(option);
        return this;
      };
      AgSelect2.prototype.setValue = function(value, silent, fromPicker) {
        if (this.value === value || !this.listComponent) {
          return this;
        }
        if (!fromPicker) {
          this.listComponent.setValue(value, true);
        }
        var newValue = this.listComponent.getValue();
        if (newValue === this.getValue()) {
          return this;
        }
        this.eDisplayField.innerHTML = this.listComponent.getDisplayValue();
        return _super.prototype.setValue.call(this, value, silent);
      };
      AgSelect2.prototype.destroy = function() {
        if (this.listComponent) {
          this.destroyBean(this.listComponent);
          this.listComponent = void 0;
        }
        _super.prototype.destroy.call(this);
      };
      AgSelect2.EVENT_ITEM_SELECTED = "selectedItem";
      return AgSelect2;
    }(AgPickerField);
    __extends$2R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgAbstractInputField = /** @class */
    function(_super) {
      __extends$2R(AgAbstractInputField2, _super);
      function AgAbstractInputField2(config, className, inputType, displayFieldTag) {
        if (inputType === void 0) {
          inputType = "text";
        }
        if (displayFieldTag === void 0) {
          displayFieldTag = "input";
        }
        var _this = _super.call(
          this,
          config,
          /* html */
          '\n            <div role="presentation">\n                <div ref="eLabel" class="ag-input-field-label"></div>\n                <div ref="eWrapper" class="ag-wrapper ag-input-wrapper" role="presentation">\n                    <' + displayFieldTag + ' ref="eInput" class="ag-input-field-input"></' + displayFieldTag + ">\n                </div>\n            </div>",
          className
        ) || this;
        _this.inputType = inputType;
        _this.displayFieldTag = displayFieldTag;
        return _this;
      }
      AgAbstractInputField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        this.setInputType();
        this.eLabel.classList.add(this.className + "-label");
        this.eWrapper.classList.add(this.className + "-input-wrapper");
        this.eInput.classList.add(this.className + "-input");
        this.addCssClass("ag-input-field");
        this.eInput.id = this.eInput.id || "ag-" + this.getCompId() + "-input";
        var _a = this.config, width = _a.width, value = _a.value;
        if (width != null) {
          this.setWidth(width);
        }
        if (value != null) {
          this.setValue(value);
        }
        this.addInputListeners();
        this.activateTabIndex([this.eInput]);
      };
      AgAbstractInputField2.prototype.refreshLabel = function() {
        if (exists(this.getLabel())) {
          setAriaLabelledBy(this.eInput, this.getLabelId());
        } else {
          this.eInput.removeAttribute("aria-labelledby");
        }
        _super.prototype.refreshLabel.call(this);
      };
      AgAbstractInputField2.prototype.addInputListeners = function() {
        var _this = this;
        this.addManagedListener(this.eInput, "input", function(e) {
          return _this.setValue(e.target.value);
        });
      };
      AgAbstractInputField2.prototype.setInputType = function() {
        if (this.displayFieldTag === "input") {
          this.eInput.setAttribute("type", this.inputType);
        }
      };
      AgAbstractInputField2.prototype.getInputElement = function() {
        return this.eInput;
      };
      AgAbstractInputField2.prototype.setInputWidth = function(width) {
        setElementWidth(this.eWrapper, width);
        return this;
      };
      AgAbstractInputField2.prototype.setInputName = function(name) {
        this.getInputElement().setAttribute("name", name);
        return this;
      };
      AgAbstractInputField2.prototype.getFocusableElement = function() {
        return this.eInput;
      };
      AgAbstractInputField2.prototype.setMaxLength = function(length) {
        var eInput = this.eInput;
        eInput.maxLength = length;
        return this;
      };
      AgAbstractInputField2.prototype.setInputPlaceholder = function(placeholder) {
        addOrRemoveAttribute(this.eInput, "placeholder", placeholder);
        return this;
      };
      AgAbstractInputField2.prototype.setInputAriaLabel = function(label) {
        setAriaLabel(this.eInput, label);
        return this;
      };
      AgAbstractInputField2.prototype.setDisabled = function(disabled) {
        setDisabled(this.eInput, disabled);
        return _super.prototype.setDisabled.call(this, disabled);
      };
      AgAbstractInputField2.prototype.setAutoComplete = function(value) {
        if (value === true) {
          addOrRemoveAttribute(this.eInput, "autocomplete", null);
        } else {
          var autoCompleteValue = typeof value === "string" ? value : "off";
          addOrRemoveAttribute(this.eInput, "autocomplete", autoCompleteValue);
        }
        return this;
      };
      __decorate$2o([
        RefSelector("eLabel")
      ], AgAbstractInputField2.prototype, "eLabel", void 0);
      __decorate$2o([
        RefSelector("eWrapper")
      ], AgAbstractInputField2.prototype, "eWrapper", void 0);
      __decorate$2o([
        RefSelector("eInput")
      ], AgAbstractInputField2.prototype, "eInput", void 0);
      return AgAbstractInputField2;
    }(AgAbstractField);
    __extends$2Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgCheckbox = /** @class */
    function(_super) {
      __extends$2Q(AgCheckbox2, _super);
      function AgCheckbox2(config, className, inputType) {
        if (className === void 0) {
          className = "ag-checkbox";
        }
        if (inputType === void 0) {
          inputType = "checkbox";
        }
        var _this = _super.call(this, config, className, inputType) || this;
        _this.labelAlignment = "right";
        _this.selected = false;
        _this.readOnly = false;
        _this.passive = false;
        return _this;
      }
      AgCheckbox2.prototype.addInputListeners = function() {
        this.addManagedListener(this.eInput, "click", this.onCheckboxClick.bind(this));
        this.addManagedListener(this.eLabel, "click", this.toggle.bind(this));
      };
      AgCheckbox2.prototype.getNextValue = function() {
        return this.selected === void 0 ? true : !this.selected;
      };
      AgCheckbox2.prototype.setPassive = function(passive) {
        this.passive = passive;
      };
      AgCheckbox2.prototype.isReadOnly = function() {
        return this.readOnly;
      };
      AgCheckbox2.prototype.setReadOnly = function(readOnly) {
        this.eWrapper.classList.toggle("ag-disabled", readOnly);
        this.eInput.disabled = readOnly;
        this.readOnly = readOnly;
      };
      AgCheckbox2.prototype.setDisabled = function(disabled) {
        this.eWrapper.classList.toggle("ag-disabled", disabled);
        return _super.prototype.setDisabled.call(this, disabled);
      };
      AgCheckbox2.prototype.toggle = function() {
        if (this.eInput.disabled) {
          return;
        }
        var previousValue = this.isSelected();
        var nextValue = this.getNextValue();
        if (this.passive) {
          this.dispatchChange(nextValue, previousValue);
        } else {
          this.setValue(nextValue);
        }
      };
      AgCheckbox2.prototype.getValue = function() {
        return this.isSelected();
      };
      AgCheckbox2.prototype.setValue = function(value, silent) {
        this.refreshSelectedClass(value);
        this.setSelected(value, silent);
        return this;
      };
      AgCheckbox2.prototype.setName = function(name) {
        var input = this.getInputElement();
        input.name = name;
        return this;
      };
      AgCheckbox2.prototype.isSelected = function() {
        return this.selected;
      };
      AgCheckbox2.prototype.setSelected = function(selected, silent) {
        if (this.isSelected() === selected) {
          return;
        }
        this.previousValue = this.isSelected();
        selected = this.selected = typeof selected === "boolean" ? selected : void 0;
        this.eInput.checked = selected;
        this.eInput.indeterminate = selected === void 0;
        if (!silent) {
          this.dispatchChange(this.selected, this.previousValue);
        }
      };
      AgCheckbox2.prototype.dispatchChange = function(selected, previousValue, event) {
        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED, selected, previousValue, event });
        var input = this.getInputElement();
        var checkboxChangedEvent = {
          type: Events.EVENT_CHECKBOX_CHANGED,
          id: input.id,
          name: input.name,
          selected,
          previousValue
        };
        this.eventService.dispatchEvent(checkboxChangedEvent);
      };
      AgCheckbox2.prototype.onCheckboxClick = function(e) {
        if (this.passive || this.eInput.disabled) {
          return;
        }
        var previousValue = this.isSelected();
        var selected = this.selected = e.target.checked;
        this.refreshSelectedClass(selected);
        this.dispatchChange(selected, previousValue, e);
      };
      AgCheckbox2.prototype.refreshSelectedClass = function(value) {
        this.eWrapper.classList.toggle("ag-checked", value === true);
        this.eWrapper.classList.toggle("ag-indeterminate", value == null);
      };
      return AgCheckbox2;
    }(AgAbstractInputField);
    __extends$2P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgRadioButton = /** @class */
    function(_super) {
      __extends$2P(AgRadioButton2, _super);
      function AgRadioButton2(config) {
        return _super.call(this, config, "ag-radio-button", "radio") || this;
      }
      AgRadioButton2.prototype.isSelected = function() {
        return this.eInput.checked;
      };
      AgRadioButton2.prototype.toggle = function() {
        if (this.eInput.disabled) {
          return;
        }
        if (!this.isSelected()) {
          this.setValue(true);
        }
      };
      AgRadioButton2.prototype.addInputListeners = function() {
        _super.prototype.addInputListeners.call(this);
        this.addManagedListener(this.eventService, Events.EVENT_CHECKBOX_CHANGED, this.onChange.bind(this));
      };
      AgRadioButton2.prototype.onChange = function(event) {
        if (event.selected && event.name && this.eInput.name && this.eInput.name === event.name && event.id && this.eInput.id !== event.id) {
          this.setValue(false, true);
        }
      };
      return AgRadioButton2;
    }(AgCheckbox);
    __extends$2O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __read$p = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$k = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    SimpleFilterModelFormatter = /** @class */
    function() {
      function SimpleFilterModelFormatter2(localeService, optionsFactory, valueFormatter) {
        this.localeService = localeService;
        this.optionsFactory = optionsFactory;
        this.valueFormatter = valueFormatter;
      }
      SimpleFilterModelFormatter2.prototype.getModelAsString = function(model) {
        var _this = this;
        if (!model) {
          return null;
        }
        var isCombined = model.operator != null;
        var translate = this.localeService.getLocaleTextFunc();
        if (isCombined) {
          var combinedModel = model;
          var conditions = combinedModel.conditions;
          if (!conditions) {
            var condition1 = combinedModel.condition1, condition2 = combinedModel.condition2;
            conditions = [condition1, condition2];
          }
          var customOptions = conditions.map(function(condition3) {
            return _this.getModelAsString(condition3);
          });
          var joinOperatorTranslateKey = combinedModel.operator === "AND" ? "andCondition" : "orCondition";
          return customOptions.join(" " + translate(joinOperatorTranslateKey, DEFAULT_FILTER_LOCALE_TEXT[joinOperatorTranslateKey]) + " ");
        } else if (model.type === SimpleFilter.BLANK || model.type === SimpleFilter.NOT_BLANK) {
          return translate(model.type, model.type);
        } else {
          var condition = model;
          var customOption = this.optionsFactory.getCustomOption(condition.type);
          var _a = customOption || {}, displayKey = _a.displayKey, displayName = _a.displayName, numberOfInputs = _a.numberOfInputs;
          if (displayKey && displayName && numberOfInputs === 0) {
            translate(displayKey, displayName);
            return displayName;
          }
          return this.conditionToString(condition, customOption);
        }
      };
      SimpleFilterModelFormatter2.prototype.updateParams = function(params) {
        this.optionsFactory = params.optionsFactory;
      };
      SimpleFilterModelFormatter2.prototype.formatValue = function(value) {
        var _a;
        return this.valueFormatter ? (_a = this.valueFormatter(value !== null && value !== void 0 ? value : null)) !== null && _a !== void 0 ? _a : "" : String(value);
      };
      return SimpleFilterModelFormatter2;
    }();
    SimpleFilter = /** @class */
    function(_super) {
      __extends$2O(SimpleFilter2, _super);
      function SimpleFilter2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.eTypes = [];
        _this.eJoinOperatorPanels = [];
        _this.eJoinOperatorsAnd = [];
        _this.eJoinOperatorsOr = [];
        _this.eConditionBodies = [];
        _this.listener = function() {
          return _this.onUiChanged();
        };
        _this.lastUiCompletePosition = null;
        _this.joinOperatorId = 0;
        return _this;
      }
      SimpleFilter2.prototype.getNumberOfInputs = function(type) {
        var customOpts = this.optionsFactory.getCustomOption(type);
        if (customOpts) {
          var numberOfInputs = customOpts.numberOfInputs;
          return numberOfInputs != null ? numberOfInputs : 1;
        }
        var zeroInputTypes = [
          SimpleFilter2.EMPTY,
          SimpleFilter2.NOT_BLANK,
          SimpleFilter2.BLANK
        ];
        if (type && zeroInputTypes.indexOf(type) >= 0) {
          return 0;
        } else if (type === SimpleFilter2.IN_RANGE) {
          return 2;
        }
        return 1;
      };
      SimpleFilter2.prototype.onFloatingFilterChanged = function(type, value) {
        this.setTypeFromFloatingFilter(type);
        this.setValueFromFloatingFilter(value);
        this.onUiChanged(true);
      };
      SimpleFilter2.prototype.setTypeFromFloatingFilter = function(type) {
        var _this = this;
        this.eTypes.forEach(function(eType, position) {
          if (position === 0) {
            eType.setValue(type, true);
          } else {
            eType.setValue(_this.optionsFactory.getDefaultOption(), true);
          }
        });
      };
      SimpleFilter2.prototype.getModelFromUi = function() {
        var conditions = this.getUiCompleteConditions();
        if (conditions.length === 0) {
          return null;
        }
        if (this.maxNumConditions > 1 && conditions.length > 1) {
          return {
            filterType: this.getFilterType(),
            operator: this.getJoinOperator(),
            condition1: conditions[0],
            condition2: conditions[1],
            conditions
          };
        }
        return conditions[0];
      };
      SimpleFilter2.prototype.getConditionTypes = function() {
        return this.eTypes.map(function(eType) {
          return eType.getValue();
        });
      };
      SimpleFilter2.prototype.getConditionType = function(position) {
        return this.eTypes[position].getValue();
      };
      SimpleFilter2.prototype.getJoinOperator = function() {
        if (this.eJoinOperatorsOr.length === 0) {
          return this.defaultJoinOperator;
        }
        return this.eJoinOperatorsOr[0].getValue() === true ? "OR" : "AND";
      };
      SimpleFilter2.prototype.areModelsEqual = function(a, b) {
        var _this = this;
        if (!a && !b) {
          return true;
        }
        if (!a && b || a && !b) {
          return false;
        }
        var aIsSimple = !a.operator;
        var bIsSimple = !b.operator;
        var oneSimpleOneCombined = !aIsSimple && bIsSimple || aIsSimple && !bIsSimple;
        if (oneSimpleOneCombined) {
          return false;
        }
        var res;
        if (aIsSimple) {
          var aSimple = a;
          var bSimple = b;
          res = this.areSimpleModelsEqual(aSimple, bSimple);
        } else {
          var aCombined = a;
          var bCombined = b;
          res = aCombined.operator === bCombined.operator && areEqual(aCombined.conditions, bCombined.conditions, function(aModel, bModel) {
            return _this.areSimpleModelsEqual(aModel, bModel);
          });
        }
        return res;
      };
      SimpleFilter2.prototype.setModelIntoUi = function(model) {
        var _this = this;
        var isCombined = model.operator;
        if (isCombined) {
          var combinedModel = model;
          if (!combinedModel.conditions) {
            combinedModel.conditions = [
              combinedModel.condition1,
              combinedModel.condition2
            ];
          }
          var numConditions = this.validateAndUpdateConditions(combinedModel.conditions);
          var numPrevConditions = this.getNumConditions();
          if (numConditions < numPrevConditions) {
            this.removeConditionsAndOperators(numConditions);
          } else if (numConditions > numPrevConditions) {
            for (var i = numPrevConditions; i < numConditions; i++) {
              this.createJoinOperatorPanel();
              this.createOption();
            }
          }
          var orChecked_1 = combinedModel.operator === "OR";
          this.eJoinOperatorsAnd.forEach(function(eJoinOperatorAnd) {
            return eJoinOperatorAnd.setValue(!orChecked_1, true);
          });
          this.eJoinOperatorsOr.forEach(function(eJoinOperatorOr) {
            return eJoinOperatorOr.setValue(orChecked_1, true);
          });
          combinedModel.conditions.forEach(function(condition, position) {
            _this.eTypes[position].setValue(condition.type, true);
            _this.setConditionIntoUi(condition, position);
          });
        } else {
          var simpleModel = model;
          if (this.getNumConditions() > 1) {
            this.removeConditionsAndOperators(1);
          }
          this.eTypes[0].setValue(simpleModel.type, true);
          this.setConditionIntoUi(simpleModel, 0);
        }
        this.lastUiCompletePosition = this.getNumConditions() - 1;
        this.createMissingConditionsAndOperators();
        this.onUiChanged();
        return AgPromise.resolve();
      };
      SimpleFilter2.prototype.validateAndUpdateConditions = function(conditions) {
        var numConditions = conditions.length;
        if (numConditions > this.maxNumConditions) {
          conditions.splice(this.maxNumConditions);
          doOnce(function() {
            return console.warn('AG Grid: Filter Model contains more conditions than "filterParams.maxNumConditions". Additional conditions have been ignored.');
          }, "simpleFilterSetModelMaxNumConditions");
          numConditions = this.maxNumConditions;
        }
        return numConditions;
      };
      SimpleFilter2.prototype.doesFilterPass = function(params) {
        var _this = this;
        var _a;
        var model = this.getModel();
        if (model == null) {
          return true;
        }
        var operator = model.operator;
        var models = [];
        if (operator) {
          var combinedModel = model;
          models.push.apply(models, __spreadArray$k([], __read$p((_a = combinedModel.conditions) !== null && _a !== void 0 ? _a : [])));
        } else {
          models.push(model);
        }
        var combineFunction = operator && operator === "OR" ? "some" : "every";
        return models[combineFunction](function(m) {
          return _this.individualConditionPasses(params, m);
        });
      };
      SimpleFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.setNumConditions(params);
        this.defaultJoinOperator = this.getDefaultJoinOperator(params.defaultJoinOperator);
        this.filterPlaceholder = params.filterPlaceholder;
        this.optionsFactory = new OptionsFactory();
        this.optionsFactory.init(params, this.getDefaultFilterOptions());
        this.createFilterListOptions();
        this.createOption();
        this.createMissingConditionsAndOperators();
        if (this.isReadOnly()) {
          this.eFilterBody.setAttribute("tabindex", "-1");
        }
      };
      SimpleFilter2.prototype.setNumConditions = function(params) {
        var _a, _b;
        if (params.suppressAndOrCondition != null) {
          doOnce(function() {
            return console.warn('AG Grid: Since v29.2 "filterParams.suppressAndOrCondition" is deprecated. Use "filterParams.maxNumConditions = 1" instead.');
          }, "simpleFilterSuppressAndOrCondition");
        }
        if (params.alwaysShowBothConditions != null) {
          doOnce(function() {
            return console.warn('AG Grid: Since v29.2 "filterParams.alwaysShowBothConditions" is deprecated. Use "filterParams.numAlwaysVisibleConditions = 2" instead.');
          }, "simpleFilterAlwaysShowBothConditions");
        }
        this.maxNumConditions = (_a = params.maxNumConditions) !== null && _a !== void 0 ? _a : params.suppressAndOrCondition ? 1 : 2;
        if (this.maxNumConditions < 1) {
          doOnce(function() {
            return console.warn('AG Grid: "filterParams.maxNumConditions" must be greater than or equal to zero.');
          }, "simpleFilterMaxNumConditions");
          this.maxNumConditions = 1;
        }
        this.numAlwaysVisibleConditions = (_b = params.numAlwaysVisibleConditions) !== null && _b !== void 0 ? _b : params.alwaysShowBothConditions ? 2 : 1;
        if (this.numAlwaysVisibleConditions < 1) {
          doOnce(function() {
            return console.warn('AG Grid: "filterParams.numAlwaysVisibleConditions" must be greater than or equal to zero.');
          }, "simpleFilterNumAlwaysVisibleConditions");
          this.numAlwaysVisibleConditions = 1;
        }
        if (this.numAlwaysVisibleConditions > this.maxNumConditions) {
          doOnce(function() {
            return console.warn('AG Grid: "filterParams.numAlwaysVisibleConditions" cannot be greater than "filterParams.maxNumConditions".');
          }, "simpleFilterNumAlwaysVisibleGreaterThanMaxNumConditions");
          this.numAlwaysVisibleConditions = this.maxNumConditions;
        }
      };
      SimpleFilter2.prototype.createOption = function() {
        var _this = this;
        var eType = this.createManagedBean(new AgSelect());
        this.eTypes.push(eType);
        eType.addCssClass("ag-filter-select");
        this.eFilterBody.appendChild(eType.getGui());
        var eConditionBody = this.createValueElement();
        this.eConditionBodies.push(eConditionBody);
        this.eFilterBody.appendChild(eConditionBody);
        this.putOptionsIntoDropdown(eType);
        this.resetType(eType);
        var position = this.getNumConditions() - 1;
        this.forEachPositionInput(position, function(element) {
          return _this.resetInput(element);
        });
        this.addChangedListeners(eType, position);
      };
      SimpleFilter2.prototype.createJoinOperatorPanel = function() {
        var eJoinOperatorPanel = document.createElement("div");
        this.eJoinOperatorPanels.push(eJoinOperatorPanel);
        eJoinOperatorPanel.classList.add("ag-filter-condition");
        var eJoinOperatorAnd = this.createJoinOperator(this.eJoinOperatorsAnd, eJoinOperatorPanel, "and");
        var eJoinOperatorOr = this.createJoinOperator(this.eJoinOperatorsOr, eJoinOperatorPanel, "or");
        this.eFilterBody.appendChild(eJoinOperatorPanel);
        var index = this.eJoinOperatorPanels.length - 1;
        var uniqueGroupId = this.joinOperatorId++;
        this.resetJoinOperatorAnd(eJoinOperatorAnd, index, uniqueGroupId);
        this.resetJoinOperatorOr(eJoinOperatorOr, index, uniqueGroupId);
        if (!this.isReadOnly()) {
          eJoinOperatorAnd.onValueChange(this.listener);
          eJoinOperatorOr.onValueChange(this.listener);
        }
      };
      SimpleFilter2.prototype.createJoinOperator = function(eJoinOperators, eJoinOperatorPanel, andOr) {
        var eJoinOperator = this.createManagedBean(new AgRadioButton());
        eJoinOperators.push(eJoinOperator);
        eJoinOperator.addCssClass("ag-filter-condition-operator");
        eJoinOperator.addCssClass("ag-filter-condition-operator-" + andOr);
        eJoinOperatorPanel.appendChild(eJoinOperator.getGui());
        return eJoinOperator;
      };
      SimpleFilter2.prototype.getDefaultJoinOperator = function(defaultJoinOperator) {
        return defaultJoinOperator === "AND" || defaultJoinOperator === "OR" ? defaultJoinOperator : "AND";
      };
      SimpleFilter2.prototype.createFilterListOptions = function() {
        var _this = this;
        var filterOptions = this.optionsFactory.getFilterOptions();
        this.filterListOptions = filterOptions.map(function(option) {
          return typeof option === "string" ? _this.createBoilerplateListOption(option) : _this.createCustomListOption(option);
        });
      };
      SimpleFilter2.prototype.putOptionsIntoDropdown = function(eType) {
        this.filterListOptions.forEach(function(listOption) {
          eType.addOption(listOption);
        });
        eType.setDisabled(this.filterListOptions.length <= 1);
      };
      SimpleFilter2.prototype.createBoilerplateListOption = function(option) {
        return { value: option, text: this.translate(option) };
      };
      SimpleFilter2.prototype.createCustomListOption = function(option) {
        var displayKey = option.displayKey;
        var customOption = this.optionsFactory.getCustomOption(option.displayKey);
        return {
          value: displayKey,
          text: customOption ? this.localeService.getLocaleTextFunc()(customOption.displayKey, customOption.displayName) : this.translate(displayKey)
        };
      };
      SimpleFilter2.prototype.isAllowTwoConditions = function() {
        return this.maxNumConditions >= 2;
      };
      SimpleFilter2.prototype.createBodyTemplate = function() {
        return "";
      };
      SimpleFilter2.prototype.getCssIdentifier = function() {
        return "simple-filter";
      };
      SimpleFilter2.prototype.updateUiVisibility = function() {
        var joinOperator = this.getJoinOperator();
        this.updateNumConditions();
        this.updateConditionStatusesAndValues(this.lastUiCompletePosition, joinOperator);
      };
      SimpleFilter2.prototype.updateNumConditions = function() {
        var _a;
        var lastUiCompletePosition = -1;
        var areAllConditionsUiComplete = true;
        for (var position = 0; position < this.getNumConditions(); position++) {
          if (this.isConditionUiComplete(position)) {
            lastUiCompletePosition = position;
          } else {
            areAllConditionsUiComplete = false;
          }
        }
        if (this.shouldAddNewConditionAtEnd(areAllConditionsUiComplete)) {
          this.createJoinOperatorPanel();
          this.createOption();
        } else {
          var activePosition = (_a = this.lastUiCompletePosition) !== null && _a !== void 0 ? _a : this.getNumConditions() - 2;
          if (lastUiCompletePosition < activePosition) {
            this.removeConditionsAndOperators(activePosition + 1);
            var removeStartPosition = lastUiCompletePosition + 1;
            var numConditionsToRemove = activePosition - removeStartPosition;
            if (numConditionsToRemove > 0) {
              this.removeConditionsAndOperators(removeStartPosition, numConditionsToRemove);
            }
            this.createMissingConditionsAndOperators();
          }
        }
        this.lastUiCompletePosition = lastUiCompletePosition;
      };
      SimpleFilter2.prototype.updateConditionStatusesAndValues = function(lastUiCompletePosition, joinOperator) {
        var _this = this;
        this.eTypes.forEach(function(eType, position) {
          var disabled = _this.isConditionDisabled(position, lastUiCompletePosition);
          eType.setDisabled(disabled || _this.filterListOptions.length <= 1);
          if (position === 1) {
            setDisabled(_this.eJoinOperatorPanels[0], disabled);
            _this.eJoinOperatorsAnd[0].setDisabled(disabled);
            _this.eJoinOperatorsOr[0].setDisabled(disabled);
          }
        });
        this.eConditionBodies.forEach(function(element, index) {
          setDisplayed(element, _this.isConditionBodyVisible(index));
        });
        var orChecked = (joinOperator !== null && joinOperator !== void 0 ? joinOperator : this.getJoinOperator()) === "OR";
        this.eJoinOperatorsAnd.forEach(function(eJoinOperatorAnd, index) {
          eJoinOperatorAnd.setValue(!orChecked, true);
        });
        this.eJoinOperatorsOr.forEach(function(eJoinOperatorOr, index) {
          eJoinOperatorOr.setValue(orChecked, true);
        });
        this.forEachInput(function(element, index, position, numberOfInputs) {
          _this.setElementDisplayed(element, index < numberOfInputs);
          _this.setElementDisabled(element, _this.isConditionDisabled(position, lastUiCompletePosition));
        });
        this.resetPlaceholder();
      };
      SimpleFilter2.prototype.shouldAddNewConditionAtEnd = function(areAllConditionsUiComplete) {
        return areAllConditionsUiComplete && this.getNumConditions() < this.maxNumConditions && !this.isReadOnly();
      };
      SimpleFilter2.prototype.removeConditionsAndOperators = function(startPosition, deleteCount) {
        if (startPosition >= this.getNumConditions()) {
          return;
        }
        this.removeComponents(this.eTypes, startPosition, deleteCount);
        this.removeElements(this.eConditionBodies, startPosition, deleteCount);
        this.removeValueElements(startPosition, deleteCount);
        var joinOperatorIndex = Math.max(startPosition - 1, 0);
        this.removeElements(this.eJoinOperatorPanels, joinOperatorIndex, deleteCount);
        this.removeComponents(this.eJoinOperatorsAnd, joinOperatorIndex, deleteCount);
        this.removeComponents(this.eJoinOperatorsOr, joinOperatorIndex, deleteCount);
      };
      SimpleFilter2.prototype.removeElements = function(elements, startPosition, deleteCount) {
        var removedElements = this.removeItems(elements, startPosition, deleteCount);
        removedElements.forEach(function(element) {
          return removeFromParent(element);
        });
      };
      SimpleFilter2.prototype.removeComponents = function(components, startPosition, deleteCount) {
        var _this = this;
        var removedComponents = this.removeItems(components, startPosition, deleteCount);
        removedComponents.forEach(function(comp) {
          removeFromParent(comp.getGui());
          _this.destroyBean(comp);
        });
      };
      SimpleFilter2.prototype.removeItems = function(items, startPosition, deleteCount) {
        return deleteCount == null ? items.splice(startPosition) : items.splice(startPosition, deleteCount);
      };
      SimpleFilter2.prototype.afterGuiAttached = function(params) {
        _super.prototype.afterGuiAttached.call(this, params);
        this.resetPlaceholder();
        if (!(params === null || params === void 0 ? void 0 : params.suppressFocus)) {
          if (this.isReadOnly()) {
            this.eFilterBody.focus();
          } else {
            var firstInput = this.getInputs(0)[0];
            if (!firstInput) {
              return;
            }
            if (firstInput instanceof AgAbstractInputField) {
              firstInput.getInputElement().focus();
            }
          }
        }
      };
      SimpleFilter2.prototype.afterGuiDetached = function() {
        _super.prototype.afterGuiDetached.call(this);
        var appliedModel = this.getModel();
        if (!this.areModelsEqual(appliedModel, this.getModelFromUi()) || this.hasInvalidInputs()) {
          this.resetUiToActiveModel(appliedModel);
        }
        var lastUiCompletePosition = -1;
        var updatedLastUiCompletePosition = -1;
        var conditionsRemoved = false;
        var joinOperator = this.getJoinOperator();
        for (var position = this.getNumConditions() - 1; position >= 0; position--) {
          if (this.isConditionUiComplete(position)) {
            if (lastUiCompletePosition === -1) {
              lastUiCompletePosition = position;
              updatedLastUiCompletePosition = position;
            }
          } else {
            var shouldRemovePositionAtEnd = position >= this.numAlwaysVisibleConditions && !this.isConditionUiComplete(position - 1);
            var positionBeforeLastUiCompletePosition = position < lastUiCompletePosition;
            if (shouldRemovePositionAtEnd || positionBeforeLastUiCompletePosition) {
              this.removeConditionsAndOperators(position, 1);
              conditionsRemoved = true;
              if (positionBeforeLastUiCompletePosition) {
                updatedLastUiCompletePosition--;
              }
            }
          }
        }
        var shouldUpdateConditionStatusesAndValues = false;
        if (this.getNumConditions() < this.numAlwaysVisibleConditions) {
          this.createMissingConditionsAndOperators();
          shouldUpdateConditionStatusesAndValues = true;
        }
        if (this.shouldAddNewConditionAtEnd(updatedLastUiCompletePosition === this.getNumConditions() - 1)) {
          this.createJoinOperatorPanel();
          this.createOption();
          shouldUpdateConditionStatusesAndValues = true;
        }
        if (shouldUpdateConditionStatusesAndValues) {
          this.updateConditionStatusesAndValues(updatedLastUiCompletePosition, joinOperator);
        }
        if (conditionsRemoved) {
          this.updateJoinOperatorsDisabled();
        }
        this.lastUiCompletePosition = updatedLastUiCompletePosition;
      };
      SimpleFilter2.prototype.getPlaceholderText = function(defaultPlaceholder, position) {
        var placeholder = this.translate(defaultPlaceholder);
        if (isFunction(this.filterPlaceholder)) {
          var filterPlaceholderFn = this.filterPlaceholder;
          var filterOptionKey = this.eTypes[position].getValue();
          var filterOption = this.translate(filterOptionKey);
          placeholder = filterPlaceholderFn({
            filterOptionKey,
            filterOption,
            placeholder
          });
        } else if (typeof this.filterPlaceholder === "string") {
          placeholder = this.filterPlaceholder;
        }
        return placeholder;
      };
      SimpleFilter2.prototype.resetPlaceholder = function() {
        var _this = this;
        var globalTranslate = this.localeService.getLocaleTextFunc();
        this.forEachInput(function(element, index, position, numberOfInputs) {
          if (!(element instanceof AgAbstractInputField)) {
            return;
          }
          var placeholder = index === 0 && numberOfInputs > 1 ? "inRangeStart" : index === 0 ? "filterOoo" : "inRangeEnd";
          var ariaLabel = index === 0 && numberOfInputs > 1 ? globalTranslate("ariaFilterFromValue", "Filter from value") : index === 0 ? globalTranslate("ariaFilterValue", "Filter Value") : globalTranslate("ariaFilterToValue", "Filter to Value");
          element.setInputPlaceholder(_this.getPlaceholderText(placeholder, position));
          element.setInputAriaLabel(ariaLabel);
        });
      };
      SimpleFilter2.prototype.setElementValue = function(element, value, fromFloatingFilter) {
        if (element instanceof AgAbstractInputField) {
          element.setValue(value != null ? String(value) : null, true);
        }
      };
      SimpleFilter2.prototype.setElementDisplayed = function(element, displayed) {
        if (element instanceof Component) {
          setDisplayed(element.getGui(), displayed);
        }
      };
      SimpleFilter2.prototype.setElementDisabled = function(element, disabled) {
        if (element instanceof Component) {
          setDisabled(element.getGui(), disabled);
        }
      };
      SimpleFilter2.prototype.attachElementOnChange = function(element, listener) {
        if (element instanceof AgAbstractInputField) {
          element.onValueChange(listener);
        }
      };
      SimpleFilter2.prototype.forEachInput = function(cb) {
        var _this = this;
        this.getConditionTypes().forEach(function(type, position) {
          _this.forEachPositionTypeInput(position, type, cb);
        });
      };
      SimpleFilter2.prototype.forEachPositionInput = function(position, cb) {
        var type = this.getConditionType(position);
        this.forEachPositionTypeInput(position, type, cb);
      };
      SimpleFilter2.prototype.forEachPositionTypeInput = function(position, type, cb) {
        var numberOfInputs = this.getNumberOfInputs(type);
        var inputs = this.getInputs(position);
        for (var index = 0; index < inputs.length; index++) {
          var input = inputs[index];
          if (input != null) {
            cb(input, index, position, numberOfInputs);
          }
        }
      };
      SimpleFilter2.prototype.isConditionDisabled = function(position, lastUiCompletePosition) {
        if (this.isReadOnly()) {
          return true;
        }
        if (position === 0) {
          return false;
        }
        return position > lastUiCompletePosition + 1;
      };
      SimpleFilter2.prototype.isConditionBodyVisible = function(position) {
        var type = this.getConditionType(position);
        var numberOfInputs = this.getNumberOfInputs(type);
        return numberOfInputs > 0;
      };
      SimpleFilter2.prototype.isConditionUiComplete = function(position) {
        if (position >= this.getNumConditions()) {
          return false;
        }
        var type = this.getConditionType(position);
        if (type === SimpleFilter2.EMPTY) {
          return false;
        }
        if (this.getValues(position).some(function(v) {
          return v == null;
        })) {
          return false;
        }
        return true;
      };
      SimpleFilter2.prototype.getNumConditions = function() {
        return this.eTypes.length;
      };
      SimpleFilter2.prototype.getUiCompleteConditions = function() {
        var conditions = [];
        for (var position = 0; position < this.getNumConditions(); position++) {
          if (this.isConditionUiComplete(position)) {
            conditions.push(this.createCondition(position));
          }
        }
        return conditions;
      };
      SimpleFilter2.prototype.createMissingConditionsAndOperators = function() {
        if (this.isReadOnly()) {
          return;
        }
        for (var i = this.getNumConditions(); i < this.numAlwaysVisibleConditions; i++) {
          this.createJoinOperatorPanel();
          this.createOption();
        }
      };
      SimpleFilter2.prototype.resetUiToDefaults = function(silent) {
        var _this = this;
        this.removeConditionsAndOperators(this.isReadOnly() ? 1 : this.numAlwaysVisibleConditions);
        this.eTypes.forEach(function(eType) {
          return _this.resetType(eType);
        });
        this.eJoinOperatorsAnd.forEach(function(eJoinOperatorAnd, index) {
          return _this.resetJoinOperatorAnd(eJoinOperatorAnd, index, _this.joinOperatorId + index);
        });
        this.eJoinOperatorsOr.forEach(function(eJoinOperatorOr, index) {
          return _this.resetJoinOperatorOr(eJoinOperatorOr, index, _this.joinOperatorId + index);
        });
        this.joinOperatorId++;
        this.forEachInput(function(element) {
          return _this.resetInput(element);
        });
        this.resetPlaceholder();
        this.createMissingConditionsAndOperators();
        this.lastUiCompletePosition = null;
        if (!silent) {
          this.onUiChanged();
        }
        return AgPromise.resolve();
      };
      SimpleFilter2.prototype.resetType = function(eType) {
        var translate = this.localeService.getLocaleTextFunc();
        var filteringLabel = translate("ariaFilteringOperator", "Filtering operator");
        eType.setValue(this.optionsFactory.getDefaultOption(), true).setAriaLabel(filteringLabel).setDisabled(this.isReadOnly() || this.filterListOptions.length <= 1);
      };
      SimpleFilter2.prototype.resetJoinOperatorAnd = function(eJoinOperatorAnd, index, uniqueGroupId) {
        this.resetJoinOperator(eJoinOperatorAnd, index, this.isDefaultOperator("AND"), this.translate("andCondition"), uniqueGroupId);
      };
      SimpleFilter2.prototype.resetJoinOperatorOr = function(eJoinOperatorOr, index, uniqueGroupId) {
        this.resetJoinOperator(eJoinOperatorOr, index, this.isDefaultOperator("OR"), this.translate("orCondition"), uniqueGroupId);
      };
      SimpleFilter2.prototype.resetJoinOperator = function(eJoinOperator, index, value, label, uniqueGroupId) {
        this.updateJoinOperatorDisabled(eJoinOperator.setValue(value, true).setName("ag-simple-filter-and-or-" + this.getCompId() + "-" + uniqueGroupId).setLabel(label), index);
      };
      SimpleFilter2.prototype.updateJoinOperatorsDisabled = function() {
        var _this = this;
        this.eJoinOperatorsAnd.forEach(function(eJoinOperator, index) {
          return _this.updateJoinOperatorDisabled(eJoinOperator, index);
        });
        this.eJoinOperatorsOr.forEach(function(eJoinOperator, index) {
          return _this.updateJoinOperatorDisabled(eJoinOperator, index);
        });
      };
      SimpleFilter2.prototype.updateJoinOperatorDisabled = function(eJoinOperator, index) {
        eJoinOperator.setDisabled(this.isReadOnly() || index > 0);
      };
      SimpleFilter2.prototype.resetInput = function(element) {
        this.setElementValue(element, null);
        this.setElementDisabled(element, this.isReadOnly());
      };
      SimpleFilter2.prototype.setConditionIntoUi = function(model, position) {
        var _this = this;
        var values2 = this.mapValuesFromModel(model);
        this.forEachInput(function(element, index, elPosition, _2) {
          if (elPosition !== position) {
            return;
          }
          _this.setElementValue(element, values2[index] != null ? values2[index] : null);
        });
      };
      SimpleFilter2.prototype.setValueFromFloatingFilter = function(value) {
        var _this = this;
        this.forEachInput(function(element, index, position, _2) {
          _this.setElementValue(element, index === 0 && position === 0 ? value : null, true);
        });
      };
      SimpleFilter2.prototype.isDefaultOperator = function(operator) {
        return operator === this.defaultJoinOperator;
      };
      SimpleFilter2.prototype.addChangedListeners = function(eType, position) {
        var _this = this;
        if (this.isReadOnly()) {
          return;
        }
        eType.onValueChange(this.listener);
        this.forEachPositionInput(position, function(element) {
          _this.attachElementOnChange(element, _this.listener);
        });
      };
      SimpleFilter2.prototype.individualConditionPasses = function(params, filterModel) {
        var cellValue = this.getCellValue(params.node);
        var values2 = this.mapValuesFromModel(filterModel);
        var customFilterOption = this.optionsFactory.getCustomOption(filterModel.type);
        var customFilterResult = this.evaluateCustomFilter(customFilterOption, values2, cellValue);
        if (customFilterResult != null) {
          return customFilterResult;
        }
        if (cellValue == null) {
          return this.evaluateNullValue(filterModel.type);
        }
        return this.evaluateNonNullValue(values2, cellValue, filterModel, params);
      };
      SimpleFilter2.prototype.evaluateCustomFilter = function(customFilterOption, values2, cellValue) {
        if (customFilterOption == null) {
          return;
        }
        var predicate = customFilterOption.predicate;
        if (predicate != null && !values2.some(function(v) {
          return v == null;
        })) {
          return predicate(values2, cellValue);
        }
        return;
      };
      SimpleFilter2.prototype.isBlank = function(cellValue) {
        return cellValue == null || typeof cellValue === "string" && cellValue.trim().length === 0;
      };
      SimpleFilter2.prototype.hasInvalidInputs = function() {
        return false;
      };
      SimpleFilter2.EMPTY = "empty";
      SimpleFilter2.BLANK = "blank";
      SimpleFilter2.NOT_BLANK = "notBlank";
      SimpleFilter2.EQUALS = "equals";
      SimpleFilter2.NOT_EQUAL = "notEqual";
      SimpleFilter2.LESS_THAN = "lessThan";
      SimpleFilter2.LESS_THAN_OR_EQUAL = "lessThanOrEqual";
      SimpleFilter2.GREATER_THAN = "greaterThan";
      SimpleFilter2.GREATER_THAN_OR_EQUAL = "greaterThanOrEqual";
      SimpleFilter2.IN_RANGE = "inRange";
      SimpleFilter2.CONTAINS = "contains";
      SimpleFilter2.NOT_CONTAINS = "notContains";
      SimpleFilter2.STARTS_WITH = "startsWith";
      SimpleFilter2.ENDS_WITH = "endsWith";
      return SimpleFilter2;
    }(ProvidedFilter);
    __extends$2N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    ScalarFilter = /** @class */
    function(_super) {
      __extends$2N(ScalarFilter2, _super);
      function ScalarFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ScalarFilter2.prototype.setParams = function(params) {
        _super.prototype.setParams.call(this, params);
        this.scalarFilterParams = params;
      };
      ScalarFilter2.prototype.evaluateNullValue = function(filterType) {
        switch (filterType) {
          case ScalarFilter2.EQUALS:
          case ScalarFilter2.NOT_EQUAL:
            if (this.scalarFilterParams.includeBlanksInEquals) {
              return true;
            }
            break;
          case ScalarFilter2.GREATER_THAN:
          case ScalarFilter2.GREATER_THAN_OR_EQUAL:
            if (this.scalarFilterParams.includeBlanksInGreaterThan) {
              return true;
            }
            break;
          case ScalarFilter2.LESS_THAN:
          case ScalarFilter2.LESS_THAN_OR_EQUAL:
            if (this.scalarFilterParams.includeBlanksInLessThan) {
              return true;
            }
            break;
          case ScalarFilter2.IN_RANGE:
            if (this.scalarFilterParams.includeBlanksInRange) {
              return true;
            }
            break;
          case ScalarFilter2.BLANK:
            return true;
          case ScalarFilter2.NOT_BLANK:
            return false;
        }
        return false;
      };
      ScalarFilter2.prototype.evaluateNonNullValue = function(values2, cellValue, filterModel) {
        var comparator = this.comparator();
        var compareResult = values2[0] != null ? comparator(values2[0], cellValue) : 0;
        switch (filterModel.type) {
          case ScalarFilter2.EQUALS:
            return compareResult === 0;
          case ScalarFilter2.NOT_EQUAL:
            return compareResult !== 0;
          case ScalarFilter2.GREATER_THAN:
            return compareResult > 0;
          case ScalarFilter2.GREATER_THAN_OR_EQUAL:
            return compareResult >= 0;
          case ScalarFilter2.LESS_THAN:
            return compareResult < 0;
          case ScalarFilter2.LESS_THAN_OR_EQUAL:
            return compareResult <= 0;
          case ScalarFilter2.IN_RANGE: {
            var compareToResult = comparator(values2[1], cellValue);
            return this.scalarFilterParams.inRangeInclusive ? compareResult >= 0 && compareToResult <= 0 : compareResult > 0 && compareToResult < 0;
          }
          case ScalarFilter2.BLANK:
            return this.isBlank(cellValue);
          case ScalarFilter2.NOT_BLANK:
            return !this.isBlank(cellValue);
          default:
            console.warn('AG Grid: Unexpected type of filter "' + filterModel.type + '", it looks like the filter was configured with incorrect Filter Options');
            return true;
        }
      };
      return ScalarFilter2;
    }(SimpleFilter);
    __extends$2M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$i = function() {
      __assign$i = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$i.apply(this, arguments);
    };
    __decorate$2n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DEFAULT_MIN_YEAR = 1e3;
    DEFAULT_MAX_YEAR = Infinity;
    DateFilterModelFormatter = /** @class */
    function(_super) {
      __extends$2M(DateFilterModelFormatter2, _super);
      function DateFilterModelFormatter2(dateFilterParams, localeService, optionsFactory) {
        var _this = _super.call(this, localeService, optionsFactory) || this;
        _this.dateFilterParams = dateFilterParams;
        return _this;
      }
      DateFilterModelFormatter2.prototype.conditionToString = function(condition, options) {
        var type = condition.type;
        var numberOfInputs = (options || {}).numberOfInputs;
        var isRange = type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
        var dateFrom = parseDateTimeFromString(condition.dateFrom);
        var dateTo = parseDateTimeFromString(condition.dateTo);
        var format = this.dateFilterParams.inRangeFloatingFilterDateFormat;
        if (isRange) {
          var formattedFrom = dateFrom !== null ? dateToFormattedString(dateFrom, format) : "null";
          var formattedTo = dateTo !== null ? dateToFormattedString(dateTo, format) : "null";
          return formattedFrom + "-" + formattedTo;
        }
        if (dateFrom != null) {
          return dateToFormattedString(dateFrom, format);
        }
        return "" + type;
      };
      DateFilterModelFormatter2.prototype.updateParams = function(params) {
        _super.prototype.updateParams.call(this, params);
        this.dateFilterParams = params.dateFilterParams;
      };
      return DateFilterModelFormatter2;
    }(SimpleFilterModelFormatter);
    DateFilter = /** @class */
    function(_super) {
      __extends$2M(DateFilter2, _super);
      function DateFilter2() {
        var _this = _super.call(this, "dateFilter") || this;
        _this.eConditionPanelsFrom = [];
        _this.eConditionPanelsTo = [];
        _this.dateConditionFromComps = [];
        _this.dateConditionToComps = [];
        _this.minValidYear = DEFAULT_MIN_YEAR;
        _this.maxValidYear = DEFAULT_MAX_YEAR;
        _this.minValidDate = null;
        _this.maxValidDate = null;
        return _this;
      }
      DateFilter2.prototype.afterGuiAttached = function(params) {
        _super.prototype.afterGuiAttached.call(this, params);
        this.dateConditionFromComps[0].afterGuiAttached(params);
      };
      DateFilter2.prototype.mapValuesFromModel = function(filterModel) {
        var _a = filterModel || {}, dateFrom = _a.dateFrom, dateTo = _a.dateTo, type = _a.type;
        return [
          dateFrom && parseDateTimeFromString(dateFrom) || null,
          dateTo && parseDateTimeFromString(dateTo) || null
        ].slice(0, this.getNumberOfInputs(type));
      };
      DateFilter2.prototype.comparator = function() {
        return this.dateFilterParams.comparator ? this.dateFilterParams.comparator : this.defaultComparator.bind(this);
      };
      DateFilter2.prototype.defaultComparator = function(filterDate, cellValue) {
        var cellAsDate = cellValue;
        if (cellValue == null || cellAsDate < filterDate) {
          return -1;
        }
        if (cellAsDate > filterDate) {
          return 1;
        }
        return 0;
      };
      DateFilter2.prototype.setParams = function(params) {
        this.dateFilterParams = params;
        _super.prototype.setParams.call(this, params);
        var yearParser = function(param, fallback) {
          if (params[param] != null) {
            if (!isNaN(params[param])) {
              return params[param] == null ? fallback : Number(params[param]);
            } else {
              console.warn("AG Grid: DateFilter " + param + " is not a number");
            }
          }
          return fallback;
        };
        this.minValidYear = yearParser("minValidYear", DEFAULT_MIN_YEAR);
        this.maxValidYear = yearParser("maxValidYear", DEFAULT_MAX_YEAR);
        if (this.minValidYear > this.maxValidYear) {
          console.warn("AG Grid: DateFilter minValidYear should be <= maxValidYear");
        }
        if (params.minValidDate) {
          this.minValidDate = params.minValidDate instanceof Date ? params.minValidDate : parseDateTimeFromString(params.minValidDate);
        } else {
          this.minValidDate = null;
        }
        if (params.maxValidDate) {
          this.maxValidDate = params.maxValidDate instanceof Date ? params.maxValidDate : parseDateTimeFromString(params.maxValidDate);
        } else {
          this.maxValidDate = null;
        }
        if (this.minValidDate && this.maxValidDate && this.minValidDate > this.maxValidDate) {
          console.warn("AG Grid: DateFilter minValidDate should be <= maxValidDate");
        }
        this.filterModelFormatter = new DateFilterModelFormatter(this.dateFilterParams, this.localeService, this.optionsFactory);
      };
      DateFilter2.prototype.createDateCompWrapper = function(element) {
        var _this = this;
        var dateCompWrapper = new DateCompWrapper(this.getContext(), this.userComponentFactory, {
          onDateChanged: function() {
            return _this.onUiChanged();
          },
          filterParams: this.dateFilterParams
        }, element);
        this.addDestroyFunc(function() {
          return dateCompWrapper.destroy();
        });
        return dateCompWrapper;
      };
      DateFilter2.prototype.setElementValue = function(element, value) {
        element.setDate(value);
      };
      DateFilter2.prototype.setElementDisplayed = function(element, displayed) {
        element.setDisplayed(displayed);
      };
      DateFilter2.prototype.setElementDisabled = function(element, disabled) {
        element.setDisabled(disabled);
      };
      DateFilter2.prototype.getDefaultFilterOptions = function() {
        return DateFilter2.DEFAULT_FILTER_OPTIONS;
      };
      DateFilter2.prototype.createValueElement = function() {
        var eCondition = document.createElement("div");
        eCondition.classList.add("ag-filter-body");
        this.createFromToElement(eCondition, this.eConditionPanelsFrom, this.dateConditionFromComps, "from");
        this.createFromToElement(eCondition, this.eConditionPanelsTo, this.dateConditionToComps, "to");
        return eCondition;
      };
      DateFilter2.prototype.createFromToElement = function(eCondition, eConditionPanels, dateConditionComps, fromTo) {
        var eConditionPanel = document.createElement("div");
        eConditionPanel.classList.add("ag-filter-" + fromTo);
        eConditionPanel.classList.add("ag-filter-date-" + fromTo);
        eConditionPanels.push(eConditionPanel);
        eCondition.appendChild(eConditionPanel);
        dateConditionComps.push(this.createDateCompWrapper(eConditionPanel));
      };
      DateFilter2.prototype.removeValueElements = function(startPosition, deleteCount) {
        this.removeDateComps(this.dateConditionFromComps, startPosition, deleteCount);
        this.removeDateComps(this.dateConditionToComps, startPosition, deleteCount);
        this.removeItems(this.eConditionPanelsFrom, startPosition, deleteCount);
        this.removeItems(this.eConditionPanelsTo, startPosition, deleteCount);
      };
      DateFilter2.prototype.removeDateComps = function(components, startPosition, deleteCount) {
        var removedComponents = this.removeItems(components, startPosition, deleteCount);
        removedComponents.forEach(function(comp) {
          return comp.destroy();
        });
      };
      DateFilter2.prototype.isValidDateValue = function(value) {
        if (value === null) {
          return false;
        }
        if (this.minValidDate) {
          if (value < this.minValidDate) {
            return false;
          }
        } else {
          if (value.getUTCFullYear() < this.minValidYear) {
            return false;
          }
        }
        if (this.maxValidDate) {
          if (value > this.maxValidDate) {
            return false;
          }
        } else {
          if (value.getUTCFullYear() > this.maxValidYear) {
            return false;
          }
        }
        return true;
      };
      DateFilter2.prototype.isConditionUiComplete = function(position) {
        var _this = this;
        if (!_super.prototype.isConditionUiComplete.call(this, position)) {
          return false;
        }
        var valid = true;
        this.forEachInput(function(element, index, elPosition, numberOfInputs) {
          if (elPosition !== position || !valid || index >= numberOfInputs) {
            return;
          }
          valid = valid && _this.isValidDateValue(element.getDate());
        });
        return valid;
      };
      DateFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.dateFrom === bSimple.dateFrom && aSimple.dateTo === bSimple.dateTo && aSimple.type === bSimple.type;
      };
      DateFilter2.prototype.getFilterType = function() {
        return "date";
      };
      DateFilter2.prototype.createCondition = function(position) {
        var type = this.getConditionType(position);
        var model = {};
        var values2 = this.getValues(position);
        if (values2.length > 0) {
          model.dateFrom = serialiseDate(values2[0]);
        }
        if (values2.length > 1) {
          model.dateTo = serialiseDate(values2[1]);
        }
        return __assign$i({ dateFrom: null, dateTo: null, filterType: this.getFilterType(), type }, model);
      };
      DateFilter2.prototype.resetPlaceholder = function() {
        var globalTranslate = this.localeService.getLocaleTextFunc();
        var placeholder = this.translate("dateFormatOoo");
        var ariaLabel = globalTranslate("ariaFilterValue", "Filter Value");
        this.forEachInput(function(element) {
          element.setInputPlaceholder(placeholder);
          element.setInputAriaLabel(ariaLabel);
        });
      };
      DateFilter2.prototype.getInputs = function(position) {
        if (position >= this.dateConditionFromComps.length) {
          return [null, null];
        }
        return [this.dateConditionFromComps[position], this.dateConditionToComps[position]];
      };
      DateFilter2.prototype.getValues = function(position) {
        var result = [];
        this.forEachPositionInput(position, function(element, index, _elPosition, numberOfInputs) {
          if (index < numberOfInputs) {
            result.push(element.getDate());
          }
        });
        return result;
      };
      DateFilter2.prototype.getModelAsString = function(model) {
        var _a;
        return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : "";
      };
      DateFilter2.DEFAULT_FILTER_OPTIONS = [
        ScalarFilter.EQUALS,
        ScalarFilter.GREATER_THAN,
        ScalarFilter.LESS_THAN,
        ScalarFilter.NOT_EQUAL,
        ScalarFilter.IN_RANGE,
        ScalarFilter.BLANK,
        ScalarFilter.NOT_BLANK
      ];
      __decorate$2n([
        Autowired("userComponentFactory")
      ], DateFilter2.prototype, "userComponentFactory", void 0);
      return DateFilter2;
    }(ScalarFilter);
    __extends$2L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    SimpleFloatingFilter = /** @class */
    function(_super) {
      __extends$2L(SimpleFloatingFilter2, _super);
      function SimpleFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SimpleFloatingFilter2.prototype.getDefaultDebounceMs = function() {
        return 0;
      };
      SimpleFloatingFilter2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      SimpleFloatingFilter2.prototype.isEventFromFloatingFilter = function(event) {
        return event && event.afterFloatingFilter;
      };
      SimpleFloatingFilter2.prototype.isEventFromDataChange = function(event) {
        return event === null || event === void 0 ? void 0 : event.afterDataChange;
      };
      SimpleFloatingFilter2.prototype.getLastType = function() {
        return this.lastType;
      };
      SimpleFloatingFilter2.prototype.isReadOnly = function() {
        return this.readOnly;
      };
      SimpleFloatingFilter2.prototype.setLastTypeFromModel = function(model) {
        if (!model) {
          this.lastType = this.optionsFactory.getDefaultOption();
          return;
        }
        var isCombined = model.operator;
        var condition;
        if (isCombined) {
          var combinedModel = model;
          condition = combinedModel.conditions[0];
        } else {
          condition = model;
        }
        this.lastType = condition.type;
      };
      SimpleFloatingFilter2.prototype.canWeEditAfterModelFromParentFilter = function(model) {
        if (!model) {
          return this.isTypeEditable(this.lastType);
        }
        var isCombined = model.operator;
        if (isCombined) {
          return false;
        }
        var simpleModel = model;
        return this.isTypeEditable(simpleModel.type);
      };
      SimpleFloatingFilter2.prototype.init = function(params) {
        this.setSimpleParams(params);
      };
      SimpleFloatingFilter2.prototype.setSimpleParams = function(params) {
        this.optionsFactory = new OptionsFactory();
        this.optionsFactory.init(params.filterParams, this.getDefaultFilterOptions());
        this.lastType = this.optionsFactory.getDefaultOption();
        this.readOnly = !!params.filterParams.readOnly;
        var editable = this.isTypeEditable(this.lastType);
        this.setEditable(editable);
      };
      SimpleFloatingFilter2.prototype.onParamsUpdated = function(params) {
        this.setSimpleParams(params);
      };
      SimpleFloatingFilter2.prototype.doesFilterHaveSingleInput = function(filterType) {
        var customFilterOption = this.optionsFactory.getCustomOption(filterType);
        var numberOfInputs = (customFilterOption || {}).numberOfInputs;
        return numberOfInputs == null || numberOfInputs == 1;
      };
      SimpleFloatingFilter2.prototype.isTypeEditable = function(type) {
        var uneditableTypes = [
          SimpleFilter.IN_RANGE,
          SimpleFilter.EMPTY,
          SimpleFilter.BLANK,
          SimpleFilter.NOT_BLANK
        ];
        return !!type && !this.isReadOnly() && this.doesFilterHaveSingleInput(type) && uneditableTypes.indexOf(type) < 0;
      };
      return SimpleFloatingFilter2;
    }(Component);
    __extends$2K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DateFloatingFilter = /** @class */
    function(_super) {
      __extends$2K(DateFloatingFilter2, _super);
      function DateFloatingFilter2() {
        return _super.call(
          this,
          /* html */
          '\n            <div class="ag-floating-filter-input" role="presentation">\n                <ag-input-text-field ref="eReadOnlyText"></ag-input-text-field>\n                <div ref="eDateWrapper" style="display: flex;"></div>\n            </div>'
        ) || this;
      }
      DateFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return DateFilter.DEFAULT_FILTER_OPTIONS;
      };
      DateFloatingFilter2.prototype.init = function(params) {
        _super.prototype.init.call(this, params);
        this.params = params;
        this.filterParams = params.filterParams;
        this.createDateComponent();
        this.filterModelFormatter = new DateFilterModelFormatter(this.filterParams, this.localeService, this.optionsFactory);
        var translate = this.localeService.getLocaleTextFunc();
        this.eReadOnlyText.setDisabled(true).setInputAriaLabel(translate("ariaDateFilterInput", "Date Filter Input"));
      };
      DateFloatingFilter2.prototype.onParamsUpdated = function(params) {
        _super.prototype.onParamsUpdated.call(this, params);
        this.params = params;
        this.filterParams = params.filterParams;
        this.updateDateComponent();
        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory, dateFilterParams: this.filterParams });
      };
      DateFloatingFilter2.prototype.setEditable = function(editable) {
        setDisplayed(this.eDateWrapper, editable);
        setDisplayed(this.eReadOnlyText.getGui(), !editable);
      };
      DateFloatingFilter2.prototype.onParentModelChanged = function(model, event) {
        if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {
          return;
        }
        _super.prototype.setLastTypeFromModel.call(this, model);
        var allowEditing = !this.isReadOnly() && this.canWeEditAfterModelFromParentFilter(model);
        this.setEditable(allowEditing);
        if (allowEditing) {
          if (model) {
            var dateModel = model;
            this.dateComp.setDate(parseDateTimeFromString(dateModel.dateFrom));
          } else {
            this.dateComp.setDate(null);
          }
          this.eReadOnlyText.setValue("");
        } else {
          this.eReadOnlyText.setValue(this.filterModelFormatter.getModelAsString(model));
          this.dateComp.setDate(null);
        }
      };
      DateFloatingFilter2.prototype.onDateChanged = function() {
        var _this = this;
        var filterValueDate = this.dateComp.getDate();
        var filterValueText = serialiseDate(filterValueDate);
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance) {
            var date = parseDateTimeFromString(filterValueText);
            filterInstance.onFloatingFilterChanged(_this.getLastType() || null, date);
          }
        });
      };
      DateFloatingFilter2.prototype.getDateComponentParams = function() {
        var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
        return {
          onDateChanged: debounce(this.onDateChanged.bind(this), debounceMs),
          filterParams: this.params.column.getColDef().filterParams
        };
      };
      DateFloatingFilter2.prototype.createDateComponent = function() {
        var _this = this;
        this.dateComp = new DateCompWrapper(this.getContext(), this.userComponentFactory, this.getDateComponentParams(), this.eDateWrapper);
        this.addDestroyFunc(function() {
          return _this.dateComp.destroy();
        });
      };
      DateFloatingFilter2.prototype.updateDateComponent = function() {
        var params = this.getDateComponentParams();
        var _a = this.gridOptionsService, api = _a.api, columnApi = _a.columnApi, context = _a.context;
        params.api = api;
        params.columnApi = columnApi;
        params.context = context;
        this.dateComp.updateParams(params);
      };
      DateFloatingFilter2.prototype.getFilterModelFormatter = function() {
        return this.filterModelFormatter;
      };
      __decorate$2m([
        Autowired("userComponentFactory")
      ], DateFloatingFilter2.prototype, "userComponentFactory", void 0);
      __decorate$2m([
        RefSelector("eReadOnlyText")
      ], DateFloatingFilter2.prototype, "eReadOnlyText", void 0);
      __decorate$2m([
        RefSelector("eDateWrapper")
      ], DateFloatingFilter2.prototype, "eDateWrapper", void 0);
      return DateFloatingFilter2;
    }(SimpleFloatingFilter);
    __extends$2J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$o = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    DefaultDateComponent = /** @class */
    function(_super) {
      __extends$2J(DefaultDateComponent2, _super);
      function DefaultDateComponent2() {
        return _super.call(
          this,
          /* html */
          '\n            <div class="ag-filter-filter">\n                <ag-input-text-field class="ag-date-filter" ref="eDateInput"></ag-input-text-field>\n            </div>'
        ) || this;
      }
      DefaultDateComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      DefaultDateComponent2.prototype.init = function(params) {
        var _this = this;
        this.params = params;
        this.setParams(params);
        var eDocument = this.gridOptionsService.getDocument();
        var inputElement = this.eDateInput.getInputElement();
        this.addManagedListener(inputElement, "mousedown", function() {
          if (_this.eDateInput.isDisabled() || _this.usingSafariDatePicker) {
            return;
          }
          inputElement.focus();
        });
        this.addManagedListener(inputElement, "input", function(e) {
          if (e.target !== eDocument.activeElement) {
            return;
          }
          if (_this.eDateInput.isDisabled()) {
            return;
          }
          _this.params.onDateChanged();
        });
      };
      DefaultDateComponent2.prototype.setParams = function(params) {
        var inputElement = this.eDateInput.getInputElement();
        var shouldUseBrowserDatePicker = this.shouldUseBrowserDatePicker(params);
        this.usingSafariDatePicker = shouldUseBrowserDatePicker && isBrowserSafari();
        inputElement.type = shouldUseBrowserDatePicker ? "date" : "text";
        var _a = params.filterParams || {}, minValidYear = _a.minValidYear, maxValidYear = _a.maxValidYear, minValidDate = _a.minValidDate, maxValidDate = _a.maxValidDate;
        if (minValidDate && minValidYear) {
          doOnce(function() {
            return console.warn("AG Grid: DateFilter should not have both minValidDate and minValidYear parameters set at the same time! minValidYear will be ignored.");
          }, "DateFilter.minValidDateAndMinValidYearWarning");
        }
        if (maxValidDate && maxValidYear) {
          doOnce(function() {
            return console.warn("AG Grid: DateFilter should not have both maxValidDate and maxValidYear parameters set at the same time! maxValidYear will be ignored.");
          }, "DateFilter.maxValidDateAndMaxValidYearWarning");
        }
        if (minValidDate && maxValidDate) {
          var _b = __read$o([minValidDate, maxValidDate].map(function(v) {
            return v instanceof Date ? v : parseDateTimeFromString(v);
          }), 2), parsedMinValidDate = _b[0], parsedMaxValidDate = _b[1];
          if (parsedMinValidDate && parsedMaxValidDate && parsedMinValidDate.getTime() > parsedMaxValidDate.getTime()) {
            doOnce(function() {
              return console.warn("AG Grid: DateFilter parameter minValidDate should always be lower than or equal to parameter maxValidDate.");
            }, "DateFilter.minValidDateAndMaxValidDateWarning");
          }
        }
        if (minValidDate) {
          if (minValidDate instanceof Date) {
            inputElement.min = dateToFormattedString(minValidDate);
          } else {
            inputElement.min = minValidDate;
          }
        } else {
          if (minValidYear) {
            inputElement.min = minValidYear + "-01-01";
          }
        }
        if (maxValidDate) {
          if (maxValidDate instanceof Date) {
            inputElement.max = dateToFormattedString(maxValidDate);
          } else {
            inputElement.max = maxValidDate;
          }
        } else {
          if (maxValidYear) {
            inputElement.max = maxValidYear + "-12-31";
          }
        }
      };
      DefaultDateComponent2.prototype.onParamsUpdated = function(params) {
        this.params = params;
        this.setParams(params);
      };
      DefaultDateComponent2.prototype.getDate = function() {
        return parseDateTimeFromString(this.eDateInput.getValue());
      };
      DefaultDateComponent2.prototype.setDate = function(date) {
        this.eDateInput.setValue(serialiseDate(date, false));
      };
      DefaultDateComponent2.prototype.setInputPlaceholder = function(placeholder) {
        this.eDateInput.setInputPlaceholder(placeholder);
      };
      DefaultDateComponent2.prototype.setDisabled = function(disabled) {
        this.eDateInput.setDisabled(disabled);
      };
      DefaultDateComponent2.prototype.afterGuiAttached = function(params) {
        if (!params || !params.suppressFocus) {
          this.eDateInput.getInputElement().focus();
        }
      };
      DefaultDateComponent2.prototype.shouldUseBrowserDatePicker = function(params) {
        if (params.filterParams && params.filterParams.browserDatePicker != null) {
          return params.filterParams.browserDatePicker;
        }
        return isBrowserChrome() || isBrowserFirefox() || isBrowserSafari() && getSafariVersion() >= 14.1;
      };
      __decorate$2l([
        RefSelector("eDateInput")
      ], DefaultDateComponent2.prototype, "eDateInput", void 0);
      return DefaultDateComponent2;
    }(Component);
    __extends$2I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputTextField = /** @class */
    function(_super) {
      __extends$2I(AgInputTextField2, _super);
      function AgInputTextField2(config, className, inputType) {
        if (className === void 0) {
          className = "ag-text-field";
        }
        if (inputType === void 0) {
          inputType = "text";
        }
        return _super.call(this, config, className, inputType) || this;
      }
      AgInputTextField2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        if (this.config.allowedCharPattern) {
          this.preventDisallowedCharacters();
        }
      };
      AgInputTextField2.prototype.setValue = function(value, silent) {
        if (this.eInput.value !== value) {
          this.eInput.value = exists(value) ? value : "";
        }
        return _super.prototype.setValue.call(this, value, silent);
      };
      AgInputTextField2.prototype.setStartValue = function(value) {
        this.setValue(value, true);
      };
      AgInputTextField2.prototype.preventDisallowedCharacters = function() {
        var pattern = new RegExp("[" + this.config.allowedCharPattern + "]");
        var preventCharacters = function(event) {
          if (!isEventFromPrintableCharacter(event)) {
            return;
          }
          if (event.key && !pattern.test(event.key)) {
            event.preventDefault();
          }
        };
        this.addManagedListener(this.eInput, "keydown", preventCharacters);
        this.addManagedListener(this.eInput, "paste", function(e) {
          var _a;
          var text = (_a = e.clipboardData) === null || _a === void 0 ? void 0 : _a.getData("text");
          if (text && text.split("").some(function(c) {
            return !pattern.test(c);
          })) {
            e.preventDefault();
          }
        });
      };
      return AgInputTextField2;
    }(AgAbstractInputField);
    __extends$2H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputNumberField = /** @class */
    function(_super) {
      __extends$2H(AgInputNumberField2, _super);
      function AgInputNumberField2(config) {
        return _super.call(this, config, "ag-number-field", "number") || this;
      }
      AgInputNumberField2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.addManagedListener(this.eInput, "blur", function() {
          var floatedValue = parseFloat(_this.eInput.value);
          var value = isNaN(floatedValue) ? "" : _this.normalizeValue(floatedValue.toString());
          if (_this.value !== value) {
            _this.setValue(value);
          }
        });
        this.addManagedListener(this.eInput, "wheel", this.onWheel.bind(this));
        this.eInput.step = "any";
      };
      AgInputNumberField2.prototype.onWheel = function(e) {
        if (document.activeElement === this.eInput) {
          e.preventDefault();
        }
      };
      AgInputNumberField2.prototype.normalizeValue = function(value) {
        if (value === "") {
          return "";
        }
        if (this.precision != null) {
          value = this.adjustPrecision(value);
        }
        var val = parseFloat(value);
        if (this.min != null && val < this.min) {
          value = this.min.toString();
        } else if (this.max != null && val > this.max) {
          value = this.max.toString();
        }
        return value;
      };
      AgInputNumberField2.prototype.adjustPrecision = function(value, isScientificNotation) {
        if (this.precision == null) {
          return value;
        }
        if (isScientificNotation) {
          var floatString = parseFloat(value).toFixed(this.precision);
          return parseFloat(floatString).toString();
        }
        var parts = String(value).split(".");
        if (parts.length > 1) {
          if (parts[1].length <= this.precision) {
            return value;
          } else if (this.precision > 0) {
            return parts[0] + "." + parts[1].slice(0, this.precision);
          }
        }
        return parts[0];
      };
      AgInputNumberField2.prototype.setMin = function(min) {
        if (this.min === min) {
          return this;
        }
        this.min = min;
        addOrRemoveAttribute(this.eInput, "min", min);
        return this;
      };
      AgInputNumberField2.prototype.setMax = function(max) {
        if (this.max === max) {
          return this;
        }
        this.max = max;
        addOrRemoveAttribute(this.eInput, "max", max);
        return this;
      };
      AgInputNumberField2.prototype.setPrecision = function(precision) {
        this.precision = precision;
        return this;
      };
      AgInputNumberField2.prototype.setStep = function(step) {
        if (this.step === step) {
          return this;
        }
        this.step = step;
        addOrRemoveAttribute(this.eInput, "step", step);
        return this;
      };
      AgInputNumberField2.prototype.setValue = function(value, silent) {
        var _this = this;
        return this.setValueOrInputValue(function(v) {
          return _super.prototype.setValue.call(_this, v, silent);
        }, function() {
          return _this;
        }, value);
      };
      AgInputNumberField2.prototype.setStartValue = function(value) {
        var _this = this;
        return this.setValueOrInputValue(function(v) {
          return _super.prototype.setValue.call(_this, v, true);
        }, function(v) {
          _this.eInput.value = v;
        }, value);
      };
      AgInputNumberField2.prototype.setValueOrInputValue = function(setValueFunc, setInputValueOnlyFunc, value) {
        if (exists(value)) {
          var setInputValueOnly = this.isScientificNotation(value);
          if (setInputValueOnly && this.eInput.validity.valid) {
            return setValueFunc(value);
          }
          if (!setInputValueOnly) {
            value = this.adjustPrecision(value);
            var normalizedValue = this.normalizeValue(value);
            setInputValueOnly = value != normalizedValue;
          }
          if (setInputValueOnly) {
            return setInputValueOnlyFunc(value);
          }
        }
        return setValueFunc(value);
      };
      AgInputNumberField2.prototype.getValue = function() {
        if (!this.eInput.validity.valid) {
          return void 0;
        }
        var inputValue = this.eInput.value;
        if (this.isScientificNotation(inputValue)) {
          return this.adjustPrecision(inputValue, true);
        }
        return _super.prototype.getValue.call(this);
      };
      AgInputNumberField2.prototype.isScientificNotation = function(value) {
        return typeof value === "string" && value.includes("e");
      };
      return AgInputNumberField2;
    }(AgInputTextField);
    __extends$2G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    NumberFilterModelFormatter = /** @class */
    function(_super) {
      __extends$2G(NumberFilterModelFormatter2, _super);
      function NumberFilterModelFormatter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NumberFilterModelFormatter2.prototype.conditionToString = function(condition, options) {
        var numberOfInputs = (options || {}).numberOfInputs;
        var isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
        if (isRange) {
          return this.formatValue(condition.filter) + "-" + this.formatValue(condition.filterTo);
        }
        if (condition.filter != null) {
          return this.formatValue(condition.filter);
        }
        return "" + condition.type;
      };
      return NumberFilterModelFormatter2;
    }(SimpleFilterModelFormatter);
    NumberFilter = /** @class */
    function(_super) {
      __extends$2G(NumberFilter2, _super);
      function NumberFilter2() {
        var _this = _super.call(this, "numberFilter") || this;
        _this.eValuesFrom = [];
        _this.eValuesTo = [];
        return _this;
      }
      NumberFilter2.prototype.mapValuesFromModel = function(filterModel) {
        var _a = filterModel || {}, filter = _a.filter, filterTo = _a.filterTo, type = _a.type;
        return [
          this.processValue(filter),
          this.processValue(filterTo)
        ].slice(0, this.getNumberOfInputs(type));
      };
      NumberFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      NumberFilter2.prototype.comparator = function() {
        return function(left, right) {
          if (left === right) {
            return 0;
          }
          return left < right ? 1 : -1;
        };
      };
      NumberFilter2.prototype.setParams = function(params) {
        this.numberFilterParams = params;
        _super.prototype.setParams.call(this, params);
        this.filterModelFormatter = new NumberFilterModelFormatter(this.localeService, this.optionsFactory, this.numberFilterParams.numberFormatter);
      };
      NumberFilter2.prototype.getDefaultFilterOptions = function() {
        return NumberFilter2.DEFAULT_FILTER_OPTIONS;
      };
      NumberFilter2.prototype.setElementValue = function(element, value, fromFloatingFilter) {
        var valueToSet = !fromFloatingFilter && this.numberFilterParams.numberFormatter ? this.numberFilterParams.numberFormatter(value !== null && value !== void 0 ? value : null) : value;
        _super.prototype.setElementValue.call(this, element, valueToSet);
      };
      NumberFilter2.prototype.createValueElement = function() {
        var allowedCharPattern = getAllowedCharPattern(this.numberFilterParams);
        var eCondition = document.createElement("div");
        eCondition.classList.add("ag-filter-body");
        setAriaRole(eCondition, "presentation");
        this.createFromToElement(eCondition, this.eValuesFrom, "from", allowedCharPattern);
        this.createFromToElement(eCondition, this.eValuesTo, "to", allowedCharPattern);
        return eCondition;
      };
      NumberFilter2.prototype.createFromToElement = function(eCondition, eValues, fromTo, allowedCharPattern) {
        var eValue = this.createManagedBean(allowedCharPattern ? new AgInputTextField({ allowedCharPattern }) : new AgInputNumberField());
        eValue.addCssClass("ag-filter-" + fromTo);
        eValue.addCssClass("ag-filter-filter");
        eValues.push(eValue);
        eCondition.appendChild(eValue.getGui());
      };
      NumberFilter2.prototype.removeValueElements = function(startPosition, deleteCount) {
        this.removeComponents(this.eValuesFrom, startPosition, deleteCount);
        this.removeComponents(this.eValuesTo, startPosition, deleteCount);
      };
      NumberFilter2.prototype.getValues = function(position) {
        var _this = this;
        var result = [];
        this.forEachPositionInput(position, function(element, index, _elPosition, numberOfInputs) {
          if (index < numberOfInputs) {
            result.push(_this.processValue(_this.stringToFloat(element.getValue())));
          }
        });
        return result;
      };
      NumberFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
      };
      NumberFilter2.prototype.getFilterType = function() {
        return "number";
      };
      NumberFilter2.prototype.processValue = function(value) {
        if (value == null) {
          return null;
        }
        return isNaN(value) ? null : value;
      };
      NumberFilter2.prototype.stringToFloat = function(value) {
        if (typeof value === "number") {
          return value;
        }
        var filterText = makeNull(value);
        if (filterText != null && filterText.trim() === "") {
          filterText = null;
        }
        if (this.numberFilterParams.numberParser) {
          return this.numberFilterParams.numberParser(filterText);
        }
        return filterText == null || filterText.trim() === "-" ? null : parseFloat(filterText);
      };
      NumberFilter2.prototype.createCondition = function(position) {
        var type = this.getConditionType(position);
        var model = {
          filterType: this.getFilterType(),
          type
        };
        var values2 = this.getValues(position);
        if (values2.length > 0) {
          model.filter = values2[0];
        }
        if (values2.length > 1) {
          model.filterTo = values2[1];
        }
        return model;
      };
      NumberFilter2.prototype.getInputs = function(position) {
        if (position >= this.eValuesFrom.length) {
          return [null, null];
        }
        return [this.eValuesFrom[position], this.eValuesTo[position]];
      };
      NumberFilter2.prototype.getModelAsString = function(model) {
        var _a;
        return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : "";
      };
      NumberFilter2.prototype.hasInvalidInputs = function() {
        var invalidInputs = false;
        this.forEachInput(function(element) {
          if (!element.getInputElement().validity.valid) {
            invalidInputs = true;
            return;
          }
        });
        return invalidInputs;
      };
      NumberFilter2.DEFAULT_FILTER_OPTIONS = [
        ScalarFilter.EQUALS,
        ScalarFilter.NOT_EQUAL,
        ScalarFilter.LESS_THAN,
        ScalarFilter.LESS_THAN_OR_EQUAL,
        ScalarFilter.GREATER_THAN,
        ScalarFilter.GREATER_THAN_OR_EQUAL,
        ScalarFilter.IN_RANGE,
        ScalarFilter.BLANK,
        ScalarFilter.NOT_BLANK
      ];
      return NumberFilter2;
    }(ScalarFilter);
    __extends$2F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$h = function() {
      __assign$h = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$h.apply(this, arguments);
    };
    TextFilterModelFormatter = /** @class */
    function(_super) {
      __extends$2F(TextFilterModelFormatter2, _super);
      function TextFilterModelFormatter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TextFilterModelFormatter2.prototype.conditionToString = function(condition, options) {
        var numberOfInputs = (options || {}).numberOfInputs;
        var isRange = condition.type == SimpleFilter.IN_RANGE || numberOfInputs === 2;
        if (isRange) {
          return condition.filter + "-" + condition.filterTo;
        }
        if (condition.filter != null) {
          return "" + condition.filter;
        }
        return "" + condition.type;
      };
      return TextFilterModelFormatter2;
    }(SimpleFilterModelFormatter);
    TextFilter = /** @class */
    function(_super) {
      __extends$2F(TextFilter2, _super);
      function TextFilter2() {
        var _this = _super.call(this, "textFilter") || this;
        _this.eValuesFrom = [];
        _this.eValuesTo = [];
        return _this;
      }
      TextFilter2.trimInput = function(value) {
        var trimmedInput = value && value.trim();
        return trimmedInput === "" ? value : trimmedInput;
      };
      TextFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      TextFilter2.prototype.setParams = function(params) {
        this.textFilterParams = params;
        _super.prototype.setParams.call(this, params);
        this.matcher = this.getTextMatcher();
        this.formatter = this.textFilterParams.textFormatter || (this.textFilterParams.caseSensitive ? TextFilter2.DEFAULT_FORMATTER : TextFilter2.DEFAULT_LOWERCASE_FORMATTER);
        this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);
      };
      TextFilter2.prototype.getTextMatcher = function() {
        var legacyComparator = this.textFilterParams.textCustomComparator;
        if (legacyComparator) {
          _.doOnce(function() {
            return console.warn("AG Grid - textCustomComparator is deprecated, use textMatcher instead.");
          }, "textCustomComparator.deprecated");
          return function(_a) {
            var filterOption = _a.filterOption, value = _a.value, filterText = _a.filterText;
            return legacyComparator(filterOption, value, filterText);
          };
        }
        return this.textFilterParams.textMatcher || TextFilter2.DEFAULT_MATCHER;
      };
      TextFilter2.prototype.createCondition = function(position) {
        var type = this.getConditionType(position);
        var model = {
          filterType: this.getFilterType(),
          type
        };
        var values2 = this.getValuesWithSideEffects(position, true);
        if (values2.length > 0) {
          model.filter = values2[0];
        }
        if (values2.length > 1) {
          model.filterTo = values2[1];
        }
        return model;
      };
      TextFilter2.prototype.getFilterType = function() {
        return "text";
      };
      TextFilter2.prototype.areSimpleModelsEqual = function(aSimple, bSimple) {
        return aSimple.filter === bSimple.filter && aSimple.filterTo === bSimple.filterTo && aSimple.type === bSimple.type;
      };
      TextFilter2.prototype.getInputs = function(position) {
        if (position >= this.eValuesFrom.length) {
          return [null, null];
        }
        return [this.eValuesFrom[position], this.eValuesTo[position]];
      };
      TextFilter2.prototype.getValues = function(position) {
        return this.getValuesWithSideEffects(position, false);
      };
      TextFilter2.prototype.getValuesWithSideEffects = function(position, applySideEffects) {
        var _this = this;
        var result = [];
        this.forEachPositionInput(position, function(element, index, _elPosition, numberOfInputs) {
          var _a;
          if (index < numberOfInputs) {
            var value = makeNull(element.getValue());
            if (applySideEffects && _this.textFilterParams.trimInput) {
              value = (_a = TextFilter2.trimInput(value)) !== null && _a !== void 0 ? _a : null;
              element.setValue(value, true);
            }
            result.push(value);
          }
        });
        return result;
      };
      TextFilter2.prototype.getDefaultFilterOptions = function() {
        return TextFilter2.DEFAULT_FILTER_OPTIONS;
      };
      TextFilter2.prototype.createValueElement = function() {
        var eCondition = document.createElement("div");
        eCondition.classList.add("ag-filter-body");
        setAriaRole(eCondition, "presentation");
        this.createFromToElement(eCondition, this.eValuesFrom, "from");
        this.createFromToElement(eCondition, this.eValuesTo, "to");
        return eCondition;
      };
      TextFilter2.prototype.createFromToElement = function(eCondition, eValues, fromTo) {
        var eValue = this.createManagedBean(new AgInputTextField());
        eValue.addCssClass("ag-filter-" + fromTo);
        eValue.addCssClass("ag-filter-filter");
        eValues.push(eValue);
        eCondition.appendChild(eValue.getGui());
      };
      TextFilter2.prototype.removeValueElements = function(startPosition, deleteCount) {
        this.removeComponents(this.eValuesFrom, startPosition, deleteCount);
        this.removeComponents(this.eValuesTo, startPosition, deleteCount);
      };
      TextFilter2.prototype.mapValuesFromModel = function(filterModel) {
        var _a = filterModel || {}, filter = _a.filter, filterTo = _a.filterTo, type = _a.type;
        return [
          filter || null,
          filterTo || null
        ].slice(0, this.getNumberOfInputs(type));
      };
      TextFilter2.prototype.evaluateNullValue = function(filterType) {
        var filterTypesAllowNulls = [
          SimpleFilter.NOT_EQUAL,
          SimpleFilter.NOT_CONTAINS,
          SimpleFilter.BLANK
        ];
        return filterType ? filterTypesAllowNulls.indexOf(filterType) >= 0 : false;
      };
      TextFilter2.prototype.evaluateNonNullValue = function(values2, cellValue, filterModel, params) {
        var _this = this;
        var formattedValues = values2.map(function(v) {
          return _this.formatter(v);
        }) || [];
        var cellValueFormatted = this.formatter(cellValue);
        var _a = this.textFilterParams, api = _a.api, colDef = _a.colDef, column = _a.column, columnApi = _a.columnApi, context = _a.context, textFormatter = _a.textFormatter;
        if (filterModel.type === SimpleFilter.BLANK) {
          return this.isBlank(cellValue);
        } else if (filterModel.type === SimpleFilter.NOT_BLANK) {
          return !this.isBlank(cellValue);
        }
        var matcherParams = {
          api,
          colDef,
          column,
          columnApi,
          context,
          node: params.node,
          data: params.data,
          filterOption: filterModel.type,
          value: cellValueFormatted,
          textFormatter
        };
        return formattedValues.some(function(v) {
          return _this.matcher(__assign$h(__assign$h({}, matcherParams), { filterText: v }));
        });
      };
      TextFilter2.prototype.getModelAsString = function(model) {
        var _a;
        return (_a = this.filterModelFormatter.getModelAsString(model)) !== null && _a !== void 0 ? _a : "";
      };
      TextFilter2.DEFAULT_FILTER_OPTIONS = [
        SimpleFilter.CONTAINS,
        SimpleFilter.NOT_CONTAINS,
        SimpleFilter.EQUALS,
        SimpleFilter.NOT_EQUAL,
        SimpleFilter.STARTS_WITH,
        SimpleFilter.ENDS_WITH,
        SimpleFilter.BLANK,
        SimpleFilter.NOT_BLANK
      ];
      TextFilter2.DEFAULT_FORMATTER = function(from) {
        return from;
      };
      TextFilter2.DEFAULT_LOWERCASE_FORMATTER = function(from) {
        return from == null ? null : from.toString().toLowerCase();
      };
      TextFilter2.DEFAULT_MATCHER = function(_a) {
        var filterOption = _a.filterOption, value = _a.value, filterText = _a.filterText;
        if (filterText == null) {
          return false;
        }
        switch (filterOption) {
          case TextFilter2.CONTAINS:
            return value.indexOf(filterText) >= 0;
          case TextFilter2.NOT_CONTAINS:
            return value.indexOf(filterText) < 0;
          case TextFilter2.EQUALS:
            return value === filterText;
          case TextFilter2.NOT_EQUAL:
            return value != filterText;
          case TextFilter2.STARTS_WITH:
            return value.indexOf(filterText) === 0;
          case TextFilter2.ENDS_WITH:
            var index = value.lastIndexOf(filterText);
            return index >= 0 && index === value.length - filterText.length;
          default:
            return false;
        }
      };
      return TextFilter2;
    }(SimpleFilter);
    __extends$2E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FloatingFilterTextInputService = /** @class */
    function(_super) {
      __extends$2E(FloatingFilterTextInputService2, _super);
      function FloatingFilterTextInputService2(params) {
        var _this = _super.call(this) || this;
        _this.params = params;
        _this.valueChangedListener = function() {
        };
        return _this;
      }
      FloatingFilterTextInputService2.prototype.setupGui = function(parentElement) {
        var _this = this;
        var _a;
        this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField((_a = this.params) === null || _a === void 0 ? void 0 : _a.config));
        var eInput = this.eFloatingFilterTextInput.getGui();
        parentElement.appendChild(eInput);
        this.addManagedListener(eInput, "input", function(e) {
          return _this.valueChangedListener(e);
        });
        this.addManagedListener(eInput, "keydown", function(e) {
          return _this.valueChangedListener(e);
        });
      };
      FloatingFilterTextInputService2.prototype.setEditable = function(editable) {
        this.eFloatingFilterTextInput.setDisabled(!editable);
      };
      FloatingFilterTextInputService2.prototype.setAutoComplete = function(autoComplete) {
        this.eFloatingFilterTextInput.setAutoComplete(autoComplete);
      };
      FloatingFilterTextInputService2.prototype.getValue = function() {
        return this.eFloatingFilterTextInput.getValue();
      };
      FloatingFilterTextInputService2.prototype.setValue = function(value, silent) {
        this.eFloatingFilterTextInput.setValue(value, silent);
      };
      FloatingFilterTextInputService2.prototype.setValueChangedListener = function(listener) {
        this.valueChangedListener = listener;
      };
      FloatingFilterTextInputService2.prototype.setParams = function(params) {
        this.setAriaLabel(params.ariaLabel);
        if (params.autoComplete !== void 0) {
          this.setAutoComplete(params.autoComplete);
        }
      };
      FloatingFilterTextInputService2.prototype.setAriaLabel = function(ariaLabel) {
        this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);
      };
      return FloatingFilterTextInputService2;
    }(BeanStub);
    TextInputFloatingFilter = /** @class */
    function(_super) {
      __extends$2E(TextInputFloatingFilter2, _super);
      function TextInputFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TextInputFloatingFilter2.prototype.postConstruct = function() {
        this.setTemplate(
          /* html */
          '\n            <div class="ag-floating-filter-input" role="presentation" ref="eFloatingFilterInputContainer"></div>\n        '
        );
      };
      TextInputFloatingFilter2.prototype.getDefaultDebounceMs = function() {
        return 500;
      };
      TextInputFloatingFilter2.prototype.onParentModelChanged = function(model, event) {
        if (this.isEventFromFloatingFilter(event) || this.isEventFromDataChange(event)) {
          return;
        }
        this.setLastTypeFromModel(model);
        this.setEditable(this.canWeEditAfterModelFromParentFilter(model));
        this.floatingFilterInputService.setValue(this.getFilterModelFormatter().getModelAsString(model));
      };
      TextInputFloatingFilter2.prototype.init = function(params) {
        this.setupFloatingFilterInputService(params);
        _super.prototype.init.call(this, params);
        this.setTextInputParams(params);
      };
      TextInputFloatingFilter2.prototype.setupFloatingFilterInputService = function(params) {
        this.floatingFilterInputService = this.createFloatingFilterInputService(params);
        this.floatingFilterInputService.setupGui(this.eFloatingFilterInputContainer);
      };
      TextInputFloatingFilter2.prototype.setTextInputParams = function(params) {
        var _a;
        this.params = params;
        var autoComplete = (_a = params.browserAutoComplete) !== null && _a !== void 0 ? _a : false;
        this.floatingFilterInputService.setParams({
          ariaLabel: this.getAriaLabel(params),
          autoComplete
        });
        this.applyActive = ProvidedFilter.isUseApplyButton(this.params.filterParams);
        if (!this.isReadOnly()) {
          var debounceMs = ProvidedFilter.getDebounceMs(this.params.filterParams, this.getDefaultDebounceMs());
          var toDebounce = debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
          this.floatingFilterInputService.setValueChangedListener(toDebounce);
        }
      };
      TextInputFloatingFilter2.prototype.onParamsUpdated = function(params) {
        _super.prototype.onParamsUpdated.call(this, params);
        this.setTextInputParams(params);
      };
      TextInputFloatingFilter2.prototype.recreateFloatingFilterInputService = function(params) {
        var value = this.floatingFilterInputService.getValue();
        clearElement(this.eFloatingFilterInputContainer);
        this.destroyBean(this.floatingFilterInputService);
        this.setupFloatingFilterInputService(params);
        this.floatingFilterInputService.setValue(value, true);
      };
      TextInputFloatingFilter2.prototype.getAriaLabel = function(params) {
        var displayName = this.columnModel.getDisplayNameForColumn(params.column, "header", true);
        var translate = this.localeService.getLocaleTextFunc();
        return displayName + " " + translate("ariaFilterInput", "Filter Input");
      };
      TextInputFloatingFilter2.prototype.syncUpWithParentFilter = function(e) {
        var _this = this;
        var isEnterKey = e.key === KeyCode.ENTER;
        if (this.applyActive && !isEnterKey) {
          return;
        }
        var value = this.floatingFilterInputService.getValue();
        if (this.params.filterParams.trimInput) {
          value = TextFilter.trimInput(value);
          this.floatingFilterInputService.setValue(value, true);
        }
        this.params.parentFilterInstance(function(filterInstance) {
          if (filterInstance) {
            filterInstance.onFloatingFilterChanged(_this.getLastType() || null, value || null);
          }
        });
      };
      TextInputFloatingFilter2.prototype.setEditable = function(editable) {
        this.floatingFilterInputService.setEditable(editable);
      };
      __decorate$2k([
        Autowired("columnModel")
      ], TextInputFloatingFilter2.prototype, "columnModel", void 0);
      __decorate$2k([
        RefSelector("eFloatingFilterInputContainer")
      ], TextInputFloatingFilter2.prototype, "eFloatingFilterInputContainer", void 0);
      __decorate$2k([
        PostConstruct
      ], TextInputFloatingFilter2.prototype, "postConstruct", null);
      return TextInputFloatingFilter2;
    }(SimpleFloatingFilter);
    __extends$2D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    FloatingFilterNumberInputService = /** @class */
    function(_super) {
      __extends$2D(FloatingFilterNumberInputService2, _super);
      function FloatingFilterNumberInputService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueChangedListener = function() {
        };
        _this.numberInputActive = true;
        return _this;
      }
      FloatingFilterNumberInputService2.prototype.setupGui = function(parentElement) {
        var _this = this;
        this.eFloatingFilterNumberInput = this.createManagedBean(new AgInputNumberField());
        this.eFloatingFilterTextInput = this.createManagedBean(new AgInputTextField());
        this.eFloatingFilterTextInput.setDisabled(true);
        var eNumberInput = this.eFloatingFilterNumberInput.getGui();
        var eTextInput = this.eFloatingFilterTextInput.getGui();
        parentElement.appendChild(eNumberInput);
        parentElement.appendChild(eTextInput);
        this.setupListeners(eNumberInput, function(e) {
          return _this.valueChangedListener(e);
        });
        this.setupListeners(eTextInput, function(e) {
          return _this.valueChangedListener(e);
        });
      };
      FloatingFilterNumberInputService2.prototype.setEditable = function(editable) {
        this.numberInputActive = editable;
        this.eFloatingFilterNumberInput.setDisplayed(this.numberInputActive);
        this.eFloatingFilterTextInput.setDisplayed(!this.numberInputActive);
      };
      FloatingFilterNumberInputService2.prototype.setAutoComplete = function(autoComplete) {
        this.eFloatingFilterNumberInput.setAutoComplete(autoComplete);
        this.eFloatingFilterTextInput.setAutoComplete(autoComplete);
      };
      FloatingFilterNumberInputService2.prototype.getValue = function() {
        return this.getActiveInputElement().getValue();
      };
      FloatingFilterNumberInputService2.prototype.setValue = function(value, silent) {
        this.getActiveInputElement().setValue(value, silent);
      };
      FloatingFilterNumberInputService2.prototype.getActiveInputElement = function() {
        return this.numberInputActive ? this.eFloatingFilterNumberInput : this.eFloatingFilterTextInput;
      };
      FloatingFilterNumberInputService2.prototype.setValueChangedListener = function(listener) {
        this.valueChangedListener = listener;
      };
      FloatingFilterNumberInputService2.prototype.setupListeners = function(element, listener) {
        this.addManagedListener(element, "input", listener);
        this.addManagedListener(element, "keydown", listener);
      };
      FloatingFilterNumberInputService2.prototype.setParams = function(params) {
        this.setAriaLabel(params.ariaLabel);
        if (params.autoComplete !== void 0) {
          this.setAutoComplete(params.autoComplete);
        }
      };
      FloatingFilterNumberInputService2.prototype.setAriaLabel = function(ariaLabel) {
        this.eFloatingFilterNumberInput.setInputAriaLabel(ariaLabel);
        this.eFloatingFilterTextInput.setInputAriaLabel(ariaLabel);
      };
      return FloatingFilterNumberInputService2;
    }(BeanStub);
    NumberFloatingFilter = /** @class */
    function(_super) {
      __extends$2D(NumberFloatingFilter2, _super);
      function NumberFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NumberFloatingFilter2.prototype.init = function(params) {
        var _a;
        _super.prototype.init.call(this, params);
        this.filterModelFormatter = new NumberFilterModelFormatter(this.localeService, this.optionsFactory, (_a = params.filterParams) === null || _a === void 0 ? void 0 : _a.numberFormatter);
      };
      NumberFloatingFilter2.prototype.onParamsUpdated = function(params) {
        var allowedCharPattern = getAllowedCharPattern(params.filterParams);
        if (allowedCharPattern !== this.allowedCharPattern) {
          this.recreateFloatingFilterInputService(params);
        }
        _super.prototype.onParamsUpdated.call(this, params);
        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });
      };
      NumberFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return NumberFilter.DEFAULT_FILTER_OPTIONS;
      };
      NumberFloatingFilter2.prototype.getFilterModelFormatter = function() {
        return this.filterModelFormatter;
      };
      NumberFloatingFilter2.prototype.createFloatingFilterInputService = function(params) {
        this.allowedCharPattern = getAllowedCharPattern(params.filterParams);
        if (this.allowedCharPattern) {
          return this.createManagedBean(new FloatingFilterTextInputService({
            config: { allowedCharPattern: this.allowedCharPattern }
          }));
        }
        return this.createManagedBean(new FloatingFilterNumberInputService());
      };
      return NumberFloatingFilter2;
    }(TextInputFloatingFilter);
    __extends$2C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TextFloatingFilter = /** @class */
    function(_super) {
      __extends$2C(TextFloatingFilter2, _super);
      function TextFloatingFilter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TextFloatingFilter2.prototype.init = function(params) {
        _super.prototype.init.call(this, params);
        this.filterModelFormatter = new TextFilterModelFormatter(this.localeService, this.optionsFactory);
      };
      TextFloatingFilter2.prototype.onParamsUpdated = function(params) {
        _super.prototype.onParamsUpdated.call(this, params);
        this.filterModelFormatter.updateParams({ optionsFactory: this.optionsFactory });
      };
      TextFloatingFilter2.prototype.getDefaultFilterOptions = function() {
        return TextFilter.DEFAULT_FILTER_OPTIONS;
      };
      TextFloatingFilter2.prototype.getFilterModelFormatter = function() {
        return this.filterModelFormatter;
      };
      TextFloatingFilter2.prototype.createFloatingFilterInputService = function() {
        return this.createManagedBean(new FloatingFilterTextInputService());
      };
      return TextFloatingFilter2;
    }(TextInputFloatingFilter);
    TouchListener = /** @class */
    function() {
      function TouchListener2(eElement, preventMouseClick) {
        var _this = this;
        if (preventMouseClick === void 0) {
          preventMouseClick = false;
        }
        this.destroyFuncs = [];
        this.touching = false;
        this.eventService = new EventService();
        this.eElement = eElement;
        this.preventMouseClick = preventMouseClick;
        var startListener = this.onTouchStart.bind(this);
        var moveListener = this.onTouchMove.bind(this);
        var endListener = this.onTouchEnd.bind(this);
        this.eElement.addEventListener("touchstart", startListener, { passive: true });
        this.eElement.addEventListener("touchmove", moveListener, { passive: true });
        this.eElement.addEventListener("touchend", endListener, { passive: false });
        this.destroyFuncs.push(function() {
          _this.eElement.removeEventListener("touchstart", startListener, { passive: true });
          _this.eElement.removeEventListener("touchmove", moveListener, { passive: true });
          _this.eElement.removeEventListener("touchend", endListener, { passive: false });
        });
      }
      TouchListener2.prototype.getActiveTouch = function(touchList) {
        for (var i = 0; i < touchList.length; i++) {
          var matches = touchList[i].identifier === this.touchStart.identifier;
          if (matches) {
            return touchList[i];
          }
        }
        return null;
      };
      TouchListener2.prototype.addEventListener = function(eventType, listener) {
        this.eventService.addEventListener(eventType, listener);
      };
      TouchListener2.prototype.removeEventListener = function(eventType, listener) {
        this.eventService.removeEventListener(eventType, listener);
      };
      TouchListener2.prototype.onTouchStart = function(touchEvent) {
        var _this = this;
        if (this.touching) {
          return;
        }
        this.touchStart = touchEvent.touches[0];
        this.touching = true;
        this.moved = false;
        var touchStartCopy = this.touchStart;
        window.setTimeout(function() {
          var touchesMatch = _this.touchStart === touchStartCopy;
          if (_this.touching && touchesMatch && !_this.moved) {
            _this.moved = true;
            var event_1 = {
              type: TouchListener2.EVENT_LONG_TAP,
              touchStart: _this.touchStart,
              touchEvent
            };
            _this.eventService.dispatchEvent(event_1);
          }
        }, 500);
      };
      TouchListener2.prototype.onTouchMove = function(touchEvent) {
        if (!this.touching) {
          return;
        }
        var touch = this.getActiveTouch(touchEvent.touches);
        if (!touch) {
          return;
        }
        var eventIsFarAway = !areEventsNear(touch, this.touchStart, 4);
        if (eventIsFarAway) {
          this.moved = true;
        }
      };
      TouchListener2.prototype.onTouchEnd = function(touchEvent) {
        if (!this.touching) {
          return;
        }
        if (!this.moved) {
          var event_2 = {
            type: TouchListener2.EVENT_TAP,
            touchStart: this.touchStart
          };
          this.eventService.dispatchEvent(event_2);
          this.checkForDoubleTap();
        }
        if (this.preventMouseClick && touchEvent.cancelable) {
          touchEvent.preventDefault();
        }
        this.touching = false;
      };
      TouchListener2.prototype.checkForDoubleTap = function() {
        var now = (/* @__PURE__ */ new Date()).getTime();
        if (this.lastTapTime && this.lastTapTime > 0) {
          var interval = now - this.lastTapTime;
          if (interval > TouchListener2.DOUBLE_TAP_MILLIS) {
            var event_3 = {
              type: TouchListener2.EVENT_DOUBLE_TAP,
              touchStart: this.touchStart
            };
            this.eventService.dispatchEvent(event_3);
            this.lastTapTime = null;
          } else {
            this.lastTapTime = now;
          }
        } else {
          this.lastTapTime = now;
        }
      };
      TouchListener2.prototype.destroy = function() {
        this.destroyFuncs.forEach(function(func) {
          return func();
        });
      };
      TouchListener2.EVENT_TAP = "tap";
      TouchListener2.EVENT_DOUBLE_TAP = "doubleTap";
      TouchListener2.EVENT_LONG_TAP = "longTap";
      TouchListener2.DOUBLE_TAP_MILLIS = 500;
      return TouchListener2;
    }();
    __extends$2B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SortIndicatorComp = /** @class */
    function(_super) {
      __extends$2B(SortIndicatorComp2, _super);
      function SortIndicatorComp2(skipTemplate) {
        var _this = _super.call(this) || this;
        if (!skipTemplate) {
          _this.setTemplate(SortIndicatorComp2.TEMPLATE);
        }
        return _this;
      }
      SortIndicatorComp2.prototype.attachCustomElements = function(eSortOrder, eSortAsc, eSortDesc, eSortMixed, eSortNone) {
        this.eSortOrder = eSortOrder;
        this.eSortAsc = eSortAsc;
        this.eSortDesc = eSortDesc;
        this.eSortMixed = eSortMixed;
        this.eSortNone = eSortNone;
      };
      SortIndicatorComp2.prototype.setupSort = function(column, suppressOrder) {
        var _this = this;
        if (suppressOrder === void 0) {
          suppressOrder = false;
        }
        this.column = column;
        this.suppressOrder = suppressOrder;
        this.setupMultiSortIndicator();
        var canSort = !!this.column.getColDef().sortable;
        if (!canSort) {
          return;
        }
        this.addInIcon("sortAscending", this.eSortAsc, column);
        this.addInIcon("sortDescending", this.eSortDesc, column);
        this.addInIcon("sortUnSort", this.eSortNone, column);
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, function() {
          return _this.onSortChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
          return _this.onSortChanged();
        });
        this.onSortChanged();
      };
      SortIndicatorComp2.prototype.addInIcon = function(iconName, eParent, column) {
        if (eParent == null) {
          return;
        }
        var eIcon = createIconNoSpan(iconName, this.gridOptionsService, column);
        if (eIcon) {
          eParent.appendChild(eIcon);
        }
      };
      SortIndicatorComp2.prototype.onSortChanged = function() {
        this.updateIcons();
        if (!this.suppressOrder) {
          this.updateSortOrder();
        }
      };
      SortIndicatorComp2.prototype.updateIcons = function() {
        var sortDirection = this.sortController.getDisplaySortForColumn(this.column);
        if (this.eSortAsc) {
          var isAscending = sortDirection === "asc";
          setDisplayed(this.eSortAsc, isAscending, { skipAriaHidden: true });
        }
        if (this.eSortDesc) {
          var isDescending = sortDirection === "desc";
          setDisplayed(this.eSortDesc, isDescending, { skipAriaHidden: true });
        }
        if (this.eSortNone) {
          var alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gridOptionsService.is("unSortIcon");
          var isNone = sortDirection === null || sortDirection === void 0;
          setDisplayed(this.eSortNone, !alwaysHideNoSort && isNone, { skipAriaHidden: true });
        }
      };
      SortIndicatorComp2.prototype.setupMultiSortIndicator = function() {
        var _this = this;
        this.addInIcon("sortUnSort", this.eSortMixed, this.column);
        var isColumnShowingRowGroup = this.column.getColDef().showRowGroup;
        var areGroupsCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();
        if (areGroupsCoupled && isColumnShowingRowGroup) {
          this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, function() {
            return _this.updateMultiSortIndicator();
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
            return _this.updateMultiSortIndicator();
          });
          this.updateMultiSortIndicator();
        }
      };
      SortIndicatorComp2.prototype.updateMultiSortIndicator = function() {
        if (this.eSortMixed) {
          var isMixedSort = this.sortController.getDisplaySortForColumn(this.column) === "mixed";
          setDisplayed(this.eSortMixed, isMixedSort, { skipAriaHidden: true });
        }
      };
      SortIndicatorComp2.prototype.updateSortOrder = function() {
        var _this = this;
        var _a;
        if (!this.eSortOrder) {
          return;
        }
        var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
        var indexThisCol = (_a = this.sortController.getDisplaySortIndexForColumn(this.column)) !== null && _a !== void 0 ? _a : -1;
        var moreThanOneColSorting = allColumnsWithSorting.some(function(col) {
          var _a2;
          return (_a2 = _this.sortController.getDisplaySortIndexForColumn(col)) !== null && _a2 !== void 0 ? _a2 : -1 >= 1;
        });
        var showIndex = indexThisCol >= 0 && moreThanOneColSorting;
        setDisplayed(this.eSortOrder, showIndex, { skipAriaHidden: true });
        if (indexThisCol >= 0) {
          this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
        } else {
          clearElement(this.eSortOrder);
        }
      };
      SortIndicatorComp2.TEMPLATE = '<span class="ag-sort-indicator-container">\n            <span ref="eSortOrder" class="ag-sort-indicator-icon ag-sort-order ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortAsc" class="ag-sort-indicator-icon ag-sort-ascending-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortDesc" class="ag-sort-indicator-icon ag-sort-descending-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortMixed" class="ag-sort-indicator-icon ag-sort-mixed-icon ag-hidden" aria-hidden="true"></span>\n            <span ref="eSortNone" class="ag-sort-indicator-icon ag-sort-none-icon ag-hidden" aria-hidden="true"></span>\n        </span>';
      __decorate$2j([
        RefSelector("eSortOrder")
      ], SortIndicatorComp2.prototype, "eSortOrder", void 0);
      __decorate$2j([
        RefSelector("eSortAsc")
      ], SortIndicatorComp2.prototype, "eSortAsc", void 0);
      __decorate$2j([
        RefSelector("eSortDesc")
      ], SortIndicatorComp2.prototype, "eSortDesc", void 0);
      __decorate$2j([
        RefSelector("eSortMixed")
      ], SortIndicatorComp2.prototype, "eSortMixed", void 0);
      __decorate$2j([
        RefSelector("eSortNone")
      ], SortIndicatorComp2.prototype, "eSortNone", void 0);
      __decorate$2j([
        Autowired("columnModel")
      ], SortIndicatorComp2.prototype, "columnModel", void 0);
      __decorate$2j([
        Autowired("sortController")
      ], SortIndicatorComp2.prototype, "sortController", void 0);
      return SortIndicatorComp2;
    }(Component);
    __extends$2A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderComp = /** @class */
    function(_super) {
      __extends$2A(HeaderComp2, _super);
      function HeaderComp2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastMovingChanged = 0;
        return _this;
      }
      HeaderComp2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      HeaderComp2.prototype.refresh = function(params) {
        this.params = params;
        if (this.workOutTemplate() != this.currentTemplate) {
          return false;
        }
        if (this.workOutShowMenu() != this.currentShowMenu) {
          return false;
        }
        if (this.workOutSort() != this.currentSort) {
          return false;
        }
        this.setDisplayName(params);
        return true;
      };
      HeaderComp2.prototype.workOutTemplate = function() {
        var template = firstExistingValue(this.params.template, HeaderComp2.TEMPLATE);
        template = template && template.trim ? template.trim() : template;
        return template;
      };
      HeaderComp2.prototype.init = function(params) {
        this.params = params;
        this.currentTemplate = this.workOutTemplate();
        this.setTemplate(this.currentTemplate);
        this.setupTap();
        this.setupIcons(params.column);
        this.setMenu();
        this.setupSort();
        this.setupFilterIcon();
        this.setDisplayName(params);
      };
      HeaderComp2.prototype.setDisplayName = function(params) {
        if (this.currentDisplayName != params.displayName) {
          this.currentDisplayName = params.displayName;
          var displayNameSanitised = escapeString(this.currentDisplayName);
          if (this.eText) {
            this.eText.innerHTML = displayNameSanitised;
          }
        }
      };
      HeaderComp2.prototype.setupIcons = function(column) {
        this.addInIcon("menu", this.eMenu, column);
        this.addInIcon("filter", this.eFilter, column);
      };
      HeaderComp2.prototype.addInIcon = function(iconName, eParent, column) {
        if (eParent == null) {
          return;
        }
        var eIcon = createIconNoSpan(iconName, this.gridOptionsService, column);
        if (eIcon) {
          eParent.appendChild(eIcon);
        }
      };
      HeaderComp2.prototype.setupTap = function() {
        var _this = this;
        var gridOptionsService = this.gridOptionsService;
        if (gridOptionsService.is("suppressTouch")) {
          return;
        }
        var touchListener = new TouchListener(this.getGui(), true);
        var suppressMenuHide = gridOptionsService.is("suppressMenuHide");
        var tapMenuButton = suppressMenuHide && exists(this.eMenu);
        var menuTouchListener = tapMenuButton ? new TouchListener(this.eMenu, true) : touchListener;
        if (this.params.enableMenu) {
          var eventType = tapMenuButton ? "EVENT_TAP" : "EVENT_LONG_TAP";
          var showMenuFn = function(event) {
            gridOptionsService.api.showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
          };
          this.addManagedListener(menuTouchListener, TouchListener[eventType], showMenuFn);
        }
        if (this.params.enableSorting) {
          var tapListener = function(event) {
            var target = event.touchStart.target;
            if (suppressMenuHide && _this.eMenu.contains(target)) {
              return;
            }
            _this.sortController.progressSort(_this.params.column, false, "uiColumnSorted");
          };
          this.addManagedListener(touchListener, TouchListener.EVENT_TAP, tapListener);
        }
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
        if (tapMenuButton) {
          this.addDestroyFunc(function() {
            return menuTouchListener.destroy();
          });
        }
      };
      HeaderComp2.prototype.workOutShowMenu = function() {
        var menuHides = !this.gridOptionsService.is("suppressMenuHide");
        var onIpadAndMenuHides = isIOSUserAgent() && menuHides;
        var showMenu = this.params.enableMenu && !onIpadAndMenuHides;
        return showMenu;
      };
      HeaderComp2.prototype.setMenu = function() {
        var _this = this;
        if (!this.eMenu) {
          return;
        }
        this.currentShowMenu = this.workOutShowMenu();
        if (!this.currentShowMenu) {
          removeFromParent(this.eMenu);
          return;
        }
        var suppressMenuHide = this.gridOptionsService.is("suppressMenuHide");
        this.addManagedListener(this.eMenu, "click", function() {
          return _this.showMenu(_this.eMenu);
        });
        this.eMenu.classList.toggle("ag-header-menu-always-show", suppressMenuHide);
      };
      HeaderComp2.prototype.showMenu = function(eventSource) {
        if (!eventSource) {
          eventSource = this.eMenu;
        }
        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource, "columnMenu");
      };
      HeaderComp2.prototype.workOutSort = function() {
        return this.params.enableSorting;
      };
      HeaderComp2.prototype.setupSort = function() {
        var _this = this;
        this.currentSort = this.params.enableSorting;
        if (!this.eSortIndicator) {
          this.eSortIndicator = this.context.createBean(new SortIndicatorComp(true));
          this.eSortIndicator.attachCustomElements(this.eSortOrder, this.eSortAsc, this.eSortDesc, this.eSortMixed, this.eSortNone);
        }
        this.eSortIndicator.setupSort(this.params.column);
        if (!this.currentSort) {
          return;
        }
        var sortUsingCtrl = this.gridOptionsService.get("multiSortKey") === "ctrl";
        this.addManagedListener(this.params.column, Column.EVENT_MOVING_CHANGED, function() {
          _this.lastMovingChanged = (/* @__PURE__ */ new Date()).getTime();
        });
        if (this.eLabel) {
          this.addManagedListener(this.eLabel, "click", function(event) {
            var moving = _this.params.column.isMoving();
            var nowTime = (/* @__PURE__ */ new Date()).getTime();
            var movedRecently = nowTime - _this.lastMovingChanged < 50;
            var columnMoving = moving || movedRecently;
            if (!columnMoving) {
              var multiSort = sortUsingCtrl ? event.ctrlKey || event.metaKey : event.shiftKey;
              _this.params.progressSort(multiSort);
            }
          });
        }
        var onSortingChanged = function() {
          _this.addOrRemoveCssClass("ag-header-cell-sorted-asc", _this.params.column.isSortAscending());
          _this.addOrRemoveCssClass("ag-header-cell-sorted-desc", _this.params.column.isSortDescending());
          _this.addOrRemoveCssClass("ag-header-cell-sorted-none", _this.params.column.isSortNone());
          if (_this.params.column.getColDef().showRowGroup) {
            var sourceColumns = _this.columnModel.getSourceColumnsForGroupColumn(_this.params.column);
            var sortDirectionsMatch = sourceColumns === null || sourceColumns === void 0 ? void 0 : sourceColumns.every(function(sourceCol) {
              return _this.params.column.getSort() == sourceCol.getSort();
            });
            var isMultiSorting = !sortDirectionsMatch;
            _this.addOrRemoveCssClass("ag-header-cell-sorted-mixed", isMultiSorting);
          }
        };
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, onSortingChanged);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, onSortingChanged);
      };
      HeaderComp2.prototype.setupFilterIcon = function() {
        if (!this.eFilter) {
          return;
        }
        this.addManagedListener(this.params.column, Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.onFilterChanged();
      };
      HeaderComp2.prototype.onFilterChanged = function() {
        var filterPresent = this.params.column.isFilterActive();
        setDisplayed(this.eFilter, filterPresent, { skipAriaHidden: true });
      };
      HeaderComp2.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">\n            <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>\n            <div ref="eLabel" class="ag-header-cell-label" role="presentation">\n                <span ref="eText" class="ag-header-cell-text"></span>\n                <span ref="eFilter" class="ag-header-icon ag-header-label-icon ag-filter-icon" aria-hidden="true"></span>\n                <ag-sort-indicator ref="eSortIndicator"></ag-sort-indicator>\n            </div>\n        </div>';
      __decorate$2i([
        Autowired("sortController")
      ], HeaderComp2.prototype, "sortController", void 0);
      __decorate$2i([
        Autowired("menuFactory")
      ], HeaderComp2.prototype, "menuFactory", void 0);
      __decorate$2i([
        Autowired("columnModel")
      ], HeaderComp2.prototype, "columnModel", void 0);
      __decorate$2i([
        RefSelector("eFilter")
      ], HeaderComp2.prototype, "eFilter", void 0);
      __decorate$2i([
        RefSelector("eSortIndicator")
      ], HeaderComp2.prototype, "eSortIndicator", void 0);
      __decorate$2i([
        RefSelector("eMenu")
      ], HeaderComp2.prototype, "eMenu", void 0);
      __decorate$2i([
        RefSelector("eLabel")
      ], HeaderComp2.prototype, "eLabel", void 0);
      __decorate$2i([
        RefSelector("eText")
      ], HeaderComp2.prototype, "eText", void 0);
      __decorate$2i([
        RefSelector("eSortOrder")
      ], HeaderComp2.prototype, "eSortOrder", void 0);
      __decorate$2i([
        RefSelector("eSortAsc")
      ], HeaderComp2.prototype, "eSortAsc", void 0);
      __decorate$2i([
        RefSelector("eSortDesc")
      ], HeaderComp2.prototype, "eSortDesc", void 0);
      __decorate$2i([
        RefSelector("eSortMixed")
      ], HeaderComp2.prototype, "eSortMixed", void 0);
      __decorate$2i([
        RefSelector("eSortNone")
      ], HeaderComp2.prototype, "eSortNone", void 0);
      return HeaderComp2;
    }(Component);
    __extends$2z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderGroupComp = /** @class */
    function(_super) {
      __extends$2z(HeaderGroupComp2, _super);
      function HeaderGroupComp2() {
        return _super.call(this, HeaderGroupComp2.TEMPLATE) || this;
      }
      HeaderGroupComp2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      HeaderGroupComp2.prototype.init = function(params) {
        this.params = params;
        this.checkWarnings();
        this.setupLabel();
        this.addGroupExpandIcon();
        this.setupExpandIcons();
      };
      HeaderGroupComp2.prototype.checkWarnings = function() {
        var paramsAny = this.params;
        if (paramsAny.template) {
          var message_1 = "AG Grid: A template was provided for Header Group Comp - templates are only supported for Header Comps (not groups)";
          doOnce(function() {
            return console.warn(message_1);
          }, "HeaderGroupComp.templateNotSupported");
        }
      };
      HeaderGroupComp2.prototype.setupExpandIcons = function() {
        var _this = this;
        this.addInIcon("columnGroupOpened", "agOpened");
        this.addInIcon("columnGroupClosed", "agClosed");
        var expandAction = function(event) {
          if (isStopPropagationForAgGrid(event)) {
            return;
          }
          var newExpandedValue = !_this.params.columnGroup.isExpanded();
          _this.columnModel.setColumnGroupOpened(_this.params.columnGroup.getProvidedColumnGroup(), newExpandedValue, "uiColumnExpanded");
        };
        this.addTouchAndClickListeners(this.eCloseIcon, expandAction);
        this.addTouchAndClickListeners(this.eOpenIcon, expandAction);
        var stopPropagationAction = function(event) {
          stopPropagationForAgGrid(event);
        };
        this.addManagedListener(this.eCloseIcon, "dblclick", stopPropagationAction);
        this.addManagedListener(this.eOpenIcon, "dblclick", stopPropagationAction);
        this.addManagedListener(this.getGui(), "dblclick", expandAction);
        this.updateIconVisibility();
        var providedColumnGroup = this.params.columnGroup.getProvidedColumnGroup();
        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
        this.addManagedListener(providedColumnGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
      };
      HeaderGroupComp2.prototype.addTouchAndClickListeners = function(eElement, action) {
        var touchListener = new TouchListener(eElement, true);
        this.addManagedListener(touchListener, TouchListener.EVENT_TAP, action);
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
        this.addManagedListener(eElement, "click", action);
      };
      HeaderGroupComp2.prototype.updateIconVisibility = function() {
        var columnGroup = this.params.columnGroup;
        if (columnGroup.isExpandable()) {
          var expanded = this.params.columnGroup.isExpanded();
          setDisplayed(this.eOpenIcon, expanded);
          setDisplayed(this.eCloseIcon, !expanded);
        } else {
          setDisplayed(this.eOpenIcon, false);
          setDisplayed(this.eCloseIcon, false);
        }
      };
      HeaderGroupComp2.prototype.addInIcon = function(iconName, refName) {
        var eIcon = createIconNoSpan(iconName, this.gridOptionsService, null);
        if (eIcon) {
          this.getRefElement(refName).appendChild(eIcon);
        }
      };
      HeaderGroupComp2.prototype.addGroupExpandIcon = function() {
        if (!this.params.columnGroup.isExpandable()) {
          setDisplayed(this.eOpenIcon, false);
          setDisplayed(this.eCloseIcon, false);
          return;
        }
      };
      HeaderGroupComp2.prototype.setupLabel = function() {
        var _a;
        var _b = this.params, displayName = _b.displayName, columnGroup = _b.columnGroup;
        if (exists(displayName)) {
          var displayNameSanitised = escapeString(displayName);
          this.getRefElement("agLabel").innerHTML = displayNameSanitised;
        }
        this.addOrRemoveCssClass("ag-sticky-label", !((_a = columnGroup.getColGroupDef()) === null || _a === void 0 ? void 0 : _a.suppressStickyLabel));
      };
      HeaderGroupComp2.TEMPLATE = '<div class="ag-header-group-cell-label" ref="agContainer" role="presentation">\n            <span ref="agLabel" class="ag-header-group-text" role="presentation"></span>\n            <span ref="agOpened" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded"></span>\n            <span ref="agClosed" class="ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed"></span>\n        </div>';
      __decorate$2h([
        Autowired("columnModel")
      ], HeaderGroupComp2.prototype, "columnModel", void 0);
      __decorate$2h([
        RefSelector("agOpened")
      ], HeaderGroupComp2.prototype, "eOpenIcon", void 0);
      __decorate$2h([
        RefSelector("agClosed")
      ], HeaderGroupComp2.prototype, "eCloseIcon", void 0);
      return HeaderGroupComp2;
    }(Component);
    __extends$2y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    PopupComponent = /** @class */
    function(_super) {
      __extends$2y(PopupComponent2, _super);
      function PopupComponent2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PopupComponent2.prototype.isPopup = function() {
        return true;
      };
      PopupComponent2.prototype.setParentComponent = function(container) {
        container.addCssClass("ag-has-popup");
        _super.prototype.setParentComponent.call(this, container);
      };
      PopupComponent2.prototype.destroy = function() {
        var parentComp = this.parentComponent;
        var hasParent = parentComp && parentComp.isAlive();
        if (hasParent) {
          parentComp.getGui().classList.remove("ag-has-popup");
        }
        _super.prototype.destroy.call(this);
      };
      return PopupComponent2;
    }(Component);
    __extends$2x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    LargeTextCellEditor = /** @class */
    function(_super) {
      __extends$2x(LargeTextCellEditor2, _super);
      function LargeTextCellEditor2() {
        return _super.call(this, LargeTextCellEditor2.TEMPLATE) || this;
      }
      LargeTextCellEditor2.prototype.init = function(params) {
        this.params = params;
        this.focusAfterAttached = params.cellStartedEdit;
        this.eTextArea.setMaxLength(params.maxLength || 200).setCols(params.cols || 60).setRows(params.rows || 10);
        if (exists(params.value, true)) {
          this.eTextArea.setValue(params.value.toString(), true);
        }
        this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
        this.activateTabIndex();
      };
      LargeTextCellEditor2.prototype.onKeyDown = function(event) {
        var key = event.key;
        if (key === KeyCode.LEFT || key === KeyCode.UP || key === KeyCode.RIGHT || key === KeyCode.DOWN || event.shiftKey && key === KeyCode.ENTER) {
          event.stopPropagation();
        }
      };
      LargeTextCellEditor2.prototype.afterGuiAttached = function() {
        var translate = this.localeService.getLocaleTextFunc();
        this.eTextArea.setInputAriaLabel(translate("ariaInputEditor", "Input Editor"));
        if (this.focusAfterAttached) {
          this.eTextArea.getFocusableElement().focus();
        }
      };
      LargeTextCellEditor2.prototype.getValue = function() {
        var value = this.eTextArea.getValue();
        if (!exists(value) && !exists(this.params.value)) {
          return this.params.value;
        }
        return this.params.parseValue(value);
      };
      LargeTextCellEditor2.TEMPLATE = '<div class="ag-large-text">\n            <ag-input-text-area ref="eTextArea" class="ag-large-text-input"></ag-input-text-area>\n        </div>';
      __decorate$2g([
        RefSelector("eTextArea")
      ], LargeTextCellEditor2.prototype, "eTextArea", void 0);
      return LargeTextCellEditor2;
    }(PopupComponent);
    __extends$2w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SelectCellEditor = /** @class */
    function(_super) {
      __extends$2w(SelectCellEditor2, _super);
      function SelectCellEditor2() {
        var _this = _super.call(
          this,
          /* html */
          '<div class="ag-cell-edit-wrapper">\n                <ag-select class="ag-cell-editor" ref="eSelect"></ag-select>\n            </div>'
        ) || this;
        _this.startedByEnter = false;
        return _this;
      }
      SelectCellEditor2.prototype.init = function(params) {
        this.focusAfterAttached = params.cellStartedEdit;
        var _a = this, eSelect = _a.eSelect, valueFormatterService = _a.valueFormatterService, gridOptionsService = _a.gridOptionsService;
        var values2 = params.values, value = params.value, eventKey = params.eventKey;
        if (missing(values2)) {
          console.warn("AG Grid: no values found for select cellEditor");
          return;
        }
        this.startedByEnter = eventKey != null ? eventKey === KeyCode.ENTER : false;
        var hasValue = false;
        values2.forEach(function(currentValue) {
          var option = { value: currentValue };
          var valueFormatted = valueFormatterService.formatValue(params.column, null, currentValue);
          var valueFormattedExits = valueFormatted !== null && valueFormatted !== void 0;
          option.text = valueFormattedExits ? valueFormatted : currentValue;
          eSelect.addOption(option);
          hasValue = hasValue || value === currentValue;
        });
        if (hasValue) {
          eSelect.setValue(params.value, true);
        } else if (params.values.length) {
          eSelect.setValue(params.values[0], true);
        }
        var valueListGap = params.valueListGap, valueListMaxWidth = params.valueListMaxWidth, valueListMaxHeight = params.valueListMaxHeight;
        if (valueListGap != null) {
          eSelect.setPickerGap(valueListGap);
        }
        if (valueListMaxHeight != null) {
          eSelect.setPickerMaxHeight(valueListMaxHeight);
        }
        if (valueListMaxWidth != null) {
          eSelect.setPickerMaxWidth(valueListMaxWidth);
        }
        if (gridOptionsService.get("editType") !== "fullRow") {
          this.addManagedListener(this.eSelect, AgSelect.EVENT_ITEM_SELECTED, function() {
            return params.stopEditing();
          });
        }
      };
      SelectCellEditor2.prototype.afterGuiAttached = function() {
        var _this = this;
        if (this.focusAfterAttached) {
          this.eSelect.getFocusableElement().focus();
        }
        if (this.startedByEnter) {
          setTimeout(function() {
            if (_this.isAlive()) {
              _this.eSelect.showPicker();
            }
          });
        }
      };
      SelectCellEditor2.prototype.focusIn = function() {
        this.eSelect.getFocusableElement().focus();
      };
      SelectCellEditor2.prototype.getValue = function() {
        return this.eSelect.getValue();
      };
      SelectCellEditor2.prototype.isPopup = function() {
        return false;
      };
      __decorate$2f([
        Autowired("valueFormatterService")
      ], SelectCellEditor2.prototype, "valueFormatterService", void 0);
      __decorate$2f([
        RefSelector("eSelect")
      ], SelectCellEditor2.prototype, "eSelect", void 0);
      return SelectCellEditor2;
    }(PopupComponent);
    __extends$2v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SimpleCellEditor = /** @class */
    function(_super) {
      __extends$2v(SimpleCellEditor2, _super);
      function SimpleCellEditor2(cellEditorInput) {
        var _this = _super.call(
          this,
          /* html */
          '\n            <div class="ag-cell-edit-wrapper">\n                ' + cellEditorInput.getTemplate() + "\n            </div>"
        ) || this;
        _this.cellEditorInput = cellEditorInput;
        return _this;
      }
      SimpleCellEditor2.prototype.init = function(params) {
        this.params = params;
        var eInput = this.eInput;
        this.cellEditorInput.init(eInput, params);
        var startValue;
        if (params.cellStartedEdit) {
          this.focusAfterAttached = true;
          var eventKey = params.eventKey;
          if (eventKey === KeyCode.BACKSPACE || params.eventKey === KeyCode.DELETE) {
            startValue = "";
          } else if (eventKey && eventKey.length === 1) {
            startValue = eventKey;
          } else {
            startValue = this.cellEditorInput.getStartValue();
            if (eventKey !== KeyCode.F2) {
              this.highlightAllOnFocus = true;
            }
          }
        } else {
          this.focusAfterAttached = false;
          startValue = this.cellEditorInput.getStartValue();
        }
        if (startValue != null) {
          eInput.setStartValue(startValue);
        }
        this.addManagedListener(eInput.getGui(), "keydown", function(event) {
          var key = event.key;
          if (key === KeyCode.PAGE_UP || key === KeyCode.PAGE_DOWN) {
            event.preventDefault();
          }
        });
      };
      SimpleCellEditor2.prototype.afterGuiAttached = function() {
        var _a, _b;
        var translate = this.localeService.getLocaleTextFunc();
        var eInput = this.eInput;
        eInput.setInputAriaLabel(translate("ariaInputEditor", "Input Editor"));
        if (!this.focusAfterAttached) {
          return;
        }
        if (!isBrowserSafari()) {
          eInput.getFocusableElement().focus();
        }
        var inputEl = eInput.getInputElement();
        if (this.highlightAllOnFocus) {
          inputEl.select();
        } else {
          (_b = (_a = this.cellEditorInput).setCaret) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      };
      SimpleCellEditor2.prototype.focusIn = function() {
        var eInput = this.eInput;
        var focusEl = eInput.getFocusableElement();
        var inputEl = eInput.getInputElement();
        focusEl.focus();
        inputEl.select();
      };
      SimpleCellEditor2.prototype.getValue = function() {
        return this.cellEditorInput.getValue();
      };
      SimpleCellEditor2.prototype.isPopup = function() {
        return false;
      };
      __decorate$2e([
        RefSelector("eInput")
      ], SimpleCellEditor2.prototype, "eInput", void 0);
      return SimpleCellEditor2;
    }(PopupComponent);
    __extends$2u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TextCellEditorInput = /** @class */
    function() {
      function TextCellEditorInput2() {
      }
      TextCellEditorInput2.prototype.getTemplate = function() {
        return (
          /* html */
          '<ag-input-text-field class="ag-cell-editor" ref="eInput"></ag-input-text-field>'
        );
      };
      TextCellEditorInput2.prototype.init = function(eInput, params) {
        this.eInput = eInput;
        this.params = params;
        if (params.maxLength != null) {
          eInput.setMaxLength(params.maxLength);
        }
      };
      TextCellEditorInput2.prototype.getValue = function() {
        var value = this.eInput.getValue();
        if (!exists(value) && !exists(this.params.value)) {
          return this.params.value;
        }
        return this.params.parseValue(value);
      };
      TextCellEditorInput2.prototype.getStartValue = function() {
        var formatValue = this.params.useFormatter || this.params.column.getColDef().refData;
        return formatValue ? this.params.formatValue(this.params.value) : this.params.value;
      };
      TextCellEditorInput2.prototype.setCaret = function() {
        var value = this.eInput.getValue();
        var len = exists(value) && value.length || 0;
        if (len) {
          this.eInput.getInputElement().setSelectionRange(len, len);
        }
      };
      return TextCellEditorInput2;
    }();
    TextCellEditor = /** @class */
    function(_super) {
      __extends$2u(TextCellEditor2, _super);
      function TextCellEditor2() {
        return _super.call(this, new TextCellEditorInput()) || this;
      }
      return TextCellEditor2;
    }(SimpleCellEditor);
    __extends$2t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ARROW_UP = "↑";
    ARROW_DOWN = "↓";
    AnimateShowChangeCellRenderer = /** @class */
    function(_super) {
      __extends$2t(AnimateShowChangeCellRenderer2, _super);
      function AnimateShowChangeCellRenderer2() {
        var _this = _super.call(this, AnimateShowChangeCellRenderer2.TEMPLATE) || this;
        _this.refreshCount = 0;
        return _this;
      }
      AnimateShowChangeCellRenderer2.prototype.init = function(params) {
        this.eValue = this.queryForHtmlElement(".ag-value-change-value");
        this.eDelta = this.queryForHtmlElement(".ag-value-change-delta");
        this.refresh(params);
      };
      AnimateShowChangeCellRenderer2.prototype.showDelta = function(params, delta) {
        var absDelta = Math.abs(delta);
        var valueFormatted = params.formatValue(absDelta);
        var valueToUse = exists(valueFormatted) ? valueFormatted : absDelta;
        var deltaUp = delta >= 0;
        if (deltaUp) {
          this.eDelta.innerHTML = ARROW_UP + valueToUse;
        } else {
          this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
        }
        this.eDelta.classList.toggle("ag-value-change-delta-up", deltaUp);
        this.eDelta.classList.toggle("ag-value-change-delta-down", !deltaUp);
      };
      AnimateShowChangeCellRenderer2.prototype.setTimerToRemoveDelta = function() {
        var _this = this;
        this.refreshCount++;
        var refreshCountCopy = this.refreshCount;
        window.setTimeout(function() {
          if (refreshCountCopy === _this.refreshCount) {
            _this.hideDeltaValue();
          }
        }, 2e3);
      };
      AnimateShowChangeCellRenderer2.prototype.hideDeltaValue = function() {
        this.eValue.classList.remove("ag-value-change-value-highlight");
        clearElement(this.eDelta);
      };
      AnimateShowChangeCellRenderer2.prototype.refresh = function(params) {
        var value = params.value;
        if (value === this.lastValue) {
          return false;
        }
        if (exists(params.valueFormatted)) {
          this.eValue.innerHTML = params.valueFormatted;
        } else if (exists(params.value)) {
          this.eValue.innerHTML = value;
        } else {
          clearElement(this.eValue);
        }
        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
          return false;
        }
        if (typeof value === "number" && typeof this.lastValue === "number") {
          var delta = value - this.lastValue;
          this.showDelta(params, delta);
        }
        if (this.lastValue) {
          this.eValue.classList.add("ag-value-change-value-highlight");
        }
        this.setTimerToRemoveDelta();
        this.lastValue = value;
        return true;
      };
      AnimateShowChangeCellRenderer2.TEMPLATE = '<span><span class="ag-value-change-delta"></span><span class="ag-value-change-value"></span></span>';
      __decorate$2d([
        Autowired("filterManager")
      ], AnimateShowChangeCellRenderer2.prototype, "filterManager", void 0);
      return AnimateShowChangeCellRenderer2;
    }(Component);
    __extends$2s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AnimateSlideCellRenderer = /** @class */
    function(_super) {
      __extends$2s(AnimateSlideCellRenderer2, _super);
      function AnimateSlideCellRenderer2() {
        var _this = _super.call(this, AnimateSlideCellRenderer2.TEMPLATE) || this;
        _this.refreshCount = 0;
        _this.eCurrent = _this.queryForHtmlElement(".ag-value-slide-current");
        return _this;
      }
      AnimateSlideCellRenderer2.prototype.init = function(params) {
        this.refresh(params);
      };
      AnimateSlideCellRenderer2.prototype.addSlideAnimation = function() {
        var _this = this;
        this.refreshCount++;
        var refreshCountCopy = this.refreshCount;
        if (this.ePrevious) {
          this.getGui().removeChild(this.ePrevious);
        }
        this.ePrevious = loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
        this.ePrevious.innerHTML = this.eCurrent.innerHTML;
        this.getGui().insertBefore(this.ePrevious, this.eCurrent);
        window.setTimeout(function() {
          if (refreshCountCopy !== _this.refreshCount) {
            return;
          }
          _this.ePrevious.classList.add("ag-value-slide-out-end");
        }, 50);
        window.setTimeout(function() {
          if (refreshCountCopy !== _this.refreshCount) {
            return;
          }
          _this.getGui().removeChild(_this.ePrevious);
          _this.ePrevious = null;
        }, 3e3);
      };
      AnimateSlideCellRenderer2.prototype.refresh = function(params) {
        var value = params.value;
        if (missing(value)) {
          value = "";
        }
        if (value === this.lastValue) {
          return false;
        }
        if (this.filterManager.isSuppressFlashingCellsBecauseFiltering()) {
          return false;
        }
        this.addSlideAnimation();
        this.lastValue = value;
        if (exists(params.valueFormatted)) {
          this.eCurrent.innerHTML = params.valueFormatted;
        } else if (exists(params.value)) {
          this.eCurrent.innerHTML = value;
        } else {
          clearElement(this.eCurrent);
        }
        return true;
      };
      AnimateSlideCellRenderer2.TEMPLATE = '<span>\n            <span class="ag-value-slide-current"></span>\n        </span>';
      __decorate$2c([
        Autowired("filterManager")
      ], AnimateSlideCellRenderer2.prototype, "filterManager", void 0);
      return AnimateSlideCellRenderer2;
    }(Component);
    __assign$g = function() {
      __assign$g = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$g.apply(this, arguments);
    };
    RowNode = /** @class */
    function() {
      function RowNode2(beans) {
        this.rowIndex = null;
        this.key = null;
        this.childrenMapped = {};
        this.displayed = false;
        this.rowTop = null;
        this.oldRowTop = null;
        this.selectable = true;
        this.__objectId = RowNode2.OBJECT_ID_SEQUENCE++;
        this.__autoHeights = {};
        this.alreadyRendered = false;
        this.highlighted = null;
        this.hovered = false;
        this.selected = false;
        this.beans = beans;
      }
      RowNode2.prototype.setData = function(data) {
        this.setDataCommon(data, false);
      };
      RowNode2.prototype.updateData = function(data) {
        this.setDataCommon(data, true);
      };
      RowNode2.prototype.setDataCommon = function(data, update) {
        var oldData = this.data;
        this.data = data;
        this.beans.valueCache.onDataChanged();
        this.updateDataOnDetailNode();
        this.checkRowSelectable();
        this.resetQuickFilterAggregateText();
        var event = this.createDataChangedEvent(data, oldData, update);
        this.dispatchLocalEvent(event);
      };
      RowNode2.prototype.updateDataOnDetailNode = function() {
        if (this.detailNode) {
          this.detailNode.data = this.data;
        }
      };
      RowNode2.prototype.createDataChangedEvent = function(newData, oldData, update) {
        return {
          type: RowNode2.EVENT_DATA_CHANGED,
          node: this,
          oldData,
          newData,
          update
        };
      };
      RowNode2.prototype.createLocalRowEvent = function(type) {
        return {
          type,
          node: this
        };
      };
      RowNode2.prototype.getRowIndexString = function() {
        if (this.rowPinned === "top") {
          return "t-" + this.rowIndex;
        }
        if (this.rowPinned === "bottom") {
          return "b-" + this.rowIndex;
        }
        return this.rowIndex.toString();
      };
      RowNode2.prototype.createDaemonNode = function() {
        var oldNode = new RowNode2(this.beans);
        oldNode.id = this.id;
        oldNode.data = this.data;
        oldNode.__daemon = true;
        oldNode.selected = this.selected;
        oldNode.level = this.level;
        return oldNode;
      };
      RowNode2.prototype.setDataAndId = function(data, id) {
        var oldNode = exists(this.id) ? this.createDaemonNode() : null;
        var oldData = this.data;
        this.data = data;
        this.updateDataOnDetailNode();
        this.setId(id);
        this.checkRowSelectable();
        this.beans.selectionService.syncInRowNode(this, oldNode);
        var event = this.createDataChangedEvent(data, oldData, false);
        this.dispatchLocalEvent(event);
      };
      RowNode2.prototype.checkRowSelectable = function() {
        var isRowSelectableFunc = this.beans.gridOptionsService.get("isRowSelectable");
        this.setRowSelectable(isRowSelectableFunc ? isRowSelectableFunc(this) : true);
      };
      RowNode2.prototype.setRowSelectable = function(newVal) {
        if (this.selectable !== newVal) {
          this.selectable = newVal;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_SELECTABLE_CHANGED));
          }
          var isGroupSelectsChildren = this.beans.gridOptionsService.is("groupSelectsChildren");
          if (isGroupSelectsChildren) {
            var selected = this.calculateSelectedFromChildren();
            this.setSelectedParams({
              newValue: selected !== null && selected !== void 0 ? selected : false,
              source: "selectableChanged"
            });
          }
        }
      };
      RowNode2.prototype.setId = function(id) {
        var getRowIdFunc = this.beans.gridOptionsService.getCallback("getRowId");
        if (getRowIdFunc) {
          if (this.data) {
            var parentKeys = this.getGroupKeys(true);
            this.id = getRowIdFunc({
              data: this.data,
              parentKeys: parentKeys.length > 0 ? parentKeys : void 0,
              level: this.level
            });
            if (this.id !== null && typeof this.id === "string" && this.id.startsWith(RowNode2.ID_PREFIX_ROW_GROUP)) {
              console.error("AG Grid: Row IDs cannot start with " + RowNode2.ID_PREFIX_ROW_GROUP + ", this is a reserved prefix for AG Grid's row grouping feature.");
            }
            if (this.id !== null && typeof this.id !== "string") {
              this.id = "" + this.id;
            }
          } else {
            this.id = void 0;
          }
        } else {
          this.id = id;
        }
      };
      RowNode2.prototype.getGroupKeys = function(excludeSelf) {
        if (excludeSelf === void 0) {
          excludeSelf = false;
        }
        var keys2 = [];
        var pointer = this;
        if (excludeSelf) {
          pointer = pointer.parent;
        }
        while (pointer && pointer.level >= 0) {
          keys2.push(pointer.key);
          pointer = pointer.parent;
        }
        keys2.reverse();
        return keys2;
      };
      RowNode2.prototype.isPixelInRange = function(pixel) {
        if (!exists(this.rowTop) || !exists(this.rowHeight)) {
          return false;
        }
        return pixel >= this.rowTop && pixel < this.rowTop + this.rowHeight;
      };
      RowNode2.prototype.setFirstChild = function(firstChild) {
        if (this.firstChild === firstChild) {
          return;
        }
        this.firstChild = firstChild;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_FIRST_CHILD_CHANGED));
        }
      };
      RowNode2.prototype.setLastChild = function(lastChild) {
        if (this.lastChild === lastChild) {
          return;
        }
        this.lastChild = lastChild;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_LAST_CHILD_CHANGED));
        }
      };
      RowNode2.prototype.setChildIndex = function(childIndex) {
        if (this.childIndex === childIndex) {
          return;
        }
        this.childIndex = childIndex;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_CHILD_INDEX_CHANGED));
        }
      };
      RowNode2.prototype.setRowTop = function(rowTop) {
        this.oldRowTop = this.rowTop;
        if (this.rowTop === rowTop) {
          return;
        }
        this.rowTop = rowTop;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_TOP_CHANGED));
        }
        this.setDisplayed(rowTop !== null);
      };
      RowNode2.prototype.clearRowTopAndRowIndex = function() {
        this.oldRowTop = null;
        this.setRowTop(null);
        this.setRowIndex(null);
      };
      RowNode2.prototype.setDisplayed = function(displayed) {
        if (this.displayed === displayed) {
          return;
        }
        this.displayed = displayed;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DISPLAYED_CHANGED));
        }
      };
      RowNode2.prototype.setDragging = function(dragging) {
        if (this.dragging === dragging) {
          return;
        }
        this.dragging = dragging;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_DRAGGING_CHANGED));
        }
      };
      RowNode2.prototype.setHighlighted = function(highlighted) {
        if (highlighted === this.highlighted) {
          return;
        }
        this.highlighted = highlighted;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HIGHLIGHT_CHANGED));
        }
      };
      RowNode2.prototype.setHovered = function(hovered) {
        if (this.hovered === hovered) {
          return;
        }
        this.hovered = hovered;
      };
      RowNode2.prototype.isHovered = function() {
        return this.hovered;
      };
      RowNode2.prototype.setAllChildrenCount = function(allChildrenCount) {
        if (this.allChildrenCount === allChildrenCount) {
          return;
        }
        this.allChildrenCount = allChildrenCount;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED));
        }
      };
      RowNode2.prototype.setMaster = function(master) {
        if (this.master === master) {
          return;
        }
        if (this.master && !master) {
          this.expanded = false;
        }
        this.master = master;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_MASTER_CHANGED));
        }
      };
      RowNode2.prototype.setGroup = function(group) {
        if (this.group === group) {
          return;
        }
        if (this.group && !group) {
          this.expanded = false;
        }
        this.group = group;
        this.updateHasChildren();
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_GROUP_CHANGED));
        }
      };
      RowNode2.prototype.setRowHeight = function(rowHeight, estimated) {
        if (estimated === void 0) {
          estimated = false;
        }
        this.rowHeight = rowHeight;
        this.rowHeightEstimated = estimated;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HEIGHT_CHANGED));
        }
      };
      RowNode2.prototype.setRowAutoHeight = function(cellHeight, column) {
        if (!this.__autoHeights) {
          this.__autoHeights = {};
        }
        this.__autoHeights[column.getId()] = cellHeight;
        if (cellHeight != null) {
          if (this.checkAutoHeightsDebounced == null) {
            this.checkAutoHeightsDebounced = debounce(this.checkAutoHeights.bind(this), 1);
          }
          this.checkAutoHeightsDebounced();
        }
      };
      RowNode2.prototype.checkAutoHeights = function() {
        var _this = this;
        var notAllPresent = false;
        var nonePresent = true;
        var newRowHeight = 0;
        var autoHeights = this.__autoHeights;
        if (autoHeights == null) {
          return;
        }
        var displayedAutoHeightCols = this.beans.columnModel.getAllDisplayedAutoHeightCols();
        displayedAutoHeightCols.forEach(function(col) {
          var cellHeight = autoHeights[col.getId()];
          if (cellHeight == null) {
            if (_this.beans.columnModel.isColSpanActive()) {
              var activeColsForRow = [];
              switch (col.getPinned()) {
                case "left":
                  activeColsForRow = _this.beans.columnModel.getDisplayedLeftColumnsForRow(_this);
                  break;
                case "right":
                  activeColsForRow = _this.beans.columnModel.getDisplayedRightColumnsForRow(_this);
                  break;
                case null:
                  activeColsForRow = _this.beans.columnModel.getViewportCenterColumnsForRow(_this);
                  break;
              }
              if (activeColsForRow.includes(col)) {
                notAllPresent = true;
                return;
              }
              cellHeight = -1;
            } else {
              notAllPresent = true;
              return;
            }
          } else {
            nonePresent = false;
          }
          if (cellHeight > newRowHeight) {
            newRowHeight = cellHeight;
          }
        });
        if (notAllPresent) {
          return;
        }
        if (nonePresent || newRowHeight < 10) {
          newRowHeight = this.beans.gridOptionsService.getRowHeightForNode(this).height;
        }
        if (newRowHeight == this.rowHeight) {
          return;
        }
        this.setRowHeight(newRowHeight);
        var rowModel = this.beans.rowModel;
        if (rowModel.onRowHeightChangedDebounced) {
          rowModel.onRowHeightChangedDebounced();
        }
      };
      RowNode2.prototype.setRowIndex = function(rowIndex) {
        if (this.rowIndex === rowIndex) {
          return;
        }
        this.rowIndex = rowIndex;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_INDEX_CHANGED));
        }
      };
      RowNode2.prototype.setUiLevel = function(uiLevel) {
        if (this.uiLevel === uiLevel) {
          return;
        }
        this.uiLevel = uiLevel;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_UI_LEVEL_CHANGED));
        }
      };
      RowNode2.prototype.setExpanded = function(expanded, e) {
        if (this.expanded === expanded) {
          return;
        }
        this.expanded = expanded;
        if (this.eventService) {
          this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_EXPANDED_CHANGED));
        }
        var event = Object.assign({}, this.createGlobalRowEvent(Events.EVENT_ROW_GROUP_OPENED), {
          expanded,
          event: e || null
        });
        this.beans.rowNodeEventThrottle.dispatchExpanded(event);
        if (this.sibling) {
          this.beans.rowRenderer.refreshCells({ rowNodes: [this] });
        }
      };
      RowNode2.prototype.createGlobalRowEvent = function(type) {
        return {
          type,
          node: this,
          data: this.data,
          rowIndex: this.rowIndex,
          rowPinned: this.rowPinned,
          context: this.beans.gridOptionsService.context,
          api: this.beans.gridOptionsService.api,
          columnApi: this.beans.gridOptionsService.columnApi
        };
      };
      RowNode2.prototype.dispatchLocalEvent = function(event) {
        if (this.eventService) {
          this.eventService.dispatchEvent(event);
        }
      };
      RowNode2.prototype.setDataValue = function(colKey, newValue, eventSource) {
        var _this = this;
        var getColumnFromKey = function() {
          var _a;
          if (typeof colKey !== "string") {
            return colKey;
          }
          return (_a = _this.beans.columnModel.getGridColumn(colKey)) !== null && _a !== void 0 ? _a : _this.beans.columnModel.getPrimaryColumn(colKey);
        };
        var column = getColumnFromKey();
        var oldValue = this.getValueFromValueService(column);
        if (this.beans.gridOptionsService.is("readOnlyEdit")) {
          this.dispatchEventForSaveValueReadOnly(column, oldValue, newValue, eventSource);
          return false;
        }
        var valueChanged = this.beans.valueService.setValue(this, column, newValue, eventSource);
        this.dispatchCellChangedEvent(column, newValue, oldValue);
        this.checkRowSelectable();
        return valueChanged;
      };
      RowNode2.prototype.getValueFromValueService = function(column) {
        var lockedClosedGroup = this.leafGroup && this.beans.columnModel.isPivotMode();
        var isOpenGroup = this.group && this.expanded && !this.footer && !lockedClosedGroup;
        var getGroupIncludeFooter = this.beans.gridOptionsService.getGroupIncludeFooter();
        var groupFootersEnabled = getGroupIncludeFooter({ node: this });
        var groupAlwaysShowAggData = this.beans.gridOptionsService.is("groupSuppressBlankHeader");
        var ignoreAggData = isOpenGroup && groupFootersEnabled && !groupAlwaysShowAggData;
        var value = this.beans.valueService.getValue(column, this, false, ignoreAggData);
        return value;
      };
      RowNode2.prototype.dispatchEventForSaveValueReadOnly = function(column, oldValue, newValue, eventSource) {
        var event = {
          type: Events.EVENT_CELL_EDIT_REQUEST,
          event: null,
          rowIndex: this.rowIndex,
          rowPinned: this.rowPinned,
          column,
          colDef: column.getColDef(),
          context: this.beans.gridOptionsService.context,
          api: this.beans.gridOptionsService.api,
          columnApi: this.beans.gridOptionsService.columnApi,
          data: this.data,
          node: this,
          oldValue,
          newValue,
          value: newValue,
          source: eventSource
        };
        this.beans.eventService.dispatchEvent(event);
      };
      RowNode2.prototype.setGroupValue = function(colKey, newValue) {
        var column = this.beans.columnModel.getGridColumn(colKey);
        if (missing(this.groupData)) {
          this.groupData = {};
        }
        var columnId = column.getColId();
        var oldValue = this.groupData[columnId];
        if (oldValue === newValue) {
          return;
        }
        this.groupData[columnId] = newValue;
        this.dispatchCellChangedEvent(column, newValue, oldValue);
      };
      RowNode2.prototype.setAggData = function(newAggData) {
        var _this = this;
        var colIds = getAllKeysInObjects([this.aggData, newAggData]);
        var oldAggData = this.aggData;
        this.aggData = newAggData;
        if (this.eventService) {
          colIds.forEach(function(colId) {
            var value = _this.aggData ? _this.aggData[colId] : void 0;
            var oldValue = oldAggData ? oldAggData[colId] : void 0;
            if (value === oldValue) {
              return;
            }
            var column = _this.beans.columnModel.lookupGridColumn(colId);
            if (!column) {
              return;
            }
            _this.dispatchCellChangedEvent(column, value, oldValue);
          });
        }
      };
      RowNode2.prototype.updateHasChildren = function() {
        var newValue = this.group && !this.footer || this.childrenAfterGroup && this.childrenAfterGroup.length > 0;
        var isSsrm = this.beans.gridOptionsService.isRowModelType("serverSide");
        if (isSsrm) {
          var isTreeData = this.beans.gridOptionsService.is("treeData");
          var isGroupFunc = this.beans.gridOptionsService.get("isServerSideGroup");
          newValue = !this.stub && !this.footer && (isTreeData ? !!isGroupFunc && isGroupFunc(this.data) : !!this.group);
        }
        if (newValue !== this.__hasChildren) {
          this.__hasChildren = !!newValue;
          if (this.eventService) {
            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode2.EVENT_HAS_CHILDREN_CHANGED));
          }
        }
      };
      RowNode2.prototype.hasChildren = function() {
        if (this.__hasChildren == null) {
          this.updateHasChildren();
        }
        return this.__hasChildren;
      };
      RowNode2.prototype.isEmptyRowGroupNode = function() {
        return this.group && missingOrEmpty(this.childrenAfterGroup);
      };
      RowNode2.prototype.dispatchCellChangedEvent = function(column, newValue, oldValue) {
        var cellChangedEvent = {
          type: RowNode2.EVENT_CELL_CHANGED,
          node: this,
          column,
          newValue,
          oldValue
        };
        this.dispatchLocalEvent(cellChangedEvent);
      };
      RowNode2.prototype.resetQuickFilterAggregateText = function() {
        this.quickFilterAggregateText = null;
      };
      RowNode2.prototype.isExpandable = function() {
        return this.hasChildren() && !this.footer || this.master ? true : false;
      };
      RowNode2.prototype.isSelected = function() {
        if (this.footer) {
          return this.sibling.isSelected();
        }
        return this.selected;
      };
      RowNode2.prototype.depthFirstSearch = function(callback) {
        if (this.childrenAfterGroup) {
          this.childrenAfterGroup.forEach(function(child) {
            return child.depthFirstSearch(callback);
          });
        }
        callback(this);
      };
      RowNode2.prototype.calculateSelectedFromChildren = function() {
        var _a;
        var atLeastOneSelected = false;
        var atLeastOneDeSelected = false;
        var atLeastOneMixed = false;
        if (!((_a = this.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {
          return this.selectable ? this.selected : null;
        }
        for (var i = 0; i < this.childrenAfterGroup.length; i++) {
          var child = this.childrenAfterGroup[i];
          var childState = child.isSelected();
          if (!child.selectable) {
            var selectable = child.calculateSelectedFromChildren();
            if (selectable === null) {
              continue;
            }
            childState = selectable;
          }
          switch (childState) {
            case true:
              atLeastOneSelected = true;
              break;
            case false:
              atLeastOneDeSelected = true;
              break;
            default:
              atLeastOneMixed = true;
              break;
          }
        }
        if (atLeastOneMixed || atLeastOneSelected && atLeastOneDeSelected) {
          return void 0;
        }
        if (atLeastOneSelected) {
          return true;
        }
        if (atLeastOneDeSelected) {
          return false;
        }
        if (!this.selectable) {
          return null;
        }
        return this.selected;
      };
      RowNode2.prototype.setSelectedInitialValue = function(selected) {
        this.selected = selected;
      };
      RowNode2.prototype.selectThisNode = function(newValue, e, source) {
        if (source === void 0) {
          source = "api";
        }
        var selectionNotAllowed = !this.selectable && newValue;
        var selectionNotChanged = this.selected === newValue;
        if (selectionNotAllowed || selectionNotChanged) {
          return false;
        }
        this.selected = newValue;
        if (this.eventService) {
          this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_ROW_SELECTED));
          var sibling = this.sibling;
          if (sibling && sibling.footer) {
            sibling.dispatchLocalEvent(sibling.createLocalRowEvent(RowNode2.EVENT_ROW_SELECTED));
          }
        }
        var event = __assign$g(__assign$g({}, this.createGlobalRowEvent(Events.EVENT_ROW_SELECTED)), { event: e || null, source });
        this.beans.eventService.dispatchEvent(event);
        return true;
      };
      RowNode2.prototype.setSelected = function(newValue, clearSelection, source) {
        if (clearSelection === void 0) {
          clearSelection = false;
        }
        if (source === void 0) {
          source = "api";
        }
        if (typeof source === "boolean") {
          console.warn("AG Grid: since version v30, rowNode.setSelected() property `suppressFinishActions` has been removed, please use `gridApi.setNodesSelected()` for bulk actions, and the event `source` property for ignoring events instead.");
          return;
        }
        this.setSelectedParams({
          newValue,
          clearSelection,
          rangeSelect: false,
          source
        });
      };
      RowNode2.prototype.setSelectedParams = function(params) {
        if (this.rowPinned) {
          console.warn("AG Grid: cannot select pinned rows");
          return 0;
        }
        if (this.id === void 0) {
          console.warn("AG Grid: cannot select node until id for node is known");
          return 0;
        }
        return this.beans.selectionService.setNodesSelected(__assign$g(__assign$g({}, params), { nodes: [this.footer ? this.sibling : this] }));
      };
      RowNode2.prototype.isRowPinned = function() {
        return this.rowPinned === "top" || this.rowPinned === "bottom";
      };
      RowNode2.prototype.isParentOfNode = function(potentialParent) {
        var parentNode = this.parent;
        while (parentNode) {
          if (parentNode === potentialParent) {
            return true;
          }
          parentNode = parentNode.parent;
        }
        return false;
      };
      RowNode2.prototype.addEventListener = function(eventType, listener) {
        if (!this.eventService) {
          this.eventService = new EventService();
        }
        this.eventService.addEventListener(eventType, listener);
      };
      RowNode2.prototype.removeEventListener = function(eventType, listener) {
        if (!this.eventService) {
          return;
        }
        this.eventService.removeEventListener(eventType, listener);
        if (this.eventService.noRegisteredListenersExist()) {
          this.eventService = null;
        }
      };
      RowNode2.prototype.onMouseEnter = function() {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_ENTER));
      };
      RowNode2.prototype.onMouseLeave = function() {
        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode2.EVENT_MOUSE_LEAVE));
      };
      RowNode2.prototype.getFirstChildOfFirstChild = function(rowGroupColumn) {
        var currentRowNode = this;
        var isCandidate = true;
        var foundFirstChildPath = false;
        var nodeToSwapIn = null;
        while (isCandidate && !foundFirstChildPath) {
          var parentRowNode = currentRowNode.parent;
          var firstChild = exists(parentRowNode) && currentRowNode.firstChild;
          if (firstChild) {
            if (parentRowNode.rowGroupColumn === rowGroupColumn) {
              foundFirstChildPath = true;
              nodeToSwapIn = parentRowNode;
            }
          } else {
            isCandidate = false;
          }
          currentRowNode = parentRowNode;
        }
        return foundFirstChildPath ? nodeToSwapIn : null;
      };
      RowNode2.prototype.isFullWidthCell = function() {
        if (this.detail) {
          return true;
        }
        var isFullWidthCellFunc = this.beans.gridOptionsService.getCallback("isFullWidthRow");
        return isFullWidthCellFunc ? isFullWidthCellFunc({ rowNode: this }) : false;
      };
      RowNode2.prototype.getRoute = function() {
        if (this.key == null) {
          return;
        }
        var res = [];
        var pointer = this;
        while (pointer.key != null) {
          res.push(pointer.key);
          pointer = pointer.parent;
        }
        return res.reverse();
      };
      RowNode2.prototype.createFooter = function() {
        var _this = this;
        if (this.sibling) {
          return;
        }
        var ignoredProperties = /* @__PURE__ */ new Set([
          "eventService",
          "__objectId",
          "sticky"
        ]);
        var footerNode = new RowNode2(this.beans);
        Object.keys(this).forEach(function(key) {
          if (ignoredProperties.has(key)) {
            return;
          }
          footerNode[key] = _this[key];
        });
        footerNode.footer = true;
        footerNode.setRowTop(null);
        footerNode.setRowIndex(null);
        footerNode.oldRowTop = null;
        footerNode.id = "rowGroupFooter_" + this.id;
        footerNode.sibling = this;
        this.sibling = footerNode;
      };
      RowNode2.prototype.destroyFooter = function() {
        if (!this.sibling) {
          return;
        }
        this.sibling.setRowTop(null);
        this.sibling.setRowIndex(null);
        this.sibling = void 0;
      };
      RowNode2.ID_PREFIX_ROW_GROUP = "row-group-";
      RowNode2.ID_PREFIX_TOP_PINNED = "t-";
      RowNode2.ID_PREFIX_BOTTOM_PINNED = "b-";
      RowNode2.OBJECT_ID_SEQUENCE = 0;
      RowNode2.EVENT_ROW_SELECTED = "rowSelected";
      RowNode2.EVENT_DATA_CHANGED = "dataChanged";
      RowNode2.EVENT_CELL_CHANGED = "cellChanged";
      RowNode2.EVENT_ALL_CHILDREN_COUNT_CHANGED = "allChildrenCountChanged";
      RowNode2.EVENT_MASTER_CHANGED = "masterChanged";
      RowNode2.EVENT_GROUP_CHANGED = "groupChanged";
      RowNode2.EVENT_MOUSE_ENTER = "mouseEnter";
      RowNode2.EVENT_MOUSE_LEAVE = "mouseLeave";
      RowNode2.EVENT_HEIGHT_CHANGED = "heightChanged";
      RowNode2.EVENT_TOP_CHANGED = "topChanged";
      RowNode2.EVENT_DISPLAYED_CHANGED = "displayedChanged";
      RowNode2.EVENT_FIRST_CHILD_CHANGED = "firstChildChanged";
      RowNode2.EVENT_LAST_CHILD_CHANGED = "lastChildChanged";
      RowNode2.EVENT_CHILD_INDEX_CHANGED = "childIndexChanged";
      RowNode2.EVENT_ROW_INDEX_CHANGED = "rowIndexChanged";
      RowNode2.EVENT_EXPANDED_CHANGED = "expandedChanged";
      RowNode2.EVENT_HAS_CHILDREN_CHANGED = "hasChildrenChanged";
      RowNode2.EVENT_SELECTABLE_CHANGED = "selectableChanged";
      RowNode2.EVENT_UI_LEVEL_CHANGED = "uiLevelChanged";
      RowNode2.EVENT_HIGHLIGHT_CHANGED = "rowHighlightChanged";
      RowNode2.EVENT_DRAGGING_CHANGED = "draggingChanged";
      return RowNode2;
    }();
    __extends$2r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$f = function() {
      __assign$f = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$f.apply(this, arguments);
    };
    __decorate$2b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CheckboxSelectionComponent = /** @class */
    function(_super) {
      __extends$2r(CheckboxSelectionComponent2, _super);
      function CheckboxSelectionComponent2() {
        return _super.call(
          this,
          /* html*/
          '\n            <div class="ag-selection-checkbox" role="presentation">\n                <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n            </div>'
        ) || this;
      }
      CheckboxSelectionComponent2.prototype.postConstruct = function() {
        this.eCheckbox.setPassive(true);
        setAriaLive(this.eCheckbox.getInputElement(), "polite");
      };
      CheckboxSelectionComponent2.prototype.getCheckboxId = function() {
        return this.eCheckbox.getInputElement().id;
      };
      CheckboxSelectionComponent2.prototype.onDataChanged = function() {
        this.onSelectionChanged();
      };
      CheckboxSelectionComponent2.prototype.onSelectableChanged = function() {
        this.showOrHideSelect();
      };
      CheckboxSelectionComponent2.prototype.onSelectionChanged = function() {
        var translate = this.localeService.getLocaleTextFunc();
        var state = this.rowNode.isSelected();
        var stateName = getAriaCheckboxStateName(translate, state);
        var ariaLabel = translate("ariaRowToggleSelection", "Press Space to toggle row selection");
        this.eCheckbox.setValue(state, true);
        this.eCheckbox.setInputAriaLabel(ariaLabel + " (" + stateName + ")");
      };
      CheckboxSelectionComponent2.prototype.onClicked = function(newValue, groupSelectsFiltered, event) {
        return this.rowNode.setSelectedParams({ newValue, rangeSelect: event.shiftKey, groupSelectsFiltered, event, source: "checkboxSelected" });
      };
      CheckboxSelectionComponent2.prototype.init = function(params) {
        var _this = this;
        this.rowNode = params.rowNode;
        this.column = params.column;
        this.overrides = params.overrides;
        this.onSelectionChanged();
        this.addManagedListener(this.eCheckbox.getInputElement(), "dblclick", function(event) {
          stopPropagationForAgGrid(event);
        });
        this.addManagedListener(this.eCheckbox.getInputElement(), "click", function(event) {
          stopPropagationForAgGrid(event);
          var groupSelectsFiltered = _this.gridOptionsService.is("groupSelectsFiltered");
          var isSelected = _this.eCheckbox.getValue();
          if (_this.shouldHandleIndeterminateState(isSelected, groupSelectsFiltered)) {
            var result = _this.onClicked(true, groupSelectsFiltered, event || {});
            if (result === 0) {
              _this.onClicked(false, groupSelectsFiltered, event);
            }
          } else if (isSelected) {
            _this.onClicked(false, groupSelectsFiltered, event);
          } else {
            _this.onClicked(true, groupSelectsFiltered, event || {});
          }
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onDataChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_SELECTABLE_CHANGED, this.onSelectableChanged.bind(this));
        var isRowSelectableFunc = this.gridOptionsService.get("isRowSelectable");
        var checkboxVisibleIsDynamic = isRowSelectableFunc || typeof this.getIsVisible() === "function";
        if (checkboxVisibleIsDynamic) {
          var showOrHideSelectListener = this.showOrHideSelect.bind(this);
          this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, showOrHideSelectListener);
          this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, showOrHideSelectListener);
          this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, showOrHideSelectListener);
          this.showOrHideSelect();
        }
        this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
      };
      CheckboxSelectionComponent2.prototype.shouldHandleIndeterminateState = function(isSelected, groupSelectsFiltered) {
        return groupSelectsFiltered && (this.eCheckbox.getPreviousValue() === void 0 || isSelected === void 0) && this.gridOptionsService.isRowModelType("clientSide");
      };
      CheckboxSelectionComponent2.prototype.showOrHideSelect = function() {
        var _a, _b, _c, _d;
        var selectable = this.rowNode.selectable;
        var isVisible2 = this.getIsVisible();
        if (selectable) {
          if (typeof isVisible2 === "function") {
            var extraParams = (_a = this.overrides) === null || _a === void 0 ? void 0 : _a.callbackParams;
            var params = (_b = this.column) === null || _b === void 0 ? void 0 : _b.createColumnFunctionCallbackParams(this.rowNode);
            selectable = params ? isVisible2(__assign$f(__assign$f({}, extraParams), params)) : false;
          } else {
            selectable = isVisible2 !== null && isVisible2 !== void 0 ? isVisible2 : false;
          }
        }
        var disableInsteadOfHide = (_c = this.column) === null || _c === void 0 ? void 0 : _c.getColDef().showDisabledCheckboxes;
        if (disableInsteadOfHide) {
          this.eCheckbox.setDisabled(!selectable);
          this.setVisible(true);
          this.setDisplayed(true);
          return;
        }
        if ((_d = this.overrides) === null || _d === void 0 ? void 0 : _d.removeHidden) {
          this.setDisplayed(selectable);
          return;
        }
        this.setVisible(selectable);
      };
      CheckboxSelectionComponent2.prototype.getIsVisible = function() {
        var _a, _b;
        if (this.overrides) {
          return this.overrides.isVisible;
        }
        return (_b = (_a = this.column) === null || _a === void 0 ? void 0 : _a.getColDef()) === null || _b === void 0 ? void 0 : _b.checkboxSelection;
      };
      __decorate$2b([
        RefSelector("eCheckbox")
      ], CheckboxSelectionComponent2.prototype, "eCheckbox", void 0);
      __decorate$2b([
        PostConstruct
      ], CheckboxSelectionComponent2.prototype, "postConstruct", null);
      return CheckboxSelectionComponent2;
    }(Component);
    __extends$2q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __values$4 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    (function(DragSourceType2) {
      DragSourceType2[DragSourceType2["ToolPanel"] = 0] = "ToolPanel";
      DragSourceType2[DragSourceType2["HeaderCell"] = 1] = "HeaderCell";
      DragSourceType2[DragSourceType2["RowDrag"] = 2] = "RowDrag";
      DragSourceType2[DragSourceType2["ChartPanel"] = 3] = "ChartPanel";
      DragSourceType2[DragSourceType2["AdvancedFilterBuilder"] = 4] = "AdvancedFilterBuilder";
    })(DragSourceType || (DragSourceType = {}));
    (function(VerticalDirection2) {
      VerticalDirection2[VerticalDirection2["Up"] = 0] = "Up";
      VerticalDirection2[VerticalDirection2["Down"] = 1] = "Down";
    })(VerticalDirection || (VerticalDirection = {}));
    (function(HorizontalDirection2) {
      HorizontalDirection2[HorizontalDirection2["Left"] = 0] = "Left";
      HorizontalDirection2[HorizontalDirection2["Right"] = 1] = "Right";
    })(HorizontalDirection || (HorizontalDirection = {}));
    DragAndDropService = /** @class */
    function(_super) {
      __extends$2q(DragAndDropService2, _super);
      function DragAndDropService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dragSourceAndParamsList = [];
        _this.dropTargets = [];
        return _this;
      }
      DragAndDropService_1 = DragAndDropService2;
      DragAndDropService2.prototype.init = function() {
        this.ePinnedIcon = createIcon("columnMovePin", this.gridOptionsService, null);
        this.eHideIcon = createIcon("columnMoveHide", this.gridOptionsService, null);
        this.eMoveIcon = createIcon("columnMoveMove", this.gridOptionsService, null);
        this.eLeftIcon = createIcon("columnMoveLeft", this.gridOptionsService, null);
        this.eRightIcon = createIcon("columnMoveRight", this.gridOptionsService, null);
        this.eGroupIcon = createIcon("columnMoveGroup", this.gridOptionsService, null);
        this.eAggregateIcon = createIcon("columnMoveValue", this.gridOptionsService, null);
        this.ePivotIcon = createIcon("columnMovePivot", this.gridOptionsService, null);
        this.eDropNotAllowedIcon = createIcon("dropNotAllowed", this.gridOptionsService, null);
      };
      DragAndDropService2.prototype.addDragSource = function(dragSource, allowTouch) {
        if (allowTouch === void 0) {
          allowTouch = false;
        }
        var params = {
          eElement: dragSource.eElement,
          dragStartPixels: dragSource.dragStartPixels,
          onDragStart: this.onDragStart.bind(this, dragSource),
          onDragStop: this.onDragStop.bind(this),
          onDragging: this.onDragging.bind(this),
          includeTouch: allowTouch
        };
        this.dragSourceAndParamsList.push({ params, dragSource });
        this.dragService.addDragSource(params);
      };
      DragAndDropService2.prototype.removeDragSource = function(dragSource) {
        var sourceAndParams = this.dragSourceAndParamsList.find(function(item) {
          return item.dragSource === dragSource;
        });
        if (sourceAndParams) {
          this.dragService.removeDragSource(sourceAndParams.params);
          removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
        }
      };
      DragAndDropService2.prototype.clearDragSourceParamsList = function() {
        var _this = this;
        this.dragSourceAndParamsList.forEach(function(sourceAndParams) {
          return _this.dragService.removeDragSource(sourceAndParams.params);
        });
        this.dragSourceAndParamsList.length = 0;
        this.dropTargets.length = 0;
      };
      DragAndDropService2.prototype.nudge = function() {
        if (this.dragging) {
          this.onDragging(this.eventLastTime, true);
        }
      };
      DragAndDropService2.prototype.onDragStart = function(dragSource, mouseEvent) {
        this.dragging = true;
        this.dragSource = dragSource;
        this.eventLastTime = mouseEvent;
        this.dragItem = this.dragSource.getDragItem();
        this.lastDropTarget = this.dragSource.dragSourceDropTarget;
        if (this.dragSource.onDragStarted) {
          this.dragSource.onDragStarted();
        }
        this.createGhost();
      };
      DragAndDropService2.prototype.onDragStop = function(mouseEvent) {
        this.eventLastTime = null;
        this.dragging = false;
        if (this.dragSource.onDragStopped) {
          this.dragSource.onDragStopped();
        }
        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
          var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
          this.lastDropTarget.onDragStop(draggingEvent);
        }
        this.lastDropTarget = null;
        this.dragItem = null;
        this.removeGhost();
      };
      DragAndDropService2.prototype.onDragging = function(mouseEvent, fromNudge) {
        var _this = this;
        var _a, _b, _c, _d;
        var hDirection = this.getHorizontalDirection(mouseEvent);
        var vDirection = this.getVerticalDirection(mouseEvent);
        this.eventLastTime = mouseEvent;
        this.positionGhost(mouseEvent);
        var validDropTargets = this.dropTargets.filter(function(target) {
          return _this.isMouseOnDropTarget(mouseEvent, target);
        });
        var dropTarget = this.findCurrentDropTarget(mouseEvent, validDropTargets);
        if (dropTarget !== this.lastDropTarget) {
          this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
          if (this.lastDropTarget !== null && dropTarget === null) {
            (_b = (_a = this.dragSource).onGridExit) === null || _b === void 0 ? void 0 : _b.call(_a, this.dragItem);
          }
          if (this.lastDropTarget === null && dropTarget !== null) {
            (_d = (_c = this.dragSource).onGridEnter) === null || _d === void 0 ? void 0 : _d.call(_c, this.dragItem);
          }
          this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          this.lastDropTarget = dropTarget;
        } else if (dropTarget && dropTarget.onDragging) {
          var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          dropTarget.onDragging(draggingEvent);
        }
      };
      DragAndDropService2.prototype.getAllContainersFromDropTarget = function(dropTarget) {
        var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
        var containers = [[dropTarget.getContainer()]];
        return secondaryContainers ? containers.concat(secondaryContainers) : containers;
      };
      DragAndDropService2.prototype.allContainersIntersect = function(mouseEvent, containers) {
        var e_1, _a;
        try {
          for (var containers_1 = __values$4(containers), containers_1_1 = containers_1.next(); !containers_1_1.done; containers_1_1 = containers_1.next()) {
            var container = containers_1_1.value;
            var rect = container.getBoundingClientRect();
            if (rect.width === 0 || rect.height === 0) {
              return false;
            }
            var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX < rect.right;
            var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY < rect.bottom;
            if (!horizontalFit || !verticalFit) {
              return false;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (containers_1_1 && !containers_1_1.done && (_a = containers_1.return))
              _a.call(containers_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return true;
      };
      DragAndDropService2.prototype.isMouseOnDropTarget = function(mouseEvent, dropTarget) {
        var e_2, _a;
        var allContainersFromDropTarget = this.getAllContainersFromDropTarget(dropTarget);
        var mouseOverTarget = false;
        try {
          for (var allContainersFromDropTarget_1 = __values$4(allContainersFromDropTarget), allContainersFromDropTarget_1_1 = allContainersFromDropTarget_1.next(); !allContainersFromDropTarget_1_1.done; allContainersFromDropTarget_1_1 = allContainersFromDropTarget_1.next()) {
            var currentContainers = allContainersFromDropTarget_1_1.value;
            if (this.allContainersIntersect(mouseEvent, currentContainers)) {
              mouseOverTarget = true;
              break;
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (allContainersFromDropTarget_1_1 && !allContainersFromDropTarget_1_1.done && (_a = allContainersFromDropTarget_1.return))
              _a.call(allContainersFromDropTarget_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        if (dropTarget.targetContainsSource && !dropTarget.getContainer().contains(this.dragSource.eElement)) {
          return false;
        }
        return mouseOverTarget && dropTarget.isInterestedIn(this.dragSource.type, this.dragSource.eElement);
      };
      DragAndDropService2.prototype.findCurrentDropTarget = function(mouseEvent, validDropTargets) {
        var e_3, _a, e_4, _b;
        var len = validDropTargets.length;
        if (len === 0) {
          return null;
        }
        if (len === 1) {
          return validDropTargets[0];
        }
        var rootNode = this.gridOptionsService.getRootNode();
        var elementStack = rootNode.elementsFromPoint(mouseEvent.clientX, mouseEvent.clientY);
        try {
          for (var elementStack_1 = __values$4(elementStack), elementStack_1_1 = elementStack_1.next(); !elementStack_1_1.done; elementStack_1_1 = elementStack_1.next()) {
            var el = elementStack_1_1.value;
            try {
              for (var validDropTargets_1 = (e_4 = void 0, __values$4(validDropTargets)), validDropTargets_1_1 = validDropTargets_1.next(); !validDropTargets_1_1.done; validDropTargets_1_1 = validDropTargets_1.next()) {
                var dropTarget = validDropTargets_1_1.value;
                var containers = flatten(this.getAllContainersFromDropTarget(dropTarget));
                if (containers.indexOf(el) !== -1) {
                  return dropTarget;
                }
              }
            } catch (e_4_1) {
              e_4 = { error: e_4_1 };
            } finally {
              try {
                if (validDropTargets_1_1 && !validDropTargets_1_1.done && (_b = validDropTargets_1.return))
                  _b.call(validDropTargets_1);
              } finally {
                if (e_4)
                  throw e_4.error;
              }
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (elementStack_1_1 && !elementStack_1_1.done && (_a = elementStack_1.return))
              _a.call(elementStack_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
        return null;
      };
      DragAndDropService2.prototype.enterDragTargetIfExists = function(dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
        if (!dropTarget) {
          return;
        }
        if (dropTarget.onDragEnter) {
          var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          dropTarget.onDragEnter(dragEnterEvent);
        }
        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
      };
      DragAndDropService2.prototype.leaveLastTargetIfExists = function(mouseEvent, hDirection, vDirection, fromNudge) {
        if (!this.lastDropTarget) {
          return;
        }
        if (this.lastDropTarget.onDragLeave) {
          var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
          this.lastDropTarget.onDragLeave(dragLeaveEvent);
        }
        this.setGhostIcon(null);
      };
      DragAndDropService2.prototype.addDropTarget = function(dropTarget) {
        this.dropTargets.push(dropTarget);
      };
      DragAndDropService2.prototype.removeDropTarget = function(dropTarget) {
        this.dropTargets = this.dropTargets.filter(function(target) {
          return target.getContainer() !== dropTarget.getContainer();
        });
      };
      DragAndDropService2.prototype.hasExternalDropZones = function() {
        return this.dropTargets.some(function(zones) {
          return zones.external;
        });
      };
      DragAndDropService2.prototype.findExternalZone = function(params) {
        var externalTargets = this.dropTargets.filter(function(target) {
          return target.external;
        });
        return externalTargets.find(function(zone) {
          return zone.getContainer() === params.getContainer();
        }) || null;
      };
      DragAndDropService2.prototype.getHorizontalDirection = function(event) {
        var clientX = this.eventLastTime && this.eventLastTime.clientX;
        var eClientX = event.clientX;
        if (clientX === eClientX) {
          return null;
        }
        return clientX > eClientX ? HorizontalDirection.Left : HorizontalDirection.Right;
      };
      DragAndDropService2.prototype.getVerticalDirection = function(event) {
        var clientY = this.eventLastTime && this.eventLastTime.clientY;
        var eClientY = event.clientY;
        if (clientY === eClientY) {
          return null;
        }
        return clientY > eClientY ? VerticalDirection.Up : VerticalDirection.Down;
      };
      DragAndDropService2.prototype.createDropTargetEvent = function(dropTarget, event, hDirection, vDirection, fromNudge) {
        var dropZoneTarget = dropTarget.getContainer();
        var rect = dropZoneTarget.getBoundingClientRect();
        var _a = this, api = _a.gridApi, columnApi = _a.columnApi, dragItem = _a.dragItem, dragSource = _a.dragSource;
        var x = event.clientX - rect.left;
        var y = event.clientY - rect.top;
        return { event, x, y, vDirection, hDirection, dragSource, fromNudge, dragItem, api, columnApi, dropZoneTarget };
      };
      DragAndDropService2.prototype.positionGhost = function(event) {
        var ghost = this.eGhost;
        if (!ghost) {
          return;
        }
        var ghostRect = ghost.getBoundingClientRect();
        var ghostHeight = ghostRect.height;
        var browserWidth = getBodyWidth() - 2;
        var browserHeight = getBodyHeight() - 2;
        var offsetParentSize = getElementRectWithOffset(ghost.offsetParent);
        var clientY = event.clientY, clientX = event.clientX;
        var top = clientY - offsetParentSize.top - ghostHeight / 2;
        var left = clientX - offsetParentSize.left - 10;
        var eDocument = this.gridOptionsService.getDocument();
        var win = eDocument.defaultView || window;
        var windowScrollY = win.pageYOffset || eDocument.documentElement.scrollTop;
        var windowScrollX = win.pageXOffset || eDocument.documentElement.scrollLeft;
        if (browserWidth > 0 && left + ghost.clientWidth > browserWidth + windowScrollX) {
          left = browserWidth + windowScrollX - ghost.clientWidth;
        }
        if (left < 0) {
          left = 0;
        }
        if (browserHeight > 0 && top + ghost.clientHeight > browserHeight + windowScrollY) {
          top = browserHeight + windowScrollY - ghost.clientHeight;
        }
        if (top < 0) {
          top = 0;
        }
        ghost.style.left = left + "px";
        ghost.style.top = top + "px";
      };
      DragAndDropService2.prototype.removeGhost = function() {
        if (this.eGhost && this.eGhostParent) {
          this.eGhostParent.removeChild(this.eGhost);
        }
        this.eGhost = null;
      };
      DragAndDropService2.prototype.createGhost = function() {
        this.eGhost = loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
        this.mouseEventService.stampTopLevelGridCompWithGridInstance(this.eGhost);
        var theme = this.environment.getTheme().theme;
        if (theme) {
          this.eGhost.classList.add(theme);
        }
        this.eGhostIcon = this.eGhost.querySelector(".ag-dnd-ghost-icon");
        this.setGhostIcon(null);
        var eText = this.eGhost.querySelector(".ag-dnd-ghost-label");
        var dragItemName = this.dragSource.dragItemName;
        if (isFunction(dragItemName)) {
          dragItemName = dragItemName();
        }
        eText.innerHTML = escapeString(dragItemName) || "";
        this.eGhost.style.height = "25px";
        this.eGhost.style.top = "20px";
        this.eGhost.style.left = "20px";
        var eDocument = this.gridOptionsService.getDocument();
        var targetEl = null;
        try {
          targetEl = eDocument.fullscreenElement;
        } catch (e) {
        } finally {
          if (!targetEl) {
            var rootNode = this.gridOptionsService.getRootNode();
            var body = rootNode.querySelector("body");
            if (body) {
              targetEl = body;
            } else if (rootNode instanceof ShadowRoot) {
              targetEl = rootNode;
            } else {
              targetEl = rootNode === null || rootNode === void 0 ? void 0 : rootNode.documentElement;
            }
          }
        }
        this.eGhostParent = targetEl;
        if (!this.eGhostParent) {
          console.warn("AG Grid: could not find document body, it is needed for dragging columns");
        } else {
          this.eGhostParent.appendChild(this.eGhost);
        }
      };
      DragAndDropService2.prototype.setGhostIcon = function(iconName, shake) {
        if (shake === void 0) {
          shake = false;
        }
        clearElement(this.eGhostIcon);
        var eIcon = null;
        if (!iconName) {
          iconName = this.dragSource.getDefaultIconName ? this.dragSource.getDefaultIconName() : DragAndDropService_1.ICON_NOT_ALLOWED;
        }
        switch (iconName) {
          case DragAndDropService_1.ICON_PINNED:
            eIcon = this.ePinnedIcon;
            break;
          case DragAndDropService_1.ICON_MOVE:
            eIcon = this.eMoveIcon;
            break;
          case DragAndDropService_1.ICON_LEFT:
            eIcon = this.eLeftIcon;
            break;
          case DragAndDropService_1.ICON_RIGHT:
            eIcon = this.eRightIcon;
            break;
          case DragAndDropService_1.ICON_GROUP:
            eIcon = this.eGroupIcon;
            break;
          case DragAndDropService_1.ICON_AGGREGATE:
            eIcon = this.eAggregateIcon;
            break;
          case DragAndDropService_1.ICON_PIVOT:
            eIcon = this.ePivotIcon;
            break;
          case DragAndDropService_1.ICON_NOT_ALLOWED:
            eIcon = this.eDropNotAllowedIcon;
            break;
          case DragAndDropService_1.ICON_HIDE:
            eIcon = this.eHideIcon;
            break;
        }
        this.eGhostIcon.classList.toggle("ag-shake-left-to-right", shake);
        if (eIcon === this.eHideIcon && this.gridOptionsService.is("suppressDragLeaveHidesColumns")) {
          return;
        }
        if (eIcon) {
          this.eGhostIcon.appendChild(eIcon);
        }
      };
      var DragAndDropService_1;
      DragAndDropService2.ICON_PINNED = "pinned";
      DragAndDropService2.ICON_MOVE = "move";
      DragAndDropService2.ICON_LEFT = "left";
      DragAndDropService2.ICON_RIGHT = "right";
      DragAndDropService2.ICON_GROUP = "group";
      DragAndDropService2.ICON_AGGREGATE = "aggregate";
      DragAndDropService2.ICON_PIVOT = "pivot";
      DragAndDropService2.ICON_NOT_ALLOWED = "notAllowed";
      DragAndDropService2.ICON_HIDE = "hide";
      DragAndDropService2.GHOST_TEMPLATE = '<div class="ag-dnd-ghost ag-unselectable">\n            <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>\n            <div class="ag-dnd-ghost-label"></div>\n        </div>';
      __decorate$2a([
        Autowired("dragService")
      ], DragAndDropService2.prototype, "dragService", void 0);
      __decorate$2a([
        Autowired("mouseEventService")
      ], DragAndDropService2.prototype, "mouseEventService", void 0);
      __decorate$2a([
        Autowired("columnApi")
      ], DragAndDropService2.prototype, "columnApi", void 0);
      __decorate$2a([
        Autowired("gridApi")
      ], DragAndDropService2.prototype, "gridApi", void 0);
      __decorate$2a([
        PostConstruct
      ], DragAndDropService2.prototype, "init", null);
      __decorate$2a([
        PreDestroy
      ], DragAndDropService2.prototype, "clearDragSourceParamsList", null);
      DragAndDropService2 = DragAndDropService_1 = __decorate$2a([
        Bean("dragAndDropService")
      ], DragAndDropService2);
      return DragAndDropService2;
    }(BeanStub);
    __extends$2p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$29 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowDragComp = /** @class */
    function(_super) {
      __extends$2p(RowDragComp2, _super);
      function RowDragComp2(cellValueFn, rowNode, column, customGui, dragStartPixels, suppressVisibilityChange) {
        var _this = _super.call(this) || this;
        _this.cellValueFn = cellValueFn;
        _this.rowNode = rowNode;
        _this.column = column;
        _this.customGui = customGui;
        _this.dragStartPixels = dragStartPixels;
        _this.suppressVisibilityChange = suppressVisibilityChange;
        _this.dragSource = null;
        return _this;
      }
      RowDragComp2.prototype.isCustomGui = function() {
        return this.customGui != null;
      };
      RowDragComp2.prototype.postConstruct = function() {
        if (!this.customGui) {
          this.setTemplate(
            /* html */
            '<div class="ag-drag-handle ag-row-drag" aria-hidden="true"></div>'
          );
          this.getGui().appendChild(createIconNoSpan("rowDrag", this.gridOptionsService, null));
          this.addDragSource();
        } else {
          this.setDragElement(this.customGui, this.dragStartPixels);
        }
        this.checkCompatibility();
        if (!this.suppressVisibilityChange) {
          var strategy = this.gridOptionsService.is("rowDragManaged") ? new ManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column) : new NonManagedVisibilityStrategy(this, this.beans, this.rowNode, this.column);
          this.createManagedBean(strategy, this.beans.context);
        }
      };
      RowDragComp2.prototype.setDragElement = function(dragElement, dragStartPixels) {
        this.setTemplateFromElement(dragElement);
        this.addDragSource(dragStartPixels);
      };
      RowDragComp2.prototype.getSelectedNodes = function() {
        var isRowDragMultiRow = this.gridOptionsService.is("rowDragMultiRow");
        if (!isRowDragMultiRow) {
          return [this.rowNode];
        }
        var selection = this.beans.selectionService.getSelectedNodes();
        return selection.indexOf(this.rowNode) !== -1 ? selection : [this.rowNode];
      };
      RowDragComp2.prototype.checkCompatibility = function() {
        var managed = this.gridOptionsService.is("rowDragManaged");
        var treeData = this.gridOptionsService.is("treeData");
        if (treeData && managed) {
          doOnce(function() {
            return console.warn("AG Grid: If using row drag with tree data, you cannot have rowDragManaged=true");
          }, "RowDragComp.managedAndTreeData");
        }
      };
      RowDragComp2.prototype.getDragItem = function() {
        return {
          rowNode: this.rowNode,
          rowNodes: this.getSelectedNodes(),
          columns: this.column ? [this.column] : void 0,
          defaultTextValue: this.cellValueFn()
        };
      };
      RowDragComp2.prototype.getRowDragText = function(column) {
        if (column) {
          var colDef = column.getColDef();
          if (colDef.rowDragText) {
            return colDef.rowDragText;
          }
        }
        return this.gridOptionsService.get("rowDragText");
      };
      RowDragComp2.prototype.addDragSource = function(dragStartPixels) {
        var _this = this;
        if (dragStartPixels === void 0) {
          dragStartPixels = 4;
        }
        if (this.dragSource) {
          this.removeDragSource();
        }
        var rowDragText = this.getRowDragText(this.column);
        var translate = this.localeService.getLocaleTextFunc();
        this.dragSource = {
          type: DragSourceType.RowDrag,
          eElement: this.getGui(),
          dragItemName: function() {
            var _a;
            var dragItem = _this.getDragItem();
            var dragItemCount = ((_a = dragItem.rowNodes) === null || _a === void 0 ? void 0 : _a.length) || 1;
            if (rowDragText) {
              return rowDragText(dragItem, dragItemCount);
            }
            return dragItemCount === 1 ? _this.cellValueFn() : dragItemCount + " " + translate("rowDragRows", "rows");
          },
          getDragItem: function() {
            return _this.getDragItem();
          },
          dragStartPixels,
          dragSourceDomDataKey: this.gridOptionsService.getDomDataKey()
        };
        this.beans.dragAndDropService.addDragSource(this.dragSource, true);
      };
      RowDragComp2.prototype.removeDragSource = function() {
        if (this.dragSource) {
          this.beans.dragAndDropService.removeDragSource(this.dragSource);
        }
        this.dragSource = null;
      };
      __decorate$29([
        Autowired("beans")
      ], RowDragComp2.prototype, "beans", void 0);
      __decorate$29([
        PostConstruct
      ], RowDragComp2.prototype, "postConstruct", null);
      __decorate$29([
        PreDestroy
      ], RowDragComp2.prototype, "removeDragSource", null);
      return RowDragComp2;
    }(Component);
    VisibilityStrategy = /** @class */
    function(_super) {
      __extends$2p(VisibilityStrategy2, _super);
      function VisibilityStrategy2(parent, rowNode, column) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        _this.rowNode = rowNode;
        _this.column = column;
        return _this;
      }
      VisibilityStrategy2.prototype.setDisplayedOrVisible = function(neverDisplayed) {
        var displayedOptions = { skipAriaHidden: true };
        if (neverDisplayed) {
          this.parent.setDisplayed(false, displayedOptions);
        } else {
          var shown = true;
          var isShownSometimes = false;
          if (this.column) {
            shown = this.column.isRowDrag(this.rowNode) || this.parent.isCustomGui();
            isShownSometimes = isFunction(this.column.getColDef().rowDrag);
          }
          if (isShownSometimes) {
            this.parent.setDisplayed(true, displayedOptions);
            this.parent.setVisible(shown, displayedOptions);
          } else {
            this.parent.setDisplayed(shown, displayedOptions);
            this.parent.setVisible(true, displayedOptions);
          }
        }
      };
      return VisibilityStrategy2;
    }(BeanStub);
    NonManagedVisibilityStrategy = /** @class */
    function(_super) {
      __extends$2p(NonManagedVisibilityStrategy2, _super);
      function NonManagedVisibilityStrategy2(parent, beans, rowNode, column) {
        var _this = _super.call(this, parent, rowNode, column) || this;
        _this.beans = beans;
        return _this;
      }
      NonManagedVisibilityStrategy2.prototype.postConstruct = function() {
        this.addManagedPropertyListener("suppressRowDrag", this.onSuppressRowDrag.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));
        this.workOutVisibility();
      };
      NonManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
        this.workOutVisibility();
      };
      NonManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
        var neverDisplayed = this.gridOptionsService.is("suppressRowDrag");
        this.setDisplayedOrVisible(neverDisplayed);
      };
      __decorate$29([
        PostConstruct
      ], NonManagedVisibilityStrategy2.prototype, "postConstruct", null);
      return NonManagedVisibilityStrategy2;
    }(VisibilityStrategy);
    ManagedVisibilityStrategy = /** @class */
    function(_super) {
      __extends$2p(ManagedVisibilityStrategy2, _super);
      function ManagedVisibilityStrategy2(parent, beans, rowNode, column) {
        var _this = _super.call(this, parent, rowNode, column) || this;
        _this.beans = beans;
        return _this;
      }
      ManagedVisibilityStrategy2.prototype.postConstruct = function() {
        this.addManagedListener(this.beans.eventService, Events.EVENT_SORT_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_FILTER_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.workOutVisibility.bind(this));
        this.addManagedPropertyListener("suppressRowDrag", this.onSuppressRowDrag.bind(this));
        this.workOutVisibility();
      };
      ManagedVisibilityStrategy2.prototype.onSuppressRowDrag = function() {
        this.workOutVisibility();
      };
      ManagedVisibilityStrategy2.prototype.workOutVisibility = function() {
        var gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();
        var rowDragFeature = gridBodyCon.getRowDragFeature();
        var shouldPreventRowMove = rowDragFeature && rowDragFeature.shouldPreventRowMove();
        var suppressRowDrag = this.gridOptionsService.is("suppressRowDrag");
        var hasExternalDropZones = this.beans.dragAndDropService.hasExternalDropZones();
        var neverDisplayed = shouldPreventRowMove && !hasExternalDropZones || suppressRowDrag;
        this.setDisplayedOrVisible(neverDisplayed);
      };
      __decorate$29([
        PostConstruct
      ], ManagedVisibilityStrategy2.prototype, "postConstruct", null);
      return ManagedVisibilityStrategy2;
    }(VisibilityStrategy);
    __extends$2o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$e = function() {
      __assign$e = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$e.apply(this, arguments);
    };
    __decorate$28 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GroupCellRendererCtrl = /** @class */
    function(_super) {
      __extends$2o(GroupCellRendererCtrl2, _super);
      function GroupCellRendererCtrl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GroupCellRendererCtrl2.prototype.init = function(comp, eGui, eCheckbox, eExpanded, eContracted, compClass, params) {
        this.params = params;
        this.eGui = eGui;
        this.eCheckbox = eCheckbox;
        this.eExpanded = eExpanded;
        this.eContracted = eContracted;
        this.comp = comp;
        this.compClass = compClass;
        var node = params.node, value = params.value, colDef = params.colDef;
        var topLevelFooter = this.isTopLevelFooter();
        if (!topLevelFooter) {
          var embeddedRowMismatch = this.isEmbeddedRowMismatch();
          if (embeddedRowMismatch) {
            return;
          }
          var isSingleGroupColumn = (colDef === null || colDef === void 0 ? void 0 : colDef.showRowGroup) === true;
          var isNullValueAndNotMaster = value == null && !node.master;
          if (!isSingleGroupColumn && isNullValueAndNotMaster) {
            return;
          }
          if (node.footer && this.gridOptionsService.is("groupHideOpenParents")) {
            var showRowGroup = colDef && colDef.showRowGroup;
            var rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();
            if (showRowGroup !== rowGroupColumnId) {
              return;
            }
          }
        }
        this.setupShowingValueForOpenedParent();
        this.findDisplayedGroupNode();
        this.addFullWidthRowDraggerIfNeeded();
        this.addExpandAndContract();
        this.addCheckboxIfNeeded();
        this.addValueElement();
        this.setupIndent();
        this.refreshAriaExpanded();
      };
      GroupCellRendererCtrl2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.expandListener = null;
      };
      GroupCellRendererCtrl2.prototype.refreshAriaExpanded = function() {
        var _a = this.params, node = _a.node, eParentOfValue = _a.eParentOfValue;
        if (this.expandListener) {
          this.expandListener = this.expandListener();
        }
        if (!this.isExpandable()) {
          removeAriaExpanded(eParentOfValue);
          return;
        }
        var listener = function() {
          setAriaExpanded(eParentOfValue, !!node.expanded);
        };
        this.expandListener = this.addManagedListener(node, RowNode.EVENT_EXPANDED_CHANGED, listener) || null;
        listener();
      };
      GroupCellRendererCtrl2.prototype.isTopLevelFooter = function() {
        if (!this.gridOptionsService.is("groupIncludeTotalFooter")) {
          return false;
        }
        if (this.params.value != null || this.params.node.level != -1) {
          return false;
        }
        var colDef = this.params.colDef;
        var doingFullWidth = colDef == null;
        if (doingFullWidth) {
          return true;
        }
        if (colDef.showRowGroup === true) {
          return true;
        }
        var rowGroupCols = this.columnModel.getRowGroupColumns();
        if (!rowGroupCols || rowGroupCols.length === 0) {
          return true;
        }
        var firstRowGroupCol = rowGroupCols[0];
        return firstRowGroupCol.getId() === colDef.showRowGroup;
      };
      GroupCellRendererCtrl2.prototype.isEmbeddedRowMismatch = function() {
        if (!this.params.fullWidth || !this.gridOptionsService.is("embedFullWidthRows")) {
          return false;
        }
        var pinnedLeftCell = this.params.pinned === "left";
        var pinnedRightCell = this.params.pinned === "right";
        var bodyCell = !pinnedLeftCell && !pinnedRightCell;
        if (this.gridOptionsService.is("enableRtl")) {
          if (this.columnModel.isPinningLeft()) {
            return !pinnedRightCell;
          }
          return !bodyCell;
        }
        if (this.columnModel.isPinningLeft()) {
          return !pinnedLeftCell;
        }
        return !bodyCell;
      };
      GroupCellRendererCtrl2.prototype.findDisplayedGroupNode = function() {
        var column = this.params.column;
        var rowNode = this.params.node;
        if (this.showingValueForOpenedParent) {
          var pointer = rowNode.parent;
          while (pointer != null) {
            if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
              this.displayedGroupNode = pointer;
              break;
            }
            pointer = pointer.parent;
          }
        }
        if (missing(this.displayedGroupNode)) {
          this.displayedGroupNode = rowNode;
        }
      };
      GroupCellRendererCtrl2.prototype.setupShowingValueForOpenedParent = function() {
        var rowNode = this.params.node;
        var column = this.params.column;
        if (!this.gridOptionsService.is("groupHideOpenParents")) {
          this.showingValueForOpenedParent = false;
          return;
        }
        if (!rowNode.groupData) {
          this.showingValueForOpenedParent = false;
          return;
        }
        var showingGroupNode = rowNode.rowGroupColumn != null;
        if (showingGroupNode) {
          var keyOfGroupingColumn = rowNode.rowGroupColumn.getId();
          var configuredToShowThisGroupLevel = column.isRowGroupDisplayed(keyOfGroupingColumn);
          if (configuredToShowThisGroupLevel) {
            this.showingValueForOpenedParent = false;
            return;
          }
        }
        var valPresent = rowNode.groupData[column.getId()] != null;
        this.showingValueForOpenedParent = valPresent;
      };
      GroupCellRendererCtrl2.prototype.addValueElement = function() {
        if (this.displayedGroupNode.footer) {
          this.addFooterValue();
        } else {
          this.addGroupValue();
          this.addChildCount();
        }
      };
      GroupCellRendererCtrl2.prototype.addGroupValue = function() {
        var paramsAdjusted = this.adjustParamsWithDetailsFromRelatedColumn();
        var innerCompDetails = this.getInnerCompDetails(paramsAdjusted);
        var valueFormatted = paramsAdjusted.valueFormatted, value = paramsAdjusted.value;
        var valueWhenNoRenderer = valueFormatted;
        if (valueWhenNoRenderer == null) {
          if (value === "" && this.params.node.group) {
            var localeTextFunc = this.localeService.getLocaleTextFunc();
            valueWhenNoRenderer = localeTextFunc("blanks", "(Blanks)");
          } else {
            valueWhenNoRenderer = value !== null && value !== void 0 ? value : null;
          }
        }
        this.comp.setInnerRenderer(innerCompDetails, valueWhenNoRenderer);
      };
      GroupCellRendererCtrl2.prototype.adjustParamsWithDetailsFromRelatedColumn = function() {
        var relatedColumn = this.displayedGroupNode.rowGroupColumn;
        var column = this.params.column;
        if (!relatedColumn) {
          return this.params;
        }
        var notFullWidth = column != null;
        if (notFullWidth) {
          var showingThisRowGroup = column.isRowGroupDisplayed(relatedColumn.getId());
          if (!showingThisRowGroup) {
            return this.params;
          }
        }
        var params = this.params;
        var _a = this.params, value = _a.value, node = _a.node;
        var valueFormatted = this.valueFormatterService.formatValue(relatedColumn, node, value);
        var paramsAdjusted = __assign$e(__assign$e({}, params), { valueFormatted });
        return paramsAdjusted;
      };
      GroupCellRendererCtrl2.prototype.addFooterValue = function() {
        var footerValueGetter = this.params.footerValueGetter;
        var footerValue = "";
        if (footerValueGetter) {
          var paramsClone = cloneObject(this.params);
          paramsClone.value = this.params.value;
          if (typeof footerValueGetter === "function") {
            footerValue = footerValueGetter(paramsClone);
          } else if (typeof footerValueGetter === "string") {
            footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
          } else {
            console.warn("AG Grid: footerValueGetter should be either a function or a string (expression)");
          }
        } else {
          footerValue = "Total " + (this.params.value != null ? this.params.value : "");
        }
        var innerCompDetails = this.getInnerCompDetails(this.params);
        this.comp.setInnerRenderer(innerCompDetails, footerValue);
      };
      GroupCellRendererCtrl2.prototype.getInnerCompDetails = function(params) {
        var _this = this;
        if (params.fullWidth) {
          return this.userComponentFactory.getFullWidthGroupRowInnerCellRenderer(this.gridOptionsService.get("groupRowRendererParams"), params);
        }
        var innerCompDetails = this.userComponentFactory.getInnerRendererDetails(params, params);
        var isGroupRowRenderer = function(details) {
          return details && details.componentClass == _this.compClass;
        };
        if (innerCompDetails && !isGroupRowRenderer(innerCompDetails)) {
          return innerCompDetails;
        }
        var relatedColumn = this.displayedGroupNode.rowGroupColumn;
        var relatedColDef = relatedColumn ? relatedColumn.getColDef() : void 0;
        if (!relatedColDef) {
          return;
        }
        var relatedCompDetails = this.userComponentFactory.getCellRendererDetails(relatedColDef, params);
        if (relatedCompDetails && !isGroupRowRenderer(relatedCompDetails)) {
          return relatedCompDetails;
        }
        if (isGroupRowRenderer(relatedCompDetails) && relatedColDef.cellRendererParams && relatedColDef.cellRendererParams.innerRenderer) {
          var res = this.userComponentFactory.getInnerRendererDetails(relatedColDef.cellRendererParams, params);
          return res;
        }
      };
      GroupCellRendererCtrl2.prototype.addChildCount = function() {
        if (this.params.suppressCount) {
          return;
        }
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));
        this.updateChildCount();
      };
      GroupCellRendererCtrl2.prototype.updateChildCount = function() {
        var allChildrenCount = this.displayedGroupNode.allChildrenCount;
        var showingGroupForThisNode = this.isShowRowGroupForThisRow();
        var showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;
        var countString = showCount ? "(" + allChildrenCount + ")" : "";
        this.comp.setChildCount(countString);
      };
      GroupCellRendererCtrl2.prototype.isShowRowGroupForThisRow = function() {
        if (this.gridOptionsService.is("treeData")) {
          return true;
        }
        var rowGroupColumn = this.displayedGroupNode.rowGroupColumn;
        if (!rowGroupColumn) {
          return false;
        }
        var column = this.params.column;
        var thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());
        return thisColumnIsInterested;
      };
      GroupCellRendererCtrl2.prototype.addExpandAndContract = function() {
        var _a;
        var params = this.params;
        var eExpandedIcon = createIconNoSpan("groupExpanded", this.gridOptionsService, null);
        var eContractedIcon = createIconNoSpan("groupContracted", this.gridOptionsService, null);
        if (eExpandedIcon) {
          this.eExpanded.appendChild(eExpandedIcon);
        }
        if (eContractedIcon) {
          this.eContracted.appendChild(eContractedIcon);
        }
        var eGroupCell = params.eGridCell;
        var isDoubleClickEdit = ((_a = this.params.column) === null || _a === void 0 ? void 0 : _a.isCellEditable(params.node)) && this.gridOptionsService.is("enableGroupEdit");
        if (!isDoubleClickEdit && this.isExpandable() && !params.suppressDoubleClickExpand) {
          this.addManagedListener(eGroupCell, "dblclick", this.onCellDblClicked.bind(this));
        }
        this.addManagedListener(this.eExpanded, "click", this.onExpandClicked.bind(this));
        this.addManagedListener(this.eContracted, "click", this.onExpandClicked.bind(this));
        this.addManagedListener(eGroupCell, "keydown", this.onKeyDown.bind(this));
        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
        this.showExpandAndContractIcons();
        var expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_GROUP_CHANGED, expandableChangedListener);
        this.addManagedListener(this.displayedGroupNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);
      };
      GroupCellRendererCtrl2.prototype.onExpandClicked = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        stopPropagationForAgGrid(mouseEvent);
        this.onExpandOrContract(mouseEvent);
      };
      GroupCellRendererCtrl2.prototype.onExpandOrContract = function(e) {
        var rowNode = this.displayedGroupNode;
        var nextExpandState = !rowNode.expanded;
        if (!nextExpandState && rowNode.sticky) {
          this.scrollToStickyNode(rowNode);
        }
        rowNode.setExpanded(nextExpandState, e);
      };
      GroupCellRendererCtrl2.prototype.scrollToStickyNode = function(rowNode) {
        var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
        var scrollFeature = gridBodyCtrl.getScrollFeature();
        scrollFeature.setVerticalScrollPosition(rowNode.rowTop - rowNode.stickyRowTop);
      };
      GroupCellRendererCtrl2.prototype.isExpandable = function() {
        if (this.showingValueForOpenedParent) {
          return true;
        }
        var rowNode = this.displayedGroupNode;
        var reducedLeafNode = this.columnModel.isPivotMode() && rowNode.leafGroup;
        var expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;
        if (!expandableGroup) {
          return false;
        }
        var column = this.params.column;
        var displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === "string";
        if (displayingForOneColumnOnly) {
          var showing = this.isShowRowGroupForThisRow();
          return showing;
        }
        return true;
      };
      GroupCellRendererCtrl2.prototype.showExpandAndContractIcons = function() {
        var _a = this, params = _a.params, displayedGroup = _a.displayedGroupNode, columnModel = _a.columnModel;
        var node = params.node;
        var isExpandable = this.isExpandable();
        if (isExpandable) {
          var expanded = this.showingValueForOpenedParent ? true : node.expanded;
          this.comp.setExpandedDisplayed(expanded);
          this.comp.setContractedDisplayed(!expanded);
        } else {
          this.comp.setExpandedDisplayed(false);
          this.comp.setContractedDisplayed(false);
        }
        var pivotMode = columnModel.isPivotMode();
        var pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;
        var addExpandableCss = isExpandable && !pivotModeAndLeafGroup;
        var isTotalFooterNode = node.footer && node.level === -1;
        this.comp.addOrRemoveCssClass("ag-cell-expandable", addExpandableCss);
        this.comp.addOrRemoveCssClass("ag-row-group", addExpandableCss);
        if (pivotMode) {
          this.comp.addOrRemoveCssClass("ag-pivot-leaf-group", pivotModeAndLeafGroup);
        } else if (!isTotalFooterNode) {
          this.comp.addOrRemoveCssClass("ag-row-group-leaf-indent", !addExpandableCss);
        }
      };
      GroupCellRendererCtrl2.prototype.onRowNodeIsExpandableChanged = function() {
        this.showExpandAndContractIcons();
        this.setIndent();
        this.refreshAriaExpanded();
      };
      GroupCellRendererCtrl2.prototype.setupIndent = function() {
        var node = this.params.node;
        var suppressPadding = this.params.suppressPadding;
        if (!suppressPadding) {
          this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));
          this.setIndent();
        }
      };
      GroupCellRendererCtrl2.prototype.setIndent = function() {
        if (this.gridOptionsService.is("groupHideOpenParents")) {
          return;
        }
        var params = this.params;
        var rowNode = params.node;
        var fullWithRow = !!params.colDef;
        var treeData = this.gridOptionsService.is("treeData");
        var manyDimensionThisColumn = !fullWithRow || treeData || params.colDef.showRowGroup === true;
        var paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;
        if (this.indentClass) {
          this.comp.addOrRemoveCssClass(this.indentClass, false);
        }
        this.indentClass = "ag-row-group-indent-" + paddingCount;
        this.comp.addOrRemoveCssClass(this.indentClass, true);
      };
      GroupCellRendererCtrl2.prototype.addFullWidthRowDraggerIfNeeded = function() {
        var _this = this;
        if (!this.params.fullWidth || !this.params.rowDrag) {
          return;
        }
        var rowDragComp = new RowDragComp(function() {
          return _this.params.value;
        }, this.params.node);
        this.createManagedBean(rowDragComp, this.context);
        this.eGui.insertAdjacentElement("afterbegin", rowDragComp.getGui());
      };
      GroupCellRendererCtrl2.prototype.isUserWantsSelected = function() {
        var paramsCheckbox = this.params.checkbox;
        return typeof paramsCheckbox === "function" || paramsCheckbox === true;
      };
      GroupCellRendererCtrl2.prototype.addCheckboxIfNeeded = function() {
        var _this = this;
        var rowNode = this.displayedGroupNode;
        var checkboxNeeded = this.isUserWantsSelected() && // footers cannot be selected
        !rowNode.footer && // pinned rows cannot be selected
        !rowNode.rowPinned && // details cannot be selected
        !rowNode.detail;
        if (checkboxNeeded) {
          var cbSelectionComponent_1 = new CheckboxSelectionComponent();
          this.getContext().createBean(cbSelectionComponent_1);
          cbSelectionComponent_1.init({
            rowNode: this.params.node,
            column: this.params.column,
            overrides: {
              isVisible: this.params.checkbox,
              callbackParams: this.params,
              removeHidden: true
            }
          });
          this.eCheckbox.appendChild(cbSelectionComponent_1.getGui());
          this.addDestroyFunc(function() {
            return _this.getContext().destroyBean(cbSelectionComponent_1);
          });
        }
        this.comp.setCheckboxVisible(checkboxNeeded);
      };
      GroupCellRendererCtrl2.prototype.onKeyDown = function(event) {
        var isEnterKey = event.key === KeyCode.ENTER;
        if (!isEnterKey || this.params.suppressEnterExpand) {
          return;
        }
        var cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);
        if (cellEditable) {
          return;
        }
        this.onExpandOrContract(event);
      };
      GroupCellRendererCtrl2.prototype.onCellDblClicked = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var targetIsExpandIcon = isElementInEventPath(this.eExpanded, mouseEvent) || isElementInEventPath(this.eContracted, mouseEvent);
        if (!targetIsExpandIcon) {
          this.onExpandOrContract(mouseEvent);
        }
      };
      __decorate$28([
        Autowired("expressionService")
      ], GroupCellRendererCtrl2.prototype, "expressionService", void 0);
      __decorate$28([
        Autowired("valueFormatterService")
      ], GroupCellRendererCtrl2.prototype, "valueFormatterService", void 0);
      __decorate$28([
        Autowired("columnModel")
      ], GroupCellRendererCtrl2.prototype, "columnModel", void 0);
      __decorate$28([
        Autowired("userComponentFactory")
      ], GroupCellRendererCtrl2.prototype, "userComponentFactory", void 0);
      __decorate$28([
        Autowired("ctrlsService")
      ], GroupCellRendererCtrl2.prototype, "ctrlsService", void 0);
      return GroupCellRendererCtrl2;
    }(BeanStub);
    __extends$2n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$27 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GroupCellRenderer = /** @class */
    function(_super) {
      __extends$2n(GroupCellRenderer2, _super);
      function GroupCellRenderer2() {
        return _super.call(this, GroupCellRenderer2.TEMPLATE) || this;
      }
      GroupCellRenderer2.prototype.init = function(params) {
        var _this = this;
        var compProxy = {
          setInnerRenderer: function(compDetails, valueToDisplay) {
            return _this.setRenderDetails(compDetails, valueToDisplay);
          },
          setChildCount: function(count) {
            return _this.eChildCount.innerHTML = count;
          },
          addOrRemoveCssClass: function(cssClass, value) {
            return _this.addOrRemoveCssClass(cssClass, value);
          },
          setContractedDisplayed: function(expanded) {
            return setDisplayed(_this.eContracted, expanded);
          },
          setExpandedDisplayed: function(expanded) {
            return setDisplayed(_this.eExpanded, expanded);
          },
          setCheckboxVisible: function(visible) {
            return _this.eCheckbox.classList.toggle("ag-invisible", !visible);
          }
        };
        var ctrl = this.createManagedBean(new GroupCellRendererCtrl());
        var fullWidth = !params.colDef;
        var eGui = this.getGui();
        ctrl.init(compProxy, eGui, this.eCheckbox, this.eExpanded, this.eContracted, this.constructor, params);
        if (fullWidth) {
          setAriaRole(eGui, "gridcell");
        }
      };
      GroupCellRenderer2.prototype.setRenderDetails = function(compDetails, valueToDisplay) {
        var _this = this;
        if (compDetails) {
          var componentPromise = compDetails.newAgStackInstance();
          if (!componentPromise) {
            return;
          }
          componentPromise.then(function(comp) {
            if (!comp) {
              return;
            }
            var destroyComp = function() {
              return _this.context.destroyBean(comp);
            };
            if (_this.isAlive()) {
              _this.eValue.appendChild(comp.getGui());
              _this.addDestroyFunc(destroyComp);
            } else {
              destroyComp();
            }
          });
        } else {
          this.eValue.innerText = valueToDisplay;
        }
      };
      GroupCellRenderer2.prototype.destroy = function() {
        this.getContext().destroyBean(this.innerCellRenderer);
        _super.prototype.destroy.call(this);
      };
      GroupCellRenderer2.prototype.refresh = function() {
        return false;
      };
      GroupCellRenderer2.TEMPLATE = '<span class="ag-cell-wrapper">\n            <span class="ag-group-expanded" ref="eExpanded"></span>\n            <span class="ag-group-contracted" ref="eContracted"></span>\n            <span class="ag-group-checkbox ag-invisible" ref="eCheckbox"></span>\n            <span class="ag-group-value" ref="eValue"></span>\n            <span class="ag-group-child-count" ref="eChildCount"></span>\n        </span>';
      __decorate$27([
        RefSelector("eExpanded")
      ], GroupCellRenderer2.prototype, "eExpanded", void 0);
      __decorate$27([
        RefSelector("eContracted")
      ], GroupCellRenderer2.prototype, "eContracted", void 0);
      __decorate$27([
        RefSelector("eCheckbox")
      ], GroupCellRenderer2.prototype, "eCheckbox", void 0);
      __decorate$27([
        RefSelector("eValue")
      ], GroupCellRenderer2.prototype, "eValue", void 0);
      __decorate$27([
        RefSelector("eChildCount")
      ], GroupCellRenderer2.prototype, "eChildCount", void 0);
      return GroupCellRenderer2;
    }(Component);
    __extends$2m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$26 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    LoadingCellRenderer = /** @class */
    function(_super) {
      __extends$2m(LoadingCellRenderer2, _super);
      function LoadingCellRenderer2() {
        return _super.call(this, LoadingCellRenderer2.TEMPLATE) || this;
      }
      LoadingCellRenderer2.prototype.init = function(params) {
        params.node.failedLoad ? this.setupFailed() : this.setupLoading();
      };
      LoadingCellRenderer2.prototype.setupFailed = function() {
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        this.eLoadingText.innerText = localeTextFunc("loadingError", "ERR");
      };
      LoadingCellRenderer2.prototype.setupLoading = function() {
        var eLoadingIcon = createIconNoSpan("groupLoading", this.gridOptionsService, null);
        if (eLoadingIcon) {
          this.eLoadingIcon.appendChild(eLoadingIcon);
        }
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        this.eLoadingText.innerText = localeTextFunc("loadingOoo", "Loading");
      };
      LoadingCellRenderer2.prototype.refresh = function(params) {
        return false;
      };
      LoadingCellRenderer2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      LoadingCellRenderer2.TEMPLATE = '<div class="ag-loading">\n            <span class="ag-loading-icon" ref="eLoadingIcon"></span>\n            <span class="ag-loading-text" ref="eLoadingText"></span>\n        </div>';
      __decorate$26([
        RefSelector("eLoadingIcon")
      ], LoadingCellRenderer2.prototype, "eLoadingIcon", void 0);
      __decorate$26([
        RefSelector("eLoadingText")
      ], LoadingCellRenderer2.prototype, "eLoadingText", void 0);
      return LoadingCellRenderer2;
    }(Component);
    __extends$2l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    LoadingOverlayComponent$1 = /** @class */
    function(_super) {
      __extends$2l(LoadingOverlayComponent2, _super);
      function LoadingOverlayComponent2() {
        return _super.call(this) || this;
      }
      LoadingOverlayComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      LoadingOverlayComponent2.prototype.init = function(params) {
        var _a;
        var template = (_a = this.gridOptionsService.get("overlayLoadingTemplate")) !== null && _a !== void 0 ? _a : LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE;
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        var localisedTemplate = template.replace("[LOADING...]", localeTextFunc("loadingOoo", "Loading..."));
        this.setTemplate(localisedTemplate);
      };
      LoadingOverlayComponent2.DEFAULT_LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
      return LoadingOverlayComponent2;
    }(Component);
    __extends$2k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    NoRowsOverlayComponent$1 = /** @class */
    function(_super) {
      __extends$2k(NoRowsOverlayComponent2, _super);
      function NoRowsOverlayComponent2() {
        return _super.call(this) || this;
      }
      NoRowsOverlayComponent2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      NoRowsOverlayComponent2.prototype.init = function(params) {
        var _a;
        var template = (_a = this.gridOptionsService.get("overlayNoRowsTemplate")) !== null && _a !== void 0 ? _a : NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE;
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        var localisedTemplate = template.replace("[NO_ROWS_TO_SHOW]", localeTextFunc("noRowsToShow", "No Rows To Show"));
        this.setTemplate(localisedTemplate);
      };
      NoRowsOverlayComponent2.DEFAULT_NO_ROWS_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
      return NoRowsOverlayComponent2;
    }(Component);
    __extends$2j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TooltipComponent$1 = /** @class */
    function(_super) {
      __extends$2j(TooltipComponent2, _super);
      function TooltipComponent2() {
        return _super.call(
          this,
          /* html */
          '<div class="ag-tooltip"></div>'
        ) || this;
      }
      TooltipComponent2.prototype.init = function(params) {
        var value = params.value;
        this.getGui().innerHTML = escapeString(value);
      };
      return TooltipComponent2;
    }(PopupComponent);
    __extends$2i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    NumberCellEditorInput = /** @class */
    function() {
      function NumberCellEditorInput2() {
      }
      NumberCellEditorInput2.prototype.getTemplate = function() {
        return (
          /* html */
          '<ag-input-number-field class="ag-cell-editor" ref="eInput"></ag-input-number-field>'
        );
      };
      NumberCellEditorInput2.prototype.init = function(eInput, params) {
        this.eInput = eInput;
        this.params = params;
        if (params.max != null) {
          eInput.setMax(params.max);
        }
        if (params.min != null) {
          eInput.setMin(params.min);
        }
        if (params.precision != null) {
          eInput.setPrecision(params.precision);
        }
        if (params.step != null) {
          eInput.setStep(params.step);
        }
        if (params.showStepperButtons) {
          eInput.getInputElement().classList.add("ag-number-field-input-stepper");
        }
      };
      NumberCellEditorInput2.prototype.getValue = function() {
        var value = this.eInput.getValue();
        if (!exists(value) && !exists(this.params.value)) {
          return this.params.value;
        }
        var parsedValue = this.params.parseValue(value);
        if (parsedValue == null) {
          return parsedValue;
        }
        if (typeof parsedValue === "string") {
          if (parsedValue === "") {
            return null;
          }
          parsedValue = Number(parsedValue);
        }
        return isNaN(parsedValue) ? null : parsedValue;
      };
      NumberCellEditorInput2.prototype.getStartValue = function() {
        return this.params.value;
      };
      return NumberCellEditorInput2;
    }();
    NumberCellEditor = /** @class */
    function(_super) {
      __extends$2i(NumberCellEditor2, _super);
      function NumberCellEditor2() {
        return _super.call(this, new NumberCellEditorInput()) || this;
      }
      return NumberCellEditor2;
    }(SimpleCellEditor);
    __extends$2h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    DateCellEditorInput = /** @class */
    function() {
      function DateCellEditorInput2() {
      }
      DateCellEditorInput2.prototype.getTemplate = function() {
        return (
          /* html */
          '<ag-input-date-field class="ag-cell-editor" ref="eInput"></ag-input-date-field>'
        );
      };
      DateCellEditorInput2.prototype.init = function(eInput, params) {
        this.eInput = eInput;
        this.params = params;
        if (params.min != null) {
          eInput.setMin(params.min);
        }
        if (params.max != null) {
          eInput.setMax(params.max);
        }
        if (params.step != null) {
          eInput.setStep(params.step);
        }
      };
      DateCellEditorInput2.prototype.getValue = function() {
        var value = this.eInput.getDate();
        if (!exists(value) && !exists(this.params.value)) {
          return this.params.value;
        }
        return value !== null && value !== void 0 ? value : null;
      };
      DateCellEditorInput2.prototype.getStartValue = function() {
        var value = this.params.value;
        if (!(value instanceof Date)) {
          return void 0;
        }
        return serialiseDate(value, false);
      };
      return DateCellEditorInput2;
    }();
    DateCellEditor = /** @class */
    function(_super) {
      __extends$2h(DateCellEditor2, _super);
      function DateCellEditor2() {
        return _super.call(this, new DateCellEditorInput()) || this;
      }
      return DateCellEditor2;
    }(SimpleCellEditor);
    __extends$2g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$25 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DateStringCellEditorInput = /** @class */
    function() {
      function DateStringCellEditorInput2(getDataTypeService) {
        this.getDataTypeService = getDataTypeService;
      }
      DateStringCellEditorInput2.prototype.getTemplate = function() {
        return (
          /* html */
          '<ag-input-date-field class="ag-cell-editor" ref="eInput"></ag-input-date-field>'
        );
      };
      DateStringCellEditorInput2.prototype.init = function(eInput, params) {
        this.eInput = eInput;
        this.params = params;
        if (params.min != null) {
          eInput.setMin(params.min);
        }
        if (params.max != null) {
          eInput.setMax(params.max);
        }
        if (params.step != null) {
          eInput.setStep(params.step);
        }
      };
      DateStringCellEditorInput2.prototype.getValue = function() {
        var value = this.formatDate(this.eInput.getDate());
        if (!exists(value) && !exists(this.params.value)) {
          return this.params.value;
        }
        return this.params.parseValue(value !== null && value !== void 0 ? value : "");
      };
      DateStringCellEditorInput2.prototype.getStartValue = function() {
        var _a, _b;
        return serialiseDate((_b = this.parseDate((_a = this.params.value) !== null && _a !== void 0 ? _a : void 0)) !== null && _b !== void 0 ? _b : null, false);
      };
      DateStringCellEditorInput2.prototype.parseDate = function(value) {
        return this.getDataTypeService().getDateParserFunction()(value);
      };
      DateStringCellEditorInput2.prototype.formatDate = function(value) {
        return this.getDataTypeService().getDateFormatterFunction()(value);
      };
      return DateStringCellEditorInput2;
    }();
    DateStringCellEditor = /** @class */
    function(_super) {
      __extends$2g(DateStringCellEditor2, _super);
      function DateStringCellEditor2() {
        var _this = _super.call(this, new DateStringCellEditorInput(function() {
          return _this.dataTypeService;
        })) || this;
        return _this;
      }
      __decorate$25([
        Autowired("dataTypeService")
      ], DateStringCellEditor2.prototype, "dataTypeService", void 0);
      return DateStringCellEditor2;
    }(SimpleCellEditor);
    __extends$2f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$24 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CheckboxCellRenderer = /** @class */
    function(_super) {
      __extends$2f(CheckboxCellRenderer2, _super);
      function CheckboxCellRenderer2() {
        return _super.call(this, CheckboxCellRenderer2.TEMPLATE) || this;
      }
      CheckboxCellRenderer2.prototype.init = function(params) {
        var _this = this;
        this.params = params;
        this.updateCheckbox(params);
        this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
        this.addManagedListener(this.eCheckbox.getInputElement(), "click", function(event) {
          stopPropagationForAgGrid(event);
          if (_this.eCheckbox.isDisabled()) {
            return;
          }
          var isSelected = _this.eCheckbox.getValue();
          _this.onCheckboxChanged(isSelected);
        });
        this.addManagedListener(this.eCheckbox.getInputElement(), "dblclick", function(event) {
          stopPropagationForAgGrid(event);
        });
        var eDocument = this.gridOptionsService.getDocument();
        this.addManagedListener(this.params.eGridCell, "keydown", function(event) {
          if (event.key === KeyCode.SPACE && !_this.eCheckbox.isDisabled()) {
            if (_this.params.eGridCell === eDocument.activeElement) {
              _this.eCheckbox.toggle();
            }
            var isSelected = _this.eCheckbox.getValue();
            _this.onCheckboxChanged(isSelected);
            event.preventDefault();
          }
        });
      };
      CheckboxCellRenderer2.prototype.refresh = function(params) {
        this.params = params;
        this.updateCheckbox(params);
        return true;
      };
      CheckboxCellRenderer2.prototype.updateCheckbox = function(params) {
        var _a, _b, _c;
        var isSelected;
        var displayed = true;
        if (params.node.group && params.column) {
          var colId = params.column.getColId();
          if (colId.startsWith(GROUP_AUTO_COLUMN_ID)) {
            isSelected = params.value == null || params.value === "" ? void 0 : params.value === "true";
          } else if (params.node.aggData && params.node.aggData[colId] !== void 0) {
            isSelected = (_a = params.value) !== null && _a !== void 0 ? _a : void 0;
          } else {
            displayed = false;
          }
        } else {
          isSelected = (_b = params.value) !== null && _b !== void 0 ? _b : void 0;
        }
        if (!displayed) {
          this.eCheckbox.setDisplayed(false);
          return;
        }
        this.eCheckbox.setValue(isSelected);
        var disabled = params.disabled != null ? params.disabled : !((_c = params.column) === null || _c === void 0 ? void 0 : _c.isCellEditable(params.node));
        this.eCheckbox.setDisabled(disabled);
        var translate = this.localeService.getLocaleTextFunc();
        var stateName = getAriaCheckboxStateName(translate, isSelected);
        var ariaLabel = disabled ? stateName : translate("ariaToggleCellValue", "Press SPACE to toggle cell value") + " (" + stateName + ")";
        this.eCheckbox.setInputAriaLabel(ariaLabel);
      };
      CheckboxCellRenderer2.prototype.onCheckboxChanged = function(isSelected) {
        var _a = this.params, column = _a.column, node = _a.node, rowIndex = _a.rowIndex, value = _a.value;
        var eventStarted = {
          type: Events.EVENT_CELL_EDITING_STARTED,
          column,
          colDef: column === null || column === void 0 ? void 0 : column.getColDef(),
          data: node.data,
          node,
          rowIndex,
          rowPinned: node.rowPinned,
          value
        };
        this.eventService.dispatchEvent(eventStarted);
        var valueChanged = this.params.node.setDataValue(this.params.column, isSelected, "edit");
        var eventStopped = {
          type: Events.EVENT_CELL_EDITING_STOPPED,
          column,
          colDef: column === null || column === void 0 ? void 0 : column.getColDef(),
          data: node.data,
          node,
          rowIndex,
          rowPinned: node.rowPinned,
          value,
          oldValue: value,
          newValue: isSelected,
          valueChanged
        };
        this.eventService.dispatchEvent(eventStopped);
      };
      CheckboxCellRenderer2.TEMPLATE = '\n        <div class="ag-cell-wrapper ag-checkbox-cell" role="presentation">\n            <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n        </div>';
      __decorate$24([
        RefSelector("eCheckbox")
      ], CheckboxCellRenderer2.prototype, "eCheckbox", void 0);
      return CheckboxCellRenderer2;
    }(Component);
    __extends$2e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$23 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CheckboxCellEditor = /** @class */
    function(_super) {
      __extends$2e(CheckboxCellEditor2, _super);
      function CheckboxCellEditor2() {
        return _super.call(
          this,
          /* html */
          '\n            <div class="ag-cell-wrapper ag-cell-edit-wrapper ag-checkbox-edit">\n                <ag-checkbox role="presentation" ref="eCheckbox"></ag-checkbox>\n            </div>'
        ) || this;
      }
      CheckboxCellEditor2.prototype.init = function(params) {
        var _this = this;
        var _a;
        this.params = params;
        var isSelected = (_a = params.value) !== null && _a !== void 0 ? _a : void 0;
        this.eCheckbox.setValue(isSelected);
        this.eCheckbox.getInputElement().setAttribute("tabindex", "-1");
        this.setAriaLabel(isSelected);
        this.addManagedListener(this.eCheckbox, Events.EVENT_FIELD_VALUE_CHANGED, function(event) {
          return _this.setAriaLabel(event.selected);
        });
      };
      CheckboxCellEditor2.prototype.getValue = function() {
        return this.eCheckbox.getValue();
      };
      CheckboxCellEditor2.prototype.focusIn = function() {
        this.eCheckbox.getFocusableElement().focus();
      };
      CheckboxCellEditor2.prototype.afterGuiAttached = function() {
        if (this.params.cellStartedEdit) {
          this.focusIn();
        }
      };
      CheckboxCellEditor2.prototype.isPopup = function() {
        return false;
      };
      CheckboxCellEditor2.prototype.setAriaLabel = function(isSelected) {
        var translate = this.localeService.getLocaleTextFunc();
        var stateName = getAriaCheckboxStateName(translate, isSelected);
        var ariaLabel = translate("ariaToggleCellValue", "Press SPACE to toggle cell value");
        this.eCheckbox.setInputAriaLabel(ariaLabel + " (" + stateName + ")");
      };
      __decorate$23([
        RefSelector("eCheckbox")
      ], CheckboxCellEditor2.prototype, "eCheckbox", void 0);
      return CheckboxCellEditor2;
    }(PopupComponent);
    __extends$2d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$22 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$n = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$j = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    UserComponentRegistry = /** @class */
    function(_super) {
      __extends$2d(UserComponentRegistry2, _super);
      function UserComponentRegistry2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.agGridDefaults = {
          //date
          agDateInput: DefaultDateComponent,
          //header
          agColumnHeader: HeaderComp,
          agColumnGroupHeader: HeaderGroupComp,
          agSortIndicator: SortIndicatorComp,
          //floating filters
          agTextColumnFloatingFilter: TextFloatingFilter,
          agNumberColumnFloatingFilter: NumberFloatingFilter,
          agDateColumnFloatingFilter: DateFloatingFilter,
          agReadOnlyFloatingFilter: ReadOnlyFloatingFilter,
          // renderers
          agAnimateShowChangeCellRenderer: AnimateShowChangeCellRenderer,
          agAnimateSlideCellRenderer: AnimateSlideCellRenderer,
          agGroupCellRenderer: GroupCellRenderer,
          agGroupRowRenderer: GroupCellRenderer,
          agLoadingCellRenderer: LoadingCellRenderer,
          agCheckboxCellRenderer: CheckboxCellRenderer,
          //editors
          agCellEditor: TextCellEditor,
          agTextCellEditor: TextCellEditor,
          agNumberCellEditor: NumberCellEditor,
          agDateCellEditor: DateCellEditor,
          agDateStringCellEditor: DateStringCellEditor,
          agSelectCellEditor: SelectCellEditor,
          agLargeTextCellEditor: LargeTextCellEditor,
          agCheckboxCellEditor: CheckboxCellEditor,
          //filter
          agTextColumnFilter: TextFilter,
          agNumberColumnFilter: NumberFilter,
          agDateColumnFilter: DateFilter,
          //overlays
          agLoadingOverlay: LoadingOverlayComponent$1,
          agNoRowsOverlay: NoRowsOverlayComponent$1,
          // tooltips
          agTooltipComponent: TooltipComponent$1
        };
        _this.enterpriseAgDefaultCompsModule = {
          agSetColumnFilter: ModuleNames.SetFilterModule,
          agSetColumnFloatingFilter: ModuleNames.SetFilterModule,
          agMultiColumnFilter: ModuleNames.MultiFilterModule,
          agMultiColumnFloatingFilter: ModuleNames.MultiFilterModule,
          agGroupColumnFilter: ModuleNames.RowGroupingModule,
          agGroupColumnFloatingFilter: ModuleNames.RowGroupingModule,
          agRichSelect: ModuleNames.RichSelectModule,
          agRichSelectCellEditor: ModuleNames.RichSelectModule,
          agDetailCellRenderer: ModuleNames.MasterDetailModule,
          agSparklineCellRenderer: ModuleNames.SparklinesModule
        };
        _this.jsComps = {};
        return _this;
      }
      UserComponentRegistry2.prototype.init = function() {
        var _this = this;
        if (this.gridOptions.components != null) {
          iterateObject(this.gridOptions.components, function(key, component) {
            return _this.registerJsComponent(key, component);
          });
        }
      };
      UserComponentRegistry2.prototype.registerDefaultComponent = function(name, component) {
        if (this.agGridDefaults[name]) {
          console.error("Trying to overwrite a default component. You should call registerComponent");
          return;
        }
        this.agGridDefaults[name] = component;
      };
      UserComponentRegistry2.prototype.registerJsComponent = function(name, component) {
        this.jsComps[name] = component;
      };
      UserComponentRegistry2.prototype.retrieve = function(propertyName, name) {
        var _this = this;
        var createResult = function(component, componentFromFramework) {
          return { componentFromFramework, component };
        };
        var registeredViaFrameworkComp = this.getFrameworkOverrides().frameworkComponent(name, this.gridOptions.components);
        if (registeredViaFrameworkComp != null) {
          return createResult(registeredViaFrameworkComp, true);
        }
        var jsComponent = this.jsComps[name];
        if (jsComponent) {
          var isFwkComp = this.getFrameworkOverrides().isFrameworkComponent(jsComponent);
          return createResult(jsComponent, isFwkComp);
        }
        var defaultComponent = this.agGridDefaults[name];
        if (defaultComponent) {
          return createResult(defaultComponent, false);
        }
        var moduleForComponent = this.enterpriseAgDefaultCompsModule[name];
        if (moduleForComponent) {
          ModuleRegistry.__assertRegistered(moduleForComponent, "AG Grid '" + propertyName + "' component: " + name, this.context.getGridId());
        } else {
          doOnce(function() {
            _this.warnAboutMissingComponent(propertyName, name);
          }, "MissingComp" + name);
        }
        return null;
      };
      UserComponentRegistry2.prototype.warnAboutMissingComponent = function(propertyName, componentName) {
        var validComponents = __spreadArray$j(__spreadArray$j([], __read$n(Object.keys(this.agGridDefaults).filter(function(k) {
          return !["agCellEditor", "agGroupRowRenderer", "agSortIndicator"].includes(k);
        }))), __read$n(Object.keys(this.jsComps)));
        var suggestions = fuzzySuggestions(componentName, validComponents, true, 0.8).values;
        console.warn("AG Grid: Could not find '" + componentName + `' component. It was configured as "` + propertyName + ": '" + componentName + `'" but it wasn't found in the list of registered components.`);
        if (suggestions.length > 0) {
          console.warn("         Did you mean: [" + suggestions.slice(0, 3) + "]?");
        }
        console.warn("If using a custom component check it has been registered as described in: https://ag-grid.com/javascript-data-grid/components/");
      };
      __decorate$22([
        Autowired("gridOptions")
      ], UserComponentRegistry2.prototype, "gridOptions", void 0);
      __decorate$22([
        PostConstruct
      ], UserComponentRegistry2.prototype, "init", null);
      UserComponentRegistry2 = __decorate$22([
        Bean("userComponentRegistry")
      ], UserComponentRegistry2);
      return UserComponentRegistry2;
    }(BeanStub);
    DateComponent = {
      propertyName: "dateComponent",
      cellRenderer: false
    };
    HeaderComponent = {
      propertyName: "headerComponent",
      cellRenderer: false
    };
    HeaderGroupComponent = {
      propertyName: "headerGroupComponent",
      cellRenderer: false
    };
    CellRendererComponent = {
      propertyName: "cellRenderer",
      cellRenderer: true
    };
    CellEditorComponent = {
      propertyName: "cellEditor",
      cellRenderer: false
    };
    InnerRendererComponent = {
      propertyName: "innerRenderer",
      cellRenderer: true
    };
    LoadingOverlayComponent = {
      propertyName: "loadingOverlayComponent",
      cellRenderer: false
    };
    NoRowsOverlayComponent = {
      propertyName: "noRowsOverlayComponent",
      cellRenderer: false
    };
    TooltipComponent = {
      propertyName: "tooltipComponent",
      cellRenderer: false
    };
    FilterComponent = {
      propertyName: "filter",
      cellRenderer: false
    };
    FloatingFilterComponent = {
      propertyName: "floatingFilterComponent",
      cellRenderer: false
    };
    ToolPanelComponent = {
      propertyName: "toolPanel",
      cellRenderer: false
    };
    StatusPanelComponent = {
      propertyName: "statusPanel",
      cellRenderer: false
    };
    FullWidth = {
      propertyName: "fullWidthCellRenderer",
      cellRenderer: true
    };
    FullWidthLoading = {
      propertyName: "loadingCellRenderer",
      cellRenderer: true
    };
    FullWidthGroup = {
      propertyName: "groupRowRenderer",
      cellRenderer: true
    };
    FullWidthDetail = {
      propertyName: "detailCellRenderer",
      cellRenderer: true
    };
    FloatingFilterMapper = /** @class */
    function() {
      function FloatingFilterMapper2() {
      }
      FloatingFilterMapper2.getFloatingFilterType = function(filterType) {
        return this.filterToFloatingFilterMapping[filterType];
      };
      FloatingFilterMapper2.filterToFloatingFilterMapping = {
        set: "agSetColumnFloatingFilter",
        agSetColumnFilter: "agSetColumnFloatingFilter",
        multi: "agMultiColumnFloatingFilter",
        agMultiColumnFilter: "agMultiColumnFloatingFilter",
        group: "agGroupColumnFloatingFilter",
        agGroupColumnFilter: "agGroupColumnFloatingFilter",
        number: "agNumberColumnFloatingFilter",
        agNumberColumnFilter: "agNumberColumnFloatingFilter",
        date: "agDateColumnFloatingFilter",
        agDateColumnFilter: "agDateColumnFloatingFilter",
        text: "agTextColumnFloatingFilter",
        agTextColumnFilter: "agTextColumnFloatingFilter"
      };
      return FloatingFilterMapper2;
    }();
    __extends$2c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$21 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    UserComponentFactory = /** @class */
    function(_super) {
      __extends$2c(UserComponentFactory2, _super);
      function UserComponentFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      UserComponentFactory2.prototype.getHeaderCompDetails = function(colDef, params) {
        return this.getCompDetails(colDef, HeaderComponent, "agColumnHeader", params);
      };
      UserComponentFactory2.prototype.getHeaderGroupCompDetails = function(params) {
        var colGroupDef = params.columnGroup.getColGroupDef();
        return this.getCompDetails(colGroupDef, HeaderGroupComponent, "agColumnGroupHeader", params);
      };
      UserComponentFactory2.prototype.getFullWidthCellRendererDetails = function(params) {
        return this.getCompDetails(this.gridOptions, FullWidth, null, params, true);
      };
      UserComponentFactory2.prototype.getFullWidthLoadingCellRendererDetails = function(params) {
        return this.getCompDetails(this.gridOptions, FullWidthLoading, "agLoadingCellRenderer", params, true);
      };
      UserComponentFactory2.prototype.getFullWidthGroupCellRendererDetails = function(params) {
        return this.getCompDetails(this.gridOptions, FullWidthGroup, "agGroupRowRenderer", params, true);
      };
      UserComponentFactory2.prototype.getFullWidthDetailCellRendererDetails = function(params) {
        return this.getCompDetails(this.gridOptions, FullWidthDetail, "agDetailCellRenderer", params, true);
      };
      UserComponentFactory2.prototype.getInnerRendererDetails = function(def, params) {
        return this.getCompDetails(def, InnerRendererComponent, null, params);
      };
      UserComponentFactory2.prototype.getFullWidthGroupRowInnerCellRenderer = function(def, params) {
        return this.getCompDetails(def, InnerRendererComponent, null, params);
      };
      UserComponentFactory2.prototype.getCellRendererDetails = function(def, params) {
        return this.getCompDetails(def, CellRendererComponent, null, params);
      };
      UserComponentFactory2.prototype.getCellEditorDetails = function(def, params) {
        return this.getCompDetails(def, CellEditorComponent, "agCellEditor", params, true);
      };
      UserComponentFactory2.prototype.getFilterDetails = function(def, params, defaultFilter) {
        return this.getCompDetails(def, FilterComponent, defaultFilter, params, true);
      };
      UserComponentFactory2.prototype.getDateCompDetails = function(params) {
        return this.getCompDetails(this.gridOptions, DateComponent, "agDateInput", params, true);
      };
      UserComponentFactory2.prototype.getLoadingOverlayCompDetails = function(params) {
        return this.getCompDetails(this.gridOptions, LoadingOverlayComponent, "agLoadingOverlay", params, true);
      };
      UserComponentFactory2.prototype.getNoRowsOverlayCompDetails = function(params) {
        return this.getCompDetails(this.gridOptions, NoRowsOverlayComponent, "agNoRowsOverlay", params, true);
      };
      UserComponentFactory2.prototype.getTooltipCompDetails = function(params) {
        return this.getCompDetails(params.colDef, TooltipComponent, "agTooltipComponent", params, true);
      };
      UserComponentFactory2.prototype.getSetFilterCellRendererDetails = function(def, params) {
        return this.getCompDetails(def, CellRendererComponent, null, params);
      };
      UserComponentFactory2.prototype.getFloatingFilterCompDetails = function(def, params, defaultFloatingFilter) {
        return this.getCompDetails(def, FloatingFilterComponent, defaultFloatingFilter, params);
      };
      UserComponentFactory2.prototype.getToolPanelCompDetails = function(toolPanelDef, params) {
        return this.getCompDetails(toolPanelDef, ToolPanelComponent, null, params, true);
      };
      UserComponentFactory2.prototype.getStatusPanelCompDetails = function(def, params) {
        return this.getCompDetails(def, StatusPanelComponent, null, params, true);
      };
      UserComponentFactory2.prototype.getCompDetails = function(defObject, type, defaultName, params, mandatory) {
        var _this = this;
        if (mandatory === void 0) {
          mandatory = false;
        }
        var propertyName = type.propertyName, cellRenderer = type.cellRenderer;
        var _a = this.getCompKeys(defObject, type, params), compName = _a.compName, jsComp = _a.jsComp, fwComp = _a.fwComp, paramsFromSelector = _a.paramsFromSelector, popupFromSelector = _a.popupFromSelector, popupPositionFromSelector = _a.popupPositionFromSelector;
        var lookupFromRegistry = function(key) {
          var item = _this.userComponentRegistry.retrieve(propertyName, key);
          if (item) {
            jsComp = !item.componentFromFramework ? item.component : void 0;
            fwComp = item.componentFromFramework ? item.component : void 0;
          }
        };
        if (compName != null) {
          lookupFromRegistry(compName);
        }
        if (jsComp == null && fwComp == null && defaultName != null) {
          lookupFromRegistry(defaultName);
        }
        if (jsComp && cellRenderer && !this.agComponentUtils.doesImplementIComponent(jsComp)) {
          jsComp = this.agComponentUtils.adaptFunction(propertyName, jsComp);
        }
        if (!jsComp && !fwComp) {
          if (mandatory) {
            console.error("AG Grid: Could not find component " + compName + ", did you forget to configure this component?");
          }
          return;
        }
        var paramsMerged = this.mergeParamsWithApplicationProvidedParams(defObject, type, params, paramsFromSelector);
        var componentFromFramework = jsComp == null;
        var componentClass = jsComp ? jsComp : fwComp;
        return {
          componentFromFramework,
          componentClass,
          params: paramsMerged,
          type,
          popupFromSelector,
          popupPositionFromSelector,
          newAgStackInstance: function() {
            return _this.newAgStackInstance(componentClass, componentFromFramework, paramsMerged, type);
          }
        };
      };
      UserComponentFactory2.prototype.getCompKeys = function(defObject, type, params) {
        var _this = this;
        var propertyName = type.propertyName;
        var compName;
        var jsComp;
        var fwComp;
        var paramsFromSelector;
        var popupFromSelector;
        var popupPositionFromSelector;
        if (defObject) {
          var defObjectAny = defObject;
          var selectorFunc = defObjectAny[propertyName + "Selector"];
          var selectorRes = selectorFunc ? selectorFunc(params) : null;
          var assignComp = function(providedJsComp) {
            if (typeof providedJsComp === "string") {
              compName = providedJsComp;
            } else if (providedJsComp != null && providedJsComp !== true) {
              var isFwkComp = _this.getFrameworkOverrides().isFrameworkComponent(providedJsComp);
              if (isFwkComp) {
                fwComp = providedJsComp;
              } else {
                jsComp = providedJsComp;
              }
            }
          };
          if (selectorRes) {
            assignComp(selectorRes.component);
            paramsFromSelector = selectorRes.params;
            popupFromSelector = selectorRes.popup;
            popupPositionFromSelector = selectorRes.popupPosition;
          } else {
            assignComp(defObjectAny[propertyName]);
          }
        }
        return { compName, jsComp, fwComp, paramsFromSelector, popupFromSelector, popupPositionFromSelector };
      };
      UserComponentFactory2.prototype.newAgStackInstance = function(ComponentClass, componentFromFramework, params, type) {
        var propertyName = type.propertyName;
        var jsComponent = !componentFromFramework;
        var instance;
        if (jsComponent) {
          instance = new ComponentClass();
        } else {
          var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
          instance = this.frameworkComponentWrapper.wrap(ComponentClass, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList, type);
        }
        var deferredInit = this.initComponent(instance, params);
        if (deferredInit == null) {
          return AgPromise.resolve(instance);
        }
        return deferredInit.then(function() {
          return instance;
        });
      };
      UserComponentFactory2.prototype.mergeParamsWithApplicationProvidedParams = function(defObject, type, paramsFromGrid, paramsFromSelector) {
        if (paramsFromSelector === void 0) {
          paramsFromSelector = null;
        }
        var params = {
          context: this.gridOptionsService.context,
          columnApi: this.gridOptionsService.columnApi,
          api: this.gridOptionsService.api
        };
        mergeDeep(params, paramsFromGrid);
        var defObjectAny = defObject;
        var userParams = defObjectAny && defObjectAny[type.propertyName + "Params"];
        if (typeof userParams === "function") {
          var userParamsFromFunc = userParams(paramsFromGrid);
          mergeDeep(params, userParamsFromFunc);
        } else if (typeof userParams === "object") {
          mergeDeep(params, userParams);
        }
        mergeDeep(params, paramsFromSelector);
        return params;
      };
      UserComponentFactory2.prototype.initComponent = function(component, params) {
        this.context.createBean(component);
        if (component.init == null) {
          return;
        }
        return component.init(params);
      };
      UserComponentFactory2.prototype.getDefaultFloatingFilterType = function(def, getFromDefault) {
        if (def == null) {
          return null;
        }
        var defaultFloatingFilterType = null;
        var _a = this.getCompKeys(def, FilterComponent), compName = _a.compName, jsComp = _a.jsComp, fwComp = _a.fwComp;
        if (compName) {
          defaultFloatingFilterType = FloatingFilterMapper.getFloatingFilterType(compName);
        } else {
          var usingDefaultFilter = jsComp == null && fwComp == null && def.filter === true;
          if (usingDefaultFilter) {
            defaultFloatingFilterType = getFromDefault();
          }
        }
        return defaultFloatingFilterType;
      };
      __decorate$21([
        Autowired("gridOptions")
      ], UserComponentFactory2.prototype, "gridOptions", void 0);
      __decorate$21([
        Autowired("agComponentUtils")
      ], UserComponentFactory2.prototype, "agComponentUtils", void 0);
      __decorate$21([
        Autowired("componentMetadataProvider")
      ], UserComponentFactory2.prototype, "componentMetadataProvider", void 0);
      __decorate$21([
        Autowired("userComponentRegistry")
      ], UserComponentFactory2.prototype, "userComponentRegistry", void 0);
      __decorate$21([
        Optional("frameworkComponentWrapper")
      ], UserComponentFactory2.prototype, "frameworkComponentWrapper", void 0);
      UserComponentFactory2 = __decorate$21([
        Bean("userComponentFactory")
      ], UserComponentFactory2);
      return UserComponentFactory2;
    }(BeanStub);
    (function(ExcelFactoryMode2) {
      ExcelFactoryMode2[ExcelFactoryMode2["SINGLE_SHEET"] = 0] = "SINGLE_SHEET";
      ExcelFactoryMode2[ExcelFactoryMode2["MULTI_SHEET"] = 1] = "MULTI_SHEET";
    })(ExcelFactoryMode || (ExcelFactoryMode = {}));
    __extends$2b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$20 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DragService = /** @class */
    function(_super) {
      __extends$2b(DragService2, _super);
      function DragService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dragEndFunctions = [];
        _this.dragSources = [];
        return _this;
      }
      DragService2.prototype.removeAllListeners = function() {
        this.dragSources.forEach(this.removeListener.bind(this));
        this.dragSources.length = 0;
      };
      DragService2.prototype.removeListener = function(dragSourceAndListener) {
        var element = dragSourceAndListener.dragSource.eElement;
        var mouseDownListener = dragSourceAndListener.mouseDownListener;
        element.removeEventListener("mousedown", mouseDownListener);
        if (dragSourceAndListener.touchEnabled) {
          var touchStartListener = dragSourceAndListener.touchStartListener;
          element.removeEventListener("touchstart", touchStartListener, { passive: true });
        }
      };
      DragService2.prototype.removeDragSource = function(params) {
        var dragSourceAndListener = this.dragSources.find(function(item) {
          return item.dragSource === params;
        });
        if (!dragSourceAndListener) {
          return;
        }
        this.removeListener(dragSourceAndListener);
        removeFromArray(this.dragSources, dragSourceAndListener);
      };
      DragService2.prototype.isDragging = function() {
        return this.dragging;
      };
      DragService2.prototype.addDragSource = function(params) {
        var _this = this;
        var mouseListener = this.onMouseDown.bind(this, params);
        var eElement = params.eElement, includeTouch = params.includeTouch, stopPropagationForTouch = params.stopPropagationForTouch;
        eElement.addEventListener("mousedown", mouseListener);
        var touchListener = null;
        var suppressTouch = this.gridOptionsService.is("suppressTouch");
        if (includeTouch && !suppressTouch) {
          touchListener = function(touchEvent) {
            if (isFocusableFormField(touchEvent.target)) {
              return;
            }
            if (touchEvent.cancelable) {
              touchEvent.preventDefault();
              if (stopPropagationForTouch) {
                touchEvent.stopPropagation();
              }
            }
            _this.onTouchStart(params, touchEvent);
          };
          eElement.addEventListener("touchstart", touchListener, { passive: false });
        }
        this.dragSources.push({
          dragSource: params,
          mouseDownListener: mouseListener,
          touchStartListener: touchListener,
          touchEnabled: !!includeTouch
        });
      };
      DragService2.prototype.getStartTarget = function() {
        return this.startTarget;
      };
      DragService2.prototype.onTouchStart = function(params, touchEvent) {
        var _this = this;
        this.currentDragParams = params;
        this.dragging = false;
        var touch = touchEvent.touches[0];
        this.touchLastTime = touch;
        this.touchStart = touch;
        var touchMoveEvent = function(e) {
          return _this.onTouchMove(e, params.eElement);
        };
        var touchEndEvent = function(e) {
          return _this.onTouchUp(e, params.eElement);
        };
        var documentTouchMove = function(e) {
          if (e.cancelable) {
            e.preventDefault();
          }
        };
        var target = touchEvent.target;
        var events = [
          // Prevents the page document from moving while we are dragging items around.
          // preventDefault needs to be called in the touchmove listener and never inside the
          // touchstart, because using touchstart causes the click event to be cancelled on touch devices.
          { target: this.gridOptionsService.getRootNode(), type: "touchmove", listener: documentTouchMove, options: { passive: false } },
          { target, type: "touchmove", listener: touchMoveEvent, options: { passive: true } },
          { target, type: "touchend", listener: touchEndEvent, options: { passive: true } },
          { target, type: "touchcancel", listener: touchEndEvent, options: { passive: true } }
        ];
        this.addTemporaryEvents(events);
        if (params.dragStartPixels === 0) {
          this.onCommonMove(touch, this.touchStart, params.eElement);
        }
      };
      DragService2.prototype.onMouseDown = function(params, mouseEvent) {
        var _this = this;
        var e = mouseEvent;
        if (params.skipMouseEvent && params.skipMouseEvent(mouseEvent)) {
          return;
        }
        if (e._alreadyProcessedByDragService) {
          return;
        }
        e._alreadyProcessedByDragService = true;
        if (mouseEvent.button !== 0) {
          return;
        }
        if (this.shouldPreventMouseEvent(mouseEvent)) {
          mouseEvent.preventDefault();
        }
        this.currentDragParams = params;
        this.dragging = false;
        this.mouseStartEvent = mouseEvent;
        this.startTarget = mouseEvent.target;
        var mouseMoveEvent = function(event) {
          return _this.onMouseMove(event, params.eElement);
        };
        var mouseUpEvent = function(event) {
          return _this.onMouseUp(event, params.eElement);
        };
        var contextEvent = function(event) {
          return event.preventDefault();
        };
        var target = this.gridOptionsService.getRootNode();
        var events = [
          { target, type: "mousemove", listener: mouseMoveEvent },
          { target, type: "mouseup", listener: mouseUpEvent },
          { target, type: "contextmenu", listener: contextEvent }
        ];
        this.addTemporaryEvents(events);
        if (params.dragStartPixels === 0) {
          this.onMouseMove(mouseEvent, params.eElement);
        }
      };
      DragService2.prototype.addTemporaryEvents = function(events) {
        events.forEach(function(currentEvent) {
          var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
          target.addEventListener(type, listener, options);
        });
        this.dragEndFunctions.push(function() {
          events.forEach(function(currentEvent) {
            var target = currentEvent.target, type = currentEvent.type, listener = currentEvent.listener, options = currentEvent.options;
            target.removeEventListener(type, listener, options);
          });
        });
      };
      DragService2.prototype.isEventNearStartEvent = function(currentEvent, startEvent) {
        var dragStartPixels = this.currentDragParams.dragStartPixels;
        var requiredPixelDiff = exists(dragStartPixels) ? dragStartPixels : 4;
        return areEventsNear(currentEvent, startEvent, requiredPixelDiff);
      };
      DragService2.prototype.getFirstActiveTouch = function(touchList) {
        for (var i = 0; i < touchList.length; i++) {
          if (touchList[i].identifier === this.touchStart.identifier) {
            return touchList[i];
          }
        }
        return null;
      };
      DragService2.prototype.onCommonMove = function(currentEvent, startEvent, el) {
        if (!this.dragging) {
          if (!this.dragging && this.isEventNearStartEvent(currentEvent, startEvent)) {
            return;
          }
          this.dragging = true;
          var event_1 = {
            type: Events.EVENT_DRAG_STARTED,
            target: el
          };
          this.eventService.dispatchEvent(event_1);
          this.currentDragParams.onDragStart(startEvent);
          this.currentDragParams.onDragging(startEvent);
        }
        this.currentDragParams.onDragging(currentEvent);
      };
      DragService2.prototype.onTouchMove = function(touchEvent, el) {
        var touch = this.getFirstActiveTouch(touchEvent.touches);
        if (!touch) {
          return;
        }
        this.onCommonMove(touch, this.touchStart, el);
      };
      DragService2.prototype.onMouseMove = function(mouseEvent, el) {
        if (this.shouldPreventMouseEvent(mouseEvent)) {
          mouseEvent.preventDefault();
        }
        this.onCommonMove(mouseEvent, this.mouseStartEvent, el);
      };
      DragService2.prototype.shouldPreventMouseEvent = function(mouseEvent) {
        var isEnableCellTextSelect = this.gridOptionsService.is("enableCellTextSelection");
        var isSafari2 = isBrowserSafari();
        var isMouseMove = mouseEvent.type === "mousemove";
        return (
          // when `isEnableCellTextSelect` is `true`, we need to preventDefault on mouseMove
          // to avoid the grid text being selected while dragging components.
          // Note: Safari also has an issue, where `user-select: none` is not being respected, so also
          // prevent it on MouseDown.
          (isEnableCellTextSelect && isMouseMove || isSafari2) && mouseEvent.cancelable && this.mouseEventService.isEventFromThisGrid(mouseEvent) && !this.isOverFormFieldElement(mouseEvent)
        );
      };
      DragService2.prototype.isOverFormFieldElement = function(mouseEvent) {
        var el = mouseEvent.target;
        var tagName = el === null || el === void 0 ? void 0 : el.tagName.toLocaleLowerCase();
        return !!(tagName === null || tagName === void 0 ? void 0 : tagName.match("^a$|textarea|input|select|button"));
      };
      DragService2.prototype.onTouchUp = function(touchEvent, el) {
        var touch = this.getFirstActiveTouch(touchEvent.changedTouches);
        if (!touch) {
          touch = this.touchLastTime;
        }
        this.onUpCommon(touch, el);
      };
      DragService2.prototype.onMouseUp = function(mouseEvent, el) {
        this.onUpCommon(mouseEvent, el);
      };
      DragService2.prototype.onUpCommon = function(eventOrTouch, el) {
        if (this.dragging) {
          this.dragging = false;
          this.currentDragParams.onDragStop(eventOrTouch);
          var event_2 = {
            type: Events.EVENT_DRAG_STOPPED,
            target: el
          };
          this.eventService.dispatchEvent(event_2);
        }
        this.mouseStartEvent = null;
        this.startTarget = null;
        this.touchStart = null;
        this.touchLastTime = null;
        this.currentDragParams = null;
        this.dragEndFunctions.forEach(function(func) {
          return func();
        });
        this.dragEndFunctions.length = 0;
      };
      __decorate$20([
        Autowired("mouseEventService")
      ], DragService2.prototype, "mouseEventService", void 0);
      __decorate$20([
        PreDestroy
      ], DragService2.prototype, "removeAllListeners", null);
      DragService2 = __decorate$20([
        Bean("dragService")
      ], DragService2);
      return DragService2;
    }(BeanStub);
    AutoScrollService = /** @class */
    function() {
      function AutoScrollService2(params) {
        this.tickingInterval = null;
        this.onScrollCallback = null;
        this.scrollContainer = params.scrollContainer;
        this.scrollHorizontally = params.scrollAxis.indexOf("x") !== -1;
        this.scrollVertically = params.scrollAxis.indexOf("y") !== -1;
        this.scrollByTick = params.scrollByTick != null ? params.scrollByTick : 20;
        if (params.onScrollCallback) {
          this.onScrollCallback = params.onScrollCallback;
        }
        if (this.scrollVertically) {
          this.getVerticalPosition = params.getVerticalPosition;
          this.setVerticalPosition = params.setVerticalPosition;
        }
        if (this.scrollHorizontally) {
          this.getHorizontalPosition = params.getHorizontalPosition;
          this.setHorizontalPosition = params.setHorizontalPosition;
        }
        this.shouldSkipVerticalScroll = params.shouldSkipVerticalScroll || function() {
          return false;
        };
        this.shouldSkipHorizontalScroll = params.shouldSkipHorizontalScroll || function() {
          return false;
        };
      }
      AutoScrollService2.prototype.check = function(mouseEvent, forceSkipVerticalScroll) {
        if (forceSkipVerticalScroll === void 0) {
          forceSkipVerticalScroll = false;
        }
        var skipVerticalScroll = forceSkipVerticalScroll || this.shouldSkipVerticalScroll();
        if (skipVerticalScroll && this.shouldSkipHorizontalScroll()) {
          return;
        }
        var rect = this.scrollContainer.getBoundingClientRect();
        var scrollTick = this.scrollByTick;
        this.tickLeft = mouseEvent.clientX < rect.left + scrollTick;
        this.tickRight = mouseEvent.clientX > rect.right - scrollTick;
        this.tickUp = mouseEvent.clientY < rect.top + scrollTick && !skipVerticalScroll;
        this.tickDown = mouseEvent.clientY > rect.bottom - scrollTick && !skipVerticalScroll;
        if (this.tickLeft || this.tickRight || this.tickUp || this.tickDown) {
          this.ensureTickingStarted();
        } else {
          this.ensureCleared();
        }
      };
      AutoScrollService2.prototype.ensureTickingStarted = function() {
        if (this.tickingInterval === null) {
          this.tickingInterval = window.setInterval(this.doTick.bind(this), 100);
          this.tickCount = 0;
        }
      };
      AutoScrollService2.prototype.doTick = function() {
        this.tickCount++;
        var tickAmount;
        tickAmount = this.tickCount > 20 ? 200 : this.tickCount > 10 ? 80 : 40;
        if (this.scrollVertically) {
          var vScrollPosition = this.getVerticalPosition();
          if (this.tickUp) {
            this.setVerticalPosition(vScrollPosition - tickAmount);
          }
          if (this.tickDown) {
            this.setVerticalPosition(vScrollPosition + tickAmount);
          }
        }
        if (this.scrollHorizontally) {
          var hScrollPosition = this.getHorizontalPosition();
          if (this.tickLeft) {
            this.setHorizontalPosition(hScrollPosition - tickAmount);
          }
          if (this.tickRight) {
            this.setHorizontalPosition(hScrollPosition + tickAmount);
          }
        }
        if (this.onScrollCallback) {
          this.onScrollCallback();
        }
      };
      AutoScrollService2.prototype.ensureCleared = function() {
        if (this.tickingInterval) {
          window.clearInterval(this.tickingInterval);
          this.tickingInterval = null;
        }
      };
      return AutoScrollService2;
    }();
    __extends$2a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1$ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    LIST_ITEM_HOVERED = "ag-list-item-hovered";
    VirtualListDragFeature = /** @class */
    function(_super) {
      __extends$2a(VirtualListDragFeature2, _super);
      function VirtualListDragFeature2(comp, virtualList, params) {
        var _this = _super.call(this) || this;
        _this.comp = comp;
        _this.virtualList = virtualList;
        _this.params = params;
        _this.currentDragValue = null;
        _this.lastHoveredListItem = null;
        return _this;
      }
      VirtualListDragFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.params.eventSource, this.params.listItemDragStartEvent, this.listItemDragStart.bind(this));
        this.addManagedListener(this.params.eventSource, this.params.listItemDragEndEvent, this.listItemDragEnd.bind(this));
        this.createDropTarget();
        this.createAutoScrollService();
      };
      VirtualListDragFeature2.prototype.listItemDragStart = function(event) {
        this.currentDragValue = this.params.getCurrentDragValue(event);
        this.moveBlocked = this.params.isMoveBlocked(this.currentDragValue);
      };
      VirtualListDragFeature2.prototype.listItemDragEnd = function() {
        var _this = this;
        window.setTimeout(function() {
          _this.currentDragValue = null;
          _this.moveBlocked = false;
        }, 10);
      };
      VirtualListDragFeature2.prototype.createDropTarget = function() {
        var _this = this;
        var dropTarget = {
          isInterestedIn: function(type) {
            return type === _this.params.dragSourceType;
          },
          getIconName: function() {
            return DragAndDropService[_this.moveBlocked ? "ICON_NOT_ALLOWED" : "ICON_MOVE"];
          },
          getContainer: function() {
            return _this.comp.getGui();
          },
          onDragging: function(e) {
            return _this.onDragging(e);
          },
          onDragStop: function() {
            return _this.onDragStop();
          },
          onDragLeave: function() {
            return _this.onDragLeave();
          }
        };
        this.dragAndDropService.addDropTarget(dropTarget);
      };
      VirtualListDragFeature2.prototype.createAutoScrollService = function() {
        var virtualListGui = this.virtualList.getGui();
        this.autoScrollService = new AutoScrollService({
          scrollContainer: virtualListGui,
          scrollAxis: "y",
          getVerticalPosition: function() {
            return virtualListGui.scrollTop;
          },
          setVerticalPosition: function(position) {
            return virtualListGui.scrollTop = position;
          }
        });
      };
      VirtualListDragFeature2.prototype.onDragging = function(e) {
        if (!this.currentDragValue || this.moveBlocked) {
          return;
        }
        var hoveredListItem = this.getListDragItem(e);
        var comp = this.virtualList.getComponentAt(hoveredListItem.rowIndex);
        if (!comp) {
          return;
        }
        var el = comp.getGui().parentElement;
        if (this.lastHoveredListItem && this.lastHoveredListItem.rowIndex === hoveredListItem.rowIndex && this.lastHoveredListItem.position === hoveredListItem.position) {
          return;
        }
        this.autoScrollService.check(e.event);
        this.clearHoveredItems();
        this.lastHoveredListItem = hoveredListItem;
        radioCssClass(el, LIST_ITEM_HOVERED);
        radioCssClass(el, "ag-item-highlight-" + hoveredListItem.position);
      };
      VirtualListDragFeature2.prototype.getListDragItem = function(e) {
        var virtualListGui = this.virtualList.getGui();
        var paddingTop = parseFloat(window.getComputedStyle(virtualListGui).paddingTop);
        var rowHeight = this.virtualList.getRowHeight();
        var scrollTop = this.virtualList.getScrollTop();
        var rowIndex = Math.max(0, (e.y - paddingTop + scrollTop) / rowHeight);
        var maxLen = this.params.getNumRows(this.comp) - 1;
        var normalizedRowIndex = Math.min(maxLen, rowIndex) | 0;
        return {
          rowIndex: normalizedRowIndex,
          position: Math.round(rowIndex) > rowIndex || rowIndex > maxLen ? "bottom" : "top",
          component: this.virtualList.getComponentAt(normalizedRowIndex)
        };
      };
      VirtualListDragFeature2.prototype.onDragStop = function() {
        if (this.moveBlocked) {
          return;
        }
        this.params.moveItem(this.currentDragValue, this.lastHoveredListItem);
        this.clearHoveredItems();
        this.autoScrollService.ensureCleared();
      };
      VirtualListDragFeature2.prototype.onDragLeave = function() {
        this.clearHoveredItems();
        this.autoScrollService.ensureCleared();
      };
      VirtualListDragFeature2.prototype.clearHoveredItems = function() {
        var virtualListGui = this.virtualList.getGui();
        virtualListGui.querySelectorAll("." + LIST_ITEM_HOVERED).forEach(function(el) {
          [
            LIST_ITEM_HOVERED,
            "ag-item-highlight-top",
            "ag-item-highlight-bottom"
          ].forEach(function(cls) {
            el.classList.remove(cls);
          });
        });
        this.lastHoveredListItem = null;
      };
      __decorate$1$([
        Autowired("dragAndDropService")
      ], VirtualListDragFeature2.prototype, "dragAndDropService", void 0);
      __decorate$1$([
        PostConstruct
      ], VirtualListDragFeature2.prototype, "postConstruct", null);
      return VirtualListDragFeature2;
    }(BeanStub);
    (function(RowHighlightPosition2) {
      RowHighlightPosition2[RowHighlightPosition2["Above"] = 0] = "Above";
      RowHighlightPosition2[RowHighlightPosition2["Below"] = 1] = "Below";
    })(RowHighlightPosition || (RowHighlightPosition = {}));
    (function(ClientSideRowModelSteps2) {
      ClientSideRowModelSteps2["EVERYTHING"] = "group";
      ClientSideRowModelSteps2["FILTER"] = "filter";
      ClientSideRowModelSteps2["SORT"] = "sort";
      ClientSideRowModelSteps2["MAP"] = "map";
      ClientSideRowModelSteps2["AGGREGATE"] = "aggregate";
      ClientSideRowModelSteps2["FILTER_AGGREGATES"] = "filter_aggregates";
      ClientSideRowModelSteps2["PIVOT"] = "pivot";
      ClientSideRowModelSteps2["NOTHING"] = "nothing";
    })(ClientSideRowModelSteps || (ClientSideRowModelSteps = {}));
    __decorate$1_ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridApi = /** @class */
    function() {
      function GridApi2() {
        this.detailGridInfoMap = {};
        this.destroyCalled = false;
      }
      GridApi2.prototype.registerOverlayWrapperComp = function(overlayWrapperComp) {
        this.overlayWrapperComp = overlayWrapperComp;
      };
      GridApi2.prototype.registerSideBarComp = function(sideBarComp) {
        this.sideBarComp = sideBarComp;
      };
      GridApi2.prototype.init = function() {
        var _this = this;
        switch (this.rowModel.getType()) {
          case "clientSide":
            this.clientSideRowModel = this.rowModel;
            break;
          case "infinite":
            this.infiniteRowModel = this.rowModel;
            break;
          case "serverSide":
            this.serverSideRowModel = this.rowModel;
            break;
        }
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
        });
      };
      GridApi2.prototype.__getAlignedGridService = function() {
        return this.alignedGridsService;
      };
      GridApi2.prototype.__getContext = function() {
        return this.context;
      };
      GridApi2.prototype.getSetterMethod = function(key) {
        return "set" + key.charAt(0).toUpperCase() + key.substring(1);
      };
      GridApi2.prototype.__setPropertyOnly = function(propertyName, value) {
        return this.gos.__setPropertyOnly(propertyName, value);
      };
      GridApi2.prototype.__updateProperty = function(propertyName, value, force, changeSet) {
        if (changeSet === void 0) {
          changeSet = void 0;
        }
        this.gos.set(propertyName, value, force, {}, changeSet);
        var setterName = this.getSetterMethod(propertyName);
        var dynamicApi = this;
        if (dynamicApi[setterName]) {
          dynamicApi[setterName](value);
        }
      };
      GridApi2.prototype.getGridId = function() {
        return this.context.getGridId();
      };
      GridApi2.prototype.addDetailGridInfo = function(id, gridInfo) {
        this.detailGridInfoMap[id] = gridInfo;
      };
      GridApi2.prototype.removeDetailGridInfo = function(id) {
        this.detailGridInfoMap[id] = void 0;
      };
      GridApi2.prototype.getDetailGridInfo = function(id) {
        return this.detailGridInfoMap[id];
      };
      GridApi2.prototype.forEachDetailGridInfo = function(callback) {
        var index = 0;
        iterateObject(this.detailGridInfoMap, function(id, gridInfo) {
          if (exists(gridInfo)) {
            callback(gridInfo, index);
            index++;
          }
        });
      };
      GridApi2.prototype.getDataAsCsv = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.CsvExportModule, "api.getDataAsCsv", this.context.getGridId())) {
          return this.csvCreator.getDataAsCsv(params);
        }
      };
      GridApi2.prototype.exportDataAsCsv = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.CsvExportModule, "api.exportDataAsCSv", this.context.getGridId())) {
          this.csvCreator.exportDataAsCsv(params);
        }
      };
      GridApi2.prototype.getExcelExportMode = function(params) {
        var baseParams = this.gos.get("defaultExcelExportParams");
        var mergedParams = Object.assign({ exportMode: "xlsx" }, baseParams, params);
        return mergedParams.exportMode;
      };
      GridApi2.prototype.assertNotExcelMultiSheet = function(method, params) {
        if (!ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, "api." + method, this.context.getGridId())) {
          return false;
        }
        var exportMode = this.getExcelExportMode(params);
        if (this.excelCreator.getFactoryMode(exportMode) === ExcelFactoryMode.MULTI_SHEET) {
          console.warn("AG Grid: The Excel Exporter is currently on Multi Sheet mode. End that operation by calling 'api.getMultipleSheetAsExcel()' or 'api.exportMultipleSheetsAsExcel()'");
          return false;
        }
        return true;
      };
      GridApi2.prototype.getDataAsExcel = function(params) {
        if (this.assertNotExcelMultiSheet("getDataAsExcel", params)) {
          return this.excelCreator.getDataAsExcel(params);
        }
      };
      GridApi2.prototype.exportDataAsExcel = function(params) {
        if (this.assertNotExcelMultiSheet("exportDataAsExcel", params)) {
          this.excelCreator.exportDataAsExcel(params);
        }
      };
      GridApi2.prototype.getSheetDataForExcel = function(params) {
        if (!ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, "api.getSheetDataForExcel", this.context.getGridId())) {
          return;
        }
        var exportMode = this.getExcelExportMode(params);
        this.excelCreator.setFactoryMode(ExcelFactoryMode.MULTI_SHEET, exportMode);
        return this.excelCreator.getSheetDataForExcel(params);
      };
      GridApi2.prototype.getMultipleSheetsAsExcel = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, "api.getMultipleSheetsAsExcel", this.context.getGridId())) {
          return this.excelCreator.getMultipleSheetsAsExcel(params);
        }
      };
      GridApi2.prototype.exportMultipleSheetsAsExcel = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.ExcelExportModule, "api.exportMultipleSheetsAsExcel", this.context.getGridId())) {
          return this.excelCreator.exportMultipleSheetsAsExcel(params);
        }
      };
      GridApi2.prototype.setTreeData = function(newTreeData) {
        this.gos.set("treeData", newTreeData);
      };
      GridApi2.prototype.setGridAriaProperty = function(property, value) {
        if (!property) {
          return;
        }
        var eGrid = this.ctrlsService.getGridBodyCtrl().getGui();
        var ariaProperty = "aria-" + property;
        if (value === null) {
          eGrid.removeAttribute(ariaProperty);
        } else {
          eGrid.setAttribute(ariaProperty, value);
        }
      };
      GridApi2.prototype.logMissingRowModel = function(apiMethod) {
        var requiredRowModels = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          requiredRowModels[_i - 1] = arguments[_i];
        }
        console.error("AG Grid: api." + apiMethod + " can only be called when gridOptions.rowModelType is " + requiredRowModels.join(" or "));
      };
      GridApi2.prototype.setServerSideDatasource = function(datasource) {
        if (this.serverSideRowModel) {
          this.serverSideRowModel.setDatasource(datasource);
        } else {
          this.logMissingRowModel("setServerSideDatasource", "serverSide");
        }
      };
      GridApi2.prototype.setCacheBlockSize = function(blockSize) {
        if (this.serverSideRowModel) {
          this.gos.set("cacheBlockSize", blockSize);
          this.serverSideRowModel.resetRootStore();
        } else {
          this.logMissingRowModel("setCacheBlockSize", "serverSide");
        }
      };
      GridApi2.prototype.setDatasource = function(datasource) {
        if (this.gos.isRowModelType("infinite")) {
          this.rowModel.setDatasource(datasource);
        } else {
          this.logMissingRowModel("setDatasource", "infinite");
        }
      };
      GridApi2.prototype.setViewportDatasource = function(viewportDatasource) {
        if (this.gos.isRowModelType("viewport")) {
          this.rowModel.setViewportDatasource(viewportDatasource);
        } else {
          this.logMissingRowModel("setViewportDatasource", "viewport");
        }
      };
      GridApi2.prototype.setRowData = function(rowData) {
        var missingImmutableService = this.immutableService == null;
        if (missingImmutableService) {
          this.logMissingRowModel("setRowData", "clientSide");
          return;
        }
        if (this.immutableService.isActive()) {
          this.immutableService.setRowData(rowData);
        } else {
          this.selectionService.reset();
          this.clientSideRowModel.setRowData(rowData);
        }
      };
      GridApi2.prototype.setPinnedTopRowData = function(rows) {
        this.pinnedRowModel.setPinnedTopRowData(rows);
      };
      GridApi2.prototype.setPinnedBottomRowData = function(rows) {
        this.pinnedRowModel.setPinnedBottomRowData(rows);
      };
      GridApi2.prototype.getPinnedTopRowCount = function() {
        return this.pinnedRowModel.getPinnedTopRowCount();
      };
      GridApi2.prototype.getPinnedBottomRowCount = function() {
        return this.pinnedRowModel.getPinnedBottomRowCount();
      };
      GridApi2.prototype.getPinnedTopRow = function(index) {
        return this.pinnedRowModel.getPinnedTopRow(index);
      };
      GridApi2.prototype.getPinnedBottomRow = function(index) {
        return this.pinnedRowModel.getPinnedBottomRow(index);
      };
      GridApi2.prototype.setColumnDefs = function(colDefs, source) {
        if (source === void 0) {
          source = "api";
        }
        this.columnModel.setColumnDefs(colDefs, source);
        this.gos.set("columnDefs", colDefs, true, { source });
      };
      GridApi2.prototype.setAutoGroupColumnDef = function(colDef, source) {
        if (source === void 0) {
          source = "api";
        }
        this.gos.set("autoGroupColumnDef", colDef, true, { source });
      };
      GridApi2.prototype.setDefaultColDef = function(colDef, source) {
        if (source === void 0) {
          source = "api";
        }
        this.gos.set("defaultColDef", colDef, true, { source });
      };
      GridApi2.prototype.setColumnTypes = function(columnTypes, source) {
        if (source === void 0) {
          source = "api";
        }
        this.gos.set("columnTypes", columnTypes, true, { source });
      };
      GridApi2.prototype.expireValueCache = function() {
        this.valueCache.expire();
      };
      GridApi2.prototype.getVerticalPixelRange = function() {
        return this.gridBodyCtrl.getScrollFeature().getVScrollPosition();
      };
      GridApi2.prototype.getHorizontalPixelRange = function() {
        return this.gridBodyCtrl.getScrollFeature().getHScrollPosition();
      };
      GridApi2.prototype.setAlwaysShowHorizontalScroll = function(show) {
        this.gos.set("alwaysShowHorizontalScroll", show);
      };
      GridApi2.prototype.setAlwaysShowVerticalScroll = function(show) {
        this.gos.set("alwaysShowVerticalScroll", show);
      };
      GridApi2.prototype.refreshCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        this.rowRenderer.refreshCells(params);
      };
      GridApi2.prototype.flashCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        this.rowRenderer.flashCells(params);
      };
      GridApi2.prototype.redrawRows = function(params) {
        if (params === void 0) {
          params = {};
        }
        var rowNodes = params ? params.rowNodes : void 0;
        this.rowRenderer.redrawRows(rowNodes);
      };
      GridApi2.prototype.setFunctionsReadOnly = function(readOnly) {
        this.gos.set("functionsReadOnly", readOnly);
      };
      GridApi2.prototype.refreshHeader = function() {
        this.ctrlsService.getHeaderRowContainerCtrls().forEach(function(c) {
          return c.refresh();
        });
      };
      GridApi2.prototype.isAnyFilterPresent = function() {
        return this.filterManager.isAnyFilterPresent();
      };
      GridApi2.prototype.isColumnFilterPresent = function() {
        return this.filterManager.isColumnFilterPresent() || this.filterManager.isAggregateFilterPresent();
      };
      GridApi2.prototype.isQuickFilterPresent = function() {
        return this.filterManager.isQuickFilterPresent();
      };
      GridApi2.prototype.getModel = function() {
        return this.rowModel;
      };
      GridApi2.prototype.setRowNodeExpanded = function(rowNode, expanded, expandParents) {
        if (rowNode) {
          if (expandParents && rowNode.parent && rowNode.parent.level !== -1) {
            this.setRowNodeExpanded(rowNode.parent, expanded, expandParents);
          }
          rowNode.setExpanded(expanded);
        }
      };
      GridApi2.prototype.onGroupExpandedOrCollapsed = function() {
        if (missing(this.clientSideRowModel)) {
          this.logMissingRowModel("onGroupExpandedOrCollapsed", "clientSide");
          return;
        }
        this.clientSideRowModel.refreshModel({ step: ClientSideRowModelSteps.MAP });
      };
      GridApi2.prototype.refreshClientSideRowModel = function(step) {
        if (missing(this.clientSideRowModel)) {
          this.logMissingRowModel("refreshClientSideRowModel", "clientSide");
          return;
        }
        this.clientSideRowModel.refreshModel(step);
      };
      GridApi2.prototype.isAnimationFrameQueueEmpty = function() {
        return this.animationFrameService.isQueueEmpty();
      };
      GridApi2.prototype.flushAllAnimationFrames = function() {
        this.animationFrameService.flushAllFrames();
      };
      GridApi2.prototype.getRowNode = function(id) {
        return this.rowModel.getRowNode(id);
      };
      GridApi2.prototype.getSizesForCurrentTheme = function() {
        return {
          rowHeight: this.gos.getRowHeightAsNumber(),
          headerHeight: this.columnModel.getHeaderHeight()
        };
      };
      GridApi2.prototype.expandAll = function() {
        if (this.clientSideRowModel) {
          this.clientSideRowModel.expandOrCollapseAll(true);
        } else if (this.serverSideRowModel) {
          this.serverSideRowModel.expandAll(true);
        } else {
          this.logMissingRowModel("expandAll", "clientSide", "serverSide");
        }
      };
      GridApi2.prototype.collapseAll = function() {
        if (this.clientSideRowModel) {
          this.clientSideRowModel.expandOrCollapseAll(false);
        } else if (this.serverSideRowModel) {
          this.serverSideRowModel.expandAll(false);
        } else {
          this.logMissingRowModel("expandAll", "clientSide", "serverSide");
        }
      };
      GridApi2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
      };
      GridApi2.prototype.getQuickFilter = function() {
        return this.gos.get("quickFilterText");
      };
      GridApi2.prototype.setQuickFilter = function(newFilter) {
        this.gos.set("quickFilterText", newFilter);
      };
      GridApi2.prototype.setExcludeHiddenColumnsFromQuickFilter = function(value) {
        logDeprecation("30", "setExcludeHiddenColumnsFromQuickFilter", void 0, "Hidden columns are now excluded from the Quick Filter by default. This can be toggled using `setIncludeHiddenColumnsInQuickFilter`");
        this.setIncludeHiddenColumnsInQuickFilter(!value);
      };
      GridApi2.prototype.setIncludeHiddenColumnsInQuickFilter = function(value) {
        this.gos.set("includeHiddenColumnsInQuickFilter", value);
      };
      GridApi2.prototype.setQuickFilterParser = function(quickFilterParser) {
        this.gos.set("quickFilterParser", quickFilterParser);
      };
      GridApi2.prototype.setQuickFilterMatcher = function(quickFilterMatcher) {
        this.gos.set("quickFilterMatcher", quickFilterMatcher);
      };
      GridApi2.prototype.getAdvancedFilterModel = function() {
        if (ModuleRegistry.__assertRegistered(ModuleNames.AdvancedFilterModule, "api.getAdvancedFilterModel", this.context.getGridId())) {
          return this.filterManager.getAdvancedFilterModel();
        }
        return null;
      };
      GridApi2.prototype.setAdvancedFilterModel = function(advancedFilterModel) {
        this.gos.set("advancedFilterModel", advancedFilterModel);
      };
      GridApi2.prototype.setEnableAdvancedFilter = function(enabled) {
        this.gos.set("enableAdvancedFilter", enabled);
      };
      GridApi2.prototype.setIncludeHiddenColumnsInAdvancedFilter = function(value) {
        this.gos.set("includeHiddenColumnsInAdvancedFilter", value);
      };
      GridApi2.prototype.setAdvancedFilterParent = function(advancedFilterParent) {
        this.gos.set("advancedFilterParent", advancedFilterParent);
      };
      GridApi2.prototype.setAdvancedFilterBuilderParams = function(params) {
        this.gos.set("advancedFilterBuilderParams", params);
      };
      GridApi2.prototype.showAdvancedFilterBuilder = function() {
        if (ModuleRegistry.__assertRegistered(ModuleNames.AdvancedFilterModule, "api.setAdvancedFilterModel", this.context.getGridId())) {
          this.filterManager.showAdvancedFilterBuilder("api");
        }
      };
      GridApi2.prototype.setNodesSelected = function(params) {
        var allNodesValid = params.nodes.every(function(node) {
          if (node.rowPinned) {
            console.warn("AG Grid: cannot select pinned rows");
            return false;
          }
          if (node.id === void 0) {
            console.warn("AG Grid: cannot select node until id for node is known");
            return false;
          }
          return true;
        });
        if (!allNodesValid) {
          return;
        }
        var nodes = params.nodes, source = params.source, newValue = params.newValue;
        var nodesAsRowNode = nodes;
        this.selectionService.setNodesSelected({ nodes: nodesAsRowNode, source: source !== null && source !== void 0 ? source : "api", newValue });
      };
      GridApi2.prototype.selectAll = function(source) {
        if (source === void 0) {
          source = "apiSelectAll";
        }
        this.selectionService.selectAllRowNodes({ source });
      };
      GridApi2.prototype.deselectAll = function(source) {
        if (source === void 0) {
          source = "apiSelectAll";
        }
        this.selectionService.deselectAllRowNodes({ source });
      };
      GridApi2.prototype.selectAllFiltered = function(source) {
        if (source === void 0) {
          source = "apiSelectAllFiltered";
        }
        this.selectionService.selectAllRowNodes({ source, justFiltered: true });
      };
      GridApi2.prototype.deselectAllFiltered = function(source) {
        if (source === void 0) {
          source = "apiSelectAllFiltered";
        }
        this.selectionService.deselectAllRowNodes({ source, justFiltered: true });
      };
      GridApi2.prototype.getServerSideSelectionState = function() {
        if (missing(this.serverSideRowModel)) {
          this.logMissingRowModel("getServerSideSelectionState", "serverSide");
          return null;
        }
        return this.selectionService.getServerSideSelectionState();
      };
      GridApi2.prototype.setServerSideSelectionState = function(state) {
        if (missing(this.serverSideRowModel)) {
          this.logMissingRowModel("setServerSideSelectionState", "serverSide");
          return;
        }
        this.selectionService.setServerSideSelectionState(state);
      };
      GridApi2.prototype.selectAllOnCurrentPage = function(source) {
        if (source === void 0) {
          source = "apiSelectAllCurrentPage";
        }
        this.selectionService.selectAllRowNodes({ source, justCurrentPage: true });
      };
      GridApi2.prototype.deselectAllOnCurrentPage = function(source) {
        if (source === void 0) {
          source = "apiSelectAllCurrentPage";
        }
        this.selectionService.deselectAllRowNodes({ source, justCurrentPage: true });
      };
      GridApi2.prototype.sizeColumnsToFit = function(params) {
        this.gridBodyCtrl.sizeColumnsToFit(params);
      };
      GridApi2.prototype.showLoadingOverlay = function() {
        this.overlayWrapperComp.showLoadingOverlay();
      };
      GridApi2.prototype.showNoRowsOverlay = function() {
        this.overlayWrapperComp.showNoRowsOverlay();
      };
      GridApi2.prototype.hideOverlay = function() {
        this.overlayWrapperComp.hideOverlay();
      };
      GridApi2.prototype.getSelectedNodes = function() {
        return this.selectionService.getSelectedNodes();
      };
      GridApi2.prototype.getSelectedRows = function() {
        return this.selectionService.getSelectedRows();
      };
      GridApi2.prototype.getBestCostNodeSelection = function() {
        if (missing(this.clientSideRowModel)) {
          this.logMissingRowModel("getBestCostNodeSelection", "clientSide");
          return;
        }
        return this.selectionService.getBestCostNodeSelection();
      };
      GridApi2.prototype.getRenderedNodes = function() {
        return this.rowRenderer.getRenderedNodes();
      };
      GridApi2.prototype.ensureColumnVisible = function(key, position) {
        if (position === void 0) {
          position = "auto";
        }
        this.gridBodyCtrl.getScrollFeature().ensureColumnVisible(key, position);
      };
      GridApi2.prototype.ensureIndexVisible = function(index, position) {
        this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(index, position);
      };
      GridApi2.prototype.ensureNodeVisible = function(nodeSelector, position) {
        if (position === void 0) {
          position = null;
        }
        this.gridBodyCtrl.getScrollFeature().ensureNodeVisible(nodeSelector, position);
      };
      GridApi2.prototype.forEachLeafNode = function(callback) {
        if (missing(this.clientSideRowModel)) {
          this.logMissingRowModel("forEachLeafNode", "clientSide");
          return;
        }
        this.clientSideRowModel.forEachLeafNode(callback);
      };
      GridApi2.prototype.forEachNode = function(callback, includeFooterNodes) {
        this.rowModel.forEachNode(callback, includeFooterNodes);
      };
      GridApi2.prototype.forEachNodeAfterFilter = function(callback) {
        if (missing(this.clientSideRowModel)) {
          this.logMissingRowModel("forEachNodeAfterFilter", "clientSide");
          return;
        }
        this.clientSideRowModel.forEachNodeAfterFilter(callback);
      };
      GridApi2.prototype.forEachNodeAfterFilterAndSort = function(callback) {
        if (missing(this.clientSideRowModel)) {
          this.logMissingRowModel("forEachNodeAfterFilterAndSort", "clientSide");
          return;
        }
        this.clientSideRowModel.forEachNodeAfterFilterAndSort(callback);
      };
      GridApi2.prototype.getFilterInstance = function(key, callback) {
        return this.filterManager.getFilterInstance(key, callback);
      };
      GridApi2.prototype.destroyFilter = function(key) {
        var column = this.columnModel.getPrimaryColumn(key);
        if (column) {
          return this.filterManager.destroyFilter(column, "api");
        }
      };
      GridApi2.prototype.getStatusPanel = function(key) {
        if (!ModuleRegistry.__assertRegistered(ModuleNames.StatusBarModule, "api.getStatusPanel", this.context.getGridId())) {
          return;
        }
        var comp = this.statusBarService.getStatusPanel(key);
        return unwrapUserComp(comp);
      };
      GridApi2.prototype.getColumnDef = function(key) {
        var column = this.columnModel.getPrimaryColumn(key);
        if (column) {
          return column.getColDef();
        }
        return null;
      };
      GridApi2.prototype.getColumnDefs = function() {
        return this.columnModel.getColumnDefs();
      };
      GridApi2.prototype.onFilterChanged = function(source) {
        if (source === void 0) {
          source = "api";
        }
        this.filterManager.onFilterChanged({ source });
      };
      GridApi2.prototype.onSortChanged = function() {
        this.sortController.onSortChanged("api");
      };
      GridApi2.prototype.setFilterModel = function(model) {
        this.filterManager.setFilterModel(model);
      };
      GridApi2.prototype.getFilterModel = function() {
        return this.filterManager.getFilterModel();
      };
      GridApi2.prototype.getFocusedCell = function() {
        return this.focusService.getFocusedCell();
      };
      GridApi2.prototype.clearFocusedCell = function() {
        return this.focusService.clearFocusedCell();
      };
      GridApi2.prototype.setFocusedCell = function(rowIndex, colKey, rowPinned) {
        this.focusService.setFocusedCell({ rowIndex, column: colKey, rowPinned, forceBrowserFocus: true });
      };
      GridApi2.prototype.setSuppressRowDrag = function(value) {
        this.gos.set("suppressRowDrag", value);
      };
      GridApi2.prototype.setSuppressMoveWhenRowDragging = function(value) {
        this.gos.set("suppressMoveWhenRowDragging", value);
      };
      GridApi2.prototype.setSuppressRowClickSelection = function(value) {
        this.gos.set("suppressRowClickSelection", value);
      };
      GridApi2.prototype.addRowDropZone = function(params) {
        this.gridBodyCtrl.getRowDragFeature().addRowDropZone(params);
      };
      GridApi2.prototype.removeRowDropZone = function(params) {
        var activeDropTarget = this.dragAndDropService.findExternalZone(params);
        if (activeDropTarget) {
          this.dragAndDropService.removeDropTarget(activeDropTarget);
        }
      };
      GridApi2.prototype.getRowDropZoneParams = function(events) {
        return this.gridBodyCtrl.getRowDragFeature().getRowDropZone(events);
      };
      GridApi2.prototype.setHeaderHeight = function(headerHeight) {
        this.gos.set("headerHeight", headerHeight);
      };
      GridApi2.prototype.setDomLayout = function(domLayout) {
        this.gos.set("domLayout", domLayout);
      };
      GridApi2.prototype.setEnableCellTextSelection = function(selectable) {
        this.gridBodyCtrl.setCellTextSelection(selectable);
      };
      GridApi2.prototype.setFillHandleDirection = function(direction) {
        this.gos.set("fillHandleDirection", direction);
      };
      GridApi2.prototype.setGroupHeaderHeight = function(headerHeight) {
        this.gos.set("groupHeaderHeight", headerHeight);
      };
      GridApi2.prototype.setFloatingFiltersHeight = function(headerHeight) {
        this.gos.set("floatingFiltersHeight", headerHeight);
      };
      GridApi2.prototype.setPivotHeaderHeight = function(headerHeight) {
        this.gos.set("pivotHeaderHeight", headerHeight);
      };
      GridApi2.prototype.setPivotGroupHeaderHeight = function(headerHeight) {
        this.gos.set("pivotGroupHeaderHeight", headerHeight);
      };
      GridApi2.prototype.setPivotMode = function(pivotMode) {
        this.columnModel.setPivotMode(pivotMode);
      };
      GridApi2.prototype.setAnimateRows = function(animateRows) {
        this.gos.set("animateRows", animateRows);
      };
      GridApi2.prototype.setIsExternalFilterPresent = function(isExternalFilterPresentFunc) {
        this.gos.set("isExternalFilterPresent", isExternalFilterPresentFunc);
      };
      GridApi2.prototype.setDoesExternalFilterPass = function(doesExternalFilterPassFunc) {
        this.gos.set("doesExternalFilterPass", doesExternalFilterPassFunc);
      };
      GridApi2.prototype.setNavigateToNextCell = function(navigateToNextCellFunc) {
        this.gos.set("navigateToNextCell", navigateToNextCellFunc);
      };
      GridApi2.prototype.setTabToNextCell = function(tabToNextCellFunc) {
        this.gos.set("tabToNextCell", tabToNextCellFunc);
      };
      GridApi2.prototype.setTabToNextHeader = function(tabToNextHeaderFunc) {
        this.gos.set("tabToNextHeader", tabToNextHeaderFunc);
      };
      GridApi2.prototype.setNavigateToNextHeader = function(navigateToNextHeaderFunc) {
        this.gos.set("navigateToNextHeader", navigateToNextHeaderFunc);
      };
      GridApi2.prototype.setRowGroupPanelShow = function(rowGroupPanelShow) {
        this.gos.set("rowGroupPanelShow", rowGroupPanelShow);
      };
      GridApi2.prototype.setGetGroupRowAgg = function(getGroupRowAggFunc) {
        this.gos.set("getGroupRowAgg", getGroupRowAggFunc);
      };
      GridApi2.prototype.setGetBusinessKeyForNode = function(getBusinessKeyForNodeFunc) {
        this.gos.set("getBusinessKeyForNode", getBusinessKeyForNodeFunc);
      };
      GridApi2.prototype.setGetChildCount = function(getChildCountFunc) {
        this.gos.set("getChildCount", getChildCountFunc);
      };
      GridApi2.prototype.setProcessRowPostCreate = function(processRowPostCreateFunc) {
        this.gos.set("processRowPostCreate", processRowPostCreateFunc);
      };
      GridApi2.prototype.setGetRowId = function(getRowIdFunc) {
        this.gos.set("getRowId", getRowIdFunc);
      };
      GridApi2.prototype.setGetRowClass = function(rowClassFunc) {
        this.gos.set("getRowClass", rowClassFunc);
      };
      GridApi2.prototype.setIsFullWidthRow = function(isFullWidthRowFunc) {
        this.gos.set("isFullWidthRow", isFullWidthRowFunc);
      };
      GridApi2.prototype.setIsRowSelectable = function(isRowSelectableFunc) {
        this.gos.set("isRowSelectable", isRowSelectableFunc);
      };
      GridApi2.prototype.setIsRowMaster = function(isRowMasterFunc) {
        this.gos.set("isRowMaster", isRowMasterFunc);
      };
      GridApi2.prototype.setPostSortRows = function(postSortRowsFunc) {
        this.gos.set("postSortRows", postSortRowsFunc);
      };
      GridApi2.prototype.setGetDocument = function(getDocumentFunc) {
        this.gos.set("getDocument", getDocumentFunc);
      };
      GridApi2.prototype.setGetContextMenuItems = function(getContextMenuItemsFunc) {
        this.gos.set("getContextMenuItems", getContextMenuItemsFunc);
      };
      GridApi2.prototype.setGetMainMenuItems = function(getMainMenuItemsFunc) {
        this.gos.set("getMainMenuItems", getMainMenuItemsFunc);
      };
      GridApi2.prototype.setProcessCellForClipboard = function(processCellForClipboardFunc) {
        this.gos.set("processCellForClipboard", processCellForClipboardFunc);
      };
      GridApi2.prototype.setSendToClipboard = function(sendToClipboardFunc) {
        this.gos.set("sendToClipboard", sendToClipboardFunc);
      };
      GridApi2.prototype.setProcessCellFromClipboard = function(processCellFromClipboardFunc) {
        this.gos.set("processCellFromClipboard", processCellFromClipboardFunc);
      };
      GridApi2.prototype.setProcessSecondaryColDef = function(processSecondaryColDefFunc) {
        logDeprecation("28.0", "setProcessSecondaryColDef", "setProcessPivotResultColDef");
        this.setProcessPivotResultColDef(processSecondaryColDefFunc);
      };
      GridApi2.prototype.setProcessSecondaryColGroupDef = function(processSecondaryColGroupDefFunc) {
        logDeprecation("28.0", "setProcessSecondaryColGroupDef", "setProcessPivotResultColGroupDef");
        this.setProcessPivotResultColGroupDef(processSecondaryColGroupDefFunc);
      };
      GridApi2.prototype.setProcessPivotResultColDef = function(processPivotResultColDefFunc) {
        this.gos.set("processPivotResultColDef", processPivotResultColDefFunc);
      };
      GridApi2.prototype.setProcessPivotResultColGroupDef = function(processPivotResultColGroupDefFunc) {
        this.gos.set("processPivotResultColGroupDef", processPivotResultColGroupDefFunc);
      };
      GridApi2.prototype.setPostProcessPopup = function(postProcessPopupFunc) {
        this.gos.set("postProcessPopup", postProcessPopupFunc);
      };
      GridApi2.prototype.setInitialGroupOrderComparator = function(initialGroupOrderComparatorFunc) {
        this.gos.set("initialGroupOrderComparator", initialGroupOrderComparatorFunc);
      };
      GridApi2.prototype.setGetChartToolbarItems = function(getChartToolbarItemsFunc) {
        this.gos.set("getChartToolbarItems", getChartToolbarItemsFunc);
      };
      GridApi2.prototype.setPaginationNumberFormatter = function(paginationNumberFormatterFunc) {
        this.gos.set("paginationNumberFormatter", paginationNumberFormatterFunc);
      };
      GridApi2.prototype.setGetServerSideStoreParams = function(getServerSideStoreParamsFunc) {
        logDeprecation("28.0", "setGetServerSideStoreParams", "setGetServerSideGroupLevelParams");
        this.setGetServerSideGroupLevelParams(getServerSideStoreParamsFunc);
      };
      GridApi2.prototype.setGetServerSideGroupLevelParams = function(getServerSideGroupLevelParamsFunc) {
        this.gos.set("getServerSideGroupLevelParams", getServerSideGroupLevelParamsFunc);
      };
      GridApi2.prototype.setIsServerSideGroupOpenByDefault = function(isServerSideGroupOpenByDefaultFunc) {
        this.gos.set("isServerSideGroupOpenByDefault", isServerSideGroupOpenByDefaultFunc);
      };
      GridApi2.prototype.setIsApplyServerSideTransaction = function(isApplyServerSideTransactionFunc) {
        this.gos.set("isApplyServerSideTransaction", isApplyServerSideTransactionFunc);
      };
      GridApi2.prototype.setIsServerSideGroup = function(isServerSideGroupFunc) {
        this.gos.set("isServerSideGroup", isServerSideGroupFunc);
      };
      GridApi2.prototype.setGetServerSideGroupKey = function(getServerSideGroupKeyFunc) {
        this.gos.set("getServerSideGroupKey", getServerSideGroupKeyFunc);
      };
      GridApi2.prototype.setGetRowStyle = function(rowStyleFunc) {
        this.gos.set("getRowStyle", rowStyleFunc);
      };
      GridApi2.prototype.setGetRowHeight = function(rowHeightFunc) {
        this.gos.set("getRowHeight", rowHeightFunc);
      };
      GridApi2.prototype.assertSideBarLoaded = function(apiMethod) {
        return ModuleRegistry.__assertRegistered(ModuleNames.SideBarModule, "api." + apiMethod, this.context.getGridId());
      };
      GridApi2.prototype.isSideBarVisible = function() {
        return this.assertSideBarLoaded("isSideBarVisible") && this.sideBarComp.isDisplayed();
      };
      GridApi2.prototype.setSideBarVisible = function(show) {
        if (this.assertSideBarLoaded("setSideBarVisible")) {
          this.sideBarComp.setDisplayed(show);
        }
      };
      GridApi2.prototype.setSideBarPosition = function(position) {
        if (this.assertSideBarLoaded("setSideBarPosition")) {
          this.sideBarComp.setSideBarPosition(position);
        }
      };
      GridApi2.prototype.openToolPanel = function(key) {
        if (this.assertSideBarLoaded("openToolPanel")) {
          this.sideBarComp.openToolPanel(key, "api");
        }
      };
      GridApi2.prototype.closeToolPanel = function() {
        if (this.assertSideBarLoaded("closeToolPanel")) {
          this.sideBarComp.close("api");
        }
      };
      GridApi2.prototype.getOpenedToolPanel = function() {
        if (this.assertSideBarLoaded("getOpenedToolPanel")) {
          return this.sideBarComp.openedItem();
        }
        return null;
      };
      GridApi2.prototype.refreshToolPanel = function() {
        if (this.assertSideBarLoaded("refreshToolPanel")) {
          this.sideBarComp.refresh();
        }
      };
      GridApi2.prototype.isToolPanelShowing = function() {
        return this.assertSideBarLoaded("isToolPanelShowing") && this.sideBarComp.isToolPanelShowing();
      };
      GridApi2.prototype.getToolPanelInstance = function(id) {
        if (this.assertSideBarLoaded("getToolPanelInstance")) {
          var comp = this.sideBarComp.getToolPanelInstance(id);
          return unwrapUserComp(comp);
        }
      };
      GridApi2.prototype.getSideBar = function() {
        if (this.assertSideBarLoaded("getSideBar")) {
          return this.sideBarComp.getDef();
        }
        return void 0;
      };
      GridApi2.prototype.setSideBar = function(def) {
        this.gos.set("sideBar", def);
      };
      GridApi2.prototype.setSuppressClipboardPaste = function(value) {
        this.gos.set("suppressClipboardPaste", value);
      };
      GridApi2.prototype.resetRowHeights = function() {
        if (exists(this.clientSideRowModel)) {
          if (this.columnModel.isAutoRowHeightActive()) {
            console.warn("AG Grid: calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.");
            return;
          }
          this.clientSideRowModel.resetRowHeights();
        }
      };
      GridApi2.prototype.setGroupRemoveSingleChildren = function(value) {
        this.gos.set("groupRemoveSingleChildren", value);
      };
      GridApi2.prototype.setGroupRemoveLowestSingleChildren = function(value) {
        this.gos.set("groupRemoveLowestSingleChildren", value);
      };
      GridApi2.prototype.setGroupDisplayType = function(value) {
        this.gos.set("groupDisplayType", value);
      };
      GridApi2.prototype.setGroupIncludeFooter = function(value) {
        this.gos.set("groupIncludeFooter", value);
      };
      GridApi2.prototype.setGroupIncludeTotalFooter = function(value) {
        this.gos.set("groupIncludeTotalFooter", value);
      };
      GridApi2.prototype.setRowClass = function(className) {
        this.gos.set("rowClass", className);
      };
      GridApi2.prototype.setDeltaSort = function(enable) {
        this.gos.set("deltaSort", enable);
      };
      GridApi2.prototype.setRowCount = function(rowCount, maxRowFound) {
        if (this.serverSideRowModel) {
          if (this.columnModel.isRowGroupEmpty()) {
            this.serverSideRowModel.setRowCount(rowCount, maxRowFound);
            return;
          }
          console.error("AG Grid: setRowCount cannot be used while using row grouping.");
          return;
        }
        if (this.infiniteRowModel) {
          this.infiniteRowModel.setRowCount(rowCount, maxRowFound);
          return;
        }
        this.logMissingRowModel("setRowCount", "infinite", "serverSide");
      };
      GridApi2.prototype.onRowHeightChanged = function() {
        if (this.clientSideRowModel) {
          this.clientSideRowModel.onRowHeightChanged();
        } else if (this.serverSideRowModel) {
          this.serverSideRowModel.onRowHeightChanged();
        }
      };
      GridApi2.prototype.getValue = function(colKey, rowNode) {
        var column = this.columnModel.getPrimaryColumn(colKey);
        if (missing(column)) {
          column = this.columnModel.getGridColumn(colKey);
        }
        if (missing(column)) {
          return null;
        }
        return this.valueService.getValue(column, rowNode);
      };
      GridApi2.prototype.addEventListener = function(eventType, listener) {
        var async = this.gos.useAsyncEvents();
        this.eventService.addEventListener(eventType, listener, async);
      };
      GridApi2.prototype.addGlobalListener = function(listener) {
        var async = this.gos.useAsyncEvents();
        this.eventService.addGlobalListener(listener, async);
      };
      GridApi2.prototype.removeEventListener = function(eventType, listener) {
        var async = this.gos.useAsyncEvents();
        this.eventService.removeEventListener(eventType, listener, async);
      };
      GridApi2.prototype.removeGlobalListener = function(listener) {
        var async = this.gos.useAsyncEvents();
        this.eventService.removeGlobalListener(listener, async);
      };
      GridApi2.prototype.dispatchEvent = function(event) {
        this.eventService.dispatchEvent(event);
      };
      GridApi2.prototype.destroy = function() {
        if (this.destroyCalled) {
          return;
        }
        this.destroyCalled = true;
        this.dispatchEvent({ type: Events.EVENT_GRID_PRE_DESTROYED });
        var gridCtrl = this.ctrlsService.getGridCtrl();
        if (gridCtrl) {
          gridCtrl.destroyGridUi();
        }
        this.context.destroy();
      };
      GridApi2.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function() {
        setTimeout(removeAllReferences.bind(window, this, "Grid API"), 100);
      };
      GridApi2.prototype.warnIfDestroyed = function(methodName) {
        if (this.destroyCalled) {
          console.warn("AG Grid: Grid API method " + methodName + " was called on a grid that was destroyed.");
        }
        return this.destroyCalled;
      };
      GridApi2.prototype.resetQuickFilter = function() {
        if (this.warnIfDestroyed("resetQuickFilter")) {
          return;
        }
        this.filterManager.resetQuickFilterCache();
      };
      GridApi2.prototype.getCellRanges = function() {
        if (this.rangeService) {
          return this.rangeService.getCellRanges();
        }
        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, "api.getCellRanges", this.context.getGridId());
        return null;
      };
      GridApi2.prototype.addCellRange = function(params) {
        if (this.rangeService) {
          this.rangeService.addCellRange(params);
          return;
        }
        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, "api.addCellRange", this.context.getGridId());
      };
      GridApi2.prototype.clearRangeSelection = function() {
        if (this.rangeService) {
          this.rangeService.removeAllCellRanges();
        }
        ModuleRegistry.__assertRegistered(ModuleNames.RangeSelectionModule, "gridApi.clearRangeSelection", this.context.getGridId());
      };
      GridApi2.prototype.undoCellEditing = function() {
        this.undoRedoService.undo("api");
      };
      GridApi2.prototype.redoCellEditing = function() {
        this.undoRedoService.redo("api");
      };
      GridApi2.prototype.getCurrentUndoSize = function() {
        return this.undoRedoService.getCurrentUndoStackSize();
      };
      GridApi2.prototype.getCurrentRedoSize = function() {
        return this.undoRedoService.getCurrentRedoStackSize();
      };
      GridApi2.prototype.getChartModels = function() {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.getChartModels", this.context.getGridId())) {
          return this.chartService.getChartModels();
        }
      };
      GridApi2.prototype.getChartRef = function(chartId) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.getChartRef", this.context.getGridId())) {
          return this.chartService.getChartRef(chartId);
        }
      };
      GridApi2.prototype.getChartImageDataURL = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.getChartImageDataURL", this.context.getGridId())) {
          return this.chartService.getChartImageDataURL(params);
        }
      };
      GridApi2.prototype.downloadChart = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.downloadChart", this.context.getGridId())) {
          return this.chartService.downloadChart(params);
        }
      };
      GridApi2.prototype.openChartToolPanel = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.openChartToolPanel", this.context.getGridId())) {
          return this.chartService.openChartToolPanel(params);
        }
      };
      GridApi2.prototype.closeChartToolPanel = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.closeChartToolPanel", this.context.getGridId())) {
          return this.chartService.closeChartToolPanel(params.chartId);
        }
      };
      GridApi2.prototype.createRangeChart = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.createRangeChart", this.context.getGridId())) {
          return this.chartService.createRangeChart(params);
        }
      };
      GridApi2.prototype.createPivotChart = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.createPivotChart", this.context.getGridId())) {
          return this.chartService.createPivotChart(params);
        }
      };
      GridApi2.prototype.createCrossFilterChart = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.createCrossFilterChart", this.context.getGridId())) {
          return this.chartService.createCrossFilterChart(params);
        }
      };
      GridApi2.prototype.updateChart = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.updateChart", this.context.getGridId())) {
          this.chartService.updateChart(params);
        }
      };
      GridApi2.prototype.restoreChart = function(chartModel, chartContainer) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.GridChartsModule, "api.restoreChart", this.context.getGridId())) {
          return this.chartService.restoreChart(chartModel, chartContainer);
        }
      };
      GridApi2.prototype.copyToClipboard = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, "api.copyToClipboard", this.context.getGridId())) {
          this.clipboardService.copyToClipboard(params);
        }
      };
      GridApi2.prototype.cutToClipboard = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, "api.cutToClipboard", this.context.getGridId())) {
          this.clipboardService.cutToClipboard(params, "api");
        }
      };
      GridApi2.prototype.copySelectedRowsToClipboard = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, "api.copySelectedRowsToClipboard", this.context.getGridId())) {
          this.clipboardService.copySelectedRowsToClipboard(params);
        }
      };
      GridApi2.prototype.copySelectedRangeToClipboard = function(params) {
        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, "api.copySelectedRangeToClipboard", this.context.getGridId())) {
          this.clipboardService.copySelectedRangeToClipboard(params);
        }
      };
      GridApi2.prototype.copySelectedRangeDown = function() {
        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, "api.copySelectedRangeDown", this.context.getGridId())) {
          this.clipboardService.copyRangeDown();
        }
      };
      GridApi2.prototype.pasteFromClipboard = function() {
        if (ModuleRegistry.__assertRegistered(ModuleNames.ClipboardModule, "api.pasteFromClipboard", this.context.getGridId())) {
          this.clipboardService.pasteFromClipboard();
        }
      };
      GridApi2.prototype.showColumnMenuAfterButtonClick = function(colKey, buttonElement) {
        var column = this.columnModel.getGridColumn(colKey);
        this.menuFactory.showMenuAfterButtonClick(column, buttonElement, "columnMenu");
      };
      GridApi2.prototype.showColumnMenuAfterMouseClick = function(colKey, mouseEvent) {
        var column = this.columnModel.getGridColumn(colKey);
        if (!column) {
          column = this.columnModel.getPrimaryColumn(colKey);
        }
        if (!column) {
          console.error("AG Grid: column '" + colKey + "' not found");
          return;
        }
        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
      };
      GridApi2.prototype.hidePopupMenu = function() {
        if (this.contextMenuFactory) {
          this.contextMenuFactory.hideActiveMenu();
        }
        this.menuFactory.hideActiveMenu();
      };
      GridApi2.prototype.setPopupParent = function(ePopupParent) {
        this.gos.set("popupParent", ePopupParent);
      };
      GridApi2.prototype.tabToNextCell = function(event) {
        return this.navigationService.tabToNextCell(false, event);
      };
      GridApi2.prototype.tabToPreviousCell = function(event) {
        return this.navigationService.tabToNextCell(true, event);
      };
      GridApi2.prototype.getCellRendererInstances = function(params) {
        if (params === void 0) {
          params = {};
        }
        var res = this.rowRenderer.getCellRendererInstances(params);
        var unwrapped = res.map(unwrapUserComp);
        return unwrapped;
      };
      GridApi2.prototype.getCellEditorInstances = function(params) {
        if (params === void 0) {
          params = {};
        }
        var res = this.rowRenderer.getCellEditorInstances(params);
        var unwrapped = res.map(unwrapUserComp);
        return unwrapped;
      };
      GridApi2.prototype.getEditingCells = function() {
        return this.rowRenderer.getEditingCells();
      };
      GridApi2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        this.rowRenderer.stopEditing(cancel);
      };
      GridApi2.prototype.startEditingCell = function(params) {
        var column = this.columnModel.getGridColumn(params.colKey);
        if (!column) {
          console.warn("AG Grid: no column found for " + params.colKey);
          return;
        }
        var cellPosition = {
          rowIndex: params.rowIndex,
          rowPinned: params.rowPinned || null,
          column
        };
        var notPinned = params.rowPinned == null;
        if (notPinned) {
          this.gridBodyCtrl.getScrollFeature().ensureIndexVisible(params.rowIndex);
        }
        var cell = this.navigationService.getCellByPosition(cellPosition);
        if (!cell) {
          return;
        }
        if (!this.focusService.isCellFocused(cellPosition)) {
          this.focusService.setFocusedCell(cellPosition);
        }
        cell.startRowOrCellEdit(params.key);
      };
      GridApi2.prototype.addAggFunc = function(key, aggFunc) {
        if (this.aggFuncService) {
          this.aggFuncService.addAggFunc(key, aggFunc);
        }
      };
      GridApi2.prototype.addAggFuncs = function(aggFuncs) {
        if (this.aggFuncService) {
          this.aggFuncService.addAggFuncs(aggFuncs);
        }
      };
      GridApi2.prototype.clearAggFuncs = function() {
        if (this.aggFuncService) {
          this.aggFuncService.clear();
        }
      };
      GridApi2.prototype.applyServerSideTransaction = function(transaction) {
        if (!this.serverSideTransactionManager) {
          this.logMissingRowModel("applyServerSideTransaction", "serverSide");
          return;
        }
        return this.serverSideTransactionManager.applyTransaction(transaction);
      };
      GridApi2.prototype.applyServerSideTransactionAsync = function(transaction, callback) {
        if (!this.serverSideTransactionManager) {
          this.logMissingRowModel("applyServerSideTransactionAsync", "serverSide");
          return;
        }
        return this.serverSideTransactionManager.applyTransactionAsync(transaction, callback);
      };
      GridApi2.prototype.applyServerSideRowData = function(params) {
        var _a, _b;
        var startRow = (_a = params.startRow) !== null && _a !== void 0 ? _a : 0;
        var route = (_b = params.route) !== null && _b !== void 0 ? _b : [];
        if (startRow < 0) {
          console.warn("AG Grid: invalid value " + params.startRow + " for startRow, the value should be >= 0");
          return;
        }
        if (this.serverSideRowModel) {
          this.serverSideRowModel.applyRowData(params.successParams, startRow, route);
        } else {
          this.logMissingRowModel("setServerSideDatasource", "serverSide");
        }
      };
      GridApi2.prototype.retryServerSideLoads = function() {
        if (!this.serverSideRowModel) {
          this.logMissingRowModel("retryServerSideLoads", "serverSide");
          return;
        }
        this.serverSideRowModel.retryLoads();
      };
      GridApi2.prototype.flushServerSideAsyncTransactions = function() {
        if (!this.serverSideTransactionManager) {
          this.logMissingRowModel("flushServerSideAsyncTransactions", "serverSide");
          return;
        }
        return this.serverSideTransactionManager.flushAsyncTransactions();
      };
      GridApi2.prototype.applyTransaction = function(rowDataTransaction) {
        if (!this.clientSideRowModel) {
          this.logMissingRowModel("applyTransaction", "clientSide");
          return;
        }
        return this.clientSideRowModel.updateRowData(rowDataTransaction);
      };
      GridApi2.prototype.applyTransactionAsync = function(rowDataTransaction, callback) {
        if (!this.clientSideRowModel) {
          this.logMissingRowModel("applyTransactionAsync", "clientSide");
          return;
        }
        this.clientSideRowModel.batchUpdateRowData(rowDataTransaction, callback);
      };
      GridApi2.prototype.flushAsyncTransactions = function() {
        if (!this.clientSideRowModel) {
          this.logMissingRowModel("flushAsyncTransactions", "clientSide");
          return;
        }
        this.clientSideRowModel.flushAsyncTransactions();
      };
      GridApi2.prototype.setSuppressModelUpdateAfterUpdateTransaction = function(value) {
        this.gos.set("suppressModelUpdateAfterUpdateTransaction", value);
      };
      GridApi2.prototype.refreshInfiniteCache = function() {
        if (this.infiniteRowModel) {
          this.infiniteRowModel.refreshCache();
        } else {
          this.logMissingRowModel("refreshInfiniteCache", "infinite");
        }
      };
      GridApi2.prototype.purgeInfiniteCache = function() {
        if (this.infiniteRowModel) {
          this.infiniteRowModel.purgeCache();
        } else {
          this.logMissingRowModel("purgeInfiniteCache", "infinite");
        }
      };
      GridApi2.prototype.refreshServerSide = function(params) {
        if (!this.serverSideRowModel) {
          this.logMissingRowModel("refreshServerSide", "serverSide");
          return;
        }
        this.serverSideRowModel.refreshStore(params);
      };
      GridApi2.prototype.refreshServerSideStore = function(params) {
        logDeprecation("28.0", "refreshServerSideStore", "refreshServerSide");
        return this.refreshServerSide(params);
      };
      GridApi2.prototype.getServerSideStoreState = function() {
        logDeprecation("28.0", "getServerSideStoreState", "getServerSideGroupLevelState");
        return this.getServerSideGroupLevelState();
      };
      GridApi2.prototype.getServerSideGroupLevelState = function() {
        if (!this.serverSideRowModel) {
          this.logMissingRowModel("getServerSideGroupLevelState", "serverSide");
          return [];
        }
        return this.serverSideRowModel.getStoreState();
      };
      GridApi2.prototype.getInfiniteRowCount = function() {
        if (this.infiniteRowModel) {
          return this.infiniteRowModel.getRowCount();
        } else {
          this.logMissingRowModel("getInfiniteRowCount", "infinite");
        }
      };
      GridApi2.prototype.isLastRowIndexKnown = function() {
        if (this.infiniteRowModel) {
          return this.infiniteRowModel.isLastRowIndexKnown();
        } else {
          this.logMissingRowModel("isLastRowIndexKnown", "infinite");
        }
      };
      GridApi2.prototype.getCacheBlockState = function() {
        return this.rowNodeBlockLoader.getBlockState();
      };
      GridApi2.prototype.getFirstDisplayedRow = function() {
        return this.rowRenderer.getFirstVirtualRenderedRow();
      };
      GridApi2.prototype.getLastDisplayedRow = function() {
        return this.rowRenderer.getLastVirtualRenderedRow();
      };
      GridApi2.prototype.getDisplayedRowAtIndex = function(index) {
        return this.rowModel.getRow(index);
      };
      GridApi2.prototype.getDisplayedRowCount = function() {
        return this.rowModel.getRowCount();
      };
      GridApi2.prototype.setDataTypeDefinitions = function(dataTypeDefinitions) {
        this.gos.set("dataTypeDefinitions", dataTypeDefinitions);
      };
      GridApi2.prototype.setPagination = function(value) {
        this.gos.set("pagination", value);
      };
      GridApi2.prototype.paginationIsLastPageFound = function() {
        return this.paginationProxy.isLastPageFound();
      };
      GridApi2.prototype.paginationGetPageSize = function() {
        return this.paginationProxy.getPageSize();
      };
      GridApi2.prototype.paginationSetPageSize = function(size) {
        this.gos.set("paginationPageSize", size);
      };
      GridApi2.prototype.paginationGetCurrentPage = function() {
        return this.paginationProxy.getCurrentPage();
      };
      GridApi2.prototype.paginationGetTotalPages = function() {
        return this.paginationProxy.getTotalPages();
      };
      GridApi2.prototype.paginationGetRowCount = function() {
        return this.paginationProxy.getMasterRowCount();
      };
      GridApi2.prototype.paginationGoToNextPage = function() {
        this.paginationProxy.goToNextPage();
      };
      GridApi2.prototype.paginationGoToPreviousPage = function() {
        this.paginationProxy.goToPreviousPage();
      };
      GridApi2.prototype.paginationGoToFirstPage = function() {
        this.paginationProxy.goToFirstPage();
      };
      GridApi2.prototype.paginationGoToLastPage = function() {
        this.paginationProxy.goToLastPage();
      };
      GridApi2.prototype.paginationGoToPage = function(page) {
        this.paginationProxy.goToPage(page);
      };
      __decorate$1_([
        Optional("immutableService")
      ], GridApi2.prototype, "immutableService", void 0);
      __decorate$1_([
        Optional("csvCreator")
      ], GridApi2.prototype, "csvCreator", void 0);
      __decorate$1_([
        Optional("excelCreator")
      ], GridApi2.prototype, "excelCreator", void 0);
      __decorate$1_([
        Autowired("rowRenderer")
      ], GridApi2.prototype, "rowRenderer", void 0);
      __decorate$1_([
        Autowired("navigationService")
      ], GridApi2.prototype, "navigationService", void 0);
      __decorate$1_([
        Autowired("filterManager")
      ], GridApi2.prototype, "filterManager", void 0);
      __decorate$1_([
        Autowired("columnModel")
      ], GridApi2.prototype, "columnModel", void 0);
      __decorate$1_([
        Autowired("selectionService")
      ], GridApi2.prototype, "selectionService", void 0);
      __decorate$1_([
        Autowired("gridOptionsService")
      ], GridApi2.prototype, "gos", void 0);
      __decorate$1_([
        Autowired("valueService")
      ], GridApi2.prototype, "valueService", void 0);
      __decorate$1_([
        Autowired("alignedGridsService")
      ], GridApi2.prototype, "alignedGridsService", void 0);
      __decorate$1_([
        Autowired("eventService")
      ], GridApi2.prototype, "eventService", void 0);
      __decorate$1_([
        Autowired("pinnedRowModel")
      ], GridApi2.prototype, "pinnedRowModel", void 0);
      __decorate$1_([
        Autowired("context")
      ], GridApi2.prototype, "context", void 0);
      __decorate$1_([
        Autowired("rowModel")
      ], GridApi2.prototype, "rowModel", void 0);
      __decorate$1_([
        Autowired("sortController")
      ], GridApi2.prototype, "sortController", void 0);
      __decorate$1_([
        Autowired("paginationProxy")
      ], GridApi2.prototype, "paginationProxy", void 0);
      __decorate$1_([
        Autowired("focusService")
      ], GridApi2.prototype, "focusService", void 0);
      __decorate$1_([
        Autowired("dragAndDropService")
      ], GridApi2.prototype, "dragAndDropService", void 0);
      __decorate$1_([
        Optional("rangeService")
      ], GridApi2.prototype, "rangeService", void 0);
      __decorate$1_([
        Optional("clipboardService")
      ], GridApi2.prototype, "clipboardService", void 0);
      __decorate$1_([
        Optional("aggFuncService")
      ], GridApi2.prototype, "aggFuncService", void 0);
      __decorate$1_([
        Autowired("menuFactory")
      ], GridApi2.prototype, "menuFactory", void 0);
      __decorate$1_([
        Optional("contextMenuFactory")
      ], GridApi2.prototype, "contextMenuFactory", void 0);
      __decorate$1_([
        Autowired("valueCache")
      ], GridApi2.prototype, "valueCache", void 0);
      __decorate$1_([
        Autowired("animationFrameService")
      ], GridApi2.prototype, "animationFrameService", void 0);
      __decorate$1_([
        Optional("statusBarService")
      ], GridApi2.prototype, "statusBarService", void 0);
      __decorate$1_([
        Optional("chartService")
      ], GridApi2.prototype, "chartService", void 0);
      __decorate$1_([
        Optional("undoRedoService")
      ], GridApi2.prototype, "undoRedoService", void 0);
      __decorate$1_([
        Optional("rowNodeBlockLoader")
      ], GridApi2.prototype, "rowNodeBlockLoader", void 0);
      __decorate$1_([
        Optional("ssrmTransactionManager")
      ], GridApi2.prototype, "serverSideTransactionManager", void 0);
      __decorate$1_([
        Autowired("ctrlsService")
      ], GridApi2.prototype, "ctrlsService", void 0);
      __decorate$1_([
        PostConstruct
      ], GridApi2.prototype, "init", null);
      __decorate$1_([
        PreDestroy
      ], GridApi2.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
      GridApi2 = __decorate$1_([
        Bean("gridApi")
      ], GridApi2);
      return GridApi2;
    }();
    __extends$29 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1Z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    QuickFilterService = /** @class */
    function(_super) {
      __extends$29(QuickFilterService2, _super);
      function QuickFilterService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.quickFilter = null;
        _this.quickFilterParts = null;
        return _this;
      }
      QuickFilterService_1 = QuickFilterService2;
      QuickFilterService2.prototype.postConstruct = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, function() {
          return _this.resetQuickFilterCache();
        });
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function() {
          return _this.resetQuickFilterCache();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, function() {
          return _this.resetQuickFilterCache();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
          if (!_this.gridOptionsService.is("includeHiddenColumnsInQuickFilter")) {
            _this.resetQuickFilterCache();
          }
        });
        this.addManagedPropertyListener("quickFilterText", function(e) {
          return _this.setQuickFilter(e.currentValue);
        });
        this.addManagedPropertyListener("includeHiddenColumnsInQuickFilter", function() {
          return _this.onIncludeHiddenColumnsInQuickFilterChanged();
        });
        this.quickFilter = this.parseQuickFilter(this.gridOptionsService.get("quickFilterText"));
        this.parser = this.gridOptionsService.get("quickFilterParser");
        this.matcher = this.gridOptionsService.get("quickFilterMatcher");
        this.setQuickFilterParts();
        this.addManagedPropertyListeners(["quickFilterMatcher", "quickFilterParser"], function() {
          return _this.setQuickFilterParserAndMatcher();
        });
      };
      QuickFilterService2.prototype.isQuickFilterPresent = function() {
        return this.quickFilter !== null;
      };
      QuickFilterService2.prototype.doesRowPassQuickFilter = function(node) {
        var _this = this;
        var usingCache = this.gridOptionsService.is("cacheQuickFilter");
        if (this.matcher) {
          return this.doesRowPassQuickFilterMatcher(usingCache, node);
        }
        return this.quickFilterParts.every(function(part) {
          return usingCache ? _this.doesRowPassQuickFilterCache(node, part) : _this.doesRowPassQuickFilterNoCache(node, part);
        });
      };
      QuickFilterService2.prototype.resetQuickFilterCache = function() {
        this.rowModel.forEachNode(function(node) {
          return node.quickFilterAggregateText = null;
        });
      };
      QuickFilterService2.prototype.setQuickFilterParts = function() {
        var _a = this, quickFilter = _a.quickFilter, parser = _a.parser;
        if (quickFilter) {
          this.quickFilterParts = parser ? parser(quickFilter) : quickFilter.split(" ");
        } else {
          this.quickFilterParts = null;
        }
      };
      QuickFilterService2.prototype.parseQuickFilter = function(newFilter) {
        if (!exists(newFilter)) {
          return null;
        }
        if (!this.gridOptionsService.isRowModelType("clientSide")) {
          console.warn("AG Grid - Quick filtering only works with the Client-Side Row Model");
          return null;
        }
        return newFilter.toUpperCase();
      };
      QuickFilterService2.prototype.setQuickFilter = function(newFilter) {
        if (newFilter != null && typeof newFilter !== "string") {
          console.warn("AG Grid - setQuickFilter() only supports string inputs, received: " + typeof newFilter);
          return;
        }
        var parsedFilter = this.parseQuickFilter(newFilter);
        if (this.quickFilter !== parsedFilter) {
          this.quickFilter = parsedFilter;
          this.setQuickFilterParts();
          this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });
        }
      };
      QuickFilterService2.prototype.setQuickFilterParserAndMatcher = function() {
        var parser = this.gridOptionsService.get("quickFilterParser");
        var matcher = this.gridOptionsService.get("quickFilterMatcher");
        var hasChanged = parser !== this.parser || matcher !== this.matcher;
        this.parser = parser;
        this.matcher = matcher;
        if (hasChanged) {
          this.setQuickFilterParts();
          this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });
        }
      };
      QuickFilterService2.prototype.onIncludeHiddenColumnsInQuickFilterChanged = function() {
        this.columnModel.refreshQuickFilterColumns();
        this.resetQuickFilterCache();
        if (this.isQuickFilterPresent()) {
          this.dispatchEvent({ type: QuickFilterService_1.EVENT_QUICK_FILTER_CHANGED });
        }
      };
      QuickFilterService2.prototype.doesRowPassQuickFilterNoCache = function(node, filterPart) {
        var _this = this;
        var columns = this.columnModel.getAllColumnsForQuickFilter();
        return columns.some(function(column) {
          var part = _this.getQuickFilterTextForColumn(column, node);
          return exists(part) && part.indexOf(filterPart) >= 0;
        });
      };
      QuickFilterService2.prototype.doesRowPassQuickFilterCache = function(node, filterPart) {
        this.checkGenerateQuickFilterAggregateText(node);
        return node.quickFilterAggregateText.indexOf(filterPart) >= 0;
      };
      QuickFilterService2.prototype.doesRowPassQuickFilterMatcher = function(usingCache, node) {
        var quickFilterAggregateText;
        if (usingCache) {
          this.checkGenerateQuickFilterAggregateText(node);
          quickFilterAggregateText = node.quickFilterAggregateText;
        } else {
          quickFilterAggregateText = this.getQuickFilterAggregateText(node);
        }
        var _a = this, quickFilterParts = _a.quickFilterParts, matcher = _a.matcher;
        return matcher(quickFilterParts, quickFilterAggregateText);
      };
      QuickFilterService2.prototype.checkGenerateQuickFilterAggregateText = function(node) {
        if (!node.quickFilterAggregateText) {
          node.quickFilterAggregateText = this.getQuickFilterAggregateText(node);
        }
      };
      QuickFilterService2.prototype.getQuickFilterTextForColumn = function(column, node) {
        var value = this.valueService.getValue(column, node, true);
        var colDef = column.getColDef();
        if (colDef.getQuickFilterText) {
          var params = {
            value,
            node,
            data: node.data,
            column,
            colDef,
            api: this.gridOptionsService.api,
            columnApi: this.gridOptionsService.columnApi,
            context: this.gridOptionsService.context
          };
          value = colDef.getQuickFilterText(params);
        }
        return exists(value) ? value.toString().toUpperCase() : null;
      };
      QuickFilterService2.prototype.getQuickFilterAggregateText = function(node) {
        var _this = this;
        var stringParts = [];
        var columns = this.columnModel.getAllColumnsForQuickFilter();
        columns.forEach(function(column) {
          var part = _this.getQuickFilterTextForColumn(column, node);
          if (exists(part)) {
            stringParts.push(part);
          }
        });
        return stringParts.join(QuickFilterService_1.QUICK_FILTER_SEPARATOR);
      };
      var QuickFilterService_1;
      QuickFilterService2.EVENT_QUICK_FILTER_CHANGED = "quickFilterChanged";
      QuickFilterService2.QUICK_FILTER_SEPARATOR = "\n";
      __decorate$1Z([
        Autowired("valueService")
      ], QuickFilterService2.prototype, "valueService", void 0);
      __decorate$1Z([
        Autowired("columnModel")
      ], QuickFilterService2.prototype, "columnModel", void 0);
      __decorate$1Z([
        Autowired("rowModel")
      ], QuickFilterService2.prototype, "rowModel", void 0);
      __decorate$1Z([
        PostConstruct
      ], QuickFilterService2.prototype, "postConstruct", null);
      QuickFilterService2 = QuickFilterService_1 = __decorate$1Z([
        Bean("quickFilterService")
      ], QuickFilterService2);
      return QuickFilterService2;
    }(BeanStub);
    __extends$28 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$d = function() {
      __assign$d = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$d.apply(this, arguments);
    };
    __decorate$1Y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FilterManager = /** @class */
    function(_super) {
      __extends$28(FilterManager2, _super);
      function FilterManager2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allColumnFilters = /* @__PURE__ */ new Map();
        _this.allColumnListeners = /* @__PURE__ */ new Map();
        _this.activeAggregateFilters = [];
        _this.activeColumnFilters = [];
        _this.processingFilterChange = false;
        _this.filterModelUpdateQueue = [];
        return _this;
      }
      FilterManager2.prototype.init = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, function() {
          return _this.onColumnsChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, function() {
          return _this.refreshFiltersForAggregations();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, function() {
          return _this.refreshFiltersForAggregations();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, function() {
          return _this.refreshFiltersForAggregations();
        });
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, function() {
          return _this.updateAdvancedFilterColumns();
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
          return _this.updateAdvancedFilterColumns();
        });
        this.allowShowChangeAfterFilter = this.gridOptionsService.is("allowShowChangeAfterFilter");
        this.externalFilterPresent = this.isExternalFilterPresentCallback();
        this.updateAggFiltering();
        this.addManagedPropertyListener("groupAggFiltering", function() {
          return _this.updateAggFiltering();
        });
        this.addManagedPropertyListener("advancedFilterModel", function(event) {
          return _this.setAdvancedFilterModel(event.currentValue);
        });
        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, function(_a) {
          var enabled = _a.enabled;
          return _this.onAdvancedFilterEnabledChanged(enabled);
        });
        this.addManagedListener(this.eventService, Events.EVENT_DATA_TYPES_INFERRED, function() {
          return _this.processFilterModelUpdateQueue();
        });
        this.addManagedListener(this.quickFilterService, QuickFilterService.EVENT_QUICK_FILTER_CHANGED, function() {
          return _this.onFilterChanged({ source: "quickFilter" });
        });
      };
      FilterManager2.prototype.isExternalFilterPresentCallback = function() {
        var isFilterPresent = this.gridOptionsService.getCallback("isExternalFilterPresent");
        if (typeof isFilterPresent === "function") {
          return isFilterPresent({});
        }
        return false;
      };
      FilterManager2.prototype.doesExternalFilterPass = function(node) {
        var doesFilterPass = this.gridOptionsService.get("doesExternalFilterPass");
        if (typeof doesFilterPass === "function") {
          return doesFilterPass(node);
        }
        return false;
      };
      FilterManager2.prototype.setFilterModel = function(model) {
        var _this = this;
        if (this.isAdvancedFilterEnabled()) {
          this.warnAdvancedFilters();
          return;
        }
        if (this.dataTypeService.isPendingInference()) {
          this.filterModelUpdateQueue.push(model);
          return;
        }
        var allPromises = [];
        var previousModel = this.getFilterModel();
        if (model) {
          var modelKeys_1 = convertToSet(Object.keys(model));
          this.allColumnFilters.forEach(function(filterWrapper, colId) {
            var newModel = model[colId];
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, newModel));
            modelKeys_1.delete(colId);
          });
          modelKeys_1.forEach(function(colId) {
            var column = _this.columnModel.getPrimaryColumn(colId) || _this.columnModel.getGridColumn(colId);
            if (!column) {
              console.warn("AG Grid: setFilterModel() - no column found for colId: " + colId);
              return;
            }
            if (!column.isFilterAllowed()) {
              console.warn("AG Grid: setFilterModel() - unable to fully apply model, filtering disabled for colId: " + colId);
              return;
            }
            var filterWrapper = _this.getOrCreateFilterWrapper(column, "NO_UI");
            if (!filterWrapper) {
              console.warn("AG-Grid: setFilterModel() - unable to fully apply model, unable to create filter for colId: " + colId);
              return;
            }
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, model[colId]));
          });
        } else {
          this.allColumnFilters.forEach(function(filterWrapper) {
            allPromises.push(_this.setModelOnFilterWrapper(filterWrapper.filterPromise, null));
          });
        }
        AgPromise.all(allPromises).then(function() {
          var currentModel = _this.getFilterModel();
          var columns = [];
          _this.allColumnFilters.forEach(function(filterWrapper, colId) {
            var before = previousModel ? previousModel[colId] : null;
            var after = currentModel ? currentModel[colId] : null;
            if (!_.jsonEquals(before, after)) {
              columns.push(filterWrapper.column);
            }
          });
          if (columns.length > 0) {
            _this.onFilterChanged({ columns, source: "api" });
          }
        });
      };
      FilterManager2.prototype.setModelOnFilterWrapper = function(filterPromise, newModel) {
        return new AgPromise(function(resolve) {
          filterPromise.then(function(filter) {
            if (typeof filter.setModel !== "function") {
              console.warn("AG Grid: filter missing setModel method, which is needed for setFilterModel");
              resolve();
            }
            (filter.setModel(newModel) || AgPromise.resolve()).then(function() {
              return resolve();
            });
          });
        });
      };
      FilterManager2.prototype.getFilterModel = function() {
        var result = {};
        this.allColumnFilters.forEach(function(filterWrapper, key) {
          var filterPromise = filterWrapper.filterPromise;
          var filter = filterPromise.resolveNow(null, function(promiseFilter) {
            return promiseFilter;
          });
          if (filter == null) {
            return null;
          }
          if (typeof filter.getModel !== "function") {
            console.warn("AG Grid: filter API missing getModel method, which is needed for getFilterModel");
            return;
          }
          var model = filter.getModel();
          if (exists(model)) {
            result[key] = model;
          }
        });
        return result;
      };
      FilterManager2.prototype.isColumnFilterPresent = function() {
        return this.activeColumnFilters.length > 0;
      };
      FilterManager2.prototype.isAggregateFilterPresent = function() {
        return !!this.activeAggregateFilters.length;
      };
      FilterManager2.prototype.isExternalFilterPresent = function() {
        return this.externalFilterPresent;
      };
      FilterManager2.prototype.isChildFilterPresent = function() {
        return this.isColumnFilterPresent() || this.isQuickFilterPresent() || this.isExternalFilterPresent() || this.isAdvancedFilterPresent();
      };
      FilterManager2.prototype.isAdvancedFilterPresent = function() {
        return this.isAdvancedFilterEnabled() && this.advancedFilterService.isFilterPresent();
      };
      FilterManager2.prototype.onAdvancedFilterEnabledChanged = function(enabled) {
        var _this = this;
        var _a;
        if (enabled) {
          if (this.allColumnFilters.size) {
            this.allColumnFilters.forEach(function(filterWrapper) {
              return _this.disposeFilterWrapper(filterWrapper, "advancedFilterEnabled");
            });
            this.onFilterChanged({ source: "advancedFilter" });
          }
        } else {
          if ((_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.isFilterPresent()) {
            this.advancedFilterService.setModel(null);
            this.onFilterChanged({ source: "advancedFilter" });
          }
        }
      };
      FilterManager2.prototype.isAdvancedFilterEnabled = function() {
        var _a;
        return (_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.isEnabled();
      };
      FilterManager2.prototype.isAdvancedFilterHeaderActive = function() {
        return this.isAdvancedFilterEnabled() && this.advancedFilterService.isHeaderActive();
      };
      FilterManager2.prototype.doAggregateFiltersPass = function(node, filterToSkip) {
        return this.doColumnFiltersPass(node, filterToSkip, true);
      };
      FilterManager2.prototype.updateActiveFilters = function() {
        var _this = this;
        this.activeColumnFilters.length = 0;
        this.activeAggregateFilters.length = 0;
        var isFilterActive = function(filter) {
          if (!filter) {
            return false;
          }
          if (!filter.isFilterActive) {
            console.warn("AG Grid: Filter is missing isFilterActive() method");
            return false;
          }
          return filter.isFilterActive();
        };
        var groupFilterEnabled = !!this.gridOptionsService.getGroupAggFiltering();
        var isAggFilter = function(column) {
          var isSecondary = !column.isPrimary();
          if (isSecondary) {
            return true;
          }
          var isShowingPrimaryColumns = !_this.columnModel.isPivotActive();
          var isValueActive = column.isValueActive();
          if (!isValueActive || !isShowingPrimaryColumns) {
            return false;
          }
          if (_this.columnModel.isPivotMode()) {
            return true;
          }
          return groupFilterEnabled;
        };
        this.allColumnFilters.forEach(function(filterWrapper) {
          if (filterWrapper.filterPromise.resolveNow(false, isFilterActive)) {
            var filterComp = filterWrapper.filterPromise.resolveNow(null, function(filter) {
              return filter;
            });
            if (isAggFilter(filterWrapper.column)) {
              _this.activeAggregateFilters.push(filterComp);
            } else {
              _this.activeColumnFilters.push(filterComp);
            }
          }
        });
      };
      FilterManager2.prototype.updateFilterFlagInColumns = function(source, additionalEventAttributes) {
        this.allColumnFilters.forEach(function(filterWrapper) {
          var isFilterActive = filterWrapper.filterPromise.resolveNow(false, function(filter) {
            return filter.isFilterActive();
          });
          filterWrapper.column.setFilterActive(isFilterActive, source, additionalEventAttributes);
        });
      };
      FilterManager2.prototype.isAnyFilterPresent = function() {
        return this.isQuickFilterPresent() || this.isColumnFilterPresent() || this.isAggregateFilterPresent() || this.isExternalFilterPresent();
      };
      FilterManager2.prototype.doColumnFiltersPass = function(node, filterToSkip, targetAggregates) {
        var data = node.data, aggData = node.aggData;
        var targetedFilters = targetAggregates ? this.activeAggregateFilters : this.activeColumnFilters;
        var targetedData = targetAggregates ? aggData : data;
        for (var i = 0; i < targetedFilters.length; i++) {
          var filter = targetedFilters[i];
          if (filter == null || filter === filterToSkip) {
            continue;
          }
          if (typeof filter.doesFilterPass !== "function") {
            throw new Error("Filter is missing method doesFilterPass");
          }
          if (!filter.doesFilterPass({ node, data: targetedData })) {
            return false;
          }
        }
        return true;
      };
      FilterManager2.prototype.resetQuickFilterCache = function() {
        this.quickFilterService.resetQuickFilterCache();
      };
      FilterManager2.prototype.refreshFiltersForAggregations = function() {
        var isAggFiltering = this.gridOptionsService.getGroupAggFiltering();
        if (isAggFiltering) {
          this.onFilterChanged();
        }
      };
      FilterManager2.prototype.callOnFilterChangedOutsideRenderCycle = function(params) {
        var _this = this;
        var action = function() {
          return _this.onFilterChanged(params);
        };
        if (this.rowRenderer.isRefreshInProgress()) {
          setTimeout(action, 0);
        } else {
          action();
        }
      };
      FilterManager2.prototype.onFilterChanged = function(params) {
        if (params === void 0) {
          params = {};
        }
        var source = params.source, filterInstance = params.filterInstance, additionalEventAttributes = params.additionalEventAttributes, columns = params.columns;
        this.updateDependantFilters();
        this.updateActiveFilters();
        this.updateFilterFlagInColumns("filterChanged", additionalEventAttributes);
        this.externalFilterPresent = this.isExternalFilterPresentCallback();
        this.allColumnFilters.forEach(function(filterWrapper) {
          if (!filterWrapper.filterPromise) {
            return;
          }
          filterWrapper.filterPromise.then(function(filter) {
            if (filter && filter !== filterInstance && filter.onAnyFilterChanged) {
              filter.onAnyFilterChanged();
            }
          });
        });
        var filterChangedEvent = {
          source,
          type: Events.EVENT_FILTER_CHANGED,
          columns: columns || []
        };
        if (additionalEventAttributes) {
          mergeDeep(filterChangedEvent, additionalEventAttributes);
        }
        this.processingFilterChange = true;
        this.eventService.dispatchEvent(filterChangedEvent);
        this.processingFilterChange = false;
      };
      FilterManager2.prototype.isSuppressFlashingCellsBecauseFiltering = function() {
        return !this.allowShowChangeAfterFilter && this.processingFilterChange;
      };
      FilterManager2.prototype.isQuickFilterPresent = function() {
        return this.quickFilterService.isQuickFilterPresent();
      };
      FilterManager2.prototype.updateAggFiltering = function() {
        this.aggFiltering = !!this.gridOptionsService.getGroupAggFiltering();
      };
      FilterManager2.prototype.isAggregateQuickFilterPresent = function() {
        return this.isQuickFilterPresent() && (this.aggFiltering || this.columnModel.isPivotMode());
      };
      FilterManager2.prototype.isNonAggregateQuickFilterPresent = function() {
        return this.isQuickFilterPresent() && !(this.aggFiltering || this.columnModel.isPivotMode());
      };
      FilterManager2.prototype.doesRowPassOtherFilters = function(filterToSkip, node) {
        return this.doesRowPassFilter({ rowNode: node, filterInstanceToSkip: filterToSkip });
      };
      FilterManager2.prototype.doesRowPassAggregateFilters = function(params) {
        if (this.isAggregateQuickFilterPresent() && !this.quickFilterService.doesRowPassQuickFilter(params.rowNode)) {
          return false;
        }
        if (this.isAggregateFilterPresent() && !this.doAggregateFiltersPass(params.rowNode, params.filterInstanceToSkip)) {
          return false;
        }
        return true;
      };
      FilterManager2.prototype.doesRowPassFilter = function(params) {
        if (this.isNonAggregateQuickFilterPresent() && !this.quickFilterService.doesRowPassQuickFilter(params.rowNode)) {
          return false;
        }
        if (this.isExternalFilterPresent() && !this.doesExternalFilterPass(params.rowNode)) {
          return false;
        }
        if (this.isColumnFilterPresent() && !this.doColumnFiltersPass(params.rowNode, params.filterInstanceToSkip)) {
          return false;
        }
        if (this.isAdvancedFilterPresent() && !this.advancedFilterService.doesFilterPass(params.rowNode)) {
          return false;
        }
        return true;
      };
      FilterManager2.prototype.onNewRowsLoaded = function(source) {
        this.allColumnFilters.forEach(function(filterWrapper) {
          filterWrapper.filterPromise.then(function(filter) {
            if (filter.onNewRowsLoaded) {
              filter.onNewRowsLoaded();
            }
          });
        });
        this.updateFilterFlagInColumns(source, { afterDataChange: true });
        this.updateActiveFilters();
      };
      FilterManager2.prototype.createValueGetter = function(column) {
        var _this = this;
        return function(_a) {
          var node = _a.node;
          return _this.valueService.getValue(column, node, true);
        };
      };
      FilterManager2.prototype.getFilterComponent = function(column, source, createIfDoesNotExist) {
        var _a;
        if (createIfDoesNotExist === void 0) {
          createIfDoesNotExist = true;
        }
        if (createIfDoesNotExist) {
          return ((_a = this.getOrCreateFilterWrapper(column, source)) === null || _a === void 0 ? void 0 : _a.filterPromise) || null;
        }
        var filterWrapper = this.cachedFilter(column);
        return filterWrapper ? filterWrapper.filterPromise : null;
      };
      FilterManager2.prototype.isFilterActive = function(column) {
        var filterWrapper = this.cachedFilter(column);
        return !!filterWrapper && filterWrapper.filterPromise.resolveNow(false, function(filter) {
          return filter.isFilterActive();
        });
      };
      FilterManager2.prototype.getOrCreateFilterWrapper = function(column, source) {
        var _this = this;
        if (!column.isFilterAllowed()) {
          return null;
        }
        var filterWrapper = this.cachedFilter(column);
        if (!filterWrapper) {
          filterWrapper = this.createFilterWrapper(column, source);
          var colId_1 = column.getColId();
          this.allColumnFilters.set(colId_1, filterWrapper);
          this.allColumnListeners.set(colId_1, this.addManagedListener(column, Column.EVENT_COL_DEF_CHANGED, function() {
            return _this.checkDestroyFilter(colId_1);
          }));
        } else if (source !== "NO_UI") {
          this.putIntoGui(filterWrapper, source);
        }
        return filterWrapper;
      };
      FilterManager2.prototype.cachedFilter = function(column) {
        return this.allColumnFilters.get(column.getColId());
      };
      FilterManager2.prototype.getDefaultFilter = function(column) {
        var defaultFilter;
        if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId())) {
          defaultFilter = "agSetColumnFilter";
        } else {
          var cellDataType = column.getColDef().cellDataType;
          if (cellDataType === "number") {
            defaultFilter = "agNumberColumnFilter";
          } else if (cellDataType === "date" || cellDataType === "dateString") {
            defaultFilter = "agDateColumnFilter";
          } else {
            defaultFilter = "agTextColumnFilter";
          }
        }
        return defaultFilter;
      };
      FilterManager2.prototype.getDefaultFloatingFilter = function(column) {
        var defaultFloatingFilterType;
        if (ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId())) {
          defaultFloatingFilterType = "agSetColumnFloatingFilter";
        } else {
          var cellDataType = column.getColDef().cellDataType;
          if (cellDataType === "number") {
            defaultFloatingFilterType = "agNumberColumnFloatingFilter";
          } else if (cellDataType === "date" || cellDataType === "dateString") {
            defaultFloatingFilterType = "agDateColumnFloatingFilter";
          } else {
            defaultFloatingFilterType = "agTextColumnFloatingFilter";
          }
        }
        return defaultFloatingFilterType;
      };
      FilterManager2.prototype.createFilterInstance = function(column) {
        var _this = this;
        var defaultFilter = this.getDefaultFilter(column);
        var colDef = column.getColDef();
        var filterInstance;
        var params = __assign$d(__assign$d({}, this.createFilterParams(column, colDef)), { filterModifiedCallback: function() {
          var event = {
            type: Events.EVENT_FILTER_MODIFIED,
            column,
            filterInstance
          };
          _this.eventService.dispatchEvent(event);
        }, filterChangedCallback: function(additionalEventAttributes) {
          var _a;
          var source = (_a = additionalEventAttributes === null || additionalEventAttributes === void 0 ? void 0 : additionalEventAttributes.source) !== null && _a !== void 0 ? _a : "api";
          var params2 = {
            filterInstance,
            additionalEventAttributes,
            columns: [column],
            source
          };
          _this.callOnFilterChangedOutsideRenderCycle(params2);
        }, doesRowPassOtherFilter: function(node) {
          return _this.doesRowPassOtherFilters(filterInstance, node);
        } });
        var compDetails = this.userComponentFactory.getFilterDetails(colDef, params, defaultFilter);
        if (!compDetails) {
          return { filterPromise: null, compDetails: null };
        }
        return {
          filterPromise: function() {
            var filterPromise = compDetails.newAgStackInstance();
            if (filterPromise) {
              filterPromise.then(function(r) {
                return filterInstance = r;
              });
            }
            return filterPromise;
          },
          compDetails
        };
      };
      FilterManager2.prototype.createFilterParams = function(column, colDef) {
        var params = {
          column,
          colDef: cloneObject(colDef),
          rowModel: this.rowModel,
          filterChangedCallback: function() {
          },
          filterModifiedCallback: function() {
          },
          valueGetter: this.createValueGetter(column),
          doesRowPassOtherFilter: function() {
            return true;
          },
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context
        };
        return params;
      };
      FilterManager2.prototype.createFilterWrapper = function(column, source) {
        var _a;
        var filterWrapper = {
          column,
          filterPromise: null,
          compiledElement: null,
          guiPromise: AgPromise.resolve(null),
          compDetails: null
        };
        var _b = this.createFilterInstance(column), filterPromise = _b.filterPromise, compDetails = _b.compDetails;
        filterWrapper.filterPromise = (_a = filterPromise === null || filterPromise === void 0 ? void 0 : filterPromise()) !== null && _a !== void 0 ? _a : null;
        filterWrapper.compDetails = compDetails;
        if (filterPromise) {
          this.putIntoGui(filterWrapper, source);
        }
        return filterWrapper;
      };
      FilterManager2.prototype.putIntoGui = function(filterWrapper, source) {
        var _this = this;
        var eFilterGui = document.createElement("div");
        eFilterGui.className = "ag-filter";
        filterWrapper.guiPromise = new AgPromise(function(resolve) {
          filterWrapper.filterPromise.then(function(filter) {
            var guiFromFilter = filter.getGui();
            if (!exists(guiFromFilter)) {
              console.warn("AG Grid: getGui method from filter returned " + guiFromFilter + ", it should be a DOM element or an HTML template string.");
            }
            if (typeof guiFromFilter === "string") {
              guiFromFilter = loadTemplate(guiFromFilter);
            }
            eFilterGui.appendChild(guiFromFilter);
            resolve(eFilterGui);
            var event = {
              type: Events.EVENT_FILTER_OPENED,
              column: filterWrapper.column,
              source,
              eGui: eFilterGui
            };
            _this.eventService.dispatchEvent(event);
          });
        });
      };
      FilterManager2.prototype.onColumnsChanged = function() {
        var _this = this;
        var columns = [];
        this.allColumnFilters.forEach(function(wrapper, colId) {
          var currentColumn;
          if (wrapper.column.isPrimary()) {
            currentColumn = _this.columnModel.getPrimaryColumn(colId);
          } else {
            currentColumn = _this.columnModel.getGridColumn(colId);
          }
          if (currentColumn) {
            return;
          }
          columns.push(wrapper.column);
          _this.disposeFilterWrapper(wrapper, "columnChanged");
          _this.disposeColumnListener(colId);
        });
        if (columns.length > 0) {
          this.onFilterChanged({ columns, source: "api" });
        } else {
          this.updateDependantFilters();
        }
      };
      FilterManager2.prototype.updateDependantFilters = function() {
        var _this = this;
        var groupColumns = this.columnModel.getGroupAutoColumns();
        groupColumns === null || groupColumns === void 0 ? void 0 : groupColumns.forEach(function(groupColumn) {
          if (groupColumn.getColDef().filter === "agGroupColumnFilter") {
            _this.getOrCreateFilterWrapper(groupColumn, "NO_UI");
          }
        });
      };
      FilterManager2.prototype.isFilterAllowed = function(column) {
        var _a, _b;
        if (this.isAdvancedFilterEnabled()) {
          return false;
        }
        var isFilterAllowed = column.isFilterAllowed();
        if (!isFilterAllowed) {
          return false;
        }
        var filterWrapper = this.allColumnFilters.get(column.getColId());
        return (_b = (_a = filterWrapper === null || filterWrapper === void 0 ? void 0 : filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.resolveNow(
          true,
          // defer to filter component isFilterAllowed if it exists
          function(filter) {
            var _a2, _b2;
            return typeof ((_a2 = filter) === null || _a2 === void 0 ? void 0 : _a2.isFilterAllowed) === "function" ? (_b2 = filter) === null || _b2 === void 0 ? void 0 : _b2.isFilterAllowed() : true;
          }
        )) !== null && _b !== void 0 ? _b : true;
      };
      FilterManager2.prototype.getFloatingFilterCompDetails = function(column, showParentFilter) {
        var _this = this;
        var colDef = column.getColDef();
        var filterParams = this.createFilterParams(column, colDef);
        var finalFilterParams = this.userComponentFactory.mergeParamsWithApplicationProvidedParams(colDef, FilterComponent, filterParams);
        var defaultFloatingFilterType = this.userComponentFactory.getDefaultFloatingFilterType(colDef, function() {
          return _this.getDefaultFloatingFilter(column);
        });
        if (defaultFloatingFilterType == null) {
          defaultFloatingFilterType = "agReadOnlyFloatingFilter";
        }
        var parentFilterInstance = function(callback) {
          var filterComponent = _this.getFilterComponent(column, "NO_UI");
          if (filterComponent == null) {
            return;
          }
          filterComponent.then(function(instance) {
            callback(unwrapUserComp(instance));
          });
        };
        var params = {
          column,
          filterParams: finalFilterParams,
          currentParentModel: function() {
            return _this.getCurrentFloatingFilterParentModel(column);
          },
          parentFilterInstance,
          showParentFilter,
          suppressFilterButton: false
          // This one might be overridden from the colDef
        };
        return this.userComponentFactory.getFloatingFilterCompDetails(colDef, params, defaultFloatingFilterType);
      };
      FilterManager2.prototype.getCurrentFloatingFilterParentModel = function(column) {
        var filterComponent = this.getFilterComponent(column, "NO_UI", false);
        return filterComponent ? filterComponent.resolveNow(null, function(filter) {
          return filter && filter.getModel();
        }) : null;
      };
      FilterManager2.prototype.destroyFilter = function(column, source) {
        if (source === void 0) {
          source = "api";
        }
        var colId = column.getColId();
        var filterWrapper = this.allColumnFilters.get(colId);
        this.disposeColumnListener(colId);
        if (filterWrapper) {
          this.disposeFilterWrapper(filterWrapper, source);
          this.onFilterChanged({
            columns: [column],
            source: "api"
          });
        }
      };
      FilterManager2.prototype.disposeColumnListener = function(colId) {
        var columnListener = this.allColumnListeners.get(colId);
        if (columnListener) {
          this.allColumnListeners.delete(colId);
          columnListener();
        }
      };
      FilterManager2.prototype.disposeFilterWrapper = function(filterWrapper, source) {
        var _this = this;
        filterWrapper.filterPromise.then(function(filter) {
          (filter.setModel(null) || AgPromise.resolve()).then(function() {
            _this.getContext().destroyBean(filter);
            filterWrapper.column.setFilterActive(false, "filterDestroyed");
            _this.allColumnFilters.delete(filterWrapper.column.getColId());
            var event = {
              type: Events.EVENT_FILTER_DESTROYED,
              source,
              column: filterWrapper.column
            };
            _this.eventService.dispatchEvent(event);
          });
        });
      };
      FilterManager2.prototype.checkDestroyFilter = function(colId) {
        var filterWrapper = this.allColumnFilters.get(colId);
        if (!filterWrapper) {
          return;
        }
        var column = filterWrapper.column;
        var compDetails = (column.isFilterAllowed() ? this.createFilterInstance(column) : { compDetails: null }).compDetails;
        if (this.areFilterCompsDifferent(filterWrapper.compDetails, compDetails)) {
          this.destroyFilter(column, "columnChanged");
        }
      };
      FilterManager2.prototype.areFilterCompsDifferent = function(oldCompDetails, newCompDetails) {
        if (!newCompDetails || !oldCompDetails) {
          return true;
        }
        var oldComponentClass = oldCompDetails.componentClass;
        var newComponentClass = newCompDetails.componentClass;
        var isSameComponentClass = oldComponentClass === newComponentClass || // react hooks returns new wrappers, so check nested render method
        (oldComponentClass === null || oldComponentClass === void 0 ? void 0 : oldComponentClass.render) && (newComponentClass === null || newComponentClass === void 0 ? void 0 : newComponentClass.render) && oldComponentClass.render === newComponentClass.render;
        return !isSameComponentClass;
      };
      FilterManager2.prototype.getAdvancedFilterModel = function() {
        return this.isAdvancedFilterEnabled() ? this.advancedFilterService.getModel() : null;
      };
      FilterManager2.prototype.setAdvancedFilterModel = function(expression) {
        if (!this.isAdvancedFilterEnabled()) {
          return;
        }
        this.advancedFilterService.setModel(expression !== null && expression !== void 0 ? expression : null);
        this.onFilterChanged({ source: "advancedFilter" });
      };
      FilterManager2.prototype.showAdvancedFilterBuilder = function(source) {
        if (!this.isAdvancedFilterEnabled()) {
          return;
        }
        this.advancedFilterService.getCtrl().toggleFilterBuilder(source, true);
      };
      FilterManager2.prototype.updateAdvancedFilterColumns = function() {
        if (!this.isAdvancedFilterEnabled()) {
          return;
        }
        if (this.advancedFilterService.updateValidity()) {
          this.onFilterChanged({ source: "advancedFilter" });
        }
      };
      FilterManager2.prototype.hasFloatingFilters = function() {
        if (this.isAdvancedFilterEnabled()) {
          return false;
        }
        var gridColumns = this.columnModel.getAllGridColumns();
        if (!gridColumns) {
          return false;
        }
        return gridColumns.some(function(col) {
          return col.getColDef().floatingFilter;
        });
      };
      FilterManager2.prototype.getFilterInstance = function(key, callback) {
        if (this.isAdvancedFilterEnabled()) {
          this.warnAdvancedFilters();
          return void 0;
        }
        var res = this.getFilterInstanceImpl(key, function(instance) {
          if (!callback) {
            return;
          }
          var unwrapped2 = unwrapUserComp(instance);
          callback(unwrapped2);
        });
        var unwrapped = unwrapUserComp(res);
        return unwrapped;
      };
      FilterManager2.prototype.getFilterInstanceImpl = function(key, callback) {
        var column = this.columnModel.getPrimaryColumn(key);
        if (!column) {
          return void 0;
        }
        var filterPromise = this.getFilterComponent(column, "NO_UI");
        var currentValue = filterPromise && filterPromise.resolveNow(null, function(filterComp) {
          return filterComp;
        });
        if (currentValue) {
          setTimeout(callback, 0, currentValue);
        } else if (filterPromise) {
          filterPromise.then(function(comp) {
            callback(comp);
          });
        }
        return currentValue;
      };
      FilterManager2.prototype.warnAdvancedFilters = function() {
        doOnce(function() {
          console.warn("AG Grid: Column Filter API methods have been disabled as Advanced Filters are enabled.");
        }, "advancedFiltersCompatibility");
      };
      FilterManager2.prototype.setupAdvancedFilterHeaderComp = function(eCompToInsertBefore) {
        var _a;
        (_a = this.advancedFilterService) === null || _a === void 0 ? void 0 : _a.getCtrl().setupHeaderComp(eCompToInsertBefore);
      };
      FilterManager2.prototype.getHeaderRowCount = function() {
        return this.isAdvancedFilterHeaderActive() ? 1 : 0;
      };
      FilterManager2.prototype.getHeaderHeight = function() {
        return this.isAdvancedFilterHeaderActive() ? this.advancedFilterService.getCtrl().getHeaderHeight() : 0;
      };
      FilterManager2.prototype.processFilterModelUpdateQueue = function() {
        var _this = this;
        this.filterModelUpdateQueue.forEach(function(model) {
          return _this.setFilterModel(model);
        });
        this.filterModelUpdateQueue = [];
      };
      FilterManager2.prototype.destroy = function() {
        var _this = this;
        _super.prototype.destroy.call(this);
        this.allColumnFilters.forEach(function(filterWrapper) {
          return _this.disposeFilterWrapper(filterWrapper, "gridDestroyed");
        });
        this.allColumnListeners.clear();
      };
      __decorate$1Y([
        Autowired("valueService")
      ], FilterManager2.prototype, "valueService", void 0);
      __decorate$1Y([
        Autowired("columnModel")
      ], FilterManager2.prototype, "columnModel", void 0);
      __decorate$1Y([
        Autowired("rowModel")
      ], FilterManager2.prototype, "rowModel", void 0);
      __decorate$1Y([
        Autowired("userComponentFactory")
      ], FilterManager2.prototype, "userComponentFactory", void 0);
      __decorate$1Y([
        Autowired("rowRenderer")
      ], FilterManager2.prototype, "rowRenderer", void 0);
      __decorate$1Y([
        Autowired("dataTypeService")
      ], FilterManager2.prototype, "dataTypeService", void 0);
      __decorate$1Y([
        Autowired("quickFilterService")
      ], FilterManager2.prototype, "quickFilterService", void 0);
      __decorate$1Y([
        Optional("advancedFilterService")
      ], FilterManager2.prototype, "advancedFilterService", void 0);
      __decorate$1Y([
        PostConstruct
      ], FilterManager2.prototype, "init", null);
      FilterManager2 = __decorate$1Y([
        Bean("filterManager")
      ], FilterManager2);
      return FilterManager2;
    }(BeanStub);
    __extends$27 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AbstractHeaderCellComp = /** @class */
    function(_super) {
      __extends$27(AbstractHeaderCellComp2, _super);
      function AbstractHeaderCellComp2(template, ctrl) {
        var _this = _super.call(this, template) || this;
        _this.ctrl = ctrl;
        return _this;
      }
      AbstractHeaderCellComp2.prototype.getCtrl = function() {
        return this.ctrl;
      };
      return AbstractHeaderCellComp2;
    }(Component);
    __extends$26 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1X = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderFilterCellComp = /** @class */
    function(_super) {
      __extends$26(HeaderFilterCellComp2, _super);
      function HeaderFilterCellComp2(ctrl) {
        return _super.call(this, HeaderFilterCellComp2.TEMPLATE, ctrl) || this;
      }
      HeaderFilterCellComp2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          addOrRemoveBodyCssClass: function(cssClassName, on) {
            return _this.eFloatingFilterBody.classList.toggle(cssClassName, on);
          },
          setButtonWrapperDisplayed: function(displayed) {
            return setDisplayed(_this.eButtonWrapper, displayed);
          },
          setCompDetails: function(compDetails) {
            return _this.setCompDetails(compDetails);
          },
          getFloatingFilterComp: function() {
            return _this.compPromise;
          },
          setWidth: function(width) {
            return eGui.style.width = width;
          },
          setMenuIcon: function(eIcon) {
            return _this.eButtonShowMainFilter.appendChild(eIcon);
          }
        };
        this.ctrl.setComp(compProxy, eGui, this.eButtonShowMainFilter, this.eFloatingFilterBody);
      };
      HeaderFilterCellComp2.prototype.setCompDetails = function(compDetails) {
        var _this = this;
        if (!compDetails) {
          this.destroyFloatingFilterComp();
          this.compPromise = null;
          return;
        }
        this.compPromise = compDetails.newAgStackInstance();
        this.compPromise.then(function(comp) {
          return _this.afterCompCreated(comp);
        });
      };
      HeaderFilterCellComp2.prototype.destroyFloatingFilterComp = function() {
        if (this.floatingFilterComp) {
          this.eFloatingFilterBody.removeChild(this.floatingFilterComp.getGui());
          this.floatingFilterComp = this.destroyBean(this.floatingFilterComp);
        }
      };
      HeaderFilterCellComp2.prototype.afterCompCreated = function(comp) {
        if (!comp) {
          return;
        }
        if (!this.isAlive()) {
          this.destroyBean(comp);
          return;
        }
        this.destroyFloatingFilterComp();
        this.floatingFilterComp = comp;
        this.eFloatingFilterBody.appendChild(comp.getGui());
        if (comp.afterGuiAttached) {
          comp.afterGuiAttached();
        }
      };
      HeaderFilterCellComp2.TEMPLATE = '<div class="ag-header-cell ag-floating-filter" role="gridcell" tabindex="-1">\n            <div ref="eFloatingFilterBody" role="presentation"></div>\n            <div class="ag-floating-filter-button ag-hidden" ref="eButtonWrapper" role="presentation">\n                <button type="button" class="ag-button ag-floating-filter-button-button" ref="eButtonShowMainFilter" tabindex="-1"></button>\n            </div>\n        </div>';
      __decorate$1X([
        RefSelector("eFloatingFilterBody")
      ], HeaderFilterCellComp2.prototype, "eFloatingFilterBody", void 0);
      __decorate$1X([
        RefSelector("eButtonWrapper")
      ], HeaderFilterCellComp2.prototype, "eButtonWrapper", void 0);
      __decorate$1X([
        RefSelector("eButtonShowMainFilter")
      ], HeaderFilterCellComp2.prototype, "eButtonShowMainFilter", void 0);
      __decorate$1X([
        PostConstruct
      ], HeaderFilterCellComp2.prototype, "postConstruct", null);
      __decorate$1X([
        PreDestroy
      ], HeaderFilterCellComp2.prototype, "destroyFloatingFilterComp", null);
      return HeaderFilterCellComp2;
    }(AbstractHeaderCellComp);
    __extends$25 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1W = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(LayoutCssClasses2) {
      LayoutCssClasses2["AUTO_HEIGHT"] = "ag-layout-auto-height";
      LayoutCssClasses2["NORMAL"] = "ag-layout-normal";
      LayoutCssClasses2["PRINT"] = "ag-layout-print";
    })(LayoutCssClasses || (LayoutCssClasses = {}));
    LayoutFeature = /** @class */
    function(_super) {
      __extends$25(LayoutFeature2, _super);
      function LayoutFeature2(view) {
        var _this = _super.call(this) || this;
        _this.view = view;
        return _this;
      }
      LayoutFeature2.prototype.postConstruct = function() {
        this.addManagedPropertyListener("domLayout", this.updateLayoutClasses.bind(this));
        this.updateLayoutClasses();
      };
      LayoutFeature2.prototype.updateLayoutClasses = function() {
        var domLayout = this.getDomLayout();
        var params = {
          autoHeight: domLayout === "autoHeight",
          normal: domLayout === "normal",
          print: domLayout === "print"
        };
        var cssClass = params.autoHeight ? LayoutCssClasses.AUTO_HEIGHT : params.print ? LayoutCssClasses.PRINT : LayoutCssClasses.NORMAL;
        this.view.updateLayoutClasses(cssClass, params);
      };
      LayoutFeature2.prototype.getDomLayout = function() {
        var _a;
        var domLayout = (_a = this.gridOptionsService.get("domLayout")) !== null && _a !== void 0 ? _a : "normal";
        var validLayouts = ["normal", "print", "autoHeight"];
        if (validLayouts.indexOf(domLayout) === -1) {
          doOnce(function() {
            return console.warn("AG Grid: " + domLayout + " is not valid for DOM Layout, valid values are 'normal', 'autoHeight', 'print'.");
          }, "warn about dom layout values");
          return "normal";
        }
        return domLayout;
      };
      __decorate$1W([
        PostConstruct
      ], LayoutFeature2.prototype, "postConstruct", null);
      return LayoutFeature2;
    }(BeanStub);
    __extends$24 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$c = function() {
      __assign$c = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$c.apply(this, arguments);
    };
    __decorate$1V = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(ScrollDirection2) {
      ScrollDirection2[ScrollDirection2["Vertical"] = 0] = "Vertical";
      ScrollDirection2[ScrollDirection2["Horizontal"] = 1] = "Horizontal";
    })(ScrollDirection || (ScrollDirection = {}));
    (function(ScrollSource2) {
      ScrollSource2[ScrollSource2["Container"] = 0] = "Container";
      ScrollSource2[ScrollSource2["FakeContainer"] = 1] = "FakeContainer";
    })(ScrollSource || (ScrollSource = {}));
    GridBodyScrollFeature = /** @class */
    function(_super) {
      __extends$24(GridBodyScrollFeature2, _super);
      function GridBodyScrollFeature2(eBodyViewport) {
        var _this = _super.call(this) || this;
        _this.lastScrollSource = [null, null];
        _this.scrollLeft = -1;
        _this.nextScrollTop = -1;
        _this.scrollTop = -1;
        _this.eBodyViewport = eBodyViewport;
        _this.resetLastHScrollDebounced = debounce(function() {
          return _this.lastScrollSource[ScrollDirection.Horizontal] = null;
        }, 500);
        _this.resetLastVScrollDebounced = debounce(function() {
          return _this.lastScrollSource[ScrollDirection.Vertical] = null;
        }, 500);
        return _this;
      }
      GridBodyScrollFeature2.prototype.postConstruct = function() {
        var _this = this;
        this.enableRtl = this.gridOptionsService.is("enableRtl");
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
        this.ctrlsService.whenReady(function(p) {
          _this.centerRowContainerCtrl = p.centerRowContainerCtrl;
          _this.onDisplayedColumnsWidthChanged();
          _this.addScrollListener();
        });
      };
      GridBodyScrollFeature2.prototype.addScrollListener = function() {
        var fakeHScroll = this.ctrlsService.getFakeHScrollComp();
        var fakeVScroll = this.ctrlsService.getFakeVScrollComp();
        this.addManagedListener(this.centerRowContainerCtrl.getViewportElement(), "scroll", this.onHScroll.bind(this));
        fakeHScroll.onScrollCallback(this.onFakeHScroll.bind(this));
        var isDebounce = this.gridOptionsService.is("debounceVerticalScrollbar");
        var onVScroll = isDebounce ? debounce(this.onVScroll.bind(this), 100) : this.onVScroll.bind(this);
        var onFakeVScroll = isDebounce ? debounce(this.onFakeVScroll.bind(this), 100) : this.onFakeVScroll.bind(this);
        this.addManagedListener(this.eBodyViewport, "scroll", onVScroll);
        fakeVScroll.onScrollCallback(onFakeVScroll);
      };
      GridBodyScrollFeature2.prototype.onDisplayedColumnsWidthChanged = function() {
        if (this.enableRtl) {
          this.horizontallyScrollHeaderCenterAndFloatingCenter();
        }
      };
      GridBodyScrollFeature2.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function(scrollLeft) {
        var notYetInitialised = this.centerRowContainerCtrl == null;
        if (notYetInitialised) {
          return;
        }
        if (scrollLeft === void 0) {
          scrollLeft = this.centerRowContainerCtrl.getCenterViewportScrollLeft();
        }
        var offset = this.enableRtl ? scrollLeft : -scrollLeft;
        var topCenterContainer = this.ctrlsService.getTopCenterRowContainerCtrl();
        var stickyTopCenterContainer = this.ctrlsService.getStickyTopCenterRowContainerCtrl();
        var bottomCenterContainer = this.ctrlsService.getBottomCenterRowContainerCtrl();
        var fakeHScroll = this.ctrlsService.getFakeHScrollComp();
        var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
        centerHeaderContainer.setHorizontalScroll(-offset);
        bottomCenterContainer.setContainerTranslateX(offset);
        topCenterContainer.setContainerTranslateX(offset);
        stickyTopCenterContainer.setContainerTranslateX(offset);
        var centerViewport = this.centerRowContainerCtrl.getViewportElement();
        var isCenterViewportLastHorizontal = this.lastScrollSource[ScrollDirection.Horizontal] === ScrollSource.Container;
        scrollLeft = Math.abs(scrollLeft);
        if (isCenterViewportLastHorizontal) {
          fakeHScroll.setScrollPosition(scrollLeft);
        } else {
          setScrollLeft(centerViewport, scrollLeft, this.enableRtl);
        }
      };
      GridBodyScrollFeature2.prototype.isControllingScroll = function(source, direction) {
        if (this.lastScrollSource[direction] == null) {
          this.lastScrollSource[direction] = source;
          return true;
        }
        return this.lastScrollSource[direction] === source;
      };
      GridBodyScrollFeature2.prototype.onFakeHScroll = function() {
        if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Horizontal)) {
          return;
        }
        this.onHScrollCommon(ScrollSource.FakeContainer);
      };
      GridBodyScrollFeature2.prototype.onHScroll = function() {
        if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Horizontal)) {
          return;
        }
        this.onHScrollCommon(ScrollSource.Container);
      };
      GridBodyScrollFeature2.prototype.onHScrollCommon = function(source) {
        var centerContainerViewport = this.centerRowContainerCtrl.getViewportElement();
        var scrollLeft = centerContainerViewport.scrollLeft;
        if (this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, scrollLeft, true)) {
          return;
        }
        var newScrollLeft;
        if (source === ScrollSource.Container) {
          newScrollLeft = getScrollLeft(centerContainerViewport, this.enableRtl);
        } else {
          newScrollLeft = this.ctrlsService.getFakeHScrollComp().getScrollPosition();
        }
        this.doHorizontalScroll(Math.round(newScrollLeft));
        this.resetLastHScrollDebounced();
      };
      GridBodyScrollFeature2.prototype.onFakeVScroll = function() {
        if (!this.isControllingScroll(ScrollSource.FakeContainer, ScrollDirection.Vertical)) {
          return;
        }
        this.onVScrollCommon(ScrollSource.FakeContainer);
      };
      GridBodyScrollFeature2.prototype.onVScroll = function() {
        if (!this.isControllingScroll(ScrollSource.Container, ScrollDirection.Vertical)) {
          return;
        }
        this.onVScrollCommon(ScrollSource.Container);
      };
      GridBodyScrollFeature2.prototype.onVScrollCommon = function(source) {
        var scrollTop;
        if (source === ScrollSource.Container) {
          scrollTop = this.eBodyViewport.scrollTop;
        } else {
          scrollTop = this.ctrlsService.getFakeVScrollComp().getScrollPosition();
        }
        if (this.shouldBlockScrollUpdate(ScrollDirection.Vertical, scrollTop, true)) {
          return;
        }
        this.animationFrameService.setScrollTop(scrollTop);
        this.nextScrollTop = scrollTop;
        if (source === ScrollSource.Container) {
          this.ctrlsService.getFakeVScrollComp().setScrollPosition(scrollTop);
        } else {
          this.eBodyViewport.scrollTop = scrollTop;
        }
        if (this.gridOptionsService.is("suppressAnimationFrame")) {
          this.scrollGridIfNeeded();
        } else {
          this.animationFrameService.schedule();
        }
        this.resetLastVScrollDebounced();
      };
      GridBodyScrollFeature2.prototype.doHorizontalScroll = function(scrollLeft) {
        var fakeScrollLeft = this.ctrlsService.getFakeHScrollComp().getScrollPosition();
        if (this.scrollLeft === scrollLeft && scrollLeft === fakeScrollLeft) {
          return;
        }
        this.scrollLeft = scrollLeft;
        this.fireScrollEvent(ScrollDirection.Horizontal);
        this.horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft);
        this.centerRowContainerCtrl.onHorizontalViewportChanged(true);
      };
      GridBodyScrollFeature2.prototype.fireScrollEvent = function(direction) {
        var _this = this;
        var bodyScrollEvent = {
          type: Events.EVENT_BODY_SCROLL,
          direction: direction === ScrollDirection.Horizontal ? "horizontal" : "vertical",
          left: this.scrollLeft,
          top: this.scrollTop
        };
        this.eventService.dispatchEvent(bodyScrollEvent);
        window.clearTimeout(this.scrollTimer);
        this.scrollTimer = void 0;
        this.scrollTimer = window.setTimeout(function() {
          var bodyScrollEndEvent = __assign$c(__assign$c({}, bodyScrollEvent), { type: Events.EVENT_BODY_SCROLL_END });
          _this.eventService.dispatchEvent(bodyScrollEndEvent);
        }, 100);
      };
      GridBodyScrollFeature2.prototype.shouldBlockScrollUpdate = function(direction, scrollTo, touchOnly) {
        if (touchOnly === void 0) {
          touchOnly = false;
        }
        if (touchOnly && !isIOSUserAgent()) {
          return false;
        }
        if (direction === ScrollDirection.Vertical) {
          return this.shouldBlockVerticalScroll(scrollTo);
        }
        return this.shouldBlockHorizontalScroll(scrollTo);
      };
      GridBodyScrollFeature2.prototype.shouldBlockVerticalScroll = function(scrollTo) {
        var clientHeight = getInnerHeight(this.eBodyViewport);
        var scrollHeight = this.eBodyViewport.scrollHeight;
        if (scrollTo < 0 || scrollTo + clientHeight > scrollHeight) {
          return true;
        }
        return false;
      };
      GridBodyScrollFeature2.prototype.shouldBlockHorizontalScroll = function(scrollTo) {
        var clientWidth = this.centerRowContainerCtrl.getCenterWidth();
        var scrollWidth = this.centerRowContainerCtrl.getViewportElement().scrollWidth;
        if (this.enableRtl && isRtlNegativeScroll()) {
          if (scrollTo > 0) {
            return true;
          }
        } else if (scrollTo < 0) {
          return true;
        }
        if (Math.abs(scrollTo) + clientWidth > scrollWidth) {
          return true;
        }
        return false;
      };
      GridBodyScrollFeature2.prototype.redrawRowsAfterScroll = function() {
        this.fireScrollEvent(ScrollDirection.Vertical);
      };
      GridBodyScrollFeature2.prototype.checkScrollLeft = function() {
        if (this.scrollLeft !== this.centerRowContainerCtrl.getCenterViewportScrollLeft()) {
          this.onHScrollCommon(ScrollSource.Container);
        }
      };
      GridBodyScrollFeature2.prototype.scrollGridIfNeeded = function() {
        var frameNeeded = this.scrollTop != this.nextScrollTop;
        if (frameNeeded) {
          this.scrollTop = this.nextScrollTop;
          this.redrawRowsAfterScroll();
        }
        return frameNeeded;
      };
      GridBodyScrollFeature2.prototype.setHorizontalScrollPosition = function(hScrollPosition, fromAlignedGridsService) {
        if (fromAlignedGridsService === void 0) {
          fromAlignedGridsService = false;
        }
        var minScrollLeft = 0;
        var maxScrollLeft = this.centerRowContainerCtrl.getViewportElement().scrollWidth - this.centerRowContainerCtrl.getCenterWidth();
        if (!fromAlignedGridsService && this.shouldBlockScrollUpdate(ScrollDirection.Horizontal, hScrollPosition)) {
          if (this.enableRtl && isRtlNegativeScroll()) {
            hScrollPosition = hScrollPosition > 0 ? 0 : maxScrollLeft;
          } else {
            hScrollPosition = Math.min(Math.max(hScrollPosition, minScrollLeft), maxScrollLeft);
          }
        }
        setScrollLeft(this.centerRowContainerCtrl.getViewportElement(), Math.abs(hScrollPosition), this.enableRtl);
        this.doHorizontalScroll(hScrollPosition);
      };
      GridBodyScrollFeature2.prototype.setVerticalScrollPosition = function(vScrollPosition) {
        this.eBodyViewport.scrollTop = vScrollPosition;
      };
      GridBodyScrollFeature2.prototype.getVScrollPosition = function() {
        var result = {
          top: this.eBodyViewport.scrollTop,
          bottom: this.eBodyViewport.scrollTop + this.eBodyViewport.offsetHeight
        };
        return result;
      };
      GridBodyScrollFeature2.prototype.getHScrollPosition = function() {
        return this.centerRowContainerCtrl.getHScrollPosition();
      };
      GridBodyScrollFeature2.prototype.isHorizontalScrollShowing = function() {
        return this.centerRowContainerCtrl.isHorizontalScrollShowing();
      };
      GridBodyScrollFeature2.prototype.scrollHorizontally = function(pixels) {
        var oldScrollPosition = this.centerRowContainerCtrl.getViewportElement().scrollLeft;
        this.setHorizontalScrollPosition(oldScrollPosition + pixels);
        return this.centerRowContainerCtrl.getViewportElement().scrollLeft - oldScrollPosition;
      };
      GridBodyScrollFeature2.prototype.scrollToTop = function() {
        this.eBodyViewport.scrollTop = 0;
      };
      GridBodyScrollFeature2.prototype.ensureNodeVisible = function(comparator, position) {
        if (position === void 0) {
          position = null;
        }
        var rowCount = this.rowModel.getRowCount();
        var indexToSelect = -1;
        for (var i = 0; i < rowCount; i++) {
          var node = this.rowModel.getRow(i);
          if (typeof comparator === "function") {
            var predicate = comparator;
            if (node && predicate(node)) {
              indexToSelect = i;
              break;
            }
          } else {
            if (comparator === node || comparator === node.data) {
              indexToSelect = i;
              break;
            }
          }
        }
        if (indexToSelect >= 0) {
          this.ensureIndexVisible(indexToSelect, position);
        }
      };
      GridBodyScrollFeature2.prototype.ensureIndexVisible = function(index, position) {
        if (this.gridOptionsService.isDomLayout("print")) {
          return;
        }
        var rowCount = this.paginationProxy.getRowCount();
        if (typeof index !== "number" || index < 0 || index >= rowCount) {
          console.warn("AG Grid: Invalid row index for ensureIndexVisible: " + index);
          return;
        }
        var isPaging = this.gridOptionsService.is("pagination");
        var paginationPanelEnabled = isPaging && !this.gridOptionsService.is("suppressPaginationPanel");
        if (!paginationPanelEnabled) {
          this.paginationProxy.goToPageWithIndex(index);
        }
        var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
        var stickyTopHeight = gridBodyCtrl.getStickyTopHeight();
        var rowNode = this.paginationProxy.getRow(index);
        var rowGotShiftedDuringOperation;
        do {
          var startingRowTop = rowNode.rowTop;
          var startingRowHeight = rowNode.rowHeight;
          var paginationOffset = this.paginationProxy.getPixelOffset();
          var rowTopPixel = rowNode.rowTop - paginationOffset;
          var rowBottomPixel = rowTopPixel + rowNode.rowHeight;
          var scrollPosition = this.getVScrollPosition();
          var heightOffset = this.heightScaler.getDivStretchOffset();
          var vScrollTop = scrollPosition.top + heightOffset;
          var vScrollBottom = scrollPosition.bottom + heightOffset;
          var viewportHeight = vScrollBottom - vScrollTop;
          var pxTop = this.heightScaler.getScrollPositionForPixel(rowTopPixel);
          var pxBottom = this.heightScaler.getScrollPositionForPixel(rowBottomPixel - viewportHeight);
          var pxMiddle = Math.min((pxTop + pxBottom) / 2, rowTopPixel);
          var rowAboveViewport = vScrollTop + stickyTopHeight > rowTopPixel;
          var rowBelowViewport = vScrollBottom < rowBottomPixel;
          var newScrollPosition = null;
          if (position === "top") {
            newScrollPosition = pxTop;
          } else if (position === "bottom") {
            newScrollPosition = pxBottom;
          } else if (position === "middle") {
            newScrollPosition = pxMiddle;
          } else if (rowAboveViewport) {
            newScrollPosition = pxTop - stickyTopHeight;
          } else if (rowBelowViewport) {
            newScrollPosition = pxBottom;
          }
          if (newScrollPosition !== null) {
            this.setVerticalScrollPosition(newScrollPosition);
            this.rowRenderer.redraw({ afterScroll: true });
          }
          rowGotShiftedDuringOperation = startingRowTop !== rowNode.rowTop || startingRowHeight !== rowNode.rowHeight;
        } while (rowGotShiftedDuringOperation);
        this.animationFrameService.flushAllFrames();
      };
      GridBodyScrollFeature2.prototype.ensureColumnVisible = function(key, position) {
        if (position === void 0) {
          position = "auto";
        }
        var column = this.columnModel.getGridColumn(key);
        if (!column) {
          return;
        }
        if (column.isPinned()) {
          return;
        }
        if (!this.columnModel.isColumnDisplayed(column)) {
          return;
        }
        var newHorizontalScroll = this.getPositionedHorizontalScroll(column, position);
        if (newHorizontalScroll !== null) {
          this.centerRowContainerCtrl.setCenterViewportScrollLeft(newHorizontalScroll);
        }
        this.centerRowContainerCtrl.onHorizontalViewportChanged();
        this.animationFrameService.flushAllFrames();
      };
      GridBodyScrollFeature2.prototype.getPositionedHorizontalScroll = function(column, position) {
        var _a = this.isColumnOutsideViewport(column), columnBeforeStart = _a.columnBeforeStart, columnAfterEnd = _a.columnAfterEnd;
        var viewportTooSmallForColumn = this.centerRowContainerCtrl.getCenterWidth() < column.getActualWidth();
        var viewportWidth = this.centerRowContainerCtrl.getCenterWidth();
        var isRtl = this.enableRtl;
        var alignColToStart = (isRtl ? columnBeforeStart : columnAfterEnd) || viewportTooSmallForColumn;
        var alignColToEnd = isRtl ? columnAfterEnd : columnBeforeStart;
        if (position !== "auto") {
          alignColToStart = position === "start";
          alignColToEnd = position === "end";
        }
        var isMiddle = position === "middle";
        if (alignColToStart || alignColToEnd || isMiddle) {
          var _b = this.getColumnBounds(column), colLeft = _b.colLeft, colMiddle = _b.colMiddle, colRight = _b.colRight;
          if (isMiddle) {
            return colMiddle - viewportWidth / 2;
          }
          if (alignColToStart) {
            return isRtl ? colRight : colLeft;
          }
          return isRtl ? colLeft - viewportWidth : colRight - viewportWidth;
        }
        return null;
      };
      GridBodyScrollFeature2.prototype.isColumnOutsideViewport = function(column) {
        var _a = this.getViewportBounds(), viewportStart = _a.start, viewportEnd = _a.end;
        var _b = this.getColumnBounds(column), colLeft = _b.colLeft, colRight = _b.colRight;
        var isRtl = this.enableRtl;
        var columnBeforeStart = isRtl ? viewportStart > colRight : viewportEnd < colRight;
        var columnAfterEnd = isRtl ? viewportEnd < colLeft : viewportStart > colLeft;
        return { columnBeforeStart, columnAfterEnd };
      };
      GridBodyScrollFeature2.prototype.getColumnBounds = function(column) {
        var isRtl = this.enableRtl;
        var bodyWidth = this.columnModel.getBodyContainerWidth();
        var colWidth = column.getActualWidth();
        var colLeft = column.getLeft();
        var multiplier = isRtl ? -1 : 1;
        var colLeftPixel = isRtl ? bodyWidth - colLeft : colLeft;
        var colRightPixel = colLeftPixel + colWidth * multiplier;
        var colMidPixel = colLeftPixel + colWidth / 2 * multiplier;
        return { colLeft: colLeftPixel, colMiddle: colMidPixel, colRight: colRightPixel };
      };
      GridBodyScrollFeature2.prototype.getViewportBounds = function() {
        var viewportWidth = this.centerRowContainerCtrl.getCenterWidth();
        var scrollPosition = this.centerRowContainerCtrl.getCenterViewportScrollLeft();
        var viewportStartPixel = scrollPosition;
        var viewportEndPixel = viewportWidth + scrollPosition;
        return { start: viewportStartPixel, end: viewportEndPixel, width: viewportWidth };
      };
      __decorate$1V([
        Autowired("ctrlsService")
      ], GridBodyScrollFeature2.prototype, "ctrlsService", void 0);
      __decorate$1V([
        Autowired("animationFrameService")
      ], GridBodyScrollFeature2.prototype, "animationFrameService", void 0);
      __decorate$1V([
        Autowired("paginationProxy")
      ], GridBodyScrollFeature2.prototype, "paginationProxy", void 0);
      __decorate$1V([
        Autowired("rowModel")
      ], GridBodyScrollFeature2.prototype, "rowModel", void 0);
      __decorate$1V([
        Autowired("rowContainerHeightService")
      ], GridBodyScrollFeature2.prototype, "heightScaler", void 0);
      __decorate$1V([
        Autowired("rowRenderer")
      ], GridBodyScrollFeature2.prototype, "rowRenderer", void 0);
      __decorate$1V([
        Autowired("columnModel")
      ], GridBodyScrollFeature2.prototype, "columnModel", void 0);
      __decorate$1V([
        PostConstruct
      ], GridBodyScrollFeature2.prototype, "postConstruct", null);
      return GridBodyScrollFeature2;
    }(BeanStub);
    __extends$23 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$b = function() {
      __assign$b = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$b.apply(this, arguments);
    };
    __decorate$1U = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$m = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$i = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    RowDragFeature = /** @class */
    function(_super) {
      __extends$23(RowDragFeature2, _super);
      function RowDragFeature2(eContainer) {
        var _this = _super.call(this) || this;
        _this.isMultiRowDrag = false;
        _this.isGridSorted = false;
        _this.isGridFiltered = false;
        _this.isRowGroupActive = false;
        _this.eContainer = eContainer;
        return _this;
      }
      RowDragFeature2.prototype.postConstruct = function() {
        var _this = this;
        if (this.gridOptionsService.isRowModelType("clientSide")) {
          this.clientSideRowModel = this.rowModel;
        }
        var refreshStatus = function() {
          _this.onSortChanged();
          _this.onFilterChanged();
          _this.onRowGroupChanged();
        };
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, function() {
          refreshStatus();
        });
        refreshStatus();
        this.ctrlsService.whenReady(function() {
          var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
          _this.autoScrollService = new AutoScrollService({
            scrollContainer: gridBodyCon.getBodyViewportElement(),
            scrollAxis: "y",
            getVerticalPosition: function() {
              return gridBodyCon.getScrollFeature().getVScrollPosition().top;
            },
            setVerticalPosition: function(position) {
              return gridBodyCon.getScrollFeature().setVerticalScrollPosition(position);
            },
            onScrollCallback: function() {
              _this.onDragging(_this.lastDraggingEvent);
            }
          });
        });
      };
      RowDragFeature2.prototype.onSortChanged = function() {
        this.isGridSorted = this.sortController.isSortActive();
      };
      RowDragFeature2.prototype.onFilterChanged = function() {
        this.isGridFiltered = this.filterManager.isAnyFilterPresent();
      };
      RowDragFeature2.prototype.onRowGroupChanged = function() {
        var rowGroups = this.columnModel.getRowGroupColumns();
        this.isRowGroupActive = !missingOrEmpty(rowGroups);
      };
      RowDragFeature2.prototype.getContainer = function() {
        return this.eContainer;
      };
      RowDragFeature2.prototype.isInterestedIn = function(type) {
        return type === DragSourceType.RowDrag;
      };
      RowDragFeature2.prototype.getIconName = function() {
        var managedDrag = this.gridOptionsService.is("rowDragManaged");
        if (managedDrag && this.shouldPreventRowMove()) {
          return DragAndDropService.ICON_NOT_ALLOWED;
        }
        return DragAndDropService.ICON_MOVE;
      };
      RowDragFeature2.prototype.shouldPreventRowMove = function() {
        return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;
      };
      RowDragFeature2.prototype.getRowNodes = function(draggingEvent) {
        var _this = this;
        if (!this.isFromThisGrid(draggingEvent)) {
          return draggingEvent.dragItem.rowNodes || [];
        }
        var isRowDragMultiRow = this.gridOptionsService.is("rowDragMultiRow");
        var selectedNodes = __spreadArray$i([], __read$m(this.selectionService.getSelectedNodes())).sort(function(a, b) {
          if (a.rowIndex == null || b.rowIndex == null) {
            return 0;
          }
          return _this.getRowIndexNumber(a) - _this.getRowIndexNumber(b);
        });
        var currentNode = draggingEvent.dragItem.rowNode;
        if (isRowDragMultiRow && selectedNodes.indexOf(currentNode) !== -1) {
          this.isMultiRowDrag = true;
          return selectedNodes;
        }
        this.isMultiRowDrag = false;
        return [currentNode];
      };
      RowDragFeature2.prototype.onDragEnter = function(draggingEvent) {
        draggingEvent.dragItem.rowNodes = this.getRowNodes(draggingEvent);
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);
        this.getRowNodes(draggingEvent).forEach(function(rowNode) {
          rowNode.setDragging(true);
        });
        this.onEnterOrDragging(draggingEvent);
      };
      RowDragFeature2.prototype.onDragging = function(draggingEvent) {
        this.onEnterOrDragging(draggingEvent);
      };
      RowDragFeature2.prototype.isFromThisGrid = function(draggingEvent) {
        var dragSourceDomDataKey = draggingEvent.dragSource.dragSourceDomDataKey;
        return dragSourceDomDataKey === this.gridOptionsService.getDomDataKey();
      };
      RowDragFeature2.prototype.isDropZoneWithinThisGrid = function(draggingEvent) {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var gridGui = gridBodyCon.getGui();
        var dropZoneTarget = draggingEvent.dropZoneTarget;
        return !gridGui.contains(dropZoneTarget);
      };
      RowDragFeature2.prototype.onEnterOrDragging = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);
        this.lastDraggingEvent = draggingEvent;
        var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var managedDrag = this.gridOptionsService.is("rowDragManaged");
        if (managedDrag) {
          this.doManagedDrag(draggingEvent, pixel);
        }
        this.autoScrollService.check(draggingEvent.event);
      };
      RowDragFeature2.prototype.doManagedDrag = function(draggingEvent, pixel) {
        var isFromThisGrid = this.isFromThisGrid(draggingEvent);
        var managedDrag = this.gridOptionsService.is("rowDragManaged");
        var rowNodes = draggingEvent.dragItem.rowNodes;
        if (managedDrag && this.shouldPreventRowMove()) {
          return;
        }
        if (this.gridOptionsService.is("suppressMoveWhenRowDragging") || !isFromThisGrid) {
          if (!this.isDropZoneWithinThisGrid(draggingEvent)) {
            this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);
          }
        } else {
          this.moveRows(rowNodes, pixel);
        }
      };
      RowDragFeature2.prototype.getRowIndexNumber = function(rowNode) {
        return parseInt(last(rowNode.getRowIndexString().split("-")), 10);
      };
      RowDragFeature2.prototype.moveRowAndClearHighlight = function(draggingEvent) {
        var _this = this;
        var lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();
        var isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === RowHighlightPosition.Below;
        var pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var rowNodes = draggingEvent.dragItem.rowNodes;
        var increment = isBelow ? 1 : 0;
        if (this.isFromThisGrid(draggingEvent)) {
          rowNodes.forEach(function(rowNode) {
            if (rowNode.rowTop < pixel) {
              increment -= 1;
            }
          });
          this.moveRows(rowNodes, pixel, increment);
        } else {
          var getRowIdFunc_1 = this.gridOptionsService.getCallback("getRowId");
          var addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;
          if (this.clientSideRowModel.getHighlightPosition(pixel) === RowHighlightPosition.Above) {
            addIndex--;
          }
          this.clientSideRowModel.updateRowData({
            add: rowNodes.map(function(node) {
              return node.data;
            }).filter(function(data) {
              return !_this.clientSideRowModel.getRowNode(getRowIdFunc_1 ? getRowIdFunc_1({ data, level: 0 }) : data.id);
            }),
            addIndex
          });
        }
        this.clearRowHighlight();
      };
      RowDragFeature2.prototype.clearRowHighlight = function() {
        this.clientSideRowModel.highlightRowAtPixel(null);
      };
      RowDragFeature2.prototype.moveRows = function(rowNodes, pixel, increment) {
        if (increment === void 0) {
          increment = 0;
        }
        var rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);
        if (rowWasMoved) {
          this.focusService.clearFocusedCell();
          if (this.rangeService) {
            this.rangeService.removeAllCellRanges();
          }
        }
      };
      RowDragFeature2.prototype.addRowDropZone = function(params) {
        var _this = this;
        if (!params.getContainer()) {
          doOnce(function() {
            return console.warn("AG Grid: addRowDropZone - A container target needs to be provided");
          }, "add-drop-zone-empty-target");
          return;
        }
        if (this.dragAndDropService.findExternalZone(params)) {
          console.warn("AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.");
          return;
        }
        var processedParams = {
          getContainer: params.getContainer
        };
        if (params.fromGrid) {
          params.fromGrid = void 0;
          processedParams = params;
        } else {
          if (params.onDragEnter) {
            processedParams.onDragEnter = function(e) {
              params.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
            };
          }
          if (params.onDragLeave) {
            processedParams.onDragLeave = function(e) {
              params.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
            };
          }
          if (params.onDragging) {
            processedParams.onDragging = function(e) {
              params.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
            };
          }
          if (params.onDragStop) {
            processedParams.onDragStop = function(e) {
              params.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
            };
          }
        }
        this.dragAndDropService.addDropTarget(__assign$b({ isInterestedIn: function(type) {
          return type === DragSourceType.RowDrag;
        }, getIconName: function() {
          return DragAndDropService.ICON_MOVE;
        }, external: true }, processedParams));
      };
      RowDragFeature2.prototype.getRowDropZone = function(events) {
        var _this = this;
        var getContainer = this.getContainer.bind(this);
        var onDragEnter = this.onDragEnter.bind(this);
        var onDragLeave = this.onDragLeave.bind(this);
        var onDragging = this.onDragging.bind(this);
        var onDragStop = this.onDragStop.bind(this);
        if (!events) {
          return {
            getContainer,
            onDragEnter,
            onDragLeave,
            onDragging,
            onDragStop,
            /* @private */
            fromGrid: true
          };
        }
        return {
          getContainer,
          onDragEnter: events.onDragEnter ? function(e) {
            onDragEnter(e);
            events.onDragEnter(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e));
          } : onDragEnter,
          onDragLeave: events.onDragLeave ? function(e) {
            onDragLeave(e);
            events.onDragLeave(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e));
          } : onDragLeave,
          onDragging: events.onDragging ? function(e) {
            onDragging(e);
            events.onDragging(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e));
          } : onDragging,
          onDragStop: events.onDragStop ? function(e) {
            onDragStop(e);
            events.onDragStop(_this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e));
          } : onDragStop,
          fromGrid: true
          /* @private */
        };
      };
      RowDragFeature2.prototype.draggingToRowDragEvent = function(type, draggingEvent) {
        var yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;
        var mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();
        var overIndex = -1;
        var overNode;
        if (!mouseIsPastLastRow) {
          overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);
          overNode = this.rowModel.getRow(overIndex);
        }
        var vDirectionString;
        switch (draggingEvent.vDirection) {
          case VerticalDirection.Down:
            vDirectionString = "down";
            break;
          case VerticalDirection.Up:
            vDirectionString = "up";
            break;
          default:
            vDirectionString = null;
            break;
        }
        var event = {
          type,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context,
          event: draggingEvent.event,
          node: draggingEvent.dragItem.rowNode,
          nodes: draggingEvent.dragItem.rowNodes,
          overIndex,
          overNode,
          y: yNormalised,
          vDirection: vDirectionString
        };
        return event;
      };
      RowDragFeature2.prototype.dispatchGridEvent = function(type, draggingEvent) {
        var event = this.draggingToRowDragEvent(type, draggingEvent);
        this.eventService.dispatchEvent(event);
      };
      RowDragFeature2.prototype.onDragLeave = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);
        this.stopDragging(draggingEvent);
        if (this.gridOptionsService.is("rowDragManaged")) {
          this.clearRowHighlight();
        }
        if (this.isFromThisGrid(draggingEvent)) {
          this.isMultiRowDrag = false;
        }
      };
      RowDragFeature2.prototype.onDragStop = function(draggingEvent) {
        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);
        this.stopDragging(draggingEvent);
        if (this.gridOptionsService.is("rowDragManaged") && (this.gridOptionsService.is("suppressMoveWhenRowDragging") || !this.isFromThisGrid(draggingEvent)) && !this.isDropZoneWithinThisGrid(draggingEvent)) {
          this.moveRowAndClearHighlight(draggingEvent);
        }
      };
      RowDragFeature2.prototype.stopDragging = function(draggingEvent) {
        this.autoScrollService.ensureCleared();
        this.getRowNodes(draggingEvent).forEach(function(rowNode) {
          rowNode.setDragging(false);
        });
      };
      __decorate$1U([
        Autowired("dragAndDropService")
      ], RowDragFeature2.prototype, "dragAndDropService", void 0);
      __decorate$1U([
        Autowired("rowModel")
      ], RowDragFeature2.prototype, "rowModel", void 0);
      __decorate$1U([
        Autowired("paginationProxy")
      ], RowDragFeature2.prototype, "paginationProxy", void 0);
      __decorate$1U([
        Autowired("columnModel")
      ], RowDragFeature2.prototype, "columnModel", void 0);
      __decorate$1U([
        Autowired("focusService")
      ], RowDragFeature2.prototype, "focusService", void 0);
      __decorate$1U([
        Autowired("sortController")
      ], RowDragFeature2.prototype, "sortController", void 0);
      __decorate$1U([
        Autowired("filterManager")
      ], RowDragFeature2.prototype, "filterManager", void 0);
      __decorate$1U([
        Autowired("selectionService")
      ], RowDragFeature2.prototype, "selectionService", void 0);
      __decorate$1U([
        Autowired("mouseEventService")
      ], RowDragFeature2.prototype, "mouseEventService", void 0);
      __decorate$1U([
        Autowired("ctrlsService")
      ], RowDragFeature2.prototype, "ctrlsService", void 0);
      __decorate$1U([
        Optional("rangeService")
      ], RowDragFeature2.prototype, "rangeService", void 0);
      __decorate$1U([
        PostConstruct
      ], RowDragFeature2.prototype, "postConstruct", null);
      return RowDragFeature2;
    }(BeanStub);
    __extends$22 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1T = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(RowAnimationCssClasses2) {
      RowAnimationCssClasses2["ANIMATION_ON"] = "ag-row-animation";
      RowAnimationCssClasses2["ANIMATION_OFF"] = "ag-row-no-animation";
    })(RowAnimationCssClasses || (RowAnimationCssClasses = {}));
    CSS_CLASS_FORCE_VERTICAL_SCROLL = "ag-force-vertical-scroll";
    CSS_CLASS_CELL_SELECTABLE = "ag-selectable";
    CSS_CLASS_COLUMN_MOVING = "ag-column-moving";
    GridBodyCtrl = /** @class */
    function(_super) {
      __extends$22(GridBodyCtrl2, _super);
      function GridBodyCtrl2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.stickyTopHeight = 0;
        return _this;
      }
      GridBodyCtrl2.prototype.getScrollFeature = function() {
        return this.bodyScrollFeature;
      };
      GridBodyCtrl2.prototype.getBodyViewportElement = function() {
        return this.eBodyViewport;
      };
      GridBodyCtrl2.prototype.setComp = function(comp, eGridBody, eBodyViewport, eTop, eBottom, eStickyTop) {
        this.comp = comp;
        this.eGridBody = eGridBody;
        this.eBodyViewport = eBodyViewport;
        this.eTop = eTop;
        this.eBottom = eBottom;
        this.eStickyTop = eStickyTop;
        this.setCellTextSelection(this.gridOptionsService.is("enableCellTextSelection"));
        this.createManagedBean(new LayoutFeature(this.comp));
        this.bodyScrollFeature = this.createManagedBean(new GridBodyScrollFeature(this.eBodyViewport));
        this.addRowDragListener();
        this.setupRowAnimationCssClass();
        this.addEventListeners();
        this.addFocusListeners([eTop, eBodyViewport, eBottom, eStickyTop]);
        this.onGridColumnsChanged();
        this.addBodyViewportListener();
        this.setFloatingHeights();
        this.disableBrowserDragging();
        this.addStopEditingWhenGridLosesFocus();
        this.filterManager.setupAdvancedFilterHeaderComp(eTop);
        this.ctrlsService.registerGridBodyCtrl(this);
      };
      GridBodyCtrl2.prototype.getComp = function() {
        return this.comp;
      };
      GridBodyCtrl2.prototype.addEventListeners = function() {
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));
      };
      GridBodyCtrl2.prototype.addFocusListeners = function(elements) {
        var _this = this;
        elements.forEach(function(element) {
          _this.addManagedListener(element, "focusin", function(e) {
            var target = e.target;
            var isFocusedElementNested = isElementChildOfClass(target, "ag-root", element);
            element.classList.toggle("ag-has-focus", !isFocusedElementNested);
          });
          _this.addManagedListener(element, "focusout", function(e) {
            var target = e.target, relatedTarget = e.relatedTarget;
            var gridContainRelatedTarget = element.contains(relatedTarget);
            var isNestedRelatedTarget = isElementChildOfClass(relatedTarget, "ag-root", element);
            var isNestedTarget = isElementChildOfClass(target, "ag-root", element);
            if (isNestedTarget) {
              return;
            }
            if (!gridContainRelatedTarget || isNestedRelatedTarget) {
              element.classList.remove("ag-has-focus");
            }
          });
        });
      };
      GridBodyCtrl2.prototype.setColumnMovingCss = function(moving) {
        this.comp.setColumnMovingCss(CSS_CLASS_COLUMN_MOVING, moving);
      };
      GridBodyCtrl2.prototype.setCellTextSelection = function(selectable) {
        if (selectable === void 0) {
          selectable = false;
        }
        this.comp.setCellSelectableCss(CSS_CLASS_CELL_SELECTABLE, selectable);
      };
      GridBodyCtrl2.prototype.onScrollVisibilityChanged = function() {
        var _this = this;
        var visible = this.scrollVisibleService.isVerticalScrollShowing();
        this.setVerticalScrollPaddingVisible(visible);
        this.setStickyTopWidth(visible);
        var scrollbarWidth = visible ? this.gridOptionsService.getScrollbarWidth() || 0 : 0;
        var pad = isInvisibleScrollbar() ? 16 : 0;
        var width = "calc(100% + " + (scrollbarWidth + pad) + "px)";
        this.animationFrameService.requestAnimationFrame(function() {
          return _this.comp.setBodyViewportWidth(width);
        });
      };
      GridBodyCtrl2.prototype.onGridColumnsChanged = function() {
        var columns = this.columnModel.getAllGridColumns();
        this.comp.setColumnCount(columns ? columns.length : 0);
      };
      GridBodyCtrl2.prototype.disableBrowserDragging = function() {
        this.addManagedListener(this.eGridBody, "dragstart", function(event) {
          if (event.target instanceof HTMLImageElement) {
            event.preventDefault();
            return false;
          }
        });
      };
      GridBodyCtrl2.prototype.addStopEditingWhenGridLosesFocus = function() {
        var _this = this;
        if (!this.gridOptionsService.is("stopEditingWhenCellsLoseFocus")) {
          return;
        }
        var focusOutListener = function(event) {
          var elementWithFocus = event.relatedTarget;
          if (getTabIndex(elementWithFocus) === null) {
            _this.rowRenderer.stopEditing();
            return;
          }
          var clickInsideGrid = (
            // see if click came from inside the viewports
            viewports.some(function(viewport) {
              return viewport.contains(elementWithFocus);
            }) && _this.mouseEventService.isElementInThisGrid(elementWithFocus)
          );
          if (!clickInsideGrid) {
            var popupService = _this.popupService;
            clickInsideGrid = popupService.getActivePopups().some(function(popup) {
              return popup.contains(elementWithFocus);
            }) || popupService.isElementWithinCustomPopup(elementWithFocus);
          }
          if (!clickInsideGrid) {
            _this.rowRenderer.stopEditing();
          }
        };
        var viewports = [this.eBodyViewport, this.eBottom, this.eTop, this.eStickyTop];
        viewports.forEach(function(viewport) {
          return _this.addManagedListener(viewport, "focusout", focusOutListener);
        });
      };
      GridBodyCtrl2.prototype.updateRowCount = function() {
        var headerCount = this.headerNavigationService.getHeaderRowCount() + this.filterManager.getHeaderRowCount();
        var rowCount = this.rowModel.isLastRowIndexKnown() ? this.rowModel.getRowCount() : -1;
        var total = rowCount === -1 ? -1 : headerCount + rowCount;
        this.comp.setRowCount(total);
      };
      GridBodyCtrl2.prototype.registerBodyViewportResizeListener = function(listener) {
        this.comp.registerBodyViewportResizeListener(listener);
      };
      GridBodyCtrl2.prototype.setVerticalScrollPaddingVisible = function(visible) {
        var overflowY = visible ? "scroll" : "hidden";
        this.comp.setPinnedTopBottomOverflowY(overflowY);
      };
      GridBodyCtrl2.prototype.isVerticalScrollShowing = function() {
        var show = this.gridOptionsService.is("alwaysShowVerticalScroll");
        var cssClass = show ? CSS_CLASS_FORCE_VERTICAL_SCROLL : null;
        var allowVerticalScroll = this.gridOptionsService.isDomLayout("normal");
        this.comp.setAlwaysVerticalScrollClass(cssClass, show);
        return show || allowVerticalScroll && isVerticalScrollShowing(this.eBodyViewport);
      };
      GridBodyCtrl2.prototype.setupRowAnimationCssClass = function() {
        var _this = this;
        var listener = function() {
          var animateRows = _this.gridOptionsService.isAnimateRows() && !_this.rowContainerHeightService.isStretching();
          var animateRowsCssClass = animateRows ? RowAnimationCssClasses.ANIMATION_ON : RowAnimationCssClasses.ANIMATION_OFF;
          _this.comp.setRowAnimationCssOnBodyViewport(animateRowsCssClass, animateRows);
        };
        listener();
        this.addManagedListener(this.eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, listener);
        this.addManagedPropertyListener("animateRows", listener);
      };
      GridBodyCtrl2.prototype.getGridBodyElement = function() {
        return this.eGridBody;
      };
      GridBodyCtrl2.prototype.addBodyViewportListener = function() {
        var listener = this.onBodyViewportContextMenu.bind(this);
        this.addManagedListener(this.eBodyViewport, "contextmenu", listener);
        this.mockContextMenuForIPad(listener);
        this.addManagedListener(this.eBodyViewport, "wheel", this.onBodyViewportWheel.bind(this));
        this.addManagedListener(this.eStickyTop, "wheel", this.onStickyTopWheel.bind(this));
        this.addFullWidthContainerWheelListener();
      };
      GridBodyCtrl2.prototype.addFullWidthContainerWheelListener = function() {
        var _this = this;
        var fullWidthContainer = this.eBodyViewport.querySelector(".ag-full-width-container");
        var eCenterColsViewport = this.eBodyViewport.querySelector(".ag-center-cols-viewport");
        if (fullWidthContainer && eCenterColsViewport) {
          this.addManagedListener(fullWidthContainer, "wheel", function(e) {
            return _this.onFullWidthContainerWheel(e, eCenterColsViewport);
          });
        }
      };
      GridBodyCtrl2.prototype.onFullWidthContainerWheel = function(e, eCenterColsViewport) {
        if (!e.deltaX || Math.abs(e.deltaY) > Math.abs(e.deltaX) || !this.mouseEventService.isEventFromThisGrid(e)) {
          return;
        }
        e.preventDefault();
        eCenterColsViewport.scrollBy({ left: e.deltaX });
      };
      GridBodyCtrl2.prototype.onBodyViewportContextMenu = function(mouseEvent, touch, touchEvent) {
        if (!mouseEvent && !touchEvent) {
          return;
        }
        if (this.gridOptionsService.is("preventDefaultOnContextMenu")) {
          var event_1 = mouseEvent || touchEvent;
          event_1.preventDefault();
        }
        var target = (mouseEvent || touch).target;
        if (target === this.eBodyViewport || target === this.ctrlsService.getCenterRowContainerCtrl().getViewportElement()) {
          if (!this.contextMenuFactory) {
            return;
          }
          if (mouseEvent) {
            this.contextMenuFactory.onContextMenu(mouseEvent, null, null, null, null, this.eGridBody);
          } else if (touchEvent) {
            this.contextMenuFactory.onContextMenu(null, touchEvent, null, null, null, this.eGridBody);
          }
        }
      };
      GridBodyCtrl2.prototype.mockContextMenuForIPad = function(listener) {
        if (!isIOSUserAgent()) {
          return;
        }
        var touchListener = new TouchListener(this.eBodyViewport);
        var longTapListener = function(event) {
          listener(void 0, event.touchStart, event.touchEvent);
        };
        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
      };
      GridBodyCtrl2.prototype.onBodyViewportWheel = function(e) {
        if (!this.gridOptionsService.is("suppressScrollWhenPopupsAreOpen")) {
          return;
        }
        if (this.popupService.hasAnchoredPopup()) {
          e.preventDefault();
        }
      };
      GridBodyCtrl2.prototype.onStickyTopWheel = function(e) {
        e.preventDefault();
        if (e.offsetY) {
          this.scrollVertically(e.deltaY);
        }
      };
      GridBodyCtrl2.prototype.getGui = function() {
        return this.eGridBody;
      };
      GridBodyCtrl2.prototype.scrollVertically = function(pixels) {
        var oldScrollPosition = this.eBodyViewport.scrollTop;
        this.bodyScrollFeature.setVerticalScrollPosition(oldScrollPosition + pixels);
        return this.eBodyViewport.scrollTop - oldScrollPosition;
      };
      GridBodyCtrl2.prototype.addRowDragListener = function() {
        this.rowDragFeature = this.createManagedBean(new RowDragFeature(this.eBodyViewport));
        this.dragAndDropService.addDropTarget(this.rowDragFeature);
      };
      GridBodyCtrl2.prototype.getRowDragFeature = function() {
        return this.rowDragFeature;
      };
      GridBodyCtrl2.prototype.onPinnedRowDataChanged = function() {
        this.setFloatingHeights();
      };
      GridBodyCtrl2.prototype.setFloatingHeights = function() {
        var pinnedRowModel = this.pinnedRowModel;
        var floatingTopHeight = pinnedRowModel.getPinnedTopTotalHeight();
        if (floatingTopHeight) {
          floatingTopHeight += 1;
        }
        var floatingBottomHeight = pinnedRowModel.getPinnedBottomTotalHeight();
        if (floatingBottomHeight) {
          floatingBottomHeight += 1;
        }
        this.comp.setTopHeight(floatingTopHeight);
        this.comp.setBottomHeight(floatingBottomHeight);
        this.comp.setTopDisplay(floatingTopHeight ? "inherit" : "none");
        this.comp.setBottomDisplay(floatingBottomHeight ? "inherit" : "none");
        this.setStickyTopOffsetTop();
      };
      GridBodyCtrl2.prototype.setStickyTopHeight = function(height) {
        if (height === void 0) {
          height = 0;
        }
        this.comp.setStickyTopHeight(height + "px");
        this.stickyTopHeight = height;
      };
      GridBodyCtrl2.prototype.getStickyTopHeight = function() {
        return this.stickyTopHeight;
      };
      GridBodyCtrl2.prototype.setStickyTopWidth = function(vScrollVisible) {
        if (!vScrollVisible) {
          this.comp.setStickyTopWidth("100%");
        } else {
          var scrollbarWidth = this.gridOptionsService.getScrollbarWidth();
          this.comp.setStickyTopWidth("calc(100% - " + scrollbarWidth + "px)");
        }
      };
      GridBodyCtrl2.prototype.onHeaderHeightChanged = function() {
        this.setStickyTopOffsetTop();
      };
      GridBodyCtrl2.prototype.setStickyTopOffsetTop = function() {
        var headerCtrl = this.ctrlsService.getGridHeaderCtrl();
        var headerHeight = headerCtrl.getHeaderHeight() + this.filterManager.getHeaderHeight();
        var pinnedTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();
        var height = 0;
        if (headerHeight > 0) {
          height += headerHeight + 1;
        }
        if (pinnedTopHeight > 0) {
          height += pinnedTopHeight + 1;
        }
        this.comp.setStickyTopTop(height + "px");
      };
      GridBodyCtrl2.prototype.sizeColumnsToFit = function(params, nextTimeout) {
        var _this = this;
        var removeScrollWidth = this.isVerticalScrollShowing();
        var scrollWidthToRemove = removeScrollWidth ? this.gridOptionsService.getScrollbarWidth() : 0;
        var bodyViewportWidth = getInnerWidth(this.eGridBody);
        var availableWidth = bodyViewportWidth - scrollWidthToRemove;
        if (availableWidth > 0) {
          this.columnModel.sizeColumnsToFit(availableWidth, "sizeColumnsToFit", false, params);
          return;
        }
        if (nextTimeout === void 0) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(params, 100);
          }, 0);
        } else if (nextTimeout === 100) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(params, 500);
          }, 100);
        } else if (nextTimeout === 500) {
          window.setTimeout(function() {
            _this.sizeColumnsToFit(params, -1);
          }, 500);
        } else {
          console.warn("AG Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, maybe the grid is not visible yet on the screen?");
        }
      };
      GridBodyCtrl2.prototype.addScrollEventListener = function(listener) {
        this.eBodyViewport.addEventListener("scroll", listener, { passive: true });
      };
      GridBodyCtrl2.prototype.removeScrollEventListener = function(listener) {
        this.eBodyViewport.removeEventListener("scroll", listener);
      };
      __decorate$1T([
        Autowired("animationFrameService")
      ], GridBodyCtrl2.prototype, "animationFrameService", void 0);
      __decorate$1T([
        Autowired("rowContainerHeightService")
      ], GridBodyCtrl2.prototype, "rowContainerHeightService", void 0);
      __decorate$1T([
        Autowired("ctrlsService")
      ], GridBodyCtrl2.prototype, "ctrlsService", void 0);
      __decorate$1T([
        Autowired("columnModel")
      ], GridBodyCtrl2.prototype, "columnModel", void 0);
      __decorate$1T([
        Autowired("scrollVisibleService")
      ], GridBodyCtrl2.prototype, "scrollVisibleService", void 0);
      __decorate$1T([
        Optional("contextMenuFactory")
      ], GridBodyCtrl2.prototype, "contextMenuFactory", void 0);
      __decorate$1T([
        Autowired("headerNavigationService")
      ], GridBodyCtrl2.prototype, "headerNavigationService", void 0);
      __decorate$1T([
        Autowired("dragAndDropService")
      ], GridBodyCtrl2.prototype, "dragAndDropService", void 0);
      __decorate$1T([
        Autowired("pinnedRowModel")
      ], GridBodyCtrl2.prototype, "pinnedRowModel", void 0);
      __decorate$1T([
        Autowired("rowRenderer")
      ], GridBodyCtrl2.prototype, "rowRenderer", void 0);
      __decorate$1T([
        Autowired("popupService")
      ], GridBodyCtrl2.prototype, "popupService", void 0);
      __decorate$1T([
        Autowired("mouseEventService")
      ], GridBodyCtrl2.prototype, "mouseEventService", void 0);
      __decorate$1T([
        Autowired("rowModel")
      ], GridBodyCtrl2.prototype, "rowModel", void 0);
      __decorate$1T([
        Autowired("filterManager")
      ], GridBodyCtrl2.prototype, "filterManager", void 0);
      return GridBodyCtrl2;
    }(BeanStub);
    (function(SelectionHandleType2) {
      SelectionHandleType2[SelectionHandleType2["FILL"] = 0] = "FILL";
      SelectionHandleType2[SelectionHandleType2["RANGE"] = 1] = "RANGE";
    })(SelectionHandleType || (SelectionHandleType = {}));
    (function(CellRangeType2) {
      CellRangeType2[CellRangeType2["VALUE"] = 0] = "VALUE";
      CellRangeType2[CellRangeType2["DIMENSION"] = 1] = "DIMENSION";
    })(CellRangeType || (CellRangeType = {}));
    CSS_CELL_RANGE_SELECTED = "ag-cell-range-selected";
    CSS_CELL_RANGE_CHART = "ag-cell-range-chart";
    CSS_CELL_RANGE_SINGLE_CELL = "ag-cell-range-single-cell";
    CSS_CELL_RANGE_CHART_CATEGORY = "ag-cell-range-chart-category";
    CSS_CELL_RANGE_HANDLE = "ag-cell-range-handle";
    CSS_CELL_RANGE_TOP = "ag-cell-range-top";
    CSS_CELL_RANGE_RIGHT = "ag-cell-range-right";
    CSS_CELL_RANGE_BOTTOM = "ag-cell-range-bottom";
    CSS_CELL_RANGE_LEFT = "ag-cell-range-left";
    CellRangeFeature = /** @class */
    function() {
      function CellRangeFeature2(beans, ctrl) {
        this.beans = beans;
        this.cellCtrl = ctrl;
      }
      CellRangeFeature2.prototype.setComp = function(cellComp, eGui) {
        this.cellComp = cellComp;
        this.eGui = eGui;
        this.onRangeSelectionChanged();
      };
      CellRangeFeature2.prototype.onRangeSelectionChanged = function() {
        if (!this.cellComp) {
          return;
        }
        this.rangeCount = this.beans.rangeService.getCellRangeCount(this.cellCtrl.getCellPosition());
        this.hasChartRange = this.getHasChartRange();
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED, this.rangeCount !== 0);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-1", this.rangeCount === 1);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-2", this.rangeCount === 2);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-3", this.rangeCount === 3);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SELECTED + "-4", this.rangeCount >= 4);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART, this.hasChartRange);
        setAriaSelected(this.eGui, this.rangeCount > 0 ? true : void 0);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_SINGLE_CELL, this.isSingleCell());
        this.updateRangeBorders();
        this.refreshHandle();
      };
      CellRangeFeature2.prototype.updateRangeBorders = function() {
        var rangeBorders = this.getRangeBorders();
        var isSingleCell = this.isSingleCell();
        var isTop = !isSingleCell && rangeBorders.top;
        var isRight = !isSingleCell && rangeBorders.right;
        var isBottom = !isSingleCell && rangeBorders.bottom;
        var isLeft = !isSingleCell && rangeBorders.left;
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_TOP, isTop);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_RIGHT, isRight);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_BOTTOM, isBottom);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_LEFT, isLeft);
      };
      CellRangeFeature2.prototype.isSingleCell = function() {
        var rangeService = this.beans.rangeService;
        return this.rangeCount === 1 && rangeService && !rangeService.isMoreThanOneCell();
      };
      CellRangeFeature2.prototype.getHasChartRange = function() {
        var rangeService = this.beans.rangeService;
        if (!this.rangeCount || !rangeService) {
          return false;
        }
        var cellRanges = rangeService.getCellRanges();
        return cellRanges.length > 0 && cellRanges.every(function(range) {
          return includes([CellRangeType.DIMENSION, CellRangeType.VALUE], range.type);
        });
      };
      CellRangeFeature2.prototype.updateRangeBordersIfRangeCount = function() {
        if (this.rangeCount > 0) {
          this.updateRangeBorders();
          this.refreshHandle();
        }
      };
      CellRangeFeature2.prototype.getRangeBorders = function() {
        var _this = this;
        var isRtl = this.beans.gridOptionsService.is("enableRtl");
        var top = false;
        var right = false;
        var bottom = false;
        var left = false;
        var thisCol = this.cellCtrl.getCellPosition().column;
        var _a = this.beans, rangeService = _a.rangeService, columnModel = _a.columnModel;
        var leftCol;
        var rightCol;
        if (isRtl) {
          leftCol = columnModel.getDisplayedColAfter(thisCol);
          rightCol = columnModel.getDisplayedColBefore(thisCol);
        } else {
          leftCol = columnModel.getDisplayedColBefore(thisCol);
          rightCol = columnModel.getDisplayedColAfter(thisCol);
        }
        var ranges = rangeService.getCellRanges().filter(function(range2) {
          return rangeService.isCellInSpecificRange(_this.cellCtrl.getCellPosition(), range2);
        });
        if (!leftCol) {
          left = true;
        }
        if (!rightCol) {
          right = true;
        }
        for (var i = 0; i < ranges.length; i++) {
          if (top && right && bottom && left) {
            break;
          }
          var range = ranges[i];
          var startRow = rangeService.getRangeStartRow(range);
          var endRow = rangeService.getRangeEndRow(range);
          if (!top && this.beans.rowPositionUtils.sameRow(startRow, this.cellCtrl.getCellPosition())) {
            top = true;
          }
          if (!bottom && this.beans.rowPositionUtils.sameRow(endRow, this.cellCtrl.getCellPosition())) {
            bottom = true;
          }
          if (!left && leftCol && range.columns.indexOf(leftCol) < 0) {
            left = true;
          }
          if (!right && rightCol && range.columns.indexOf(rightCol) < 0) {
            right = true;
          }
        }
        return { top, right, bottom, left };
      };
      CellRangeFeature2.prototype.refreshHandle = function() {
        if (!this.beans.rangeService) {
          return;
        }
        var shouldHaveSelectionHandle = this.shouldHaveSelectionHandle();
        if (this.selectionHandle && !shouldHaveSelectionHandle) {
          this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
        }
        if (shouldHaveSelectionHandle) {
          this.addSelectionHandle();
        }
        this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_HANDLE, !!this.selectionHandle);
      };
      CellRangeFeature2.prototype.shouldHaveSelectionHandle = function() {
        var _a = this.beans, gridOptionsService = _a.gridOptionsService, rangeService = _a.rangeService;
        var cellRanges = rangeService.getCellRanges();
        var rangesLen = cellRanges.length;
        if (this.rangeCount < 1 || rangesLen < 1) {
          return false;
        }
        var cellRange = last(cellRanges);
        var cellPosition = this.cellCtrl.getCellPosition();
        var isFillHandleAvailable = gridOptionsService.is("enableFillHandle") && !this.cellCtrl.isSuppressFillHandle();
        var isRangeHandleAvailable = gridOptionsService.is("enableRangeHandle");
        var handleIsAvailable = rangesLen === 1 && !this.cellCtrl.isEditing() && (isFillHandleAvailable || isRangeHandleAvailable);
        if (this.hasChartRange) {
          var hasCategoryRange = cellRanges[0].type === CellRangeType.DIMENSION;
          var isCategoryCell = hasCategoryRange && rangeService.isCellInSpecificRange(cellPosition, cellRanges[0]);
          this.cellComp.addOrRemoveCssClass(CSS_CELL_RANGE_CHART_CATEGORY, isCategoryCell);
          handleIsAvailable = cellRange.type === CellRangeType.VALUE;
        }
        return handleIsAvailable && cellRange.endRow != null && rangeService.isContiguousRange(cellRange) && rangeService.isBottomRightCell(cellRange, cellPosition);
      };
      CellRangeFeature2.prototype.addSelectionHandle = function() {
        var _a = this.beans, gridOptionsService = _a.gridOptionsService, rangeService = _a.rangeService;
        var cellRangeType = last(rangeService.getCellRanges()).type;
        var selectionHandleFill = gridOptionsService.is("enableFillHandle") && missing(cellRangeType);
        var type = selectionHandleFill ? SelectionHandleType.FILL : SelectionHandleType.RANGE;
        if (this.selectionHandle && this.selectionHandle.getType() !== type) {
          this.selectionHandle = this.beans.context.destroyBean(this.selectionHandle);
        }
        if (!this.selectionHandle) {
          this.selectionHandle = this.beans.selectionHandleFactory.createSelectionHandle(type);
        }
        this.selectionHandle.refresh(this.cellCtrl);
      };
      CellRangeFeature2.prototype.destroy = function() {
        this.beans.context.destroyBean(this.selectionHandle);
      };
      return CellRangeFeature2;
    }();
    __extends$21 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellPositionFeature = /** @class */
    function(_super) {
      __extends$21(CellPositionFeature2, _super);
      function CellPositionFeature2(ctrl, beans) {
        var _this = _super.call(this) || this;
        _this.cellCtrl = ctrl;
        _this.beans = beans;
        _this.column = ctrl.getColumn();
        _this.rowNode = ctrl.getRowNode();
        _this.setupColSpan();
        _this.setupRowSpan();
        return _this;
      }
      CellPositionFeature2.prototype.setupRowSpan = function() {
        this.rowSpan = this.column.getRowSpan(this.rowNode);
      };
      CellPositionFeature2.prototype.setComp = function(eGui) {
        this.eGui = eGui;
        this.onLeftChanged();
        this.onWidthChanged();
        this.applyRowSpan();
      };
      CellPositionFeature2.prototype.onDisplayColumnsChanged = function() {
        var colsSpanning = this.getColSpanningList();
        if (!areEqual(this.colsSpanning, colsSpanning)) {
          this.colsSpanning = colsSpanning;
          this.onWidthChanged();
          this.onLeftChanged();
        }
      };
      CellPositionFeature2.prototype.setupColSpan = function() {
        if (this.column.getColDef().colSpan == null) {
          return;
        }
        this.colsSpanning = this.getColSpanningList();
        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
        this.addManagedListener(this.beans.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
      };
      CellPositionFeature2.prototype.onWidthChanged = function() {
        if (!this.eGui) {
          return;
        }
        var width = this.getCellWidth();
        this.eGui.style.width = width + "px";
      };
      CellPositionFeature2.prototype.getCellWidth = function() {
        if (!this.colsSpanning) {
          return this.column.getActualWidth();
        }
        return this.colsSpanning.reduce(function(width, col) {
          return width + col.getActualWidth();
        }, 0);
      };
      CellPositionFeature2.prototype.getColSpanningList = function() {
        var colSpan = this.column.getColSpan(this.rowNode);
        var colsSpanning = [];
        if (colSpan === 1) {
          colsSpanning.push(this.column);
        } else {
          var pointer = this.column;
          var pinned = this.column.getPinned();
          for (var i = 0; pointer && i < colSpan; i++) {
            colsSpanning.push(pointer);
            pointer = this.beans.columnModel.getDisplayedColAfter(pointer);
            if (!pointer || missing(pointer)) {
              break;
            }
            if (pinned !== pointer.getPinned()) {
              break;
            }
          }
        }
        return colsSpanning;
      };
      CellPositionFeature2.prototype.onLeftChanged = function() {
        if (!this.eGui) {
          return;
        }
        var left = this.modifyLeftForPrintLayout(this.getCellLeft());
        this.eGui.style.left = left + "px";
      };
      CellPositionFeature2.prototype.getCellLeft = function() {
        var mostLeftCol;
        if (this.beans.gridOptionsService.is("enableRtl") && this.colsSpanning) {
          mostLeftCol = last(this.colsSpanning);
        } else {
          mostLeftCol = this.column;
        }
        return mostLeftCol.getLeft();
      };
      CellPositionFeature2.prototype.modifyLeftForPrintLayout = function(leftPosition) {
        if (!this.cellCtrl.isPrintLayout() || this.column.getPinned() === "left") {
          return leftPosition;
        }
        var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();
        if (this.column.getPinned() === "right") {
          var bodyWidth = this.beans.columnModel.getBodyContainerWidth();
          return leftWidth + bodyWidth + (leftPosition || 0);
        }
        return leftWidth + (leftPosition || 0);
      };
      CellPositionFeature2.prototype.applyRowSpan = function() {
        if (this.rowSpan === 1) {
          return;
        }
        var singleRowHeight = this.beans.gridOptionsService.getRowHeightAsNumber();
        var totalRowHeight = singleRowHeight * this.rowSpan;
        this.eGui.style.height = totalRowHeight + "px";
        this.eGui.style.zIndex = "1";
      };
      CellPositionFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      return CellPositionFeature2;
    }(BeanStub);
    __extends$20 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellCustomStyleFeature = /** @class */
    function(_super) {
      __extends$20(CellCustomStyleFeature2, _super);
      function CellCustomStyleFeature2(ctrl, beans) {
        var _this = _super.call(this) || this;
        _this.staticClasses = [];
        _this.cellCtrl = ctrl;
        _this.beans = beans;
        _this.column = ctrl.getColumn();
        _this.rowNode = ctrl.getRowNode();
        return _this;
      }
      CellCustomStyleFeature2.prototype.setComp = function(comp) {
        this.cellComp = comp;
        this.applyUserStyles();
        this.applyCellClassRules();
        this.applyClassesFromColDef();
      };
      CellCustomStyleFeature2.prototype.applyCellClassRules = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        var cellClassParams = {
          value: this.cellCtrl.getValue(),
          data: this.rowNode.data,
          node: this.rowNode,
          colDef,
          column: this.column,
          rowIndex: this.rowNode.rowIndex,
          api: this.beans.gridOptionsService.api,
          columnApi: this.beans.gridOptionsService.columnApi,
          context: this.beans.gridOptionsService.context
        };
        this.beans.stylingService.processClassRules(colDef.cellClassRules, cellClassParams, function(className) {
          return _this.cellComp.addOrRemoveCssClass(className, true);
        }, function(className) {
          return _this.cellComp.addOrRemoveCssClass(className, false);
        });
      };
      CellCustomStyleFeature2.prototype.applyUserStyles = function() {
        var colDef = this.column.getColDef();
        if (!colDef.cellStyle) {
          return;
        }
        var styles;
        if (typeof colDef.cellStyle === "function") {
          var cellStyleParams = {
            column: this.column,
            value: this.cellCtrl.getValue(),
            colDef,
            data: this.rowNode.data,
            node: this.rowNode,
            rowIndex: this.rowNode.rowIndex,
            api: this.beans.gridOptionsService.api,
            columnApi: this.beans.gridOptionsService.columnApi,
            context: this.beans.gridOptionsService.context
          };
          var cellStyleFunc = colDef.cellStyle;
          styles = cellStyleFunc(cellStyleParams);
        } else {
          styles = colDef.cellStyle;
        }
        if (styles) {
          this.cellComp.setUserStyles(styles);
        }
      };
      CellCustomStyleFeature2.prototype.applyClassesFromColDef = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        var cellClassParams = {
          value: this.cellCtrl.getValue(),
          data: this.rowNode.data,
          node: this.rowNode,
          column: this.column,
          colDef,
          rowIndex: this.rowNode.rowIndex,
          api: this.beans.gridOptionsService.api,
          columnApi: this.beans.gridOptionsService.columnApi,
          context: this.beans.gridOptionsService.context
        };
        if (this.staticClasses.length) {
          this.staticClasses.forEach(function(className) {
            return _this.cellComp.addOrRemoveCssClass(className, false);
          });
        }
        this.staticClasses = this.beans.stylingService.getStaticCellClasses(colDef, cellClassParams);
        if (this.staticClasses.length) {
          this.staticClasses.forEach(function(className) {
            return _this.cellComp.addOrRemoveCssClass(className, true);
          });
        }
      };
      CellCustomStyleFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      return CellCustomStyleFeature2;
    }(BeanStub);
    __extends$1$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    TooltipFeature = /** @class */
    function(_super) {
      __extends$1$(TooltipFeature2, _super);
      function TooltipFeature2(ctrl, beans) {
        var _this = _super.call(this) || this;
        _this.ctrl = ctrl;
        _this.beans = beans;
        return _this;
      }
      TooltipFeature2.prototype.setComp = function(eGui) {
        this.eGui = eGui;
        this.setupTooltip();
      };
      TooltipFeature2.prototype.setBrowserTooltip = function(tooltip) {
        var name = "title";
        if (tooltip != null && tooltip != "") {
          this.eGui.setAttribute(name, tooltip);
        } else {
          this.eGui.removeAttribute(name);
        }
      };
      TooltipFeature2.prototype.setupTooltip = function() {
        this.browserTooltips = this.beans.gridOptionsService.is("enableBrowserTooltips");
        this.updateTooltipText();
        if (this.browserTooltips) {
          this.setBrowserTooltip(this.tooltip);
        } else {
          this.createTooltipFeatureIfNeeded();
        }
      };
      TooltipFeature2.prototype.updateTooltipText = function() {
        this.tooltip = this.ctrl.getTooltipValue();
      };
      TooltipFeature2.prototype.createTooltipFeatureIfNeeded = function() {
        var _this = this;
        var _a, _b, _c, _d;
        if (this.genericTooltipFeature != null) {
          return;
        }
        var parent = {
          getTooltipParams: function() {
            return _this.getTooltipParams();
          },
          getGui: function() {
            return _this.ctrl.getGui();
          }
        };
        this.genericTooltipFeature = this.createManagedBean(new CustomTooltipFeature(parent, (_b = (_a = this.ctrl).getTooltipShowDelayOverride) === null || _b === void 0 ? void 0 : _b.call(_a), (_d = (_c = this.ctrl).getTooltipHideDelayOverride) === null || _d === void 0 ? void 0 : _d.call(_c)), this.beans.context);
      };
      TooltipFeature2.prototype.refreshToolTip = function() {
        this.updateTooltipText();
        if (this.browserTooltips) {
          this.setBrowserTooltip(this.tooltip);
        }
      };
      TooltipFeature2.prototype.getTooltipParams = function() {
        var _this = this;
        var ctrl = this.ctrl;
        var column = ctrl.getColumn ? ctrl.getColumn() : void 0;
        var colDef = ctrl.getColDef ? ctrl.getColDef() : void 0;
        var rowNode = ctrl.getRowNode ? ctrl.getRowNode() : void 0;
        return {
          location: ctrl.getLocation(),
          colDef,
          column,
          rowIndex: ctrl.getRowIndex ? ctrl.getRowIndex() : void 0,
          node: rowNode,
          data: rowNode ? rowNode.data : void 0,
          value: this.getTooltipText(),
          valueFormatted: ctrl.getValueFormatted ? ctrl.getValueFormatted() : void 0,
          hideTooltipCallback: function() {
            return _this.genericTooltipFeature.hideTooltip(true);
          }
        };
      };
      TooltipFeature2.prototype.getTooltipText = function() {
        return this.tooltip;
      };
      TooltipFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      return TooltipFeature2;
    }(BeanStub);
    __decorate$1S = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    Beans = /** @class */
    function() {
      function Beans2() {
      }
      Beans2.prototype.postConstruct = function() {
        this.doingMasterDetail = this.gridOptionsService.is("masterDetail");
        if (this.gridOptionsService.isRowModelType("clientSide")) {
          this.clientSideRowModel = this.rowModel;
        }
        if (this.gridOptionsService.isRowModelType("serverSide")) {
          this.serverSideRowModel = this.rowModel;
        }
      };
      __decorate$1S([
        Autowired("resizeObserverService")
      ], Beans2.prototype, "resizeObserverService", void 0);
      __decorate$1S([
        Autowired("paginationProxy")
      ], Beans2.prototype, "paginationProxy", void 0);
      __decorate$1S([
        Autowired("context")
      ], Beans2.prototype, "context", void 0);
      __decorate$1S([
        Autowired("columnApi")
      ], Beans2.prototype, "columnApi", void 0);
      __decorate$1S([
        Autowired("gridApi")
      ], Beans2.prototype, "gridApi", void 0);
      __decorate$1S([
        Autowired("gridOptionsService")
      ], Beans2.prototype, "gridOptionsService", void 0);
      __decorate$1S([
        Autowired("expressionService")
      ], Beans2.prototype, "expressionService", void 0);
      __decorate$1S([
        Autowired("environment")
      ], Beans2.prototype, "environment", void 0);
      __decorate$1S([
        Autowired("rowRenderer")
      ], Beans2.prototype, "rowRenderer", void 0);
      __decorate$1S([
        Autowired("templateService")
      ], Beans2.prototype, "templateService", void 0);
      __decorate$1S([
        Autowired("valueService")
      ], Beans2.prototype, "valueService", void 0);
      __decorate$1S([
        Autowired("eventService")
      ], Beans2.prototype, "eventService", void 0);
      __decorate$1S([
        Autowired("columnModel")
      ], Beans2.prototype, "columnModel", void 0);
      __decorate$1S([
        Autowired("headerNavigationService")
      ], Beans2.prototype, "headerNavigationService", void 0);
      __decorate$1S([
        Autowired("navigationService")
      ], Beans2.prototype, "navigationService", void 0);
      __decorate$1S([
        Autowired("columnAnimationService")
      ], Beans2.prototype, "columnAnimationService", void 0);
      __decorate$1S([
        Optional("rangeService")
      ], Beans2.prototype, "rangeService", void 0);
      __decorate$1S([
        Autowired("focusService")
      ], Beans2.prototype, "focusService", void 0);
      __decorate$1S([
        Optional("contextMenuFactory")
      ], Beans2.prototype, "contextMenuFactory", void 0);
      __decorate$1S([
        Autowired("popupService")
      ], Beans2.prototype, "popupService", void 0);
      __decorate$1S([
        Autowired("valueFormatterService")
      ], Beans2.prototype, "valueFormatterService", void 0);
      __decorate$1S([
        Autowired("stylingService")
      ], Beans2.prototype, "stylingService", void 0);
      __decorate$1S([
        Autowired("columnHoverService")
      ], Beans2.prototype, "columnHoverService", void 0);
      __decorate$1S([
        Autowired("userComponentFactory")
      ], Beans2.prototype, "userComponentFactory", void 0);
      __decorate$1S([
        Autowired("userComponentRegistry")
      ], Beans2.prototype, "userComponentRegistry", void 0);
      __decorate$1S([
        Autowired("animationFrameService")
      ], Beans2.prototype, "animationFrameService", void 0);
      __decorate$1S([
        Autowired("dragService")
      ], Beans2.prototype, "dragService", void 0);
      __decorate$1S([
        Autowired("dragAndDropService")
      ], Beans2.prototype, "dragAndDropService", void 0);
      __decorate$1S([
        Autowired("sortController")
      ], Beans2.prototype, "sortController", void 0);
      __decorate$1S([
        Autowired("filterManager")
      ], Beans2.prototype, "filterManager", void 0);
      __decorate$1S([
        Autowired("rowContainerHeightService")
      ], Beans2.prototype, "rowContainerHeightService", void 0);
      __decorate$1S([
        Autowired("frameworkOverrides")
      ], Beans2.prototype, "frameworkOverrides", void 0);
      __decorate$1S([
        Autowired("cellPositionUtils")
      ], Beans2.prototype, "cellPositionUtils", void 0);
      __decorate$1S([
        Autowired("rowPositionUtils")
      ], Beans2.prototype, "rowPositionUtils", void 0);
      __decorate$1S([
        Autowired("selectionService")
      ], Beans2.prototype, "selectionService", void 0);
      __decorate$1S([
        Optional("selectionHandleFactory")
      ], Beans2.prototype, "selectionHandleFactory", void 0);
      __decorate$1S([
        Autowired("rowCssClassCalculator")
      ], Beans2.prototype, "rowCssClassCalculator", void 0);
      __decorate$1S([
        Autowired("rowModel")
      ], Beans2.prototype, "rowModel", void 0);
      __decorate$1S([
        Autowired("ctrlsService")
      ], Beans2.prototype, "ctrlsService", void 0);
      __decorate$1S([
        Autowired("ctrlsFactory")
      ], Beans2.prototype, "ctrlsFactory", void 0);
      __decorate$1S([
        Autowired("agStackComponentsRegistry")
      ], Beans2.prototype, "agStackComponentsRegistry", void 0);
      __decorate$1S([
        Autowired("valueCache")
      ], Beans2.prototype, "valueCache", void 0);
      __decorate$1S([
        Autowired("rowNodeEventThrottle")
      ], Beans2.prototype, "rowNodeEventThrottle", void 0);
      __decorate$1S([
        Autowired("localeService")
      ], Beans2.prototype, "localeService", void 0);
      __decorate$1S([
        Autowired("valueParserService")
      ], Beans2.prototype, "valueParserService", void 0);
      __decorate$1S([
        PostConstruct
      ], Beans2.prototype, "postConstruct", null);
      Beans2 = __decorate$1S([
        Bean("beans")
      ], Beans2);
      return Beans2;
    }();
    __extends$1_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellMouseListenerFeature = /** @class */
    function(_super) {
      __extends$1_(CellMouseListenerFeature2, _super);
      function CellMouseListenerFeature2(ctrl, beans, column) {
        var _this = _super.call(this) || this;
        _this.cellCtrl = ctrl;
        _this.beans = beans;
        _this.column = column;
        return _this;
      }
      CellMouseListenerFeature2.prototype.onMouseEvent = function(eventName, mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        switch (eventName) {
          case "click":
            this.onCellClicked(mouseEvent);
            break;
          case "mousedown":
          case "touchstart":
            this.onMouseDown(mouseEvent);
            break;
          case "dblclick":
            this.onCellDoubleClicked(mouseEvent);
            break;
          case "mouseout":
            this.onMouseOut(mouseEvent);
            break;
          case "mouseover":
            this.onMouseOver(mouseEvent);
            break;
        }
      };
      CellMouseListenerFeature2.prototype.onCellClicked = function(mouseEvent) {
        if (this.isDoubleClickOnIPad()) {
          this.onCellDoubleClicked(mouseEvent);
          mouseEvent.preventDefault();
          return;
        }
        var _a = this.beans, eventService = _a.eventService, rangeService = _a.rangeService, gridOptionsService = _a.gridOptionsService;
        var isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;
        if (rangeService && isMultiKey) {
          if (rangeService.getCellRangeCount(this.cellCtrl.getCellPosition()) > 1) {
            rangeService.intersectLastRange(true);
          }
        }
        var cellClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_CLICKED);
        eventService.dispatchEvent(cellClickedEvent);
        var colDef = this.column.getColDef();
        if (colDef.onCellClicked) {
          window.setTimeout(function() {
            return colDef.onCellClicked(cellClickedEvent);
          }, 0);
        }
        var editOnSingleClick = (gridOptionsService.is("singleClickEdit") || colDef.singleClickEdit) && !gridOptionsService.is("suppressClickEdit");
        if (editOnSingleClick && !(mouseEvent.shiftKey && (rangeService === null || rangeService === void 0 ? void 0 : rangeService.getCellRanges().length) != 0)) {
          this.cellCtrl.startRowOrCellEdit();
        }
      };
      CellMouseListenerFeature2.prototype.isDoubleClickOnIPad = function() {
        if (!isIOSUserAgent() || isEventSupported("dblclick")) {
          return false;
        }
        var nowMillis = (/* @__PURE__ */ new Date()).getTime();
        var res = nowMillis - this.lastIPadMouseClickEvent < 200;
        this.lastIPadMouseClickEvent = nowMillis;
        return res;
      };
      CellMouseListenerFeature2.prototype.onCellDoubleClicked = function(mouseEvent) {
        var colDef = this.column.getColDef();
        var cellDoubleClickedEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_DOUBLE_CLICKED);
        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
        if (typeof colDef.onCellDoubleClicked === "function") {
          window.setTimeout(function() {
            return colDef.onCellDoubleClicked(cellDoubleClickedEvent);
          }, 0);
        }
        var editOnDoubleClick = !this.beans.gridOptionsService.is("singleClickEdit") && !this.beans.gridOptionsService.is("suppressClickEdit");
        if (editOnDoubleClick) {
          this.cellCtrl.startRowOrCellEdit(null, mouseEvent);
        }
      };
      CellMouseListenerFeature2.prototype.onMouseDown = function(mouseEvent) {
        var ctrlKey = mouseEvent.ctrlKey, metaKey = mouseEvent.metaKey, shiftKey = mouseEvent.shiftKey;
        var target = mouseEvent.target;
        var _a = this, cellCtrl = _a.cellCtrl, beans = _a.beans;
        var eventService = beans.eventService, rangeService = beans.rangeService, focusService = beans.focusService;
        if (this.isRightClickInExistingRange(mouseEvent)) {
          return;
        }
        var ranges = rangeService && rangeService.getCellRanges().length != 0;
        if (!shiftKey || !ranges) {
          var forceBrowserFocus = isBrowserSafari() && !cellCtrl.isEditing() && !isFocusableFormField(target);
          cellCtrl.focusCell(forceBrowserFocus);
        }
        if (shiftKey && ranges && !focusService.isCellFocused(cellCtrl.getCellPosition())) {
          mouseEvent.preventDefault();
          var focusedCellPosition = focusService.getFocusedCell();
          if (focusedCellPosition) {
            var column = focusedCellPosition.column, rowIndex = focusedCellPosition.rowIndex, rowPinned = focusedCellPosition.rowPinned;
            var focusedRowCtrl = beans.rowRenderer.getRowByPosition({ rowIndex, rowPinned });
            var focusedCellCtrl = focusedRowCtrl === null || focusedRowCtrl === void 0 ? void 0 : focusedRowCtrl.getCellCtrl(column);
            if (focusedCellCtrl === null || focusedCellCtrl === void 0 ? void 0 : focusedCellCtrl.isEditing()) {
              focusedCellCtrl.stopEditing();
            }
            focusService.setFocusedCell({
              column,
              rowIndex,
              rowPinned,
              forceBrowserFocus: true,
              preventScrollOnBrowserFocus: true
            });
          }
        }
        if (this.containsWidget(target)) {
          return;
        }
        if (rangeService) {
          var thisCell = this.cellCtrl.getCellPosition();
          if (shiftKey) {
            rangeService.extendLatestRangeToCell(thisCell);
          } else {
            var isMultiKey = ctrlKey || metaKey;
            rangeService.setRangeToCell(thisCell, isMultiKey);
          }
        }
        eventService.dispatchEvent(this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_DOWN));
      };
      CellMouseListenerFeature2.prototype.isRightClickInExistingRange = function(mouseEvent) {
        var rangeService = this.beans.rangeService;
        if (rangeService) {
          var cellInRange = rangeService.isCellInAnyRange(this.cellCtrl.getCellPosition());
          var isRightClick = mouseEvent.button === 2 || mouseEvent.ctrlKey && this.beans.gridOptionsService.is("allowContextMenuWithControlKey");
          if (cellInRange && isRightClick) {
            return true;
          }
        }
        return false;
      };
      CellMouseListenerFeature2.prototype.containsWidget = function(target) {
        return isElementChildOfClass(target, "ag-selection-checkbox", 3);
      };
      CellMouseListenerFeature2.prototype.onMouseOut = function(mouseEvent) {
        if (this.mouseStayingInsideCell(mouseEvent)) {
          return;
        }
        var cellMouseOutEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OUT);
        this.beans.eventService.dispatchEvent(cellMouseOutEvent);
        this.beans.columnHoverService.clearMouseOver();
      };
      CellMouseListenerFeature2.prototype.onMouseOver = function(mouseEvent) {
        if (this.mouseStayingInsideCell(mouseEvent)) {
          return;
        }
        var cellMouseOverEvent = this.cellCtrl.createEvent(mouseEvent, Events.EVENT_CELL_MOUSE_OVER);
        this.beans.eventService.dispatchEvent(cellMouseOverEvent);
        this.beans.columnHoverService.setMouseOver([this.column]);
      };
      CellMouseListenerFeature2.prototype.mouseStayingInsideCell = function(e) {
        if (!e.target || !e.relatedTarget) {
          return false;
        }
        var eGui = this.cellCtrl.getGui();
        var cellContainsTarget = eGui.contains(e.target);
        var cellContainsRelatedTarget = eGui.contains(e.relatedTarget);
        return cellContainsTarget && cellContainsRelatedTarget;
      };
      CellMouseListenerFeature2.prototype.destroy = function() {
      };
      return CellMouseListenerFeature2;
    }(Beans);
    __extends$1Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellKeyboardListenerFeature = /** @class */
    function(_super) {
      __extends$1Z(CellKeyboardListenerFeature2, _super);
      function CellKeyboardListenerFeature2(ctrl, beans, column, rowNode, rowCtrl) {
        var _this = _super.call(this) || this;
        _this.cellCtrl = ctrl;
        _this.beans = beans;
        _this.rowNode = rowNode;
        _this.rowCtrl = rowCtrl;
        return _this;
      }
      CellKeyboardListenerFeature2.prototype.setComp = function(eGui) {
        this.eGui = eGui;
      };
      CellKeyboardListenerFeature2.prototype.onKeyDown = function(event) {
        var key = event.key;
        switch (key) {
          case KeyCode.ENTER:
            this.onEnterKeyDown(event);
            break;
          case KeyCode.F2:
            this.onF2KeyDown(event);
            break;
          case KeyCode.ESCAPE:
            this.onEscapeKeyDown(event);
            break;
          case KeyCode.TAB:
            this.onTabKeyDown(event);
            break;
          case KeyCode.BACKSPACE:
          case KeyCode.DELETE:
            this.onBackspaceOrDeleteKeyDown(key, event);
            break;
          case KeyCode.DOWN:
          case KeyCode.UP:
          case KeyCode.RIGHT:
          case KeyCode.LEFT:
            this.onNavigationKeyDown(event, key);
            break;
        }
      };
      CellKeyboardListenerFeature2.prototype.onNavigationKeyDown = function(event, key) {
        if (this.cellCtrl.isEditing()) {
          return;
        }
        if (event.shiftKey && this.cellCtrl.isRangeSelectionEnabled()) {
          this.onShiftRangeSelect(event);
        } else {
          this.beans.navigationService.navigateToNextCell(event, key, this.cellCtrl.getCellPosition(), true);
        }
        event.preventDefault();
      };
      CellKeyboardListenerFeature2.prototype.onShiftRangeSelect = function(event) {
        if (!this.beans.rangeService) {
          return;
        }
        var endCell = this.beans.rangeService.extendLatestRangeInDirection(event);
        if (endCell) {
          this.beans.navigationService.ensureCellVisible(endCell);
        }
      };
      CellKeyboardListenerFeature2.prototype.onTabKeyDown = function(event) {
        this.beans.navigationService.onTabKeyDown(this.cellCtrl, event);
      };
      CellKeyboardListenerFeature2.prototype.onBackspaceOrDeleteKeyDown = function(key, event) {
        var _a = this, cellCtrl = _a.cellCtrl, beans = _a.beans, rowNode = _a.rowNode;
        var gridOptionsService = beans.gridOptionsService, rangeService = beans.rangeService, eventService = beans.eventService;
        if (cellCtrl.isEditing()) {
          return;
        }
        eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START });
        if (isDeleteKey(key, gridOptionsService.is("enableCellEditingOnBackspace"))) {
          if (rangeService && gridOptionsService.is("enableRangeSelection")) {
            rangeService.clearCellRangeCellValues({ dispatchWrapperEvents: true, wrapperEventSource: "deleteKey" });
          } else if (cellCtrl.isCellEditable()) {
            rowNode.setDataValue(cellCtrl.getColumn(), null, "cellClear");
          }
        } else {
          cellCtrl.startRowOrCellEdit(key, event);
        }
        eventService.dispatchEvent({ type: Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END });
      };
      CellKeyboardListenerFeature2.prototype.onEnterKeyDown = function(e) {
        if (this.cellCtrl.isEditing() || this.rowCtrl.isEditing()) {
          this.cellCtrl.stopEditingAndFocus(false, e.shiftKey);
        } else {
          if (this.beans.gridOptionsService.is("enterNavigatesVertically")) {
            var key = e.shiftKey ? KeyCode.UP : KeyCode.DOWN;
            this.beans.navigationService.navigateToNextCell(null, key, this.cellCtrl.getCellPosition(), false);
          } else {
            this.cellCtrl.startRowOrCellEdit(KeyCode.ENTER, e);
            if (this.cellCtrl.isEditing()) {
              e.preventDefault();
            }
          }
        }
      };
      CellKeyboardListenerFeature2.prototype.onF2KeyDown = function(event) {
        if (!this.cellCtrl.isEditing()) {
          this.cellCtrl.startRowOrCellEdit(KeyCode.F2, event);
        }
      };
      CellKeyboardListenerFeature2.prototype.onEscapeKeyDown = function(event) {
        if (this.cellCtrl.isEditing()) {
          this.cellCtrl.stopRowOrCellEdit(true);
          this.cellCtrl.focusCell(true);
        }
      };
      CellKeyboardListenerFeature2.prototype.processCharacter = function(event) {
        var eventTarget = event.target;
        var eventOnChildComponent = eventTarget !== this.eGui;
        if (eventOnChildComponent || this.cellCtrl.isEditing()) {
          return;
        }
        var key = event.key;
        if (key === " ") {
          this.onSpaceKeyDown(event);
        } else {
          this.cellCtrl.startRowOrCellEdit(key, event);
          event.preventDefault();
        }
      };
      CellKeyboardListenerFeature2.prototype.onSpaceKeyDown = function(event) {
        var gridOptionsService = this.beans.gridOptionsService;
        if (!this.cellCtrl.isEditing() && gridOptionsService.isRowSelection()) {
          var currentSelection = this.rowNode.isSelected();
          var newSelection = !currentSelection;
          if (newSelection || !gridOptionsService.is("suppressRowDeselection")) {
            var groupSelectsFiltered = this.beans.gridOptionsService.is("groupSelectsFiltered");
            var updatedCount = this.rowNode.setSelectedParams({
              newValue: newSelection,
              rangeSelect: event.shiftKey,
              groupSelectsFiltered,
              event,
              source: "spaceKey"
            });
            if (currentSelection === void 0 && updatedCount === 0) {
              this.rowNode.setSelectedParams({
                newValue: false,
                rangeSelect: event.shiftKey,
                groupSelectsFiltered,
                event,
                source: "spaceKey"
              });
            }
          }
        }
        event.preventDefault();
      };
      CellKeyboardListenerFeature2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      return CellKeyboardListenerFeature2;
    }(BeanStub);
    __extends$1Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1R = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DndSourceComp = /** @class */
    function(_super) {
      __extends$1Y(DndSourceComp2, _super);
      function DndSourceComp2(rowNode, column, eCell) {
        var _this = _super.call(
          this,
          /* html */
          '<div class="ag-drag-handle ag-row-drag" draggable="true"></div>'
        ) || this;
        _this.rowNode = rowNode;
        _this.column = column;
        _this.eCell = eCell;
        return _this;
      }
      DndSourceComp2.prototype.postConstruct = function() {
        var eGui = this.getGui();
        eGui.appendChild(createIconNoSpan("rowDrag", this.gridOptionsService, null));
        this.addGuiEventListener("mousedown", function(e) {
          e.stopPropagation();
        });
        this.addDragSource();
        this.checkVisibility();
      };
      DndSourceComp2.prototype.addDragSource = function() {
        this.addGuiEventListener("dragstart", this.onDragStart.bind(this));
      };
      DndSourceComp2.prototype.onDragStart = function(dragEvent) {
        var _this = this;
        var providedOnRowDrag = this.column.getColDef().dndSourceOnRowDrag;
        dragEvent.dataTransfer.setDragImage(this.eCell, 0, 0);
        var defaultOnRowDrag = function() {
          try {
            var jsonData = JSON.stringify(_this.rowNode.data);
            dragEvent.dataTransfer.setData("application/json", jsonData);
            dragEvent.dataTransfer.setData("text/plain", jsonData);
          } catch (e) {
          }
        };
        if (providedOnRowDrag) {
          var params = {
            rowNode: this.rowNode,
            dragEvent,
            api: this.gridOptionsService.api,
            columnApi: this.gridOptionsService.columnApi,
            context: this.gridOptionsService.context
          };
          providedOnRowDrag(params);
        } else {
          defaultOnRowDrag();
        }
      };
      DndSourceComp2.prototype.checkVisibility = function() {
        var visible = this.column.isDndSource(this.rowNode);
        this.setDisplayed(visible);
      };
      __decorate$1R([
        PostConstruct
      ], DndSourceComp2.prototype, "postConstruct", null);
      return DndSourceComp2;
    }(Component);
    __extends$1X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$a = function() {
      __assign$a = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$a.apply(this, arguments);
    };
    CSS_CELL = "ag-cell";
    CSS_AUTO_HEIGHT = "ag-cell-auto-height";
    CSS_NORMAL_HEIGHT = "ag-cell-normal-height";
    CSS_CELL_FOCUS = "ag-cell-focus";
    CSS_CELL_FIRST_RIGHT_PINNED = "ag-cell-first-right-pinned";
    CSS_CELL_LAST_LEFT_PINNED = "ag-cell-last-left-pinned";
    CSS_CELL_NOT_INLINE_EDITING = "ag-cell-not-inline-editing";
    CSS_COLUMN_HOVER = "ag-column-hover";
    CSS_CELL_WRAP_TEXT = "ag-cell-wrap-text";
    instanceIdSequence$3 = 0;
    CellCtrl = /** @class */
    function(_super) {
      __extends$1X(CellCtrl2, _super);
      function CellCtrl2(column, rowNode, beans, rowCtrl) {
        var _this = _super.call(this) || this;
        _this.cellRangeFeature = null;
        _this.cellPositionFeature = null;
        _this.cellCustomStyleFeature = null;
        _this.tooltipFeature = null;
        _this.cellMouseListenerFeature = null;
        _this.cellKeyboardListenerFeature = null;
        _this.suppressRefreshCell = false;
        _this.onCellCompAttachedFuncs = [];
        _this.column = column;
        _this.rowNode = rowNode;
        _this.beans = beans;
        _this.rowCtrl = rowCtrl;
        _this.instanceId = column.getId() + "-" + instanceIdSequence$3++;
        var colDef = _this.column.getColDef();
        _this.colIdSanitised = escapeString(_this.column.getId());
        if (!_this.beans.gridOptionsService.is("suppressCellFocus")) {
          _this.tabIndex = -1;
        }
        _this.isCellRenderer = colDef.cellRenderer != null || colDef.cellRendererSelector != null;
        _this.createCellPosition();
        _this.addFeatures();
        _this.updateAndFormatValue(true);
        return _this;
      }
      CellCtrl2.prototype.shouldRestoreFocus = function() {
        return this.beans.focusService.shouldRestoreFocus(this.cellPosition);
      };
      CellCtrl2.prototype.addFeatures = function() {
        var _this = this;
        this.cellPositionFeature = new CellPositionFeature(this, this.beans);
        this.addDestroyFunc(function() {
          var _a;
          (_a = _this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.destroy();
          _this.cellPositionFeature = null;
        });
        this.cellCustomStyleFeature = new CellCustomStyleFeature(this, this.beans);
        this.addDestroyFunc(function() {
          var _a;
          (_a = _this.cellCustomStyleFeature) === null || _a === void 0 ? void 0 : _a.destroy();
          _this.cellCustomStyleFeature = null;
        });
        this.cellMouseListenerFeature = new CellMouseListenerFeature(this, this.beans, this.column);
        this.addDestroyFunc(function() {
          var _a;
          (_a = _this.cellMouseListenerFeature) === null || _a === void 0 ? void 0 : _a.destroy();
          _this.cellMouseListenerFeature = null;
        });
        this.cellKeyboardListenerFeature = new CellKeyboardListenerFeature(this, this.beans, this.column, this.rowNode, this.rowCtrl);
        this.addDestroyFunc(function() {
          var _a;
          (_a = _this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.destroy();
          _this.cellKeyboardListenerFeature = null;
        });
        var rangeSelectionEnabled = this.beans.rangeService && this.beans.gridOptionsService.is("enableRangeSelection");
        if (rangeSelectionEnabled) {
          this.cellRangeFeature = new CellRangeFeature(this.beans, this);
          this.addDestroyFunc(function() {
            var _a;
            (_a = _this.cellRangeFeature) === null || _a === void 0 ? void 0 : _a.destroy();
            _this.cellRangeFeature = null;
          });
        }
        if (this.column.isTooltipEnabled()) {
          this.addTooltipFeature();
        }
      };
      CellCtrl2.prototype.addTooltipFeature = function() {
        var _this = this;
        var getTooltipValue = function() {
          var colDef = _this.column.getColDef();
          var data = _this.rowNode.data;
          if (colDef.tooltipField && exists(data)) {
            return getValueUsingField(data, colDef.tooltipField, _this.column.isTooltipFieldContainsDots());
          }
          var valueGetter = colDef.tooltipValueGetter;
          if (valueGetter) {
            return valueGetter({
              location: "cell",
              api: _this.beans.gridOptionsService.api,
              columnApi: _this.beans.gridOptionsService.columnApi,
              context: _this.beans.gridOptionsService.context,
              colDef: _this.column.getColDef(),
              column: _this.column,
              rowIndex: _this.cellPosition.rowIndex,
              node: _this.rowNode,
              data: _this.rowNode.data,
              value: _this.value,
              valueFormatted: _this.valueFormatted
            });
          }
          return null;
        };
        var tooltipCtrl = {
          getColumn: function() {
            return _this.column;
          },
          getColDef: function() {
            return _this.column.getColDef();
          },
          getRowIndex: function() {
            return _this.cellPosition.rowIndex;
          },
          getRowNode: function() {
            return _this.rowNode;
          },
          getGui: function() {
            return _this.getGui();
          },
          getLocation: function() {
            return "cell";
          },
          getTooltipValue,
          // this makes no sense, why is the cell formatted value passed to the tooltip???
          getValueFormatted: function() {
            return _this.valueFormatted;
          }
        };
        this.tooltipFeature = new TooltipFeature(tooltipCtrl, this.beans);
        this.addDestroyFunc(function() {
          var _a;
          (_a = _this.tooltipFeature) === null || _a === void 0 ? void 0 : _a.destroy();
          _this.tooltipFeature = null;
        });
      };
      CellCtrl2.prototype.setComp = function(comp, eGui, eCellWrapper, printLayout, startEditing) {
        var _a, _b, _c, _d;
        this.cellComp = comp;
        this.eGui = eGui;
        this.printLayout = printLayout;
        this.addDomData();
        this.onCellFocused(this.focusEventToRestore);
        this.applyStaticCssClasses();
        this.setWrapText();
        this.onFirstRightPinnedChanged();
        this.onLastLeftPinnedChanged();
        this.onColumnHover();
        this.setupControlComps();
        if (eCellWrapper) {
          this.setupAutoHeight(eCellWrapper);
        }
        this.setAriaColIndex();
        (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.setComp(eGui);
        (_b = this.cellCustomStyleFeature) === null || _b === void 0 ? void 0 : _b.setComp(comp);
        (_c = this.tooltipFeature) === null || _c === void 0 ? void 0 : _c.setComp(eGui);
        (_d = this.cellKeyboardListenerFeature) === null || _d === void 0 ? void 0 : _d.setComp(this.eGui);
        if (this.cellRangeFeature) {
          this.cellRangeFeature.setComp(comp, eGui);
        }
        if (startEditing && this.isCellEditable()) {
          this.startEditing();
        } else {
          this.showValue();
        }
        if (this.onCellCompAttachedFuncs.length) {
          this.onCellCompAttachedFuncs.forEach(function(func) {
            return func();
          });
          this.onCellCompAttachedFuncs = [];
        }
      };
      CellCtrl2.prototype.setupAutoHeight = function(eCellWrapper) {
        var _this = this;
        if (!this.column.isAutoHeight()) {
          return;
        }
        var eParentCell = eCellWrapper.parentElement;
        var minRowHeight = this.beans.gridOptionsService.getRowHeightForNode(this.rowNode).height;
        var measureHeight = function(timesCalled) {
          if (_this.editing) {
            return;
          }
          if (!_this.isAlive()) {
            return;
          }
          var _a = getElementSize(eParentCell), paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom, borderBottomWidth = _a.borderBottomWidth, borderTopWidth = _a.borderTopWidth;
          var extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;
          var wrapperHeight = eCellWrapper.offsetHeight;
          var autoHeight = wrapperHeight + extraHeight;
          if (timesCalled < 5) {
            var doc = _this.beans.gridOptionsService.getDocument();
            var notYetInDom = !doc || !doc.contains(eCellWrapper);
            var possiblyNoContentYet = autoHeight == 0;
            if (notYetInDom || possiblyNoContentYet) {
              _this.beans.frameworkOverrides.setTimeout(function() {
                return measureHeight(timesCalled + 1);
              }, 0);
              return;
            }
          }
          var newHeight = Math.max(autoHeight, minRowHeight);
          _this.rowNode.setRowAutoHeight(newHeight, _this.column);
        };
        var listener = function() {
          return measureHeight(0);
        };
        listener();
        var destroyResizeObserver = this.beans.resizeObserverService.observeResize(eCellWrapper, listener);
        this.addDestroyFunc(function() {
          destroyResizeObserver();
          _this.rowNode.setRowAutoHeight(void 0, _this.column);
        });
      };
      CellCtrl2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      CellCtrl2.prototype.getIncludeSelection = function() {
        return this.includeSelection;
      };
      CellCtrl2.prototype.getIncludeRowDrag = function() {
        return this.includeRowDrag;
      };
      CellCtrl2.prototype.getIncludeDndSource = function() {
        return this.includeDndSource;
      };
      CellCtrl2.prototype.getColumnIdSanitised = function() {
        return this.colIdSanitised;
      };
      CellCtrl2.prototype.getTabIndex = function() {
        return this.tabIndex;
      };
      CellCtrl2.prototype.getIsCellRenderer = function() {
        return this.isCellRenderer;
      };
      CellCtrl2.prototype.getValueToDisplay = function() {
        return this.valueFormatted != null ? this.valueFormatted : this.value;
      };
      CellCtrl2.prototype.showValue = function(forceNewCellRendererInstance) {
        if (forceNewCellRendererInstance === void 0) {
          forceNewCellRendererInstance = false;
        }
        var valueToDisplay = this.getValueToDisplay();
        var compDetails;
        if (this.isCellRenderer) {
          var params = this.createCellRendererParams();
          compDetails = this.beans.userComponentFactory.getCellRendererDetails(this.column.getColDef(), params);
        }
        this.cellComp.setRenderDetails(compDetails, valueToDisplay, forceNewCellRendererInstance);
        this.refreshHandle();
      };
      CellCtrl2.prototype.setupControlComps = function() {
        var colDef = this.column.getColDef();
        this.includeSelection = this.isIncludeControl(colDef.checkboxSelection);
        this.includeRowDrag = this.isIncludeControl(colDef.rowDrag);
        this.includeDndSource = this.isIncludeControl(colDef.dndSource);
        this.cellComp.setIncludeSelection(this.includeSelection);
        this.cellComp.setIncludeDndSource(this.includeDndSource);
        this.cellComp.setIncludeRowDrag(this.includeRowDrag);
      };
      CellCtrl2.prototype.isForceWrapper = function() {
        var forceWrapper = this.beans.gridOptionsService.is("enableCellTextSelection") || this.column.isAutoHeight();
        return forceWrapper;
      };
      CellCtrl2.prototype.isIncludeControl = function(value) {
        var rowNodePinned = this.rowNode.rowPinned != null;
        var isFunc = typeof value === "function";
        var res = rowNodePinned ? false : isFunc || value === true;
        return res;
      };
      CellCtrl2.prototype.refreshShouldDestroy = function() {
        var colDef = this.column.getColDef();
        var selectionChanged = this.includeSelection != this.isIncludeControl(colDef.checkboxSelection);
        var rowDragChanged = this.includeRowDrag != this.isIncludeControl(colDef.rowDrag);
        var dndSourceChanged = this.includeDndSource != this.isIncludeControl(colDef.dndSource);
        return selectionChanged || rowDragChanged || dndSourceChanged;
      };
      CellCtrl2.prototype.startEditing = function(key, cellStartedEdit, event) {
        var _this = this;
        if (key === void 0) {
          key = null;
        }
        if (cellStartedEdit === void 0) {
          cellStartedEdit = false;
        }
        if (event === void 0) {
          event = null;
        }
        if (!this.isCellEditable() || this.editing) {
          return;
        }
        if (!this.cellComp) {
          this.onCellCompAttachedFuncs.push(function() {
            _this.startEditing(key, cellStartedEdit, event);
          });
          return;
        }
        var editorParams = this.createCellEditorParams(key, cellStartedEdit);
        var colDef = this.column.getColDef();
        var compDetails = this.beans.userComponentFactory.getCellEditorDetails(colDef, editorParams);
        var popup = (compDetails === null || compDetails === void 0 ? void 0 : compDetails.popupFromSelector) != null ? compDetails.popupFromSelector : !!colDef.cellEditorPopup;
        var position = (compDetails === null || compDetails === void 0 ? void 0 : compDetails.popupPositionFromSelector) != null ? compDetails.popupPositionFromSelector : colDef.cellEditorPopupPosition;
        this.setEditing(true);
        this.cellComp.setEditDetails(compDetails, popup, position);
        var e = this.createEvent(event, Events.EVENT_CELL_EDITING_STARTED);
        this.beans.eventService.dispatchEvent(e);
      };
      CellCtrl2.prototype.setEditing = function(editing) {
        if (this.editing === editing) {
          return;
        }
        this.editing = editing;
        this.refreshHandle();
      };
      CellCtrl2.prototype.stopRowOrCellEdit = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        if (this.beans.gridOptionsService.get("editType") === "fullRow") {
          this.rowCtrl.stopRowEditing(cancel);
        } else {
          this.stopEditing(cancel);
        }
      };
      CellCtrl2.prototype.onPopupEditorClosed = function() {
        if (!this.isEditing()) {
          return;
        }
        this.stopEditingAndFocus();
      };
      CellCtrl2.prototype.takeValueFromCellEditor = function(cancel) {
        var noValueResult = { newValueExists: false };
        if (cancel) {
          return noValueResult;
        }
        var cellEditor = this.cellComp.getCellEditor();
        if (!cellEditor) {
          return noValueResult;
        }
        var userWantsToCancel = cellEditor.isCancelAfterEnd && cellEditor.isCancelAfterEnd();
        if (userWantsToCancel) {
          return noValueResult;
        }
        var newValue = cellEditor.getValue();
        return {
          newValue,
          newValueExists: true
        };
      };
      CellCtrl2.prototype.saveNewValue = function(oldValue, newValue) {
        if (newValue === oldValue) {
          return false;
        }
        this.suppressRefreshCell = true;
        var valueChanged = this.rowNode.setDataValue(this.column, newValue, "edit");
        this.suppressRefreshCell = false;
        return valueChanged;
      };
      CellCtrl2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        if (!this.editing) {
          return false;
        }
        var _a = this.takeValueFromCellEditor(cancel), newValue = _a.newValue, newValueExists = _a.newValueExists;
        var oldValue = this.rowNode.getValueFromValueService(this.column);
        var valueChanged = false;
        if (newValueExists) {
          valueChanged = this.saveNewValue(oldValue, newValue);
        }
        this.setEditing(false);
        this.cellComp.setEditDetails();
        this.updateAndFormatValue();
        this.refreshCell({ forceRefresh: true, suppressFlash: true });
        this.dispatchEditingStoppedEvent(oldValue, newValue, !cancel && !!valueChanged);
        return valueChanged;
      };
      CellCtrl2.prototype.dispatchEditingStoppedEvent = function(oldValue, newValue, valueChanged) {
        var editingStoppedEvent = __assign$a(__assign$a({}, this.createEvent(null, Events.EVENT_CELL_EDITING_STOPPED)), { oldValue, newValue, valueChanged });
        this.beans.eventService.dispatchEvent(editingStoppedEvent);
      };
      CellCtrl2.prototype.createCellEditorParams = function(key, cellStartedEdit) {
        return {
          value: this.rowNode.getValueFromValueService(this.column),
          eventKey: key,
          column: this.column,
          colDef: this.column.getColDef(),
          rowIndex: this.getCellPosition().rowIndex,
          node: this.rowNode,
          data: this.rowNode.data,
          api: this.beans.gridOptionsService.api,
          cellStartedEdit,
          columnApi: this.beans.gridOptionsService.columnApi,
          context: this.beans.gridOptionsService.context,
          onKeyDown: this.onKeyDown.bind(this),
          stopEditing: this.stopEditingAndFocus.bind(this),
          eGridCell: this.getGui(),
          parseValue: this.parseValue.bind(this),
          formatValue: this.formatValue.bind(this)
        };
      };
      CellCtrl2.prototype.createCellRendererParams = function() {
        var _this = this;
        var res = {
          value: this.value,
          valueFormatted: this.valueFormatted,
          getValue: function() {
            return _this.rowNode.getValueFromValueService(_this.column);
          },
          setValue: function(value) {
            return _this.beans.valueService.setValue(_this.rowNode, _this.column, value);
          },
          formatValue: this.formatValue.bind(this),
          data: this.rowNode.data,
          node: this.rowNode,
          pinned: this.column.getPinned(),
          colDef: this.column.getColDef(),
          column: this.column,
          rowIndex: this.getCellPosition().rowIndex,
          api: this.beans.gridOptionsService.api,
          columnApi: this.beans.gridOptionsService.columnApi,
          context: this.beans.gridOptionsService.context,
          refreshCell: this.refreshCell.bind(this),
          eGridCell: this.getGui(),
          eParentOfValue: this.cellComp.getParentOfValue(),
          registerRowDragger: function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
            return _this.registerRowDragger(rowDraggerElement, dragStartPixels, suppressVisibilityChange);
          }
        };
        return res;
      };
      CellCtrl2.prototype.parseValue = function(newValue) {
        return this.beans.valueParserService.parseValue(this.column, this.rowNode, newValue, this.getValue());
      };
      CellCtrl2.prototype.setFocusOutOnEditor = function() {
        if (!this.editing) {
          return;
        }
        var cellEditor = this.cellComp.getCellEditor();
        if (cellEditor && cellEditor.focusOut) {
          cellEditor.focusOut();
        }
      };
      CellCtrl2.prototype.setFocusInOnEditor = function() {
        if (!this.editing) {
          return;
        }
        var cellEditor = this.cellComp.getCellEditor();
        if (cellEditor && cellEditor.focusIn) {
          cellEditor.focusIn();
        } else {
          this.focusCell(true);
        }
      };
      CellCtrl2.prototype.onCellChanged = function(event) {
        if (!this.cellComp) {
          return;
        }
        var eventImpactsThisCell = event.column === this.column;
        if (eventImpactsThisCell) {
          this.refreshCell({});
        }
      };
      CellCtrl2.prototype.refreshCell = function(params) {
        var _a, _b, _c;
        if (this.suppressRefreshCell || this.editing) {
          return;
        }
        if (!this.cellComp) {
          return;
        }
        var colDef = this.column.getColDef();
        var newData = params != null && !!params.newData;
        var suppressFlash = params != null && !!params.suppressFlash || !!colDef.suppressCellFlash;
        var noValueProvided = colDef.field == null && colDef.valueGetter == null && colDef.showRowGroup == null;
        var forceRefresh = params && params.forceRefresh || noValueProvided || newData;
        var valuesDifferent = this.updateAndFormatValue();
        var dataNeedsUpdating = forceRefresh || valuesDifferent;
        if (dataNeedsUpdating) {
          this.showValue(newData);
          var processingFilterChange = this.beans.filterManager.isSuppressFlashingCellsBecauseFiltering();
          var flashCell = !suppressFlash && !processingFilterChange && (this.beans.gridOptionsService.is("enableCellChangeFlash") || colDef.enableCellChangeFlash);
          if (flashCell) {
            this.flashCell();
          }
          (_a = this.cellCustomStyleFeature) === null || _a === void 0 ? void 0 : _a.applyUserStyles();
          (_b = this.cellCustomStyleFeature) === null || _b === void 0 ? void 0 : _b.applyClassesFromColDef();
        }
        this.refreshToolTip();
        (_c = this.cellCustomStyleFeature) === null || _c === void 0 ? void 0 : _c.applyCellClassRules();
      };
      CellCtrl2.prototype.stopEditingAndFocus = function(suppressNavigateAfterEdit, shiftKey) {
        if (suppressNavigateAfterEdit === void 0) {
          suppressNavigateAfterEdit = false;
        }
        if (shiftKey === void 0) {
          shiftKey = false;
        }
        this.stopRowOrCellEdit();
        this.focusCell(true);
        if (!suppressNavigateAfterEdit) {
          this.navigateAfterEdit(shiftKey);
        }
      };
      CellCtrl2.prototype.navigateAfterEdit = function(shiftKey) {
        var enterNavigatesVerticallyAfterEdit = this.beans.gridOptionsService.is("enterNavigatesVerticallyAfterEdit");
        if (enterNavigatesVerticallyAfterEdit) {
          var key = shiftKey ? KeyCode.UP : KeyCode.DOWN;
          this.beans.navigationService.navigateToNextCell(null, key, this.getCellPosition(), false);
        }
      };
      CellCtrl2.prototype.flashCell = function(delays) {
        var flashDelay = delays && delays.flashDelay;
        var fadeDelay = delays && delays.fadeDelay;
        this.animateCell("data-changed", flashDelay, fadeDelay);
      };
      CellCtrl2.prototype.animateCell = function(cssName, flashDelay, fadeDelay) {
        var _this = this;
        var _a, _b;
        if (!this.cellComp) {
          return;
        }
        var fullName = "ag-cell-" + cssName;
        var animationFullName = "ag-cell-" + cssName + "-animation";
        var gridOptionsService = this.beans.gridOptionsService;
        if (!flashDelay) {
          flashDelay = (_a = gridOptionsService.getNum("cellFlashDelay")) !== null && _a !== void 0 ? _a : 500;
        }
        if (!exists(fadeDelay)) {
          fadeDelay = (_b = gridOptionsService.getNum("cellFadeDelay")) !== null && _b !== void 0 ? _b : 1e3;
        }
        this.cellComp.addOrRemoveCssClass(fullName, true);
        this.cellComp.addOrRemoveCssClass(animationFullName, false);
        window.setTimeout(function() {
          if (!_this.isAlive()) {
            return;
          }
          _this.cellComp.addOrRemoveCssClass(fullName, false);
          _this.cellComp.addOrRemoveCssClass(animationFullName, true);
          _this.eGui.style.transition = "background-color " + fadeDelay + "ms";
          window.setTimeout(function() {
            if (!_this.isAlive()) {
              return;
            }
            _this.cellComp.addOrRemoveCssClass(animationFullName, false);
            _this.eGui.style.transition = "";
          }, fadeDelay);
        }, flashDelay);
      };
      CellCtrl2.prototype.onFlashCells = function(event) {
        if (!this.cellComp) {
          return;
        }
        var cellId = this.beans.cellPositionUtils.createId(this.getCellPosition());
        var shouldFlash = event.cells[cellId];
        if (shouldFlash) {
          this.animateCell("highlight");
        }
      };
      CellCtrl2.prototype.isCellEditable = function() {
        return this.column.isCellEditable(this.rowNode);
      };
      CellCtrl2.prototype.isSuppressFillHandle = function() {
        return this.column.isSuppressFillHandle();
      };
      CellCtrl2.prototype.formatValue = function(value) {
        var _a;
        return (_a = this.callValueFormatter(value)) !== null && _a !== void 0 ? _a : value;
      };
      CellCtrl2.prototype.callValueFormatter = function(value) {
        return this.beans.valueFormatterService.formatValue(this.column, this.rowNode, value);
      };
      CellCtrl2.prototype.updateAndFormatValue = function(force) {
        if (force === void 0) {
          force = false;
        }
        var oldValue = this.value;
        var oldValueFormatted = this.valueFormatted;
        this.value = this.rowNode.getValueFromValueService(this.column);
        this.valueFormatted = this.callValueFormatter(this.value);
        var valuesDifferent = force ? true : !this.valuesAreEqual(oldValue, this.value) || this.valueFormatted != oldValueFormatted;
        return valuesDifferent;
      };
      CellCtrl2.prototype.valuesAreEqual = function(val1, val2) {
        var colDef = this.column.getColDef();
        return colDef.equals ? colDef.equals(val1, val2) : val1 === val2;
      };
      CellCtrl2.prototype.getComp = function() {
        return this.cellComp;
      };
      CellCtrl2.prototype.getValue = function() {
        return this.value;
      };
      CellCtrl2.prototype.getValueFormatted = function() {
        return this.valueFormatted;
      };
      CellCtrl2.prototype.addDomData = function() {
        var _this = this;
        var element = this.getGui();
        this.beans.gridOptionsService.setDomData(element, CellCtrl2.DOM_DATA_KEY_CELL_CTRL, this);
        this.addDestroyFunc(function() {
          return _this.beans.gridOptionsService.setDomData(element, CellCtrl2.DOM_DATA_KEY_CELL_CTRL, null);
        });
      };
      CellCtrl2.prototype.createEvent = function(domEvent, eventType) {
        var event = {
          type: eventType,
          node: this.rowNode,
          data: this.rowNode.data,
          value: this.value,
          column: this.column,
          colDef: this.column.getColDef(),
          context: this.beans.gridOptionsService.context,
          api: this.beans.gridApi,
          columnApi: this.beans.columnApi,
          rowPinned: this.rowNode.rowPinned,
          event: domEvent,
          rowIndex: this.rowNode.rowIndex
        };
        return event;
      };
      CellCtrl2.prototype.processCharacter = function(event) {
        var _a;
        (_a = this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.processCharacter(event);
      };
      CellCtrl2.prototype.onKeyDown = function(event) {
        var _a;
        (_a = this.cellKeyboardListenerFeature) === null || _a === void 0 ? void 0 : _a.onKeyDown(event);
      };
      CellCtrl2.prototype.onMouseEvent = function(eventName, mouseEvent) {
        var _a;
        (_a = this.cellMouseListenerFeature) === null || _a === void 0 ? void 0 : _a.onMouseEvent(eventName, mouseEvent);
      };
      CellCtrl2.prototype.getGui = function() {
        return this.eGui;
      };
      CellCtrl2.prototype.refreshToolTip = function() {
        var _a;
        (_a = this.tooltipFeature) === null || _a === void 0 ? void 0 : _a.refreshToolTip();
      };
      CellCtrl2.prototype.getColSpanningList = function() {
        return this.cellPositionFeature.getColSpanningList();
      };
      CellCtrl2.prototype.onLeftChanged = function() {
        var _a;
        if (!this.cellComp) {
          return;
        }
        (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.onLeftChanged();
      };
      CellCtrl2.prototype.onDisplayedColumnsChanged = function() {
        if (!this.eGui) {
          return;
        }
        this.setAriaColIndex();
      };
      CellCtrl2.prototype.setAriaColIndex = function() {
        var colIdx = this.beans.columnModel.getAriaColumnIndex(this.column);
        setAriaColIndex(this.getGui(), colIdx);
      };
      CellCtrl2.prototype.isSuppressNavigable = function() {
        return this.column.isSuppressNavigable(this.rowNode);
      };
      CellCtrl2.prototype.onWidthChanged = function() {
        var _a;
        return (_a = this.cellPositionFeature) === null || _a === void 0 ? void 0 : _a.onWidthChanged();
      };
      CellCtrl2.prototype.getColumn = function() {
        return this.column;
      };
      CellCtrl2.prototype.getRowNode = function() {
        return this.rowNode;
      };
      CellCtrl2.prototype.getBeans = function() {
        return this.beans;
      };
      CellCtrl2.prototype.isPrintLayout = function() {
        return this.printLayout;
      };
      CellCtrl2.prototype.appendChild = function(htmlElement) {
        this.eGui.appendChild(htmlElement);
      };
      CellCtrl2.prototype.refreshHandle = function() {
        if (this.cellRangeFeature) {
          this.cellRangeFeature.refreshHandle();
        }
      };
      CellCtrl2.prototype.getCellPosition = function() {
        return this.cellPosition;
      };
      CellCtrl2.prototype.isEditing = function() {
        return this.editing;
      };
      CellCtrl2.prototype.startRowOrCellEdit = function(key, event) {
        if (event === void 0) {
          event = null;
        }
        if (!this.cellComp) {
          return;
        }
        if (this.beans.gridOptionsService.get("editType") === "fullRow") {
          this.rowCtrl.startRowEditing(key, this);
        } else {
          this.startEditing(key, true, event);
        }
      };
      CellCtrl2.prototype.getRowCtrl = function() {
        return this.rowCtrl;
      };
      CellCtrl2.prototype.getRowPosition = function() {
        return {
          rowIndex: this.cellPosition.rowIndex,
          rowPinned: this.cellPosition.rowPinned
        };
      };
      CellCtrl2.prototype.updateRangeBordersIfRangeCount = function() {
        if (!this.cellComp) {
          return;
        }
        if (this.cellRangeFeature) {
          this.cellRangeFeature.updateRangeBordersIfRangeCount();
        }
      };
      CellCtrl2.prototype.onRangeSelectionChanged = function() {
        if (!this.cellComp) {
          return;
        }
        if (this.cellRangeFeature) {
          this.cellRangeFeature.onRangeSelectionChanged();
        }
      };
      CellCtrl2.prototype.isRangeSelectionEnabled = function() {
        return this.cellRangeFeature != null;
      };
      CellCtrl2.prototype.focusCell = function(forceBrowserFocus) {
        if (forceBrowserFocus === void 0) {
          forceBrowserFocus = false;
        }
        this.beans.focusService.setFocusedCell({
          rowIndex: this.getCellPosition().rowIndex,
          column: this.column,
          rowPinned: this.rowNode.rowPinned,
          forceBrowserFocus
        });
      };
      CellCtrl2.prototype.onRowIndexChanged = function() {
        this.createCellPosition();
        this.onCellFocused();
        if (this.cellRangeFeature) {
          this.cellRangeFeature.onRangeSelectionChanged();
        }
      };
      CellCtrl2.prototype.onFirstRightPinnedChanged = function() {
        if (!this.cellComp) {
          return;
        }
        var firstRightPinned = this.column.isFirstRightPinned();
        this.cellComp.addOrRemoveCssClass(CSS_CELL_FIRST_RIGHT_PINNED, firstRightPinned);
      };
      CellCtrl2.prototype.onLastLeftPinnedChanged = function() {
        if (!this.cellComp) {
          return;
        }
        var lastLeftPinned = this.column.isLastLeftPinned();
        this.cellComp.addOrRemoveCssClass(CSS_CELL_LAST_LEFT_PINNED, lastLeftPinned);
      };
      CellCtrl2.prototype.onCellFocused = function(event) {
        if (this.beans.gridOptionsService.is("suppressCellFocus")) {
          return;
        }
        var cellFocused = this.beans.focusService.isCellFocused(this.cellPosition);
        if (!this.cellComp) {
          if (cellFocused && (event === null || event === void 0 ? void 0 : event.forceBrowserFocus)) {
            this.focusEventToRestore = event;
          }
          return;
        }
        this.focusEventToRestore = void 0;
        this.cellComp.addOrRemoveCssClass(CSS_CELL_FOCUS, cellFocused);
        if (cellFocused && event && event.forceBrowserFocus) {
          var focusEl = this.cellComp.getFocusableElement();
          focusEl.focus({ preventScroll: !!event.preventScrollOnBrowserFocus });
        }
        var fullRowEdit = this.beans.gridOptionsService.get("editType") === "fullRow";
        if (!cellFocused && !fullRowEdit && this.editing) {
          this.stopRowOrCellEdit();
        }
      };
      CellCtrl2.prototype.createCellPosition = function() {
        this.cellPosition = {
          rowIndex: this.rowNode.rowIndex,
          rowPinned: makeNull(this.rowNode.rowPinned),
          column: this.column
        };
      };
      CellCtrl2.prototype.applyStaticCssClasses = function() {
        this.cellComp.addOrRemoveCssClass(CSS_CELL, true);
        this.cellComp.addOrRemoveCssClass(CSS_CELL_NOT_INLINE_EDITING, true);
        var autoHeight = this.column.isAutoHeight() == true;
        this.cellComp.addOrRemoveCssClass(CSS_AUTO_HEIGHT, autoHeight);
        this.cellComp.addOrRemoveCssClass(CSS_NORMAL_HEIGHT, !autoHeight);
      };
      CellCtrl2.prototype.onColumnHover = function() {
        if (!this.cellComp) {
          return;
        }
        if (!this.beans.gridOptionsService.is("columnHoverHighlight")) {
          return;
        }
        var isHovered = this.beans.columnHoverService.isHovered(this.column);
        this.cellComp.addOrRemoveCssClass(CSS_COLUMN_HOVER, isHovered);
      };
      CellCtrl2.prototype.onColDefChanged = function() {
        if (!this.cellComp) {
          return;
        }
        this.setWrapText();
        if (!this.editing) {
          this.refreshCell({ forceRefresh: true, suppressFlash: true });
        }
      };
      CellCtrl2.prototype.setWrapText = function() {
        var value = this.column.getColDef().wrapText == true;
        this.cellComp.addOrRemoveCssClass(CSS_CELL_WRAP_TEXT, value);
      };
      CellCtrl2.prototype.dispatchCellContextMenuEvent = function(event) {
        var colDef = this.column.getColDef();
        var cellContextMenuEvent = this.createEvent(event, Events.EVENT_CELL_CONTEXT_MENU);
        this.beans.eventService.dispatchEvent(cellContextMenuEvent);
        if (colDef.onCellContextMenu) {
          window.setTimeout(function() {
            return colDef.onCellContextMenu(cellContextMenuEvent);
          }, 0);
        }
      };
      CellCtrl2.prototype.getCellRenderer = function() {
        return this.cellComp ? this.cellComp.getCellRenderer() : null;
      };
      CellCtrl2.prototype.getCellEditor = function() {
        return this.cellComp ? this.cellComp.getCellEditor() : null;
      };
      CellCtrl2.prototype.destroy = function() {
        this.onCellCompAttachedFuncs = [];
        _super.prototype.destroy.call(this);
      };
      CellCtrl2.prototype.createSelectionCheckbox = function() {
        var cbSelectionComponent = new CheckboxSelectionComponent();
        this.beans.context.createBean(cbSelectionComponent);
        cbSelectionComponent.init({ rowNode: this.rowNode, column: this.column });
        return cbSelectionComponent;
      };
      CellCtrl2.prototype.createDndSource = function() {
        var dndSourceComp = new DndSourceComp(this.rowNode, this.column, this.eGui);
        this.beans.context.createBean(dndSourceComp);
        return dndSourceComp;
      };
      CellCtrl2.prototype.registerRowDragger = function(customElement, dragStartPixels, suppressVisibilityChange) {
        var _this = this;
        if (this.customRowDragComp) {
          this.customRowDragComp.setDragElement(customElement, dragStartPixels);
          return;
        }
        var newComp = this.createRowDragComp(customElement, dragStartPixels, suppressVisibilityChange);
        if (newComp) {
          this.customRowDragComp = newComp;
          this.addDestroyFunc(function() {
            _this.beans.context.destroyBean(newComp);
            _this.customRowDragComp = null;
          });
        }
      };
      CellCtrl2.prototype.createRowDragComp = function(customElement, dragStartPixels, suppressVisibilityChange) {
        var _this = this;
        var pagination = this.beans.gridOptionsService.is("pagination");
        var rowDragManaged = this.beans.gridOptionsService.is("rowDragManaged");
        var clientSideRowModelActive = this.beans.gridOptionsService.isRowModelType("clientSide");
        if (rowDragManaged) {
          if (!clientSideRowModelActive) {
            doOnce(function() {
              return console.warn("AG Grid: managed row dragging is only allowed in the Client Side Row Model");
            }, "CellComp.addRowDragging");
            return;
          }
          if (pagination) {
            doOnce(function() {
              return console.warn("AG Grid: managed row dragging is not possible when doing pagination");
            }, "CellComp.addRowDragging");
            return;
          }
        }
        var rowDragComp = new RowDragComp(function() {
          return _this.value;
        }, this.rowNode, this.column, customElement, dragStartPixels, suppressVisibilityChange);
        this.beans.context.createBean(rowDragComp);
        return rowDragComp;
      };
      CellCtrl2.DOM_DATA_KEY_CELL_CTRL = "cellCtrl";
      return CellCtrl2;
    }(BeanStub);
    __extends$1W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __values$3 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read$l = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$h = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    (function(RowType2) {
      RowType2["Normal"] = "Normal";
      RowType2["FullWidth"] = "FullWidth";
      RowType2["FullWidthLoading"] = "FullWidthLoading";
      RowType2["FullWidthGroup"] = "FullWidthGroup";
      RowType2["FullWidthDetail"] = "FullWidthDetail";
    })(RowType$1 || (RowType$1 = {}));
    instanceIdSequence$2 = 0;
    RowCtrl = /** @class */
    function(_super) {
      __extends$1W(RowCtrl2, _super);
      function RowCtrl2(rowNode, beans, animateIn, useAnimationFrameForCreate, printLayout) {
        var _this = _super.call(this) || this;
        _this.allRowGuis = [];
        _this.active = true;
        _this.centerCellCtrls = { list: [], map: {} };
        _this.leftCellCtrls = { list: [], map: {} };
        _this.rightCellCtrls = { list: [], map: {} };
        _this.slideInAnimation = {
          left: false,
          center: false,
          right: false,
          fullWidth: false
        };
        _this.fadeInAnimation = {
          left: false,
          center: false,
          right: false,
          fullWidth: false
        };
        _this.lastMouseDownOnDragger = false;
        _this.emptyStyle = {};
        _this.updateColumnListsPending = false;
        _this.rowId = null;
        _this.businessKeySanitised = null;
        _this.beans = beans;
        _this.gridOptionsService = beans.gridOptionsService;
        _this.rowNode = rowNode;
        _this.paginationPage = beans.paginationProxy.getCurrentPage();
        _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
        _this.printLayout = printLayout;
        _this.instanceId = rowNode.id + "-" + instanceIdSequence$2++;
        _this.rowId = escapeString(rowNode.id);
        _this.initRowBusinessKey();
        _this.rowFocused = beans.focusService.isRowFocused(_this.rowNode.rowIndex, _this.rowNode.rowPinned);
        _this.rowLevel = beans.rowCssClassCalculator.calculateRowLevel(_this.rowNode);
        _this.setRowType();
        _this.setAnimateFlags(animateIn);
        _this.rowStyles = _this.processStylesFromGridOptions();
        if (_this.isFullWidth() && !_this.gridOptionsService.is("suppressCellFocus")) {
          _this.tabIndex = -1;
        }
        _this.addListeners();
        return _this;
      }
      RowCtrl2.prototype.initRowBusinessKey = function() {
        this.businessKeyForNodeFunc = this.gridOptionsService.get("getBusinessKeyForNode");
        this.updateRowBusinessKey();
      };
      RowCtrl2.prototype.updateRowBusinessKey = function() {
        if (typeof this.businessKeyForNodeFunc !== "function") {
          return;
        }
        var businessKey = this.businessKeyForNodeFunc(this.rowNode);
        this.businessKeySanitised = escapeString(businessKey);
      };
      RowCtrl2.prototype.getRowId = function() {
        return this.rowId;
      };
      RowCtrl2.prototype.getRowStyles = function() {
        return this.rowStyles;
      };
      RowCtrl2.prototype.getTabIndex = function() {
        return this.tabIndex;
      };
      RowCtrl2.prototype.isSticky = function() {
        return this.rowNode.sticky;
      };
      RowCtrl2.prototype.getBeans = function() {
        return this.beans;
      };
      RowCtrl2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      RowCtrl2.prototype.setComp = function(rowComp, element, containerType) {
        var gui = { rowComp, element, containerType };
        this.allRowGuis.push(gui);
        if (containerType === RowContainerType.LEFT) {
          this.leftGui = gui;
        } else if (containerType === RowContainerType.RIGHT) {
          this.rightGui = gui;
        } else if (containerType === RowContainerType.FULL_WIDTH) {
          this.fullWidthGui = gui;
        } else {
          this.centerGui = gui;
        }
        this.initialiseRowComp(gui);
        if (this.rowType !== "FullWidthLoading" && !this.rowNode.rowPinned) {
          this.beans.rowRenderer.dispatchFirstDataRenderedEvent();
        }
      };
      RowCtrl2.prototype.unsetComp = function(containerType) {
        this.allRowGuis = this.allRowGuis.filter(function(rowGui) {
          return rowGui.containerType !== containerType;
        });
        switch (containerType) {
          case RowContainerType.LEFT:
            this.leftGui = void 0;
            break;
          case RowContainerType.RIGHT:
            this.rightGui = void 0;
            break;
          case RowContainerType.FULL_WIDTH:
            this.fullWidthGui = void 0;
            break;
          case RowContainerType.CENTER:
            this.centerGui = void 0;
            break;
        }
      };
      RowCtrl2.prototype.isCacheable = function() {
        return this.rowType === RowType$1.FullWidthDetail && this.gridOptionsService.is("keepDetailRows");
      };
      RowCtrl2.prototype.setCached = function(cached) {
        var displayValue = cached ? "none" : "";
        this.allRowGuis.forEach(function(rg) {
          return rg.element.style.display = displayValue;
        });
      };
      RowCtrl2.prototype.initialiseRowComp = function(gui) {
        var _this = this;
        var gos = this.gridOptionsService;
        this.listenOnDomOrder(gui);
        this.onRowHeightChanged(gui);
        this.updateRowIndexes(gui);
        this.setFocusedClasses(gui);
        this.setStylesFromGridOptions(false, gui);
        if (gos.isRowSelection() && this.rowNode.selectable) {
          this.onRowSelected(gui);
        }
        this.updateColumnLists(!this.useAnimationFrameForCreate);
        var comp = gui.rowComp;
        var initialRowClasses = this.getInitialRowClasses(gui.containerType);
        initialRowClasses.forEach(function(name) {
          return comp.addOrRemoveCssClass(name, true);
        });
        this.executeSlideAndFadeAnimations(gui);
        if (this.rowNode.group) {
          setAriaExpanded(gui.element, this.rowNode.expanded == true);
        }
        this.setRowCompRowId(comp);
        this.setRowCompRowBusinessKey(comp);
        gos.setDomData(gui.element, RowCtrl2.DOM_DATA_KEY_ROW_CTRL, this);
        this.addDestroyFunc(function() {
          return gos.setDomData(gui.element, RowCtrl2.DOM_DATA_KEY_ROW_CTRL, null);
        });
        if (this.useAnimationFrameForCreate) {
          this.beans.animationFrameService.createTask(this.addHoverFunctionality.bind(this, gui.element), this.rowNode.rowIndex, "createTasksP2");
        } else {
          this.addHoverFunctionality(gui.element);
        }
        if (this.isFullWidth()) {
          this.setupFullWidth(gui);
        }
        if (gos.is("rowDragEntireRow")) {
          this.addRowDraggerToRow(gui);
        }
        if (this.useAnimationFrameForCreate) {
          this.beans.animationFrameService.addDestroyTask(function() {
            if (!_this.isAlive()) {
              return;
            }
            gui.rowComp.addOrRemoveCssClass("ag-after-created", true);
          });
        }
        this.executeProcessRowPostCreateFunc();
      };
      RowCtrl2.prototype.setRowCompRowBusinessKey = function(comp) {
        if (this.businessKeySanitised == null) {
          return;
        }
        comp.setRowBusinessKey(this.businessKeySanitised);
      };
      RowCtrl2.prototype.getBusinessKey = function() {
        return this.businessKeySanitised;
      };
      RowCtrl2.prototype.setRowCompRowId = function(comp) {
        this.rowId = escapeString(this.rowNode.id);
        if (this.rowId == null) {
          return;
        }
        comp.setRowId(this.rowId);
      };
      RowCtrl2.prototype.executeSlideAndFadeAnimations = function(gui) {
        var _this = this;
        var containerType = gui.containerType;
        var shouldSlide = this.slideInAnimation[containerType];
        if (shouldSlide) {
          executeNextVMTurn(function() {
            _this.onTopChanged();
          });
          this.slideInAnimation[containerType] = false;
        }
        var shouldFade = this.fadeInAnimation[containerType];
        if (shouldFade) {
          executeNextVMTurn(function() {
            gui.rowComp.addOrRemoveCssClass("ag-opacity-zero", false);
          });
          this.fadeInAnimation[containerType] = false;
        }
      };
      RowCtrl2.prototype.addRowDraggerToRow = function(gui) {
        if (this.gridOptionsService.is("enableRangeSelection")) {
          doOnce(function() {
            console.warn("AG Grid: Setting `rowDragEntireRow: true` in the gridOptions doesn't work with `enableRangeSelection: true`");
          }, "rowDragAndRangeSelectionEnabled");
          return;
        }
        var translate = this.beans.localeService.getLocaleTextFunc();
        var rowDragComp = new RowDragComp(function() {
          return "1 " + translate("rowDragRow", "row");
        }, this.rowNode, void 0, gui.element, void 0, true);
        this.createManagedBean(rowDragComp, this.beans.context);
      };
      RowCtrl2.prototype.setupFullWidth = function(gui) {
        var pinned = this.getPinnedForContainer(gui.containerType);
        var params = this.createFullWidthParams(gui.element, pinned);
        if (this.rowType == RowType$1.FullWidthDetail) {
          if (!ModuleRegistry.__assertRegistered(ModuleNames.MasterDetailModule, "cell renderer 'agDetailCellRenderer' (for master detail)", this.beans.context.getGridId())) {
            return;
          }
        }
        var compDetails;
        switch (this.rowType) {
          case RowType$1.FullWidthDetail:
            compDetails = this.beans.userComponentFactory.getFullWidthDetailCellRendererDetails(params);
            break;
          case RowType$1.FullWidthGroup:
            compDetails = this.beans.userComponentFactory.getFullWidthGroupCellRendererDetails(params);
            break;
          case RowType$1.FullWidthLoading:
            compDetails = this.beans.userComponentFactory.getFullWidthLoadingCellRendererDetails(params);
            break;
          default:
            compDetails = this.beans.userComponentFactory.getFullWidthCellRendererDetails(params);
            break;
        }
        gui.rowComp.showFullWidth(compDetails);
      };
      RowCtrl2.prototype.isPrintLayout = function() {
        return this.printLayout;
      };
      RowCtrl2.prototype.getFullWidthCellRenderer = function() {
        var _a, _b;
        return (_b = (_a = this.fullWidthGui) === null || _a === void 0 ? void 0 : _a.rowComp) === null || _b === void 0 ? void 0 : _b.getFullWidthCellRenderer();
      };
      RowCtrl2.prototype.getCellElement = function(column) {
        var cellCtrl = this.getCellCtrl(column);
        return cellCtrl ? cellCtrl.getGui() : null;
      };
      RowCtrl2.prototype.executeProcessRowPostCreateFunc = function() {
        var func = this.gridOptionsService.getCallback("processRowPostCreate");
        if (!func || !this.areAllContainersReady()) {
          return;
        }
        var params = {
          // areAllContainersReady asserts that centerGui is not null
          eRow: this.centerGui.element,
          ePinnedLeftRow: this.leftGui ? this.leftGui.element : void 0,
          ePinnedRightRow: this.rightGui ? this.rightGui.element : void 0,
          node: this.rowNode,
          rowIndex: this.rowNode.rowIndex,
          addRenderedRowListener: this.addEventListener.bind(this)
        };
        func(params);
      };
      RowCtrl2.prototype.areAllContainersReady = function() {
        var isLeftReady = !!this.leftGui || !this.beans.columnModel.isPinningLeft();
        var isCenterReady = !!this.centerGui;
        var isRightReady = !!this.rightGui || !this.beans.columnModel.isPinningRight();
        return isLeftReady && isCenterReady && isRightReady;
      };
      RowCtrl2.prototype.setRowType = function() {
        var isStub = this.rowNode.stub;
        var isFullWidthCell = this.rowNode.isFullWidthCell();
        var isDetailCell = this.beans.doingMasterDetail && this.rowNode.detail;
        var pivotMode = this.beans.columnModel.isPivotMode();
        var isGroupRow = !!this.rowNode.group && !this.rowNode.footer;
        var isFullWidthGroup = isGroupRow && this.gridOptionsService.isGroupUseEntireRow(pivotMode);
        if (isStub) {
          this.rowType = RowType$1.FullWidthLoading;
        } else if (isDetailCell) {
          this.rowType = RowType$1.FullWidthDetail;
        } else if (isFullWidthCell) {
          this.rowType = RowType$1.FullWidth;
        } else if (isFullWidthGroup) {
          this.rowType = RowType$1.FullWidthGroup;
        } else {
          this.rowType = RowType$1.Normal;
        }
      };
      RowCtrl2.prototype.updateColumnLists = function(suppressAnimationFrame, useFlushSync) {
        var _this = this;
        if (suppressAnimationFrame === void 0) {
          suppressAnimationFrame = false;
        }
        if (useFlushSync === void 0) {
          useFlushSync = false;
        }
        if (this.isFullWidth()) {
          return;
        }
        var noAnimation = suppressAnimationFrame || this.gridOptionsService.is("suppressAnimationFrame") || this.printLayout;
        if (noAnimation) {
          this.updateColumnListsImpl(useFlushSync);
          return;
        }
        if (this.updateColumnListsPending) {
          return;
        }
        this.beans.animationFrameService.createTask(function() {
          if (!_this.active) {
            return;
          }
          _this.updateColumnListsImpl(true);
        }, this.rowNode.rowIndex, "createTasksP1");
        this.updateColumnListsPending = true;
      };
      RowCtrl2.prototype.createCellCtrls = function(prev, cols, pinned) {
        var _this = this;
        if (pinned === void 0) {
          pinned = null;
        }
        var res = {
          list: [],
          map: {}
        };
        var addCell = function(colInstanceId, cellCtrl) {
          res.list.push(cellCtrl);
          res.map[colInstanceId] = cellCtrl;
        };
        cols.forEach(function(col) {
          var colInstanceId = col.getInstanceId();
          var cellCtrl = prev.map[colInstanceId];
          if (!cellCtrl) {
            cellCtrl = new CellCtrl(col, _this.rowNode, _this.beans, _this);
          }
          addCell(colInstanceId, cellCtrl);
        });
        prev.list.forEach(function(prevCellCtrl) {
          var cellInResult = res.map[prevCellCtrl.getColumn().getInstanceId()] != null;
          if (cellInResult) {
            return;
          }
          var keepCell = !_this.isCellEligibleToBeRemoved(prevCellCtrl, pinned);
          if (keepCell) {
            addCell(prevCellCtrl.getColumn().getInstanceId(), prevCellCtrl);
            return;
          }
          prevCellCtrl.destroy();
        });
        return res;
      };
      RowCtrl2.prototype.updateColumnListsImpl = function(useFlushSync) {
        this.updateColumnListsPending = false;
        this.createAllCellCtrls();
        this.setCellCtrls(useFlushSync);
      };
      RowCtrl2.prototype.setCellCtrls = function(useFlushSync) {
        var _this = this;
        this.allRowGuis.forEach(function(item) {
          var cellControls = _this.getCellCtrlsForContainer(item.containerType);
          item.rowComp.setCellCtrls(cellControls, useFlushSync);
        });
      };
      RowCtrl2.prototype.getCellCtrlsForContainer = function(containerType) {
        switch (containerType) {
          case RowContainerType.LEFT:
            return this.leftCellCtrls.list;
          case RowContainerType.RIGHT:
            return this.rightCellCtrls.list;
          case RowContainerType.FULL_WIDTH:
            return [];
          case RowContainerType.CENTER:
            return this.centerCellCtrls.list;
          default:
            var exhaustiveCheck = containerType;
            throw new Error("Unhandled case: " + exhaustiveCheck);
        }
      };
      RowCtrl2.prototype.createAllCellCtrls = function() {
        var columnModel = this.beans.columnModel;
        if (this.printLayout) {
          this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, columnModel.getAllDisplayedColumns());
          this.leftCellCtrls = { list: [], map: {} };
          this.rightCellCtrls = { list: [], map: {} };
        } else {
          var centerCols = columnModel.getViewportCenterColumnsForRow(this.rowNode);
          this.centerCellCtrls = this.createCellCtrls(this.centerCellCtrls, centerCols);
          var leftCols = columnModel.getDisplayedLeftColumnsForRow(this.rowNode);
          this.leftCellCtrls = this.createCellCtrls(this.leftCellCtrls, leftCols, "left");
          var rightCols = columnModel.getDisplayedRightColumnsForRow(this.rowNode);
          this.rightCellCtrls = this.createCellCtrls(this.rightCellCtrls, rightCols, "right");
        }
      };
      RowCtrl2.prototype.isCellEligibleToBeRemoved = function(cellCtrl, nextContainerPinned) {
        var REMOVE_CELL = true;
        var KEEP_CELL = false;
        var column = cellCtrl.getColumn();
        if (column.getPinned() != nextContainerPinned) {
          return REMOVE_CELL;
        }
        var editing = cellCtrl.isEditing();
        var focused = this.beans.focusService.isCellFocused(cellCtrl.getCellPosition());
        var mightWantToKeepCell = editing || focused;
        if (mightWantToKeepCell) {
          var column_1 = cellCtrl.getColumn();
          var displayedColumns = this.beans.columnModel.getAllDisplayedColumns();
          var cellStillDisplayed = displayedColumns.indexOf(column_1) >= 0;
          return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
        }
        return REMOVE_CELL;
      };
      RowCtrl2.prototype.getDomOrder = function() {
        var isEnsureDomOrder = this.gridOptionsService.is("ensureDomOrder");
        return isEnsureDomOrder || this.gridOptionsService.isDomLayout("print");
      };
      RowCtrl2.prototype.listenOnDomOrder = function(gui) {
        var _this = this;
        var listener = function() {
          gui.rowComp.setDomOrder(_this.getDomOrder());
        };
        this.addManagedPropertyListener("domLayout", listener);
        this.addManagedPropertyListener("ensureDomOrder", listener);
      };
      RowCtrl2.prototype.setAnimateFlags = function(animateIn) {
        if (this.isSticky() || !animateIn) {
          return;
        }
        var oldRowTopExists = exists(this.rowNode.oldRowTop);
        var pinningLeft = this.beans.columnModel.isPinningLeft();
        var pinningRight = this.beans.columnModel.isPinningRight();
        if (oldRowTopExists) {
          if (this.isFullWidth() && !this.gridOptionsService.is("embedFullWidthRows")) {
            this.slideInAnimation.fullWidth = true;
            return;
          }
          this.slideInAnimation.center = true;
          this.slideInAnimation.left = pinningLeft;
          this.slideInAnimation.right = pinningRight;
        } else {
          if (this.isFullWidth() && !this.gridOptionsService.is("embedFullWidthRows")) {
            this.fadeInAnimation.fullWidth = true;
            return;
          }
          this.fadeInAnimation.center = true;
          this.fadeInAnimation.left = pinningLeft;
          this.fadeInAnimation.right = pinningRight;
        }
      };
      RowCtrl2.prototype.isEditing = function() {
        return this.editingRow;
      };
      RowCtrl2.prototype.stopRowEditing = function(cancel) {
        this.stopEditing(cancel);
      };
      RowCtrl2.prototype.isFullWidth = function() {
        return this.rowType !== RowType$1.Normal;
      };
      RowCtrl2.prototype.getRowType = function() {
        return this.rowType;
      };
      RowCtrl2.prototype.refreshFullWidth = function() {
        var _this = this;
        var tryRefresh = function(gui, pinned) {
          if (!gui) {
            return true;
          }
          var cellRenderer = gui.rowComp.getFullWidthCellRenderer();
          if (!cellRenderer) {
            return false;
          }
          if (!cellRenderer.refresh) {
            return false;
          }
          var params = _this.createFullWidthParams(gui.element, pinned);
          var refreshSucceeded = cellRenderer.refresh(params);
          return refreshSucceeded;
        };
        var fullWidthSuccess = tryRefresh(this.fullWidthGui, null);
        var centerSuccess = tryRefresh(this.centerGui, null);
        var leftSuccess = tryRefresh(this.leftGui, "left");
        var rightSuccess = tryRefresh(this.rightGui, "right");
        var allFullWidthRowsRefreshed = fullWidthSuccess && centerSuccess && leftSuccess && rightSuccess;
        return allFullWidthRowsRefreshed;
      };
      RowCtrl2.prototype.addListeners = function() {
        var _this = this;
        this.addManagedListener(this.rowNode, RowNode.EVENT_HEIGHT_CHANGED, function() {
          return _this.onRowHeightChanged();
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_SELECTED, function() {
          return _this.onRowSelected();
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_EXPANDED_CHANGED, this.updateExpandedCss.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_HAS_CHILDREN_CHANGED, this.updateExpandedCss.bind(this));
        if (this.rowNode.detail) {
          this.addManagedListener(this.rowNode.parent, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
        }
        this.addManagedListener(this.rowNode, RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, this.onRowNodeCellChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_HIGHLIGHT_CHANGED, this.onRowNodeHighlightChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_DRAGGING_CHANGED, this.onRowNodeDraggingChanged.bind(this));
        this.addManagedListener(this.rowNode, RowNode.EVENT_UI_LEVEL_CHANGED, this.onUiLevelChanged.bind(this));
        var eventService = this.beans.eventService;
        this.addManagedListener(eventService, Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED, this.onPaginationPixelOffsetChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_HEIGHT_SCALE_CHANGED, this.onTopChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUSED, this.onCellFocused.bind(this));
        this.addManagedListener(eventService, Events.EVENT_CELL_FOCUS_CLEARED, this.onCellFocusCleared.bind(this));
        this.addManagedListener(eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
        this.addManagedListener(eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
        this.addManagedListener(eventService, Events.EVENT_COLUMN_MOVED, this.onColumnMoved.bind(this));
        this.addListenersForCellComps();
      };
      RowCtrl2.prototype.onColumnMoved = function() {
        this.updateColumnLists();
      };
      RowCtrl2.prototype.addListenersForCellComps = function() {
        var _this = this;
        this.addManagedListener(this.rowNode, RowNode.EVENT_ROW_INDEX_CHANGED, function() {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onRowIndexChanged();
          });
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_CELL_CHANGED, function(event) {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onCellChanged(event);
          });
        });
      };
      RowCtrl2.prototype.onRowNodeDataChanged = function(event) {
        var _this = this;
        var fullWidthChanged = this.isFullWidth() !== !!this.rowNode.isFullWidthCell();
        if (fullWidthChanged) {
          this.beans.rowRenderer.redrawRow(this.rowNode);
          return;
        }
        if (this.isFullWidth()) {
          var refresh = this.refreshFullWidth();
          if (!refresh) {
            this.beans.rowRenderer.redrawRow(this.rowNode);
          }
          return;
        }
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          return cellCtrl.refreshCell({
            suppressFlash: !event.update,
            newData: !event.update
          });
        });
        this.allRowGuis.forEach(function(gui) {
          _this.setRowCompRowId(gui.rowComp);
          _this.updateRowBusinessKey();
          _this.setRowCompRowBusinessKey(gui.rowComp);
        });
        this.onRowSelected();
        this.postProcessCss();
      };
      RowCtrl2.prototype.onRowNodeCellChanged = function() {
        this.postProcessCss();
      };
      RowCtrl2.prototype.postProcessCss = function() {
        this.setStylesFromGridOptions(true);
        this.postProcessClassesFromGridOptions();
        this.postProcessRowClassRules();
        this.postProcessRowDragging();
      };
      RowCtrl2.prototype.onRowNodeHighlightChanged = function() {
        var highlighted = this.rowNode.highlighted;
        this.allRowGuis.forEach(function(gui) {
          var aboveOn = highlighted === RowHighlightPosition.Above;
          var belowOn = highlighted === RowHighlightPosition.Below;
          gui.rowComp.addOrRemoveCssClass("ag-row-highlight-above", aboveOn);
          gui.rowComp.addOrRemoveCssClass("ag-row-highlight-below", belowOn);
        });
      };
      RowCtrl2.prototype.onRowNodeDraggingChanged = function() {
        this.postProcessRowDragging();
      };
      RowCtrl2.prototype.postProcessRowDragging = function() {
        var dragging = this.rowNode.dragging;
        this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.addOrRemoveCssClass("ag-row-dragging", dragging);
        });
      };
      RowCtrl2.prototype.updateExpandedCss = function() {
        var expandable = this.rowNode.isExpandable();
        var expanded = this.rowNode.expanded == true;
        this.allRowGuis.forEach(function(gui) {
          gui.rowComp.addOrRemoveCssClass("ag-row-group", expandable);
          gui.rowComp.addOrRemoveCssClass("ag-row-group-expanded", expandable && expanded);
          gui.rowComp.addOrRemoveCssClass("ag-row-group-contracted", expandable && !expanded);
          setAriaExpanded(gui.element, expandable && expanded);
        });
      };
      RowCtrl2.prototype.onDisplayedColumnsChanged = function() {
        this.updateColumnLists(true);
        if (this.beans.columnModel.wasAutoRowHeightEverActive()) {
          this.rowNode.checkAutoHeights();
        }
      };
      RowCtrl2.prototype.onVirtualColumnsChanged = function() {
        this.updateColumnLists(false, true);
      };
      RowCtrl2.prototype.getRowPosition = function() {
        return {
          rowPinned: makeNull(this.rowNode.rowPinned),
          rowIndex: this.rowNode.rowIndex
        };
      };
      RowCtrl2.prototype.onKeyboardNavigate = function(keyboardEvent) {
        var currentFullWidthComp = this.allRowGuis.find(function(c) {
          return c.element.contains(keyboardEvent.target);
        });
        var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;
        var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
        if (!isFullWidthContainerFocused) {
          return;
        }
        var node = this.rowNode;
        var lastFocusedCell = this.beans.focusService.getFocusedCell();
        var cellPosition = {
          rowIndex: node.rowIndex,
          rowPinned: node.rowPinned,
          column: lastFocusedCell && lastFocusedCell.column
        };
        this.beans.navigationService.navigateToNextCell(keyboardEvent, keyboardEvent.key, cellPosition, true);
        keyboardEvent.preventDefault();
      };
      RowCtrl2.prototype.onTabKeyDown = function(keyboardEvent) {
        if (keyboardEvent.defaultPrevented || isStopPropagationForAgGrid(keyboardEvent)) {
          return;
        }
        var currentFullWidthComp = this.allRowGuis.find(function(c) {
          return c.element.contains(keyboardEvent.target);
        });
        var currentFullWidthContainer = currentFullWidthComp ? currentFullWidthComp.element : null;
        var isFullWidthContainerFocused = currentFullWidthContainer === keyboardEvent.target;
        var nextEl = null;
        if (!isFullWidthContainerFocused) {
          nextEl = this.beans.focusService.findNextFocusableElement(currentFullWidthContainer, false, keyboardEvent.shiftKey);
        }
        if (this.isFullWidth() && isFullWidthContainerFocused || !nextEl) {
          this.beans.navigationService.onTabKeyDown(this, keyboardEvent);
        }
      };
      RowCtrl2.prototype.onFullWidthRowFocused = function(event) {
        var _a;
        var node = this.rowNode;
        var isFocused = !event ? false : this.isFullWidth() && event.rowIndex === node.rowIndex && event.rowPinned == node.rowPinned;
        var element = this.fullWidthGui ? this.fullWidthGui.element : (_a = this.centerGui) === null || _a === void 0 ? void 0 : _a.element;
        if (!element) {
          return;
        }
        element.classList.toggle("ag-full-width-focus", isFocused);
        if (isFocused) {
          element.focus({ preventScroll: true });
        }
      };
      RowCtrl2.prototype.refreshCell = function(cellCtrl) {
        this.centerCellCtrls = this.removeCellCtrl(this.centerCellCtrls, cellCtrl);
        this.leftCellCtrls = this.removeCellCtrl(this.leftCellCtrls, cellCtrl);
        this.rightCellCtrls = this.removeCellCtrl(this.rightCellCtrls, cellCtrl);
        this.updateColumnLists();
      };
      RowCtrl2.prototype.removeCellCtrl = function(prev, cellCtrlToRemove) {
        var res = {
          list: [],
          map: {}
        };
        prev.list.forEach(function(cellCtrl) {
          if (cellCtrl === cellCtrlToRemove) {
            return;
          }
          res.list.push(cellCtrl);
          res.map[cellCtrl.getInstanceId()] = cellCtrl;
        });
        return res;
      };
      RowCtrl2.prototype.onMouseEvent = function(eventName, mouseEvent) {
        switch (eventName) {
          case "dblclick":
            this.onRowDblClick(mouseEvent);
            break;
          case "click":
            this.onRowClick(mouseEvent);
            break;
          case "touchstart":
          case "mousedown":
            this.onRowMouseDown(mouseEvent);
            break;
        }
      };
      RowCtrl2.prototype.createRowEvent = function(type, domEvent) {
        return {
          type,
          node: this.rowNode,
          data: this.rowNode.data,
          rowIndex: this.rowNode.rowIndex,
          rowPinned: this.rowNode.rowPinned,
          context: this.gridOptionsService.context,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          event: domEvent
        };
      };
      RowCtrl2.prototype.createRowEventWithSource = function(type, domEvent) {
        var event = this.createRowEvent(type, domEvent);
        event.source = this;
        return event;
      };
      RowCtrl2.prototype.onRowDblClick = function(mouseEvent) {
        if (isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
        this.beans.eventService.dispatchEvent(agEvent);
      };
      RowCtrl2.prototype.onRowMouseDown = function(mouseEvent) {
        this.lastMouseDownOnDragger = isElementChildOfClass(mouseEvent.target, "ag-row-drag", 3);
        if (!this.isFullWidth()) {
          return;
        }
        var node = this.rowNode;
        var columnModel = this.beans.columnModel;
        if (this.beans.rangeService) {
          this.beans.rangeService.removeAllCellRanges();
        }
        this.beans.focusService.setFocusedCell({
          rowIndex: node.rowIndex,
          column: columnModel.getAllDisplayedColumns()[0],
          rowPinned: node.rowPinned,
          forceBrowserFocus: true
        });
      };
      RowCtrl2.prototype.onRowClick = function(mouseEvent) {
        var stop = isStopPropagationForAgGrid(mouseEvent) || this.lastMouseDownOnDragger;
        if (stop) {
          return;
        }
        var agEvent = this.createRowEventWithSource(Events.EVENT_ROW_CLICKED, mouseEvent);
        this.beans.eventService.dispatchEvent(agEvent);
        var isMultiKey = mouseEvent.ctrlKey || mouseEvent.metaKey;
        var isShiftKey = mouseEvent.shiftKey;
        var groupSelectsChildren = this.gridOptionsService.is("groupSelectsChildren");
        if (
          // we do not allow selecting groups by clicking (as the click here expands the group), or if it's a detail row,
          // so return if it's a group row
          groupSelectsChildren && this.rowNode.group || // this is needed so we don't unselect other rows when we click this row, eg if this row is not selectable,
          // and we click it, the selection should not change (ie any currently selected row should stay selected)
          !this.rowNode.selectable || // we also don't allow selection of pinned rows
          this.rowNode.rowPinned || // if no selection method enabled, do nothing
          !this.gridOptionsService.isRowSelection() || // if click selection suppressed, do nothing
          this.gridOptionsService.is("suppressRowClickSelection")
        ) {
          return;
        }
        var multiSelectOnClick = this.gridOptionsService.is("rowMultiSelectWithClick");
        var rowDeselectionWithCtrl = !this.gridOptionsService.is("suppressRowDeselection");
        var source = "rowClicked";
        if (this.rowNode.isSelected()) {
          if (multiSelectOnClick) {
            this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });
          } else if (isMultiKey) {
            if (rowDeselectionWithCtrl) {
              this.rowNode.setSelectedParams({ newValue: false, event: mouseEvent, source });
            }
          } else {
            this.rowNode.setSelectedParams({ newValue: true, clearSelection: !isShiftKey, rangeSelect: isShiftKey, event: mouseEvent, source });
          }
        } else {
          var clearSelection = multiSelectOnClick ? false : !isMultiKey;
          this.rowNode.setSelectedParams({ newValue: true, clearSelection, rangeSelect: isShiftKey, event: mouseEvent, source });
        }
      };
      RowCtrl2.prototype.setupDetailRowAutoHeight = function(eDetailGui) {
        var _this = this;
        if (this.rowType !== RowType$1.FullWidthDetail) {
          return;
        }
        if (!this.gridOptionsService.is("detailRowAutoHeight")) {
          return;
        }
        var checkRowSizeFunc = function() {
          var clientHeight = eDetailGui.clientHeight;
          if (clientHeight != null && clientHeight > 0) {
            var updateRowHeightFunc = function() {
              _this.rowNode.setRowHeight(clientHeight);
              if (_this.beans.clientSideRowModel) {
                _this.beans.clientSideRowModel.onRowHeightChanged();
              } else if (_this.beans.serverSideRowModel) {
                _this.beans.serverSideRowModel.onRowHeightChanged();
              }
            };
            _this.beans.frameworkOverrides.setTimeout(updateRowHeightFunc, 0);
          }
        };
        var resizeObserverDestroyFunc = this.beans.resizeObserverService.observeResize(eDetailGui, checkRowSizeFunc);
        this.addDestroyFunc(resizeObserverDestroyFunc);
        checkRowSizeFunc();
      };
      RowCtrl2.prototype.createFullWidthParams = function(eRow, pinned) {
        var _this = this;
        var params = {
          fullWidth: true,
          data: this.rowNode.data,
          node: this.rowNode,
          value: this.rowNode.key,
          valueFormatted: this.rowNode.key,
          rowIndex: this.rowNode.rowIndex,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context,
          // these need to be taken out, as part of 'afterAttached' now
          eGridCell: eRow,
          eParentOfValue: eRow,
          pinned,
          addRenderedRowListener: this.addEventListener.bind(this),
          registerRowDragger: function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
            return _this.addFullWidthRowDragging(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange);
          }
        };
        return params;
      };
      RowCtrl2.prototype.addFullWidthRowDragging = function(rowDraggerElement, dragStartPixels, value, suppressVisibilityChange) {
        if (value === void 0) {
          value = "";
        }
        if (!this.isFullWidth()) {
          return;
        }
        var rowDragComp = new RowDragComp(function() {
          return value;
        }, this.rowNode, void 0, rowDraggerElement, dragStartPixels, suppressVisibilityChange);
        this.createManagedBean(rowDragComp, this.beans.context);
      };
      RowCtrl2.prototype.onUiLevelChanged = function() {
        var newLevel = this.beans.rowCssClassCalculator.calculateRowLevel(this.rowNode);
        if (this.rowLevel != newLevel) {
          var classToAdd_1 = "ag-row-level-" + newLevel;
          var classToRemove_1 = "ag-row-level-" + this.rowLevel;
          this.allRowGuis.forEach(function(gui) {
            gui.rowComp.addOrRemoveCssClass(classToAdd_1, true);
            gui.rowComp.addOrRemoveCssClass(classToRemove_1, false);
          });
        }
        this.rowLevel = newLevel;
      };
      RowCtrl2.prototype.isFirstRowOnPage = function() {
        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageFirstRow();
      };
      RowCtrl2.prototype.isLastRowOnPage = function() {
        return this.rowNode.rowIndex === this.beans.paginationProxy.getPageLastRow();
      };
      RowCtrl2.prototype.onModelUpdated = function() {
        this.refreshFirstAndLastRowStyles();
      };
      RowCtrl2.prototype.refreshFirstAndLastRowStyles = function() {
        var newFirst = this.isFirstRowOnPage();
        var newLast = this.isLastRowOnPage();
        if (this.firstRowOnPage !== newFirst) {
          this.firstRowOnPage = newFirst;
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-row-first", newFirst);
          });
        }
        if (this.lastRowOnPage !== newLast) {
          this.lastRowOnPage = newLast;
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-row-last", newLast);
          });
        }
      };
      RowCtrl2.prototype.stopEditing = function(cancel) {
        var e_1, _a;
        if (cancel === void 0) {
          cancel = false;
        }
        if (this.stoppingRowEdit) {
          return;
        }
        var cellControls = this.getAllCellCtrls();
        var isRowEdit = this.editingRow;
        this.stoppingRowEdit = true;
        var fireRowEditEvent = false;
        try {
          for (var cellControls_1 = __values$3(cellControls), cellControls_1_1 = cellControls_1.next(); !cellControls_1_1.done; cellControls_1_1 = cellControls_1.next()) {
            var ctrl = cellControls_1_1.value;
            var valueChanged = ctrl.stopEditing(cancel);
            if (isRowEdit && !cancel && !fireRowEditEvent && valueChanged) {
              fireRowEditEvent = true;
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (cellControls_1_1 && !cellControls_1_1.done && (_a = cellControls_1.return))
              _a.call(cellControls_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        if (fireRowEditEvent) {
          var event_1 = this.createRowEvent(Events.EVENT_ROW_VALUE_CHANGED);
          this.beans.eventService.dispatchEvent(event_1);
        }
        if (isRowEdit) {
          this.setEditingRow(false);
        }
        this.stoppingRowEdit = false;
      };
      RowCtrl2.prototype.setInlineEditingCss = function(editing) {
        this.allRowGuis.forEach(function(gui) {
          gui.rowComp.addOrRemoveCssClass("ag-row-inline-editing", editing);
          gui.rowComp.addOrRemoveCssClass("ag-row-not-inline-editing", !editing);
        });
      };
      RowCtrl2.prototype.setEditingRow = function(value) {
        this.editingRow = value;
        this.allRowGuis.forEach(function(gui) {
          return gui.rowComp.addOrRemoveCssClass("ag-row-editing", value);
        });
        var event = value ? this.createRowEvent(Events.EVENT_ROW_EDITING_STARTED) : this.createRowEvent(Events.EVENT_ROW_EDITING_STOPPED);
        this.beans.eventService.dispatchEvent(event);
      };
      RowCtrl2.prototype.startRowEditing = function(key, sourceRenderedCell, event) {
        if (key === void 0) {
          key = null;
        }
        if (sourceRenderedCell === void 0) {
          sourceRenderedCell = null;
        }
        if (event === void 0) {
          event = null;
        }
        if (this.editingRow) {
          return;
        }
        var atLeastOneEditing = this.getAllCellCtrls().reduce(function(prev, cellCtrl) {
          var cellStartedEdit = cellCtrl === sourceRenderedCell;
          if (cellStartedEdit) {
            cellCtrl.startEditing(key, cellStartedEdit, event);
          } else {
            cellCtrl.startEditing(null, cellStartedEdit, event);
          }
          if (prev) {
            return true;
          }
          return cellCtrl.isEditing();
        }, false);
        if (atLeastOneEditing) {
          this.setEditingRow(true);
        }
      };
      RowCtrl2.prototype.getAllCellCtrls = function() {
        if (this.leftCellCtrls.list.length === 0 && this.rightCellCtrls.list.length === 0) {
          return this.centerCellCtrls.list;
        }
        var res = __spreadArray$h(__spreadArray$h(__spreadArray$h([], __read$l(this.centerCellCtrls.list)), __read$l(this.leftCellCtrls.list)), __read$l(this.rightCellCtrls.list));
        return res;
      };
      RowCtrl2.prototype.postProcessClassesFromGridOptions = function() {
        var _this = this;
        var cssClasses = this.beans.rowCssClassCalculator.processClassesFromGridOptions(this.rowNode);
        if (!cssClasses || !cssClasses.length) {
          return;
        }
        cssClasses.forEach(function(classStr) {
          _this.allRowGuis.forEach(function(c) {
            return c.rowComp.addOrRemoveCssClass(classStr, true);
          });
        });
      };
      RowCtrl2.prototype.postProcessRowClassRules = function() {
        var _this = this;
        this.beans.rowCssClassCalculator.processRowClassRules(this.rowNode, function(className) {
          _this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass(className, true);
          });
        }, function(className) {
          _this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass(className, false);
          });
        });
      };
      RowCtrl2.prototype.setStylesFromGridOptions = function(updateStyles, gui) {
        var _this = this;
        if (updateStyles) {
          this.rowStyles = this.processStylesFromGridOptions();
        }
        this.forEachGui(gui, function(gui2) {
          return gui2.rowComp.setUserStyles(_this.rowStyles);
        });
      };
      RowCtrl2.prototype.getPinnedForContainer = function(rowContainerType) {
        var pinned = rowContainerType === RowContainerType.LEFT ? "left" : rowContainerType === RowContainerType.RIGHT ? "right" : null;
        return pinned;
      };
      RowCtrl2.prototype.getInitialRowClasses = function(rowContainerType) {
        var pinned = this.getPinnedForContainer(rowContainerType);
        var params = {
          rowNode: this.rowNode,
          rowFocused: this.rowFocused,
          fadeRowIn: this.fadeInAnimation[rowContainerType],
          rowIsEven: this.rowNode.rowIndex % 2 === 0,
          rowLevel: this.rowLevel,
          fullWidthRow: this.isFullWidth(),
          firstRowOnPage: this.isFirstRowOnPage(),
          lastRowOnPage: this.isLastRowOnPage(),
          printLayout: this.printLayout,
          expandable: this.rowNode.isExpandable(),
          pinned
        };
        return this.beans.rowCssClassCalculator.getInitialRowClasses(params);
      };
      RowCtrl2.prototype.processStylesFromGridOptions = function() {
        var rowStyle = this.gridOptionsService.get("rowStyle");
        if (rowStyle && typeof rowStyle === "function") {
          console.warn("AG Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead");
          return;
        }
        var rowStyleFunc = this.gridOptionsService.getCallback("getRowStyle");
        var rowStyleFuncResult;
        if (rowStyleFunc) {
          var params = {
            data: this.rowNode.data,
            node: this.rowNode,
            rowIndex: this.rowNode.rowIndex
          };
          rowStyleFuncResult = rowStyleFunc(params);
        }
        if (rowStyleFuncResult || rowStyle) {
          return Object.assign({}, rowStyle, rowStyleFuncResult);
        }
        return this.emptyStyle;
      };
      RowCtrl2.prototype.onRowSelected = function(gui) {
        var _this = this;
        var selected = !!this.rowNode.isSelected();
        this.forEachGui(gui, function(gui2) {
          gui2.rowComp.addOrRemoveCssClass("ag-row-selected", selected);
          setAriaSelected(gui2.element, selected ? true : void 0);
          var ariaLabel = _this.createAriaLabel();
          setAriaLabel(gui2.element, ariaLabel == null ? "" : ariaLabel);
        });
      };
      RowCtrl2.prototype.createAriaLabel = function() {
        var selected = this.rowNode.isSelected();
        if (selected && this.gridOptionsService.is("suppressRowDeselection")) {
          return void 0;
        }
        var translate = this.beans.localeService.getLocaleTextFunc();
        var label = translate(selected ? "ariaRowDeselect" : "ariaRowSelect", "Press SPACE to " + (selected ? "deselect" : "select") + " this row.");
        return label;
      };
      RowCtrl2.prototype.isUseAnimationFrameForCreate = function() {
        return this.useAnimationFrameForCreate;
      };
      RowCtrl2.prototype.addHoverFunctionality = function(eRow) {
        var _this = this;
        if (!this.active) {
          return;
        }
        this.addManagedListener(eRow, "mouseenter", function() {
          return _this.rowNode.onMouseEnter();
        });
        this.addManagedListener(eRow, "mouseleave", function() {
          return _this.rowNode.onMouseLeave();
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_ENTER, function() {
          if (!_this.beans.dragService.isDragging() && !_this.gridOptionsService.is("suppressRowHoverHighlight")) {
            eRow.classList.add("ag-row-hover");
            _this.rowNode.setHovered(true);
          }
        });
        this.addManagedListener(this.rowNode, RowNode.EVENT_MOUSE_LEAVE, function() {
          eRow.classList.remove("ag-row-hover");
          _this.rowNode.setHovered(false);
        });
      };
      RowCtrl2.prototype.roundRowTopToBounds = function(rowTop) {
        var gridBodyCon = this.beans.ctrlsService.getGridBodyCtrl();
        var range = gridBodyCon.getScrollFeature().getVScrollPosition();
        var minPixel = this.applyPaginationOffset(range.top, true) - 100;
        var maxPixel = this.applyPaginationOffset(range.bottom, true) + 100;
        return Math.min(Math.max(minPixel, rowTop), maxPixel);
      };
      RowCtrl2.prototype.getFrameworkOverrides = function() {
        return this.beans.frameworkOverrides;
      };
      RowCtrl2.prototype.forEachGui = function(gui, callback) {
        if (gui) {
          callback(gui);
        } else {
          this.allRowGuis.forEach(callback);
        }
      };
      RowCtrl2.prototype.onRowHeightChanged = function(gui) {
        if (this.rowNode.rowHeight == null) {
          return;
        }
        var rowHeight = this.rowNode.rowHeight;
        var defaultRowHeight = this.beans.environment.getDefaultRowHeight();
        var isHeightFromFunc = this.gridOptionsService.isGetRowHeightFunction();
        var heightFromFunc = isHeightFromFunc ? this.gridOptionsService.getRowHeightForNode(this.rowNode).height : void 0;
        var lineHeight = heightFromFunc ? Math.min(defaultRowHeight, heightFromFunc) - 2 + "px" : void 0;
        this.forEachGui(gui, function(gui2) {
          gui2.element.style.height = rowHeight + "px";
          if (lineHeight) {
            gui2.element.style.setProperty("--ag-line-height", lineHeight);
          }
        });
      };
      RowCtrl2.prototype.addEventListener = function(eventType, listener) {
        _super.prototype.addEventListener.call(this, eventType, listener);
      };
      RowCtrl2.prototype.removeEventListener = function(eventType, listener) {
        _super.prototype.removeEventListener.call(this, eventType, listener);
      };
      RowCtrl2.prototype.destroyFirstPass = function() {
        this.active = false;
        if (this.gridOptionsService.isAnimateRows()) {
          this.setupRemoveAnimation();
        }
        this.rowNode.setHovered(false);
        var event = this.createRowEvent(Events.EVENT_VIRTUAL_ROW_REMOVED);
        this.dispatchEvent(event);
        this.beans.eventService.dispatchEvent(event);
        _super.prototype.destroy.call(this);
      };
      RowCtrl2.prototype.setupRemoveAnimation = function() {
        if (this.isSticky()) {
          return;
        }
        var rowStillVisibleJustNotInViewport = this.rowNode.rowTop != null;
        if (rowStillVisibleJustNotInViewport) {
          var rowTop = this.roundRowTopToBounds(this.rowNode.rowTop);
          this.setRowTop(rowTop);
        } else {
          this.allRowGuis.forEach(function(gui) {
            return gui.rowComp.addOrRemoveCssClass("ag-opacity-zero", true);
          });
        }
      };
      RowCtrl2.prototype.destroySecondPass = function() {
        this.allRowGuis.length = 0;
        var destroyCellCtrls = function(ctrls) {
          ctrls.list.forEach(function(c) {
            return c.destroy();
          });
          return { list: [], map: {} };
        };
        this.centerCellCtrls = destroyCellCtrls(this.centerCellCtrls);
        this.leftCellCtrls = destroyCellCtrls(this.leftCellCtrls);
        this.rightCellCtrls = destroyCellCtrls(this.rightCellCtrls);
      };
      RowCtrl2.prototype.setFocusedClasses = function(gui) {
        var _this = this;
        this.forEachGui(gui, function(gui2) {
          gui2.rowComp.addOrRemoveCssClass("ag-row-focus", _this.rowFocused);
          gui2.rowComp.addOrRemoveCssClass("ag-row-no-focus", !_this.rowFocused);
        });
      };
      RowCtrl2.prototype.onCellFocused = function() {
        this.onCellFocusChanged();
      };
      RowCtrl2.prototype.onCellFocusCleared = function() {
        this.onCellFocusChanged();
      };
      RowCtrl2.prototype.onCellFocusChanged = function() {
        var rowFocused = this.beans.focusService.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
        if (rowFocused !== this.rowFocused) {
          this.rowFocused = rowFocused;
          this.setFocusedClasses();
        }
        if (!rowFocused && this.editingRow) {
          this.stopEditing(false);
        }
      };
      RowCtrl2.prototype.onPaginationChanged = function() {
        var currentPage = this.beans.paginationProxy.getCurrentPage();
        if (this.paginationPage !== currentPage) {
          this.paginationPage = currentPage;
          this.onTopChanged();
        }
        this.refreshFirstAndLastRowStyles();
      };
      RowCtrl2.prototype.onTopChanged = function() {
        this.setRowTop(this.rowNode.rowTop);
      };
      RowCtrl2.prototype.onPaginationPixelOffsetChanged = function() {
        this.onTopChanged();
      };
      RowCtrl2.prototype.applyPaginationOffset = function(topPx, reverse) {
        if (reverse === void 0) {
          reverse = false;
        }
        if (this.rowNode.isRowPinned() || this.rowNode.sticky) {
          return topPx;
        }
        var pixelOffset = this.beans.paginationProxy.getPixelOffset();
        var multiplier = reverse ? 1 : -1;
        return topPx + pixelOffset * multiplier;
      };
      RowCtrl2.prototype.setRowTop = function(pixels) {
        if (this.printLayout) {
          return;
        }
        if (exists(pixels)) {
          var afterPaginationPixels = this.applyPaginationOffset(pixels);
          var skipScaling = this.rowNode.isRowPinned() || this.rowNode.sticky;
          var afterScalingPixels = skipScaling ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
          var topPx = afterScalingPixels + "px";
          this.setRowTopStyle(topPx);
        }
      };
      RowCtrl2.prototype.getInitialRowTop = function(rowContainerType) {
        var suppressRowTransform = this.gridOptionsService.is("suppressRowTransform");
        return suppressRowTransform ? this.getInitialRowTopShared(rowContainerType) : void 0;
      };
      RowCtrl2.prototype.getInitialTransform = function(rowContainerType) {
        var suppressRowTransform = this.gridOptionsService.is("suppressRowTransform");
        return suppressRowTransform ? void 0 : "translateY(" + this.getInitialRowTopShared(rowContainerType) + ")";
      };
      RowCtrl2.prototype.getInitialRowTopShared = function(rowContainerType) {
        if (this.printLayout) {
          return "";
        }
        var rowTop;
        if (this.isSticky()) {
          rowTop = this.rowNode.stickyRowTop;
        } else {
          var pixels = this.slideInAnimation[rowContainerType] ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
          var afterPaginationPixels = this.applyPaginationOffset(pixels);
          rowTop = this.rowNode.isRowPinned() ? afterPaginationPixels : this.beans.rowContainerHeightService.getRealPixelPosition(afterPaginationPixels);
        }
        return rowTop + "px";
      };
      RowCtrl2.prototype.setRowTopStyle = function(topPx) {
        var suppressRowTransform = this.gridOptionsService.is("suppressRowTransform");
        this.allRowGuis.forEach(function(gui) {
          return suppressRowTransform ? gui.rowComp.setTop(topPx) : gui.rowComp.setTransform("translateY(" + topPx + ")");
        });
      };
      RowCtrl2.prototype.getRowNode = function() {
        return this.rowNode;
      };
      RowCtrl2.prototype.getCellCtrl = function(column) {
        var res = null;
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          if (cellCtrl.getColumn() == column) {
            res = cellCtrl;
          }
        });
        if (res != null) {
          return res;
        }
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          if (cellCtrl.getColSpanningList().indexOf(column) >= 0) {
            res = cellCtrl;
          }
        });
        return res;
      };
      RowCtrl2.prototype.onRowIndexChanged = function() {
        if (this.rowNode.rowIndex != null) {
          this.onCellFocusChanged();
          this.updateRowIndexes();
          this.postProcessCss();
        }
      };
      RowCtrl2.prototype.getRowIndex = function() {
        return this.rowNode.getRowIndexString();
      };
      RowCtrl2.prototype.updateRowIndexes = function(gui) {
        var rowIndexStr = this.rowNode.getRowIndexString();
        var headerRowCount = this.beans.headerNavigationService.getHeaderRowCount() + this.beans.filterManager.getHeaderRowCount();
        var rowIsEven = this.rowNode.rowIndex % 2 === 0;
        var ariaRowIndex = headerRowCount + this.rowNode.rowIndex + 1;
        this.forEachGui(gui, function(c) {
          c.rowComp.setRowIndex(rowIndexStr);
          c.rowComp.addOrRemoveCssClass("ag-row-even", rowIsEven);
          c.rowComp.addOrRemoveCssClass("ag-row-odd", !rowIsEven);
          setAriaRowIndex(c.element, ariaRowIndex);
        });
      };
      RowCtrl2.prototype.getPinnedLeftRowElement = function() {
        return this.leftGui ? this.leftGui.element : void 0;
      };
      RowCtrl2.prototype.getPinnedRightRowElement = function() {
        return this.rightGui ? this.rightGui.element : void 0;
      };
      RowCtrl2.prototype.getBodyRowElement = function() {
        return this.centerGui ? this.centerGui.element : void 0;
      };
      RowCtrl2.prototype.getFullWidthRowElement = function() {
        return this.fullWidthGui ? this.fullWidthGui.element : void 0;
      };
      RowCtrl2.DOM_DATA_KEY_ROW_CTRL = "renderedRow";
      return RowCtrl2;
    }(BeanStub);
    __extends$1V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1Q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$k = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    RowContainerEventsFeature = /** @class */
    function(_super) {
      __extends$1V(RowContainerEventsFeature2, _super);
      function RowContainerEventsFeature2(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
      }
      RowContainerEventsFeature2.prototype.postConstruct = function() {
        this.addKeyboardListeners();
        this.addMouseListeners();
        this.mockContextMenuForIPad();
      };
      RowContainerEventsFeature2.prototype.addKeyboardListeners = function() {
        var eventName = "keydown";
        var listener = this.processKeyboardEvent.bind(this, eventName);
        this.addManagedListener(this.element, eventName, listener);
      };
      RowContainerEventsFeature2.prototype.addMouseListeners = function() {
        var _this = this;
        var mouseDownEvent = isEventSupported("touchstart") ? "touchstart" : "mousedown";
        var eventNames = ["dblclick", "contextmenu", "mouseover", "mouseout", "click", mouseDownEvent];
        eventNames.forEach(function(eventName) {
          var listener = _this.processMouseEvent.bind(_this, eventName);
          _this.addManagedListener(_this.element, eventName, listener);
        });
      };
      RowContainerEventsFeature2.prototype.processMouseEvent = function(eventName, mouseEvent) {
        if (!this.mouseEventService.isEventFromThisGrid(mouseEvent) || isStopPropagationForAgGrid(mouseEvent)) {
          return;
        }
        var rowComp = this.getRowForEvent(mouseEvent);
        var cellCtrl = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
        if (eventName === "contextmenu") {
          this.handleContextMenuMouseEvent(mouseEvent, null, rowComp, cellCtrl);
        } else {
          if (cellCtrl) {
            cellCtrl.onMouseEvent(eventName, mouseEvent);
          }
          if (rowComp) {
            rowComp.onMouseEvent(eventName, mouseEvent);
          }
        }
      };
      RowContainerEventsFeature2.prototype.mockContextMenuForIPad = function() {
        var _this = this;
        if (!isIOSUserAgent()) {
          return;
        }
        var touchListener = new TouchListener(this.element);
        var longTapListener = function(event) {
          var rowComp = _this.getRowForEvent(event.touchEvent);
          var cellComp = _this.mouseEventService.getRenderedCellForEvent(event.touchEvent);
          _this.handleContextMenuMouseEvent(null, event.touchEvent, rowComp, cellComp);
        };
        this.addManagedListener(touchListener, TouchListener.EVENT_LONG_TAP, longTapListener);
        this.addDestroyFunc(function() {
          return touchListener.destroy();
        });
      };
      RowContainerEventsFeature2.prototype.getRowForEvent = function(event) {
        var sourceElement = event.target;
        while (sourceElement) {
          var rowCon = this.gridOptionsService.getDomData(sourceElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
          if (rowCon) {
            return rowCon;
          }
          sourceElement = sourceElement.parentElement;
        }
        return null;
      };
      RowContainerEventsFeature2.prototype.handleContextMenuMouseEvent = function(mouseEvent, touchEvent, rowComp, cellCtrl) {
        var rowNode = rowComp ? rowComp.getRowNode() : null;
        var column = cellCtrl ? cellCtrl.getColumn() : null;
        var value = null;
        if (column) {
          var event_1 = mouseEvent ? mouseEvent : touchEvent;
          cellCtrl.dispatchCellContextMenuEvent(event_1);
          value = this.valueService.getValue(column, rowNode);
        }
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var anchorToElement = cellCtrl ? cellCtrl.getGui() : gridBodyCon.getGridBodyElement();
        if (this.contextMenuFactory) {
          this.contextMenuFactory.onContextMenu(mouseEvent, touchEvent, rowNode, column, value, anchorToElement);
        }
      };
      RowContainerEventsFeature2.prototype.getControlsForEventTarget = function(target) {
        return {
          cellCtrl: getCtrlForEventTarget(this.gridOptionsService, target, CellCtrl.DOM_DATA_KEY_CELL_CTRL),
          rowCtrl: getCtrlForEventTarget(this.gridOptionsService, target, RowCtrl.DOM_DATA_KEY_ROW_CTRL)
        };
      };
      RowContainerEventsFeature2.prototype.processKeyboardEvent = function(eventName, keyboardEvent) {
        var _a = this.getControlsForEventTarget(keyboardEvent.target), cellCtrl = _a.cellCtrl, rowCtrl = _a.rowCtrl;
        if (keyboardEvent.defaultPrevented) {
          return;
        }
        if (cellCtrl) {
          this.processCellKeyboardEvent(cellCtrl, eventName, keyboardEvent);
        } else if (rowCtrl && rowCtrl.isFullWidth()) {
          this.processFullWidthRowKeyboardEvent(rowCtrl, eventName, keyboardEvent);
        }
      };
      RowContainerEventsFeature2.prototype.processCellKeyboardEvent = function(cellCtrl, eventName, keyboardEvent) {
        var rowNode = cellCtrl.getRowNode();
        var column = cellCtrl.getColumn();
        var editing = cellCtrl.isEditing();
        var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsService, keyboardEvent, rowNode, column, editing);
        if (gridProcessingAllowed) {
          if (eventName === "keydown") {
            var wasScrollKey = !editing && this.navigationService.handlePageScrollingKey(keyboardEvent);
            if (!wasScrollKey) {
              cellCtrl.onKeyDown(keyboardEvent);
            }
            this.doGridOperations(keyboardEvent, cellCtrl.isEditing());
            if (isEventFromPrintableCharacter(keyboardEvent)) {
              cellCtrl.processCharacter(keyboardEvent);
            }
          }
        }
        if (eventName === "keydown") {
          var cellKeyDownEvent = cellCtrl.createEvent(keyboardEvent, Events.EVENT_CELL_KEY_DOWN);
          this.eventService.dispatchEvent(cellKeyDownEvent);
        }
      };
      RowContainerEventsFeature2.prototype.processFullWidthRowKeyboardEvent = function(rowComp, eventName, keyboardEvent) {
        var rowNode = rowComp.getRowNode();
        var focusedCell = this.focusService.getFocusedCell();
        var column = focusedCell && focusedCell.column;
        var gridProcessingAllowed = !isUserSuppressingKeyboardEvent(this.gridOptionsService, keyboardEvent, rowNode, column, false);
        if (gridProcessingAllowed) {
          var key = keyboardEvent.key;
          if (eventName === "keydown") {
            switch (key) {
              case KeyCode.PAGE_HOME:
              case KeyCode.PAGE_END:
              case KeyCode.PAGE_UP:
              case KeyCode.PAGE_DOWN:
                this.navigationService.handlePageScrollingKey(keyboardEvent, true);
                break;
              case KeyCode.UP:
              case KeyCode.DOWN:
                rowComp.onKeyboardNavigate(keyboardEvent);
                break;
              case KeyCode.TAB:
                rowComp.onTabKeyDown(keyboardEvent);
                break;
            }
          }
        }
        if (eventName === "keydown") {
          var cellKeyDownEvent = rowComp.createRowEvent(Events.EVENT_CELL_KEY_DOWN, keyboardEvent);
          this.eventService.dispatchEvent(cellKeyDownEvent);
        }
      };
      RowContainerEventsFeature2.prototype.doGridOperations = function(keyboardEvent, editing) {
        if (!keyboardEvent.ctrlKey && !keyboardEvent.metaKey) {
          return;
        }
        if (editing) {
          return;
        }
        if (!this.mouseEventService.isEventFromThisGrid(keyboardEvent)) {
          return;
        }
        var keyCode = normaliseQwertyAzerty(keyboardEvent);
        if (keyCode === KeyCode.A) {
          return this.onCtrlAndA(keyboardEvent);
        }
        if (keyCode === KeyCode.C) {
          return this.onCtrlAndC(keyboardEvent);
        }
        if (keyCode === KeyCode.D) {
          return this.onCtrlAndD(keyboardEvent);
        }
        if (keyCode === KeyCode.V) {
          return this.onCtrlAndV(keyboardEvent);
        }
        if (keyCode === KeyCode.X) {
          return this.onCtrlAndX(keyboardEvent);
        }
        if (keyCode === KeyCode.Y) {
          return this.onCtrlAndY();
        }
        if (keyCode === KeyCode.Z) {
          return this.onCtrlAndZ(keyboardEvent);
        }
      };
      RowContainerEventsFeature2.prototype.onCtrlAndA = function(event) {
        var _a = this, pinnedRowModel = _a.pinnedRowModel, paginationProxy = _a.paginationProxy, rangeService = _a.rangeService;
        if (rangeService && paginationProxy.isRowsToRender()) {
          var _b = __read$k([
            pinnedRowModel.isEmpty("top"),
            pinnedRowModel.isEmpty("bottom")
          ], 2), isEmptyPinnedTop = _b[0], isEmptyPinnedBottom = _b[1];
          var floatingStart = isEmptyPinnedTop ? null : "top";
          var floatingEnd = void 0;
          var rowEnd = void 0;
          if (isEmptyPinnedBottom) {
            floatingEnd = null;
            rowEnd = this.paginationProxy.getRowCount() - 1;
          } else {
            floatingEnd = "bottom";
            rowEnd = pinnedRowModel.getPinnedBottomRowData().length - 1;
          }
          var allDisplayedColumns = this.columnModel.getAllDisplayedColumns();
          if (missingOrEmpty(allDisplayedColumns)) {
            return;
          }
          rangeService.setCellRange({
            rowStartIndex: 0,
            rowStartPinned: floatingStart,
            rowEndIndex: rowEnd,
            rowEndPinned: floatingEnd,
            columnStart: allDisplayedColumns[0],
            columnEnd: last(allDisplayedColumns)
          });
        }
        event.preventDefault();
      };
      RowContainerEventsFeature2.prototype.onCtrlAndC = function(event) {
        if (!this.clipboardService || this.gridOptionsService.is("enableCellTextSelection")) {
          return;
        }
        var _a = this.getControlsForEventTarget(event.target), cellCtrl = _a.cellCtrl, rowCtrl = _a.rowCtrl;
        if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {
          return;
        }
        event.preventDefault();
        this.clipboardService.copyToClipboard();
      };
      RowContainerEventsFeature2.prototype.onCtrlAndX = function(event) {
        if (!this.clipboardService || this.gridOptionsService.is("enableCellTextSelection") || this.gridOptionsService.is("suppressCutToClipboard")) {
          return;
        }
        var _a = this.getControlsForEventTarget(event.target), cellCtrl = _a.cellCtrl, rowCtrl = _a.rowCtrl;
        if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {
          return;
        }
        event.preventDefault();
        this.clipboardService.cutToClipboard(void 0, "ui");
      };
      RowContainerEventsFeature2.prototype.onCtrlAndV = function(event) {
        var _a = this.getControlsForEventTarget(event.target), cellCtrl = _a.cellCtrl, rowCtrl = _a.rowCtrl;
        if ((cellCtrl === null || cellCtrl === void 0 ? void 0 : cellCtrl.isEditing()) || (rowCtrl === null || rowCtrl === void 0 ? void 0 : rowCtrl.isEditing())) {
          return;
        }
        if (this.clipboardService && !this.gridOptionsService.is("suppressClipboardPaste")) {
          this.clipboardService.pasteFromClipboard();
        }
      };
      RowContainerEventsFeature2.prototype.onCtrlAndD = function(event) {
        if (this.clipboardService && !this.gridOptionsService.is("suppressClipboardPaste")) {
          this.clipboardService.copyRangeDown();
        }
        event.preventDefault();
      };
      RowContainerEventsFeature2.prototype.onCtrlAndZ = function(event) {
        if (!this.gridOptionsService.is("undoRedoCellEditing")) {
          return;
        }
        event.preventDefault();
        if (event.shiftKey) {
          this.undoRedoService.redo("ui");
        } else {
          this.undoRedoService.undo("ui");
        }
      };
      RowContainerEventsFeature2.prototype.onCtrlAndY = function() {
        this.undoRedoService.redo("ui");
      };
      __decorate$1Q([
        Autowired("mouseEventService")
      ], RowContainerEventsFeature2.prototype, "mouseEventService", void 0);
      __decorate$1Q([
        Autowired("valueService")
      ], RowContainerEventsFeature2.prototype, "valueService", void 0);
      __decorate$1Q([
        Optional("contextMenuFactory")
      ], RowContainerEventsFeature2.prototype, "contextMenuFactory", void 0);
      __decorate$1Q([
        Autowired("ctrlsService")
      ], RowContainerEventsFeature2.prototype, "ctrlsService", void 0);
      __decorate$1Q([
        Autowired("navigationService")
      ], RowContainerEventsFeature2.prototype, "navigationService", void 0);
      __decorate$1Q([
        Autowired("focusService")
      ], RowContainerEventsFeature2.prototype, "focusService", void 0);
      __decorate$1Q([
        Autowired("undoRedoService")
      ], RowContainerEventsFeature2.prototype, "undoRedoService", void 0);
      __decorate$1Q([
        Autowired("columnModel")
      ], RowContainerEventsFeature2.prototype, "columnModel", void 0);
      __decorate$1Q([
        Autowired("paginationProxy")
      ], RowContainerEventsFeature2.prototype, "paginationProxy", void 0);
      __decorate$1Q([
        Autowired("pinnedRowModel")
      ], RowContainerEventsFeature2.prototype, "pinnedRowModel", void 0);
      __decorate$1Q([
        Optional("rangeService")
      ], RowContainerEventsFeature2.prototype, "rangeService", void 0);
      __decorate$1Q([
        Optional("clipboardService")
      ], RowContainerEventsFeature2.prototype, "clipboardService", void 0);
      __decorate$1Q([
        PostConstruct
      ], RowContainerEventsFeature2.prototype, "postConstruct", null);
      return RowContainerEventsFeature2;
    }(BeanStub);
    __extends$1U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1P = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ViewportSizeFeature = /** @class */
    function(_super) {
      __extends$1U(ViewportSizeFeature2, _super);
      function ViewportSizeFeature2(centerContainerCtrl) {
        var _this = _super.call(this) || this;
        _this.centerContainerCtrl = centerContainerCtrl;
        return _this;
      }
      ViewportSizeFeature2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
          _this.listenForResize();
        });
        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));
      };
      ViewportSizeFeature2.prototype.listenForResize = function() {
        var _this = this;
        var listener = function() {
          return _this.onCenterViewportResized();
        };
        this.centerContainerCtrl.registerViewportResizeListener(listener);
        this.gridBodyCtrl.registerBodyViewportResizeListener(listener);
      };
      ViewportSizeFeature2.prototype.onScrollbarWidthChanged = function() {
        this.checkViewportAndScrolls();
      };
      ViewportSizeFeature2.prototype.onCenterViewportResized = function() {
        if (this.centerContainerCtrl.isViewportVisible()) {
          this.checkViewportAndScrolls();
          var newWidth = this.centerContainerCtrl.getCenterWidth();
          if (newWidth !== this.centerWidth) {
            this.centerWidth = newWidth;
            this.columnModel.refreshFlexedColumns({ viewportWidth: this.centerWidth, updateBodyWidths: true, fireResizedEvent: true });
          }
        } else {
          this.bodyHeight = 0;
        }
      };
      ViewportSizeFeature2.prototype.checkViewportAndScrolls = function() {
        this.updateScrollVisibleService();
        this.checkBodyHeight();
        this.onHorizontalViewportChanged();
        this.gridBodyCtrl.getScrollFeature().checkScrollLeft();
      };
      ViewportSizeFeature2.prototype.getBodyHeight = function() {
        return this.bodyHeight;
      };
      ViewportSizeFeature2.prototype.checkBodyHeight = function() {
        var eBodyViewport = this.gridBodyCtrl.getBodyViewportElement();
        var bodyHeight = getInnerHeight(eBodyViewport);
        if (this.bodyHeight !== bodyHeight) {
          this.bodyHeight = bodyHeight;
          var event_1 = {
            type: Events.EVENT_BODY_HEIGHT_CHANGED
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ViewportSizeFeature2.prototype.updateScrollVisibleService = function() {
        this.updateScrollVisibleServiceImpl();
        setTimeout(this.updateScrollVisibleServiceImpl.bind(this), 500);
      };
      ViewportSizeFeature2.prototype.updateScrollVisibleServiceImpl = function() {
        var params = {
          horizontalScrollShowing: this.isHorizontalScrollShowing(),
          verticalScrollShowing: this.gridBodyCtrl.isVerticalScrollShowing()
        };
        this.scrollVisibleService.setScrollsVisible(params);
      };
      ViewportSizeFeature2.prototype.isHorizontalScrollShowing = function() {
        return this.centerContainerCtrl.isHorizontalScrollShowing();
      };
      ViewportSizeFeature2.prototype.onHorizontalViewportChanged = function() {
        var scrollWidth = this.centerContainerCtrl.getCenterWidth();
        var scrollPosition = this.centerContainerCtrl.getViewportScrollLeft();
        this.columnModel.setViewportPosition(scrollWidth, scrollPosition);
      };
      __decorate$1P([
        Autowired("ctrlsService")
      ], ViewportSizeFeature2.prototype, "ctrlsService", void 0);
      __decorate$1P([
        Autowired("columnModel")
      ], ViewportSizeFeature2.prototype, "columnModel", void 0);
      __decorate$1P([
        Autowired("scrollVisibleService")
      ], ViewportSizeFeature2.prototype, "scrollVisibleService", void 0);
      __decorate$1P([
        PostConstruct
      ], ViewportSizeFeature2.prototype, "postConstruct", null);
      return ViewportSizeFeature2;
    }(BeanStub);
    __extends$1T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1O = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SetPinnedLeftWidthFeature = /** @class */
    function(_super) {
      __extends$1T(SetPinnedLeftWidthFeature2, _super);
      function SetPinnedLeftWidthFeature2(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
      }
      SetPinnedLeftWidthFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, this.onPinnedLeftWidthChanged.bind(this));
      };
      SetPinnedLeftWidthFeature2.prototype.onPinnedLeftWidthChanged = function() {
        var leftWidth = this.pinnedWidthService.getPinnedLeftWidth();
        var displayed = leftWidth > 0;
        setDisplayed(this.element, displayed);
        setFixedWidth(this.element, leftWidth);
      };
      SetPinnedLeftWidthFeature2.prototype.getWidth = function() {
        return this.pinnedWidthService.getPinnedLeftWidth();
      };
      __decorate$1O([
        Autowired("pinnedWidthService")
      ], SetPinnedLeftWidthFeature2.prototype, "pinnedWidthService", void 0);
      __decorate$1O([
        PostConstruct
      ], SetPinnedLeftWidthFeature2.prototype, "postConstruct", null);
      return SetPinnedLeftWidthFeature2;
    }(BeanStub);
    __extends$1S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1N = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SetPinnedRightWidthFeature = /** @class */
    function(_super) {
      __extends$1S(SetPinnedRightWidthFeature2, _super);
      function SetPinnedRightWidthFeature2(element) {
        var _this = _super.call(this) || this;
        _this.element = element;
        return _this;
      }
      SetPinnedRightWidthFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, this.onPinnedRightWidthChanged.bind(this));
      };
      SetPinnedRightWidthFeature2.prototype.onPinnedRightWidthChanged = function() {
        var rightWidth = this.pinnedWidthService.getPinnedRightWidth();
        var displayed = rightWidth > 0;
        setDisplayed(this.element, displayed);
        setFixedWidth(this.element, rightWidth);
      };
      SetPinnedRightWidthFeature2.prototype.getWidth = function() {
        return this.pinnedWidthService.getPinnedRightWidth();
      };
      __decorate$1N([
        Autowired("pinnedWidthService")
      ], SetPinnedRightWidthFeature2.prototype, "pinnedWidthService", void 0);
      __decorate$1N([
        PostConstruct
      ], SetPinnedRightWidthFeature2.prototype, "postConstruct", null);
      return SetPinnedRightWidthFeature2;
    }(BeanStub);
    __extends$1R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1M = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SetHeightFeature = /** @class */
    function(_super) {
      __extends$1R(SetHeightFeature2, _super);
      function SetHeightFeature2(eContainer, eViewport) {
        var _this = _super.call(this) || this;
        _this.eContainer = eContainer;
        _this.eViewport = eViewport;
        return _this;
      }
      SetHeightFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onHeightChanged.bind(this));
      };
      SetHeightFeature2.prototype.onHeightChanged = function() {
        var height = this.maxDivHeightScaler.getUiContainerHeight();
        var heightString = height != null ? height + "px" : "";
        this.eContainer.style.height = heightString;
        if (this.eViewport) {
          this.eViewport.style.height = heightString;
        }
      };
      __decorate$1M([
        Autowired("rowContainerHeightService")
      ], SetHeightFeature2.prototype, "maxDivHeightScaler", void 0);
      __decorate$1M([
        PostConstruct
      ], SetHeightFeature2.prototype, "postConstruct", null);
      return SetHeightFeature2;
    }(BeanStub);
    __extends$1Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1L = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DragListenerFeature = /** @class */
    function(_super) {
      __extends$1Q(DragListenerFeature2, _super);
      function DragListenerFeature2(eContainer) {
        var _this = _super.call(this) || this;
        _this.eContainer = eContainer;
        return _this;
      }
      DragListenerFeature2.prototype.postConstruct = function() {
        var _this = this;
        if (!this.gridOptionsService.is("enableRangeSelection") || // no range selection if no property
        missing(this.rangeService)) {
          return;
        }
        var params = {
          eElement: this.eContainer,
          onDragStart: this.rangeService.onDragStart.bind(this.rangeService),
          onDragStop: this.rangeService.onDragStop.bind(this.rangeService),
          onDragging: this.rangeService.onDragging.bind(this.rangeService)
        };
        this.dragService.addDragSource(params);
        this.addDestroyFunc(function() {
          return _this.dragService.removeDragSource(params);
        });
      };
      __decorate$1L([
        Optional("rangeService")
      ], DragListenerFeature2.prototype, "rangeService", void 0);
      __decorate$1L([
        Autowired("dragService")
      ], DragListenerFeature2.prototype, "dragService", void 0);
      __decorate$1L([
        PostConstruct
      ], DragListenerFeature2.prototype, "postConstruct", null);
      return DragListenerFeature2;
    }(BeanStub);
    __extends$1P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1K = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CenterWidthFeature = /** @class */
    function(_super) {
      __extends$1P(CenterWidthFeature2, _super);
      function CenterWidthFeature2(callback, addSpacer) {
        if (addSpacer === void 0) {
          addSpacer = false;
        }
        var _this = _super.call(this) || this;
        _this.callback = callback;
        _this.addSpacer = addSpacer;
        return _this;
      }
      CenterWidthFeature2.prototype.postConstruct = function() {
        var listener = this.setWidth.bind(this);
        this.addManagedPropertyListener("domLayout", listener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);
        if (this.addSpacer) {
          this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);
          this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);
          this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);
        }
        this.setWidth();
      };
      CenterWidthFeature2.prototype.setWidth = function() {
        var columnModel = this.columnModel;
        var printLayout = this.gridOptionsService.isDomLayout("print");
        var centerWidth = columnModel.getBodyContainerWidth();
        var leftWidth = columnModel.getDisplayedColumnsLeftWidth();
        var rightWidth = columnModel.getDisplayedColumnsRightWidth();
        var totalWidth;
        if (printLayout) {
          totalWidth = centerWidth + leftWidth + rightWidth;
        } else {
          totalWidth = centerWidth;
          if (this.addSpacer) {
            var relevantWidth = this.gridOptionsService.is("enableRtl") ? leftWidth : rightWidth;
            if (relevantWidth === 0 && this.scrollVisibleService.isVerticalScrollShowing()) {
              totalWidth += this.gridOptionsService.getScrollbarWidth();
            }
          }
        }
        this.callback(totalWidth);
      };
      __decorate$1K([
        Autowired("columnModel")
      ], CenterWidthFeature2.prototype, "columnModel", void 0);
      __decorate$1K([
        Autowired("scrollVisibleService")
      ], CenterWidthFeature2.prototype, "scrollVisibleService", void 0);
      __decorate$1K([
        PostConstruct
      ], CenterWidthFeature2.prototype, "postConstruct", null);
      return CenterWidthFeature2;
    }(BeanStub);
    __extends$1O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$j = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$g = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    (function(RowContainerName2) {
      RowContainerName2["LEFT"] = "left";
      RowContainerName2["RIGHT"] = "right";
      RowContainerName2["CENTER"] = "center";
      RowContainerName2["FULL_WIDTH"] = "fullWidth";
      RowContainerName2["TOP_LEFT"] = "topLeft";
      RowContainerName2["TOP_RIGHT"] = "topRight";
      RowContainerName2["TOP_CENTER"] = "topCenter";
      RowContainerName2["TOP_FULL_WIDTH"] = "topFullWidth";
      RowContainerName2["STICKY_TOP_LEFT"] = "stickyTopLeft";
      RowContainerName2["STICKY_TOP_RIGHT"] = "stickyTopRight";
      RowContainerName2["STICKY_TOP_CENTER"] = "stickyTopCenter";
      RowContainerName2["STICKY_TOP_FULL_WIDTH"] = "stickyTopFullWidth";
      RowContainerName2["BOTTOM_LEFT"] = "bottomLeft";
      RowContainerName2["BOTTOM_RIGHT"] = "bottomRight";
      RowContainerName2["BOTTOM_CENTER"] = "bottomCenter";
      RowContainerName2["BOTTOM_FULL_WIDTH"] = "bottomFullWidth";
    })(RowContainerName || (RowContainerName = {}));
    (function(RowContainerType2) {
      RowContainerType2["LEFT"] = "left";
      RowContainerType2["RIGHT"] = "right";
      RowContainerType2["CENTER"] = "center";
      RowContainerType2["FULL_WIDTH"] = "fullWidth";
    })(RowContainerType || (RowContainerType = {}));
    ContainerCssClasses = convertToMap([
      [RowContainerName.CENTER, "ag-center-cols-container"],
      [RowContainerName.LEFT, "ag-pinned-left-cols-container"],
      [RowContainerName.RIGHT, "ag-pinned-right-cols-container"],
      [RowContainerName.FULL_WIDTH, "ag-full-width-container"],
      [RowContainerName.TOP_CENTER, "ag-floating-top-container"],
      [RowContainerName.TOP_LEFT, "ag-pinned-left-floating-top"],
      [RowContainerName.TOP_RIGHT, "ag-pinned-right-floating-top"],
      [RowContainerName.TOP_FULL_WIDTH, "ag-floating-top-full-width-container"],
      [RowContainerName.STICKY_TOP_CENTER, "ag-sticky-top-container"],
      [RowContainerName.STICKY_TOP_LEFT, "ag-pinned-left-sticky-top"],
      [RowContainerName.STICKY_TOP_RIGHT, "ag-pinned-right-sticky-top"],
      [RowContainerName.STICKY_TOP_FULL_WIDTH, "ag-sticky-top-full-width-container"],
      [RowContainerName.BOTTOM_CENTER, "ag-floating-bottom-container"],
      [RowContainerName.BOTTOM_LEFT, "ag-pinned-left-floating-bottom"],
      [RowContainerName.BOTTOM_RIGHT, "ag-pinned-right-floating-bottom"],
      [RowContainerName.BOTTOM_FULL_WIDTH, "ag-floating-bottom-full-width-container"]
    ]);
    ViewportCssClasses = convertToMap([
      [RowContainerName.CENTER, "ag-center-cols-viewport"],
      [RowContainerName.TOP_CENTER, "ag-floating-top-viewport"],
      [RowContainerName.STICKY_TOP_CENTER, "ag-sticky-top-viewport"],
      [RowContainerName.BOTTOM_CENTER, "ag-floating-bottom-viewport"]
    ]);
    RowContainerCtrl = /** @class */
    function(_super) {
      __extends$1O(RowContainerCtrl2, _super);
      function RowContainerCtrl2(name) {
        var _this = _super.call(this) || this;
        _this.visible = true;
        _this.EMPTY_CTRLS = [];
        _this.name = name;
        _this.isFullWithContainer = _this.name === RowContainerName.TOP_FULL_WIDTH || _this.name === RowContainerName.STICKY_TOP_FULL_WIDTH || _this.name === RowContainerName.BOTTOM_FULL_WIDTH || _this.name === RowContainerName.FULL_WIDTH;
        return _this;
      }
      RowContainerCtrl2.getRowContainerCssClasses = function(name) {
        var containerClass = ContainerCssClasses.get(name);
        var viewportClass = ViewportCssClasses.get(name);
        return { container: containerClass, viewport: viewportClass };
      };
      RowContainerCtrl2.getPinned = function(name) {
        switch (name) {
          case RowContainerName.BOTTOM_LEFT:
          case RowContainerName.TOP_LEFT:
          case RowContainerName.STICKY_TOP_LEFT:
          case RowContainerName.LEFT:
            return "left";
          case RowContainerName.BOTTOM_RIGHT:
          case RowContainerName.TOP_RIGHT:
          case RowContainerName.STICKY_TOP_RIGHT:
          case RowContainerName.RIGHT:
            return "right";
          default:
            return null;
        }
      };
      RowContainerCtrl2.prototype.postConstruct = function() {
        var _this = this;
        this.enableRtl = this.gridOptionsService.is("enableRtl");
        this.embedFullWidthRows = this.gridOptionsService.is("embedFullWidthRows");
        this.forContainers([RowContainerName.CENTER], function() {
          return _this.viewportSizeFeature = _this.createManagedBean(new ViewportSizeFeature(_this));
        });
      };
      RowContainerCtrl2.prototype.registerWithCtrlsService = function() {
        switch (this.name) {
          case RowContainerName.CENTER:
            this.ctrlsService.registerCenterRowContainerCtrl(this);
            break;
          case RowContainerName.LEFT:
            this.ctrlsService.registerLeftRowContainerCtrl(this);
            break;
          case RowContainerName.RIGHT:
            this.ctrlsService.registerRightRowContainerCtrl(this);
            break;
          case RowContainerName.TOP_CENTER:
            this.ctrlsService.registerTopCenterRowContainerCtrl(this);
            break;
          case RowContainerName.TOP_LEFT:
            this.ctrlsService.registerTopLeftRowContainerCon(this);
            break;
          case RowContainerName.TOP_RIGHT:
            this.ctrlsService.registerTopRightRowContainerCtrl(this);
            break;
          case RowContainerName.STICKY_TOP_CENTER:
            this.ctrlsService.registerStickyTopCenterRowContainerCtrl(this);
            break;
          case RowContainerName.STICKY_TOP_LEFT:
            this.ctrlsService.registerStickyTopLeftRowContainerCon(this);
            break;
          case RowContainerName.STICKY_TOP_RIGHT:
            this.ctrlsService.registerStickyTopRightRowContainerCtrl(this);
            break;
          case RowContainerName.BOTTOM_CENTER:
            this.ctrlsService.registerBottomCenterRowContainerCtrl(this);
            break;
          case RowContainerName.BOTTOM_LEFT:
            this.ctrlsService.registerBottomLeftRowContainerCtrl(this);
            break;
          case RowContainerName.BOTTOM_RIGHT:
            this.ctrlsService.registerBottomRightRowContainerCtrl(this);
            break;
        }
      };
      RowContainerCtrl2.prototype.forContainers = function(names, callback) {
        if (names.indexOf(this.name) >= 0) {
          callback();
        }
      };
      RowContainerCtrl2.prototype.getContainerElement = function() {
        return this.eContainer;
      };
      RowContainerCtrl2.prototype.getViewportSizeFeature = function() {
        return this.viewportSizeFeature;
      };
      RowContainerCtrl2.prototype.setComp = function(view, eContainer, eViewport) {
        var _this = this;
        this.comp = view;
        this.eContainer = eContainer;
        this.eViewport = eViewport;
        this.createManagedBean(new RowContainerEventsFeature(this.eContainer));
        this.addPreventScrollWhileDragging();
        this.listenOnDomOrder();
        this.stopHScrollOnPinnedRows();
        var allTopNoFW = [RowContainerName.TOP_CENTER, RowContainerName.TOP_LEFT, RowContainerName.TOP_RIGHT];
        var allStickyTopNoFW = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT];
        var allBottomNoFW = [RowContainerName.BOTTOM_CENTER, RowContainerName.BOTTOM_LEFT, RowContainerName.BOTTOM_RIGHT];
        var allMiddleNoFW = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT];
        var allNoFW = __spreadArray$g(__spreadArray$g(__spreadArray$g(__spreadArray$g([], __read$j(allTopNoFW)), __read$j(allBottomNoFW)), __read$j(allMiddleNoFW)), __read$j(allStickyTopNoFW));
        var allMiddle = [RowContainerName.CENTER, RowContainerName.LEFT, RowContainerName.RIGHT, RowContainerName.FULL_WIDTH];
        var allCenter = [RowContainerName.CENTER, RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER];
        var allLeft = [RowContainerName.LEFT, RowContainerName.BOTTOM_LEFT, RowContainerName.TOP_LEFT, RowContainerName.STICKY_TOP_LEFT];
        var allRight = [RowContainerName.RIGHT, RowContainerName.BOTTOM_RIGHT, RowContainerName.TOP_RIGHT, RowContainerName.STICKY_TOP_RIGHT];
        this.forContainers(allLeft, function() {
          _this.pinnedWidthFeature = _this.createManagedBean(new SetPinnedLeftWidthFeature(_this.eContainer));
          _this.addManagedListener(_this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, function() {
            return _this.onPinnedWidthChanged();
          });
        });
        this.forContainers(allRight, function() {
          _this.pinnedWidthFeature = _this.createManagedBean(new SetPinnedRightWidthFeature(_this.eContainer));
          _this.addManagedListener(_this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, function() {
            return _this.onPinnedWidthChanged();
          });
        });
        this.forContainers(allMiddle, function() {
          return _this.createManagedBean(new SetHeightFeature(_this.eContainer, _this.name === RowContainerName.CENTER ? eViewport : void 0));
        });
        this.forContainers(allNoFW, function() {
          return _this.createManagedBean(new DragListenerFeature(_this.eContainer));
        });
        this.forContainers(allCenter, function() {
          return _this.createManagedBean(new CenterWidthFeature(function(width) {
            return _this.comp.setContainerWidth(width + "px");
          }));
        });
        if (isInvisibleScrollbar()) {
          this.forContainers([RowContainerName.CENTER], function() {
            var pinnedWidthChangedEvent = _this.enableRtl ? Events.EVENT_LEFT_PINNED_WIDTH_CHANGED : Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED;
            _this.addManagedListener(_this.eventService, pinnedWidthChangedEvent, function() {
              return _this.refreshPaddingForFakeScrollbar();
            });
          });
          this.refreshPaddingForFakeScrollbar();
        }
        this.addListeners();
        this.registerWithCtrlsService();
      };
      RowContainerCtrl2.prototype.refreshPaddingForFakeScrollbar = function() {
        var _a = this, enableRtl = _a.enableRtl, columnModel = _a.columnModel, eContainer = _a.eContainer;
        var sideToCheck = enableRtl ? RowContainerName.LEFT : RowContainerName.RIGHT;
        this.forContainers([RowContainerName.CENTER, sideToCheck], function() {
          var pinnedWidth = columnModel.getContainerWidth(sideToCheck);
          var marginSide = enableRtl ? "marginLeft" : "marginRight";
          eContainer.style[marginSide] = pinnedWidth ? "16px" : "0px";
        });
      };
      RowContainerCtrl2.prototype.addListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, function() {
          return _this.onDisplayedColumnsChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
          return _this.onDisplayedColumnsWidthChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, function(params) {
          return _this.onDisplayedRowsChanged(params.afterScroll);
        });
        this.onDisplayedColumnsChanged();
        this.onDisplayedColumnsWidthChanged();
        this.onDisplayedRowsChanged();
      };
      RowContainerCtrl2.prototype.listenOnDomOrder = function() {
        var _this = this;
        var allStickyContainers = [RowContainerName.STICKY_TOP_CENTER, RowContainerName.STICKY_TOP_LEFT, RowContainerName.STICKY_TOP_RIGHT, RowContainerName.STICKY_TOP_FULL_WIDTH];
        var isStickContainer = allStickyContainers.indexOf(this.name) >= 0;
        if (isStickContainer) {
          this.comp.setDomOrder(true);
          return;
        }
        var listener = function() {
          var isEnsureDomOrder = _this.gridOptionsService.is("ensureDomOrder");
          var isPrintLayout = _this.gridOptionsService.isDomLayout("print");
          _this.comp.setDomOrder(isEnsureDomOrder || isPrintLayout);
        };
        this.addManagedPropertyListener("domLayout", listener);
        listener();
      };
      RowContainerCtrl2.prototype.stopHScrollOnPinnedRows = function() {
        var _this = this;
        this.forContainers([RowContainerName.TOP_CENTER, RowContainerName.STICKY_TOP_CENTER, RowContainerName.BOTTOM_CENTER], function() {
          var resetScrollLeft = function() {
            return _this.eViewport.scrollLeft = 0;
          };
          _this.addManagedListener(_this.eViewport, "scroll", resetScrollLeft);
        });
      };
      RowContainerCtrl2.prototype.onDisplayedColumnsChanged = function() {
        var _this = this;
        this.forContainers([RowContainerName.CENTER], function() {
          return _this.onHorizontalViewportChanged();
        });
      };
      RowContainerCtrl2.prototype.onDisplayedColumnsWidthChanged = function() {
        var _this = this;
        this.forContainers([RowContainerName.CENTER], function() {
          return _this.onHorizontalViewportChanged();
        });
      };
      RowContainerCtrl2.prototype.addPreventScrollWhileDragging = function() {
        var _this = this;
        var preventScroll = function(e) {
          if (_this.dragService.isDragging()) {
            if (e.cancelable) {
              e.preventDefault();
            }
          }
        };
        this.eContainer.addEventListener("touchmove", preventScroll, { passive: false });
        this.addDestroyFunc(function() {
          return _this.eContainer.removeEventListener("touchmove", preventScroll);
        });
      };
      RowContainerCtrl2.prototype.onHorizontalViewportChanged = function(afterScroll) {
        if (afterScroll === void 0) {
          afterScroll = false;
        }
        var scrollWidth = this.getCenterWidth();
        var scrollPosition = this.getCenterViewportScrollLeft();
        this.columnModel.setViewportPosition(scrollWidth, scrollPosition, afterScroll);
      };
      RowContainerCtrl2.prototype.getCenterWidth = function() {
        return getInnerWidth(this.eViewport);
      };
      RowContainerCtrl2.prototype.getCenterViewportScrollLeft = function() {
        return getScrollLeft(this.eViewport, this.enableRtl);
      };
      RowContainerCtrl2.prototype.registerViewportResizeListener = function(listener) {
        var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eViewport, listener);
        this.addDestroyFunc(function() {
          return unsubscribeFromResize();
        });
      };
      RowContainerCtrl2.prototype.isViewportVisible = function() {
        return isVisible(this.eViewport);
      };
      RowContainerCtrl2.prototype.getViewportScrollLeft = function() {
        return getScrollLeft(this.eViewport, this.enableRtl);
      };
      RowContainerCtrl2.prototype.isHorizontalScrollShowing = function() {
        var isAlwaysShowHorizontalScroll = this.gridOptionsService.is("alwaysShowHorizontalScroll");
        return isAlwaysShowHorizontalScroll || isHorizontalScrollShowing(this.eViewport);
      };
      RowContainerCtrl2.prototype.getViewportElement = function() {
        return this.eViewport;
      };
      RowContainerCtrl2.prototype.setContainerTranslateX = function(amount) {
        this.eContainer.style.transform = "translateX(" + amount + "px)";
      };
      RowContainerCtrl2.prototype.getHScrollPosition = function() {
        var res = {
          left: this.eViewport.scrollLeft,
          right: this.eViewport.scrollLeft + this.eViewport.offsetWidth
        };
        return res;
      };
      RowContainerCtrl2.prototype.setCenterViewportScrollLeft = function(value) {
        setScrollLeft(this.eViewport, value, this.enableRtl);
      };
      RowContainerCtrl2.prototype.isContainerVisible = function() {
        var pinned = RowContainerCtrl2.getPinned(this.name);
        return !pinned || !!this.pinnedWidthFeature && this.pinnedWidthFeature.getWidth() > 0;
      };
      RowContainerCtrl2.prototype.onPinnedWidthChanged = function() {
        var visible = this.isContainerVisible();
        if (this.visible != visible) {
          this.visible = visible;
          this.onDisplayedRowsChanged();
        }
        if (isInvisibleScrollbar()) {
          this.refreshPaddingForFakeScrollbar();
        }
      };
      RowContainerCtrl2.prototype.onDisplayedRowsChanged = function(useFlushSync) {
        var _this = this;
        if (useFlushSync === void 0) {
          useFlushSync = false;
        }
        if (this.visible) {
          var printLayout_1 = this.gridOptionsService.isDomLayout("print");
          var doesRowMatch = function(rowCtrl) {
            var fullWidthRow = rowCtrl.isFullWidth();
            var embedFW = _this.embedFullWidthRows || printLayout_1;
            var match = _this.isFullWithContainer ? !embedFW && fullWidthRow : embedFW || !fullWidthRow;
            return match;
          };
          var rowsThisContainer = this.getRowCtrls().filter(doesRowMatch);
          this.comp.setRowCtrls(rowsThisContainer, useFlushSync);
        } else {
          this.comp.setRowCtrls(this.EMPTY_CTRLS, false);
        }
      };
      RowContainerCtrl2.prototype.getRowCtrls = function() {
        switch (this.name) {
          case RowContainerName.TOP_CENTER:
          case RowContainerName.TOP_LEFT:
          case RowContainerName.TOP_RIGHT:
          case RowContainerName.TOP_FULL_WIDTH:
            return this.rowRenderer.getTopRowCtrls();
          case RowContainerName.STICKY_TOP_CENTER:
          case RowContainerName.STICKY_TOP_LEFT:
          case RowContainerName.STICKY_TOP_RIGHT:
          case RowContainerName.STICKY_TOP_FULL_WIDTH:
            return this.rowRenderer.getStickyTopRowCtrls();
          case RowContainerName.BOTTOM_CENTER:
          case RowContainerName.BOTTOM_LEFT:
          case RowContainerName.BOTTOM_RIGHT:
          case RowContainerName.BOTTOM_FULL_WIDTH:
            return this.rowRenderer.getBottomRowCtrls();
          default:
            return this.rowRenderer.getCentreRowCtrls();
        }
      };
      __decorate$1J([
        Autowired("scrollVisibleService")
      ], RowContainerCtrl2.prototype, "scrollVisibleService", void 0);
      __decorate$1J([
        Autowired("dragService")
      ], RowContainerCtrl2.prototype, "dragService", void 0);
      __decorate$1J([
        Autowired("ctrlsService")
      ], RowContainerCtrl2.prototype, "ctrlsService", void 0);
      __decorate$1J([
        Autowired("columnModel")
      ], RowContainerCtrl2.prototype, "columnModel", void 0);
      __decorate$1J([
        Autowired("resizeObserverService")
      ], RowContainerCtrl2.prototype, "resizeObserverService", void 0);
      __decorate$1J([
        Autowired("animationFrameService")
      ], RowContainerCtrl2.prototype, "animationFrameService", void 0);
      __decorate$1J([
        Autowired("rowRenderer")
      ], RowContainerCtrl2.prototype, "rowRenderer", void 0);
      __decorate$1J([
        PostConstruct
      ], RowContainerCtrl2.prototype, "postConstruct", null);
      return RowContainerCtrl2;
    }(BeanStub);
    __extends$1N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GRID_BODY_TEMPLATE = /* html */
    '<div class="ag-root ag-unselectable" role="treegrid">\n        <ag-header-root ref="gridHeader"></ag-header-root>\n        <div class="ag-floating-top" ref="eTop" role="presentation">\n            <ag-row-container ref="topLeftContainer" name="' + RowContainerName.TOP_LEFT + '"></ag-row-container>\n            <ag-row-container ref="topCenterContainer" name="' + RowContainerName.TOP_CENTER + '"></ag-row-container>\n            <ag-row-container ref="topRightContainer" name="' + RowContainerName.TOP_RIGHT + '"></ag-row-container>\n            <ag-row-container ref="topFullWidthContainer" name="' + RowContainerName.TOP_FULL_WIDTH + '"></ag-row-container>\n        </div>\n        <div class="ag-body" ref="eBody" role="presentation">\n            <div class="ag-body-viewport" ref="eBodyViewport" role="presentation">\n                <ag-row-container ref="leftContainer" name="' + RowContainerName.LEFT + '"></ag-row-container>\n                <ag-row-container ref="centerContainer" name="' + RowContainerName.CENTER + '"></ag-row-container>\n                <ag-row-container ref="rightContainer" name="' + RowContainerName.RIGHT + '"></ag-row-container>\n                <ag-row-container ref="fullWidthContainer" name="' + RowContainerName.FULL_WIDTH + '"></ag-row-container>\n            </div>\n            <ag-fake-vertical-scroll></ag-fake-vertical-scroll>\n        </div>\n        <div class="ag-sticky-top" ref="eStickyTop" role="presentation">\n            <ag-row-container ref="stickyTopLeftContainer" name="' + RowContainerName.STICKY_TOP_LEFT + '"></ag-row-container>\n            <ag-row-container ref="stickyTopCenterContainer" name="' + RowContainerName.STICKY_TOP_CENTER + '"></ag-row-container>\n            <ag-row-container ref="stickyTopRightContainer" name="' + RowContainerName.STICKY_TOP_RIGHT + '"></ag-row-container>\n            <ag-row-container ref="stickyTopFullWidthContainer" name="' + RowContainerName.STICKY_TOP_FULL_WIDTH + '"></ag-row-container>\n        </div>\n        <div class="ag-floating-bottom" ref="eBottom" role="presentation">\n            <ag-row-container ref="bottomLeftContainer" name="' + RowContainerName.BOTTOM_LEFT + '"></ag-row-container>\n            <ag-row-container ref="bottomCenterContainer" name="' + RowContainerName.BOTTOM_CENTER + '"></ag-row-container>\n            <ag-row-container ref="bottomRightContainer" name="' + RowContainerName.BOTTOM_RIGHT + '"></ag-row-container>\n            <ag-row-container ref="bottomFullWidthContainer" name="' + RowContainerName.BOTTOM_FULL_WIDTH + '"></ag-row-container>\n        </div>\n        <ag-fake-horizontal-scroll></ag-fake-horizontal-scroll>\n        <ag-overlay-wrapper></ag-overlay-wrapper>\n    </div>';
    GridBodyComp = /** @class */
    function(_super) {
      __extends$1N(GridBodyComp2, _super);
      function GridBodyComp2() {
        return _super.call(this, GRID_BODY_TEMPLATE) || this;
      }
      GridBodyComp2.prototype.init = function() {
        var _this = this;
        var setHeight = function(height, element) {
          var heightString = height + "px";
          element.style.minHeight = heightString;
          element.style.height = heightString;
        };
        var compProxy = {
          setRowAnimationCssOnBodyViewport: function(cssClass, animate) {
            return _this.setRowAnimationCssOnBodyViewport(cssClass, animate);
          },
          setColumnCount: function(count) {
            return setAriaColCount(_this.getGui(), count);
          },
          setRowCount: function(count) {
            return setAriaRowCount(_this.getGui(), count);
          },
          setTopHeight: function(height) {
            return setHeight(height, _this.eTop);
          },
          setBottomHeight: function(height) {
            return setHeight(height, _this.eBottom);
          },
          setTopDisplay: function(display) {
            return _this.eTop.style.display = display;
          },
          setBottomDisplay: function(display) {
            return _this.eBottom.style.display = display;
          },
          setStickyTopHeight: function(height) {
            return _this.eStickyTop.style.height = height;
          },
          setStickyTopTop: function(top) {
            return _this.eStickyTop.style.top = top;
          },
          setStickyTopWidth: function(width) {
            return _this.eStickyTop.style.width = width;
          },
          setColumnMovingCss: function(cssClass, flag) {
            return _this.addOrRemoveCssClass(cssClass, flag);
          },
          updateLayoutClasses: function(cssClass, params) {
            var classLists = [
              _this.eBodyViewport.classList,
              _this.eBody.classList
            ];
            classLists.forEach(function(classList) {
              classList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
              classList.toggle(LayoutCssClasses.NORMAL, params.normal);
              classList.toggle(LayoutCssClasses.PRINT, params.print);
            });
            _this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
            _this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);
            _this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);
          },
          setAlwaysVerticalScrollClass: function(cssClass, on) {
            return _this.eBodyViewport.classList.toggle(CSS_CLASS_FORCE_VERTICAL_SCROLL, on);
          },
          registerBodyViewportResizeListener: function(listener) {
            var unsubscribeFromResize = _this.resizeObserverService.observeResize(_this.eBodyViewport, listener);
            _this.addDestroyFunc(function() {
              return unsubscribeFromResize();
            });
          },
          setPinnedTopBottomOverflowY: function(overflow) {
            return _this.eTop.style.overflowY = _this.eBottom.style.overflowY = overflow;
          },
          setCellSelectableCss: function(cssClass, selectable) {
            [_this.eTop, _this.eBodyViewport, _this.eBottom].forEach(function(ct) {
              return ct.classList.toggle(cssClass, selectable);
            });
          },
          setBodyViewportWidth: function(width) {
            return _this.eBodyViewport.style.width = width;
          }
        };
        this.ctrl = this.createManagedBean(new GridBodyCtrl());
        this.ctrl.setComp(compProxy, this.getGui(), this.eBodyViewport, this.eTop, this.eBottom, this.eStickyTop);
        if (this.rangeService || this.gridOptionsService.get("rowSelection") === "multiple") {
          setAriaMultiSelectable(this.getGui(), true);
        }
      };
      GridBodyComp2.prototype.setRowAnimationCssOnBodyViewport = function(cssClass, animateRows) {
        var bodyViewportClassList = this.eBodyViewport.classList;
        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_ON, animateRows);
        bodyViewportClassList.toggle(RowAnimationCssClasses.ANIMATION_OFF, !animateRows);
      };
      GridBodyComp2.prototype.getFloatingTopBottom = function() {
        return [this.eTop, this.eBottom];
      };
      __decorate$1I([
        Autowired("resizeObserverService")
      ], GridBodyComp2.prototype, "resizeObserverService", void 0);
      __decorate$1I([
        Optional("rangeService")
      ], GridBodyComp2.prototype, "rangeService", void 0);
      __decorate$1I([
        RefSelector("eBodyViewport")
      ], GridBodyComp2.prototype, "eBodyViewport", void 0);
      __decorate$1I([
        RefSelector("eStickyTop")
      ], GridBodyComp2.prototype, "eStickyTop", void 0);
      __decorate$1I([
        RefSelector("eTop")
      ], GridBodyComp2.prototype, "eTop", void 0);
      __decorate$1I([
        RefSelector("eBottom")
      ], GridBodyComp2.prototype, "eBottom", void 0);
      __decorate$1I([
        RefSelector("gridHeader")
      ], GridBodyComp2.prototype, "headerRootComp", void 0);
      __decorate$1I([
        RefSelector("eBody")
      ], GridBodyComp2.prototype, "eBody", void 0);
      __decorate$1I([
        PostConstruct
      ], GridBodyComp2.prototype, "init", null);
      return GridBodyComp2;
    }(Component);
    __extends$1M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ScrollVisibleService = /** @class */
    function(_super) {
      __extends$1M(ScrollVisibleService2, _super);
      function ScrollVisibleService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ScrollVisibleService2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
      };
      ScrollVisibleService2.prototype.onDisplayedColumnsChanged = function() {
        this.update();
      };
      ScrollVisibleService2.prototype.onDisplayedColumnsWidthChanged = function() {
        this.update();
      };
      ScrollVisibleService2.prototype.update = function() {
        this.updateImpl();
        setTimeout(this.updateImpl.bind(this), 500);
      };
      ScrollVisibleService2.prototype.updateImpl = function() {
        var centerRowCtrl = this.ctrlsService.getCenterRowContainerCtrl();
        if (!centerRowCtrl) {
          return;
        }
        var params = {
          horizontalScrollShowing: centerRowCtrl.isHorizontalScrollShowing(),
          verticalScrollShowing: this.isVerticalScrollShowing()
        };
        this.setScrollsVisible(params);
      };
      ScrollVisibleService2.prototype.setScrollsVisible = function(params) {
        var atLeastOneDifferent = this.horizontalScrollShowing !== params.horizontalScrollShowing || this.verticalScrollShowing !== params.verticalScrollShowing;
        if (atLeastOneDifferent) {
          this.horizontalScrollShowing = params.horizontalScrollShowing;
          this.verticalScrollShowing = params.verticalScrollShowing;
          var event_1 = {
            type: Events.EVENT_SCROLL_VISIBILITY_CHANGED
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ScrollVisibleService2.prototype.isHorizontalScrollShowing = function() {
        return this.horizontalScrollShowing;
      };
      ScrollVisibleService2.prototype.isVerticalScrollShowing = function() {
        return this.verticalScrollShowing;
      };
      __decorate$1H([
        Autowired("ctrlsService")
      ], ScrollVisibleService2.prototype, "ctrlsService", void 0);
      __decorate$1H([
        PostConstruct
      ], ScrollVisibleService2.prototype, "postConstruct", null);
      ScrollVisibleService2 = __decorate$1H([
        Bean("scrollVisibleService")
      ], ScrollVisibleService2);
      return ScrollVisibleService2;
    }(BeanStub);
    __extends$1L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    MouseEventService = /** @class */
    function(_super) {
      __extends$1L(MouseEventService2, _super);
      function MouseEventService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
        return _this;
      }
      MouseEventService_1 = MouseEventService2;
      MouseEventService2.prototype.stampTopLevelGridCompWithGridInstance = function(eGridDiv) {
        eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
      };
      MouseEventService2.prototype.getRenderedCellForEvent = function(event) {
        return getCtrlForEventTarget(this.gridOptionsService, event.target, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
      };
      MouseEventService2.prototype.isEventFromThisGrid = function(event) {
        var res = this.isElementInThisGrid(event.target);
        return res;
      };
      MouseEventService2.prototype.isElementInThisGrid = function(element) {
        var pointer = element;
        while (pointer) {
          var instanceId = pointer[MouseEventService_1.GRID_DOM_KEY];
          if (exists(instanceId)) {
            var eventFromThisGrid = instanceId === this.gridInstanceId;
            return eventFromThisGrid;
          }
          pointer = pointer.parentElement;
        }
        return false;
      };
      MouseEventService2.prototype.getCellPositionForEvent = function(event) {
        var cellComp = this.getRenderedCellForEvent(event);
        return cellComp ? cellComp.getCellPosition() : null;
      };
      MouseEventService2.prototype.getNormalisedPosition = function(event) {
        var gridPanelHasScrolls = this.gridOptionsService.isDomLayout("normal");
        var e = event;
        var x;
        var y;
        if (e.clientX != null || e.clientY != null) {
          x = e.clientX;
          y = e.clientY;
        } else {
          x = e.x;
          y = e.y;
        }
        if (gridPanelHasScrolls) {
          var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
          var vRange = gridBodyCon.getScrollFeature().getVScrollPosition();
          var hRange = gridBodyCon.getScrollFeature().getHScrollPosition();
          x += hRange.left;
          y += vRange.top;
        }
        return { x, y };
      };
      var MouseEventService_1;
      MouseEventService2.gridInstanceSequence = new NumberSequence();
      MouseEventService2.GRID_DOM_KEY = "__ag_grid_instance";
      __decorate$1G([
        Autowired("ctrlsService")
      ], MouseEventService2.prototype, "ctrlsService", void 0);
      MouseEventService2 = MouseEventService_1 = __decorate$1G([
        Bean("mouseEventService")
      ], MouseEventService2);
      return MouseEventService2;
    }(BeanStub);
    __extends$1K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$9 = function() {
      __assign$9 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$9.apply(this, arguments);
    };
    __decorate$1F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    NavigationService = /** @class */
    function(_super) {
      __extends$1K(NavigationService2, _super);
      function NavigationService2() {
        var _this = _super.call(this) || this;
        _this.onPageDown = throttle(_this.onPageDown, 100);
        _this.onPageUp = throttle(_this.onPageUp, 100);
        return _this;
      }
      NavigationService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.gridBodyCon = p.gridBodyCtrl;
        });
      };
      NavigationService2.prototype.handlePageScrollingKey = function(event, fromFullWidth) {
        if (fromFullWidth === void 0) {
          fromFullWidth = false;
        }
        var key = event.key;
        var alt = event.altKey;
        var ctrl = event.ctrlKey || event.metaKey;
        var rangeServiceShouldHandleShift = !!this.rangeService && event.shiftKey;
        var currentCell = this.mouseEventService.getCellPositionForEvent(event);
        var processed = false;
        switch (key) {
          case KeyCode.PAGE_HOME:
          case KeyCode.PAGE_END:
            if (!ctrl && !alt) {
              this.onHomeOrEndKey(key);
              processed = true;
            }
            break;
          case KeyCode.LEFT:
          case KeyCode.RIGHT:
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (!currentCell) {
              return false;
            }
            if (ctrl && !alt && !rangeServiceShouldHandleShift) {
              this.onCtrlUpDownLeftRight(key, currentCell);
              processed = true;
            }
            break;
          case KeyCode.PAGE_DOWN:
          case KeyCode.PAGE_UP:
            if (!ctrl && !alt) {
              processed = this.handlePageUpDown(key, currentCell, fromFullWidth);
            }
            break;
        }
        if (processed) {
          event.preventDefault();
        }
        return processed;
      };
      NavigationService2.prototype.handlePageUpDown = function(key, currentCell, fromFullWidth) {
        if (fromFullWidth) {
          currentCell = this.focusService.getFocusedCell();
        }
        if (!currentCell) {
          return false;
        }
        if (key === KeyCode.PAGE_UP) {
          this.onPageUp(currentCell);
        } else {
          this.onPageDown(currentCell);
        }
        return true;
      };
      NavigationService2.prototype.navigateTo = function(navigateParams) {
        var scrollIndex = navigateParams.scrollIndex, scrollType = navigateParams.scrollType, scrollColumn = navigateParams.scrollColumn, focusIndex = navigateParams.focusIndex, focusColumn = navigateParams.focusColumn;
        if (exists(scrollColumn) && !scrollColumn.isPinned()) {
          this.gridBodyCon.getScrollFeature().ensureColumnVisible(scrollColumn);
        }
        if (exists(scrollIndex)) {
          this.gridBodyCon.getScrollFeature().ensureIndexVisible(scrollIndex, scrollType);
        }
        if (!navigateParams.isAsync) {
          this.gridBodyCon.getScrollFeature().ensureIndexVisible(focusIndex);
        }
        this.focusService.setFocusedCell({ rowIndex: focusIndex, column: focusColumn, rowPinned: null, forceBrowserFocus: true });
        if (this.rangeService) {
          var cellPosition = { rowIndex: focusIndex, rowPinned: null, column: focusColumn };
          this.rangeService.setRangeToCell(cellPosition);
        }
      };
      NavigationService2.prototype.onPageDown = function(gridCell) {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
        var pixelsInOnePage = this.getViewportHeight();
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentPageBottomPixel = scrollPosition.top + pixelsInOnePage;
        var currentPageBottomRow = this.paginationProxy.getRowIndexAtPixel(currentPageBottomPixel + pagingPixelOffset);
        if (this.columnModel.isAutoRowHeightActive()) {
          this.navigateToNextPageWithAutoHeight(gridCell, currentPageBottomRow);
        } else {
          this.navigateToNextPage(gridCell, currentPageBottomRow);
        }
      };
      NavigationService2.prototype.onPageUp = function(gridCell) {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentPageTopPixel = scrollPosition.top;
        var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopPixel + pagingPixelOffset);
        if (this.columnModel.isAutoRowHeightActive()) {
          this.navigateToNextPageWithAutoHeight(gridCell, currentPageTopRow, true);
        } else {
          this.navigateToNextPage(gridCell, currentPageTopRow, true);
        }
      };
      NavigationService2.prototype.navigateToNextPage = function(gridCell, scrollIndex, up) {
        if (up === void 0) {
          up = false;
        }
        var pixelsInOnePage = this.getViewportHeight();
        var firstRow = this.paginationProxy.getPageFirstRow();
        var lastRow = this.paginationProxy.getPageLastRow();
        var pagingPixelOffset = this.paginationProxy.getPixelOffset();
        var currentRowNode = this.paginationProxy.getRow(gridCell.rowIndex);
        var rowPixelDiff = up ? (currentRowNode === null || currentRowNode === void 0 ? void 0 : currentRowNode.rowHeight) - pixelsInOnePage - pagingPixelOffset : pixelsInOnePage - pagingPixelOffset;
        var nextCellPixel = (currentRowNode === null || currentRowNode === void 0 ? void 0 : currentRowNode.rowTop) + rowPixelDiff;
        var focusIndex = this.paginationProxy.getRowIndexAtPixel(nextCellPixel + pagingPixelOffset);
        if (focusIndex === gridCell.rowIndex) {
          var diff = up ? -1 : 1;
          scrollIndex = focusIndex = gridCell.rowIndex + diff;
        }
        var scrollType;
        if (up) {
          scrollType = "bottom";
          if (focusIndex < firstRow) {
            focusIndex = firstRow;
          }
          if (scrollIndex < firstRow) {
            scrollIndex = firstRow;
          }
        } else {
          scrollType = "top";
          if (focusIndex > lastRow) {
            focusIndex = lastRow;
          }
          if (scrollIndex > lastRow) {
            scrollIndex = lastRow;
          }
        }
        if (this.isRowTallerThanView(focusIndex)) {
          scrollIndex = focusIndex;
          scrollType = "top";
        }
        this.navigateTo({
          scrollIndex,
          scrollType,
          scrollColumn: null,
          focusIndex,
          focusColumn: gridCell.column
        });
      };
      NavigationService2.prototype.navigateToNextPageWithAutoHeight = function(gridCell, scrollIndex, up) {
        var _this = this;
        if (up === void 0) {
          up = false;
        }
        this.navigateTo({
          scrollIndex,
          scrollType: up ? "bottom" : "top",
          scrollColumn: null,
          focusIndex: scrollIndex,
          focusColumn: gridCell.column
        });
        setTimeout(function() {
          var focusIndex = _this.getNextFocusIndexForAutoHeight(gridCell, up);
          _this.navigateTo({
            scrollIndex,
            scrollType: up ? "bottom" : "top",
            scrollColumn: null,
            focusIndex,
            focusColumn: gridCell.column,
            isAsync: true
          });
        }, 50);
      };
      NavigationService2.prototype.getNextFocusIndexForAutoHeight = function(gridCell, up) {
        var _a;
        if (up === void 0) {
          up = false;
        }
        var step = up ? -1 : 1;
        var pixelsInOnePage = this.getViewportHeight();
        var lastRowIndex = this.paginationProxy.getPageLastRow();
        var pixelSum = 0;
        var currentIndex = gridCell.rowIndex;
        while (currentIndex >= 0 && currentIndex <= lastRowIndex) {
          var currentCell = this.paginationProxy.getRow(currentIndex);
          if (currentCell) {
            var currentCellHeight = (_a = currentCell.rowHeight) !== null && _a !== void 0 ? _a : 0;
            if (pixelSum + currentCellHeight > pixelsInOnePage) {
              break;
            }
            pixelSum += currentCellHeight;
          }
          currentIndex += step;
        }
        return Math.max(0, Math.min(currentIndex, lastRowIndex));
      };
      NavigationService2.prototype.getViewportHeight = function() {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var scrollPosition = gridBodyCon.getScrollFeature().getVScrollPosition();
        var scrollbarWidth = this.gridOptionsService.getScrollbarWidth();
        var pixelsInOnePage = scrollPosition.bottom - scrollPosition.top;
        if (this.ctrlsService.getCenterRowContainerCtrl().isHorizontalScrollShowing()) {
          pixelsInOnePage -= scrollbarWidth;
        }
        return pixelsInOnePage;
      };
      NavigationService2.prototype.isRowTallerThanView = function(rowIndex) {
        var rowNode = this.paginationProxy.getRow(rowIndex);
        if (!rowNode) {
          return false;
        }
        var rowHeight = rowNode.rowHeight;
        if (typeof rowHeight !== "number") {
          return false;
        }
        return rowHeight > this.getViewportHeight();
      };
      NavigationService2.prototype.onCtrlUpDownLeftRight = function(key, gridCell) {
        var cellToFocus = this.cellNavigationService.getNextCellToFocus(key, gridCell, true);
        var rowIndex = cellToFocus.rowIndex, column = cellToFocus.column;
        this.navigateTo({
          scrollIndex: rowIndex,
          scrollType: null,
          scrollColumn: column,
          focusIndex: rowIndex,
          focusColumn: column
        });
      };
      NavigationService2.prototype.onHomeOrEndKey = function(key) {
        var homeKey = key === KeyCode.PAGE_HOME;
        var allColumns = this.columnModel.getAllDisplayedColumns();
        var columnToSelect = homeKey ? allColumns[0] : last(allColumns);
        var scrollIndex = homeKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
        this.navigateTo({
          scrollIndex,
          scrollType: null,
          scrollColumn: columnToSelect,
          focusIndex: scrollIndex,
          focusColumn: columnToSelect
        });
      };
      NavigationService2.prototype.onTabKeyDown = function(previous, keyboardEvent) {
        var backwards = keyboardEvent.shiftKey;
        var movedToNextCell = this.tabToNextCellCommon(previous, backwards, keyboardEvent);
        if (movedToNextCell) {
          keyboardEvent.preventDefault();
          return;
        }
        if (backwards) {
          var _a = previous.getRowPosition(), rowIndex = _a.rowIndex, rowPinned = _a.rowPinned;
          var firstRow = rowPinned ? rowIndex === 0 : rowIndex === this.paginationProxy.getPageFirstRow();
          if (firstRow) {
            if (this.gridOptionsService.getNum("headerHeight") === 0) {
              this.focusService.focusNextGridCoreContainer(true, true);
            } else {
              keyboardEvent.preventDefault();
              this.focusService.focusPreviousFromFirstCell(keyboardEvent);
            }
          }
        } else {
          if (previous instanceof CellCtrl) {
            previous.focusCell(true);
          }
          if (this.focusService.focusNextGridCoreContainer(backwards)) {
            keyboardEvent.preventDefault();
          }
        }
      };
      NavigationService2.prototype.tabToNextCell = function(backwards, event) {
        var focusedCell = this.focusService.getFocusedCell();
        if (!focusedCell) {
          return false;
        }
        var cellOrRow = this.getCellByPosition(focusedCell);
        if (!cellOrRow) {
          cellOrRow = this.rowRenderer.getRowByPosition(focusedCell);
          if (!cellOrRow || !cellOrRow.isFullWidth()) {
            return false;
          }
        }
        return this.tabToNextCellCommon(cellOrRow, backwards, event);
      };
      NavigationService2.prototype.tabToNextCellCommon = function(previous, backwards, event) {
        var editing = previous.isEditing();
        if (!editing && previous instanceof CellCtrl) {
          var cell = previous;
          var row = cell.getRowCtrl();
          if (row) {
            editing = row.isEditing();
          }
        }
        var res;
        if (editing) {
          if (this.gridOptionsService.get("editType") === "fullRow") {
            res = this.moveToNextEditingRow(previous, backwards, event);
          } else {
            res = this.moveToNextEditingCell(previous, backwards, event);
          }
        } else {
          res = this.moveToNextCellNotEditing(previous, backwards);
        }
        return res || !!this.focusService.getFocusedHeader();
      };
      NavigationService2.prototype.moveToNextEditingCell = function(previousCell, backwards, event) {
        if (event === void 0) {
          event = null;
        }
        var previousPos = previousCell.getCellPosition();
        previousCell.getGui().focus();
        previousCell.stopEditing();
        var nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);
        if (nextCell == null) {
          return false;
        }
        nextCell.startEditing(null, true, event);
        nextCell.focusCell(false);
        return true;
      };
      NavigationService2.prototype.moveToNextEditingRow = function(previousCell, backwards, event) {
        if (event === void 0) {
          event = null;
        }
        var previousPos = previousCell.getCellPosition();
        var nextCell = this.findNextCellToFocusOn(previousPos, backwards, true);
        if (nextCell == null) {
          return false;
        }
        var nextPos = nextCell.getCellPosition();
        var previousEditable = this.isCellEditable(previousPos);
        var nextEditable = this.isCellEditable(nextPos);
        var rowsMatch = nextPos && previousPos.rowIndex === nextPos.rowIndex && previousPos.rowPinned === nextPos.rowPinned;
        if (previousEditable) {
          previousCell.setFocusOutOnEditor();
        }
        if (!rowsMatch) {
          var pRow = previousCell.getRowCtrl();
          pRow.stopEditing();
          var nRow = nextCell.getRowCtrl();
          nRow.startRowEditing(void 0, void 0, event);
        }
        if (nextEditable) {
          nextCell.setFocusInOnEditor();
          nextCell.focusCell();
        } else {
          nextCell.focusCell(true);
        }
        return true;
      };
      NavigationService2.prototype.moveToNextCellNotEditing = function(previousCell, backwards) {
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var cellPos;
        if (previousCell instanceof RowCtrl) {
          cellPos = __assign$9(__assign$9({}, previousCell.getRowPosition()), { column: backwards ? displayedColumns[0] : last(displayedColumns) });
        } else {
          cellPos = previousCell.getCellPosition();
        }
        var nextCell = this.findNextCellToFocusOn(cellPos, backwards, false);
        if (nextCell instanceof CellCtrl) {
          nextCell.focusCell(true);
        } else if (nextCell) {
          return this.tryToFocusFullWidthRow(nextCell.getRowPosition(), backwards);
        }
        return exists(nextCell);
      };
      NavigationService2.prototype.findNextCellToFocusOn = function(previousPosition, backwards, startEditing) {
        var nextPosition = previousPosition;
        while (true) {
          if (previousPosition !== nextPosition) {
            previousPosition = nextPosition;
          }
          if (!backwards) {
            nextPosition = this.getLastCellOfColSpan(nextPosition);
          }
          nextPosition = this.cellNavigationService.getNextTabbedCell(nextPosition, backwards);
          var userFunc = this.gridOptionsService.getCallback("tabToNextCell");
          if (exists(userFunc)) {
            var params = {
              backwards,
              editing: startEditing,
              previousCellPosition: previousPosition,
              nextCellPosition: nextPosition ? nextPosition : null
            };
            var userCell = userFunc(params);
            if (exists(userCell)) {
              if (userCell.floating) {
                doOnce(function() {
                  console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                }, "no floating in userCell");
                userCell.rowPinned = userCell.floating;
              }
              nextPosition = {
                rowIndex: userCell.rowIndex,
                column: userCell.column,
                rowPinned: userCell.rowPinned
              };
            } else {
              nextPosition = null;
            }
          }
          if (!nextPosition) {
            return null;
          }
          if (nextPosition.rowIndex < 0) {
            var headerLen = this.headerNavigationService.getHeaderRowCount();
            this.focusService.focusHeaderPosition({
              headerPosition: {
                headerRowIndex: headerLen + nextPosition.rowIndex,
                column: nextPosition.column
              },
              fromCell: true
            });
            return null;
          }
          var fullRowEdit = this.gridOptionsService.get("editType") === "fullRow";
          if (startEditing && !fullRowEdit) {
            var cellIsEditable = this.isCellEditable(nextPosition);
            if (!cellIsEditable) {
              continue;
            }
          }
          this.ensureCellVisible(nextPosition);
          var nextCell = this.getCellByPosition(nextPosition);
          if (!nextCell) {
            var row = this.rowRenderer.getRowByPosition(nextPosition);
            if (!row || !row.isFullWidth() || startEditing) {
              continue;
            }
            return row;
          }
          if (nextCell.isSuppressNavigable()) {
            continue;
          }
          if (this.rangeService) {
            this.rangeService.setRangeToCell(nextPosition);
          }
          return nextCell;
        }
      };
      NavigationService2.prototype.isCellEditable = function(cell) {
        var rowNode = this.lookupRowNodeForCell(cell);
        if (rowNode) {
          return cell.column.isCellEditable(rowNode);
        }
        return false;
      };
      NavigationService2.prototype.getCellByPosition = function(cellPosition) {
        var rowCtrl = this.rowRenderer.getRowByPosition(cellPosition);
        if (!rowCtrl) {
          return null;
        }
        return rowCtrl.getCellCtrl(cellPosition.column);
      };
      NavigationService2.prototype.lookupRowNodeForCell = function(cell) {
        if (cell.rowPinned === "top") {
          return this.pinnedRowModel.getPinnedTopRow(cell.rowIndex);
        }
        if (cell.rowPinned === "bottom") {
          return this.pinnedRowModel.getPinnedBottomRow(cell.rowIndex);
        }
        return this.paginationProxy.getRow(cell.rowIndex);
      };
      NavigationService2.prototype.navigateToNextCell = function(event, key, currentCell, allowUserOverride) {
        var nextCell = currentCell;
        var hitEdgeOfGrid = false;
        while (nextCell && (nextCell === currentCell || !this.isValidNavigateCell(nextCell))) {
          if (this.gridOptionsService.is("enableRtl")) {
            if (key === KeyCode.LEFT) {
              nextCell = this.getLastCellOfColSpan(nextCell);
            }
          } else if (key === KeyCode.RIGHT) {
            nextCell = this.getLastCellOfColSpan(nextCell);
          }
          nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
          hitEdgeOfGrid = missing(nextCell);
        }
        if (hitEdgeOfGrid && event && event.key === KeyCode.UP) {
          nextCell = {
            rowIndex: -1,
            rowPinned: null,
            column: currentCell.column
          };
        }
        if (allowUserOverride) {
          var userFunc = this.gridOptionsService.getCallback("navigateToNextCell");
          if (exists(userFunc)) {
            var params = {
              key,
              previousCellPosition: currentCell,
              nextCellPosition: nextCell ? nextCell : null,
              event
            };
            var userCell = userFunc(params);
            if (exists(userCell)) {
              if (userCell.floating) {
                doOnce(function() {
                  console.warn("AG Grid: tabToNextCellFunc return type should have attributes: rowIndex, rowPinned, column. However you had 'floating', maybe you meant 'rowPinned'?");
                }, "no floating in userCell");
                userCell.rowPinned = userCell.floating;
              }
              nextCell = {
                rowPinned: userCell.rowPinned,
                rowIndex: userCell.rowIndex,
                column: userCell.column
              };
            } else {
              nextCell = null;
            }
          }
        }
        if (!nextCell) {
          return;
        }
        if (nextCell.rowIndex < 0) {
          var headerLen = this.headerNavigationService.getHeaderRowCount();
          this.focusService.focusHeaderPosition({
            headerPosition: { headerRowIndex: headerLen + nextCell.rowIndex, column: currentCell.column },
            event: event || void 0,
            fromCell: true
          });
          return;
        }
        var normalisedPosition = this.getNormalisedPosition(nextCell);
        if (normalisedPosition) {
          this.focusPosition(normalisedPosition);
        } else {
          this.tryToFocusFullWidthRow(nextCell);
        }
      };
      NavigationService2.prototype.getNormalisedPosition = function(cellPosition) {
        this.ensureCellVisible(cellPosition);
        var cellCtrl = this.getCellByPosition(cellPosition);
        if (!cellCtrl) {
          return null;
        }
        cellPosition = cellCtrl.getCellPosition();
        this.ensureCellVisible(cellPosition);
        return cellPosition;
      };
      NavigationService2.prototype.tryToFocusFullWidthRow = function(position, backwards) {
        if (backwards === void 0) {
          backwards = false;
        }
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var rowComp = this.rowRenderer.getRowByPosition(position);
        if (!rowComp || !rowComp.isFullWidth()) {
          return false;
        }
        var currentCellFocused = this.focusService.getFocusedCell();
        var cellPosition = {
          rowIndex: position.rowIndex,
          rowPinned: position.rowPinned,
          column: position.column || (backwards ? last(displayedColumns) : displayedColumns[0])
        };
        this.focusPosition(cellPosition);
        var fromBelow = currentCellFocused != null ? this.rowPositionUtils.before(cellPosition, currentCellFocused) : false;
        var focusEvent = {
          type: Events.EVENT_FULL_WIDTH_ROW_FOCUSED,
          rowIndex: cellPosition.rowIndex,
          rowPinned: cellPosition.rowPinned,
          column: cellPosition.column,
          isFullWidthCell: true,
          floating: cellPosition.rowPinned,
          fromBelow
        };
        this.eventService.dispatchEvent(focusEvent);
        return true;
      };
      NavigationService2.prototype.focusPosition = function(cellPosition) {
        this.focusService.setFocusedCell({
          rowIndex: cellPosition.rowIndex,
          column: cellPosition.column,
          rowPinned: cellPosition.rowPinned,
          forceBrowserFocus: true
        });
        if (this.rangeService) {
          this.rangeService.setRangeToCell(cellPosition);
        }
      };
      NavigationService2.prototype.isValidNavigateCell = function(cell) {
        var rowNode = this.rowPositionUtils.getRowNode(cell);
        return !!rowNode;
      };
      NavigationService2.prototype.getLastCellOfColSpan = function(cell) {
        var cellCtrl = this.getCellByPosition(cell);
        if (!cellCtrl) {
          return cell;
        }
        var colSpanningList = cellCtrl.getColSpanningList();
        if (colSpanningList.length === 1) {
          return cell;
        }
        return {
          rowIndex: cell.rowIndex,
          column: last(colSpanningList),
          rowPinned: cell.rowPinned
        };
      };
      NavigationService2.prototype.ensureCellVisible = function(gridCell) {
        var isGroupStickyEnabled = this.gridOptionsService.isGroupRowsSticky();
        var rowNode = this.rowModel.getRow(gridCell.rowIndex);
        var skipScrollToRow = isGroupStickyEnabled && (rowNode === null || rowNode === void 0 ? void 0 : rowNode.sticky);
        if (!skipScrollToRow && missing(gridCell.rowPinned)) {
          this.gridBodyCon.getScrollFeature().ensureIndexVisible(gridCell.rowIndex);
        }
        if (!gridCell.column.isPinned()) {
          this.gridBodyCon.getScrollFeature().ensureColumnVisible(gridCell.column);
        }
      };
      __decorate$1F([
        Autowired("mouseEventService")
      ], NavigationService2.prototype, "mouseEventService", void 0);
      __decorate$1F([
        Autowired("paginationProxy")
      ], NavigationService2.prototype, "paginationProxy", void 0);
      __decorate$1F([
        Autowired("focusService")
      ], NavigationService2.prototype, "focusService", void 0);
      __decorate$1F([
        Optional("rangeService")
      ], NavigationService2.prototype, "rangeService", void 0);
      __decorate$1F([
        Autowired("columnModel")
      ], NavigationService2.prototype, "columnModel", void 0);
      __decorate$1F([
        Autowired("rowModel")
      ], NavigationService2.prototype, "rowModel", void 0);
      __decorate$1F([
        Autowired("ctrlsService")
      ], NavigationService2.prototype, "ctrlsService", void 0);
      __decorate$1F([
        Autowired("rowRenderer")
      ], NavigationService2.prototype, "rowRenderer", void 0);
      __decorate$1F([
        Autowired("headerNavigationService")
      ], NavigationService2.prototype, "headerNavigationService", void 0);
      __decorate$1F([
        Autowired("rowPositionUtils")
      ], NavigationService2.prototype, "rowPositionUtils", void 0);
      __decorate$1F([
        Autowired("cellNavigationService")
      ], NavigationService2.prototype, "cellNavigationService", void 0);
      __decorate$1F([
        Autowired("pinnedRowModel")
      ], NavigationService2.prototype, "pinnedRowModel", void 0);
      __decorate$1F([
        PostConstruct
      ], NavigationService2.prototype, "postConstruct", null);
      NavigationService2 = __decorate$1F([
        Bean("navigationService")
      ], NavigationService2);
      return NavigationService2;
    }(BeanStub);
    __extends$1J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PopupEditorWrapper = /** @class */
    function(_super) {
      __extends$1J(PopupEditorWrapper2, _super);
      function PopupEditorWrapper2(params) {
        var _this = _super.call(
          this,
          /* html */
          '<div class="ag-popup-editor" tabindex="-1"/>'
        ) || this;
        _this.params = params;
        return _this;
      }
      PopupEditorWrapper2.prototype.postConstruct = function() {
        this.gridOptionsService.setDomData(this.getGui(), PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
        this.addKeyDownListener();
      };
      PopupEditorWrapper2.prototype.addKeyDownListener = function() {
        var _this = this;
        var eGui = this.getGui();
        var params = this.params;
        var listener = function(event) {
          if (!isUserSuppressingKeyboardEvent(_this.gridOptionsService, event, params.node, params.column, true)) {
            params.onKeyDown(event);
          }
        };
        this.addManagedListener(eGui, "keydown", listener);
      };
      PopupEditorWrapper2.DOM_KEY_POPUP_EDITOR_WRAPPER = "popupEditorWrapper";
      __decorate$1E([
        PostConstruct
      ], PopupEditorWrapper2.prototype, "postConstruct", null);
      return PopupEditorWrapper2;
    }(PopupComponent);
    __extends$1I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    CellComp = /** @class */
    function(_super) {
      __extends$1I(CellComp2, _super);
      function CellComp2(beans, cellCtrl, printLayout, eRow, editingRow) {
        var _this = _super.call(this) || this;
        _this.rendererVersion = 0;
        _this.editorVersion = 0;
        _this.beans = beans;
        _this.column = cellCtrl.getColumn();
        _this.rowNode = cellCtrl.getRowNode();
        _this.rowCtrl = cellCtrl.getRowCtrl();
        _this.eRow = eRow;
        _this.cellCtrl = cellCtrl;
        _this.setTemplate(
          /* html */
          '<div comp-id="' + _this.getCompId() + '"/>'
        );
        var eGui = _this.getGui();
        _this.forceWrapper = cellCtrl.isForceWrapper();
        _this.refreshWrapper(false);
        var setAttribute = function(name, value) {
          if (value != null && value != "") {
            eGui.setAttribute(name, value);
          } else {
            eGui.removeAttribute(name);
          }
        };
        setAriaRole(eGui, "gridcell");
        setAttribute("col-id", cellCtrl.getColumnIdSanitised());
        var tabIndex = cellCtrl.getTabIndex();
        if (tabIndex !== void 0) {
          setAttribute("tabindex", tabIndex.toString());
        }
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setUserStyles: function(styles) {
            return addStylesToElement(eGui, styles);
          },
          getFocusableElement: function() {
            return _this.getFocusableElement();
          },
          setIncludeSelection: function(include) {
            return _this.includeSelection = include;
          },
          setIncludeRowDrag: function(include) {
            return _this.includeRowDrag = include;
          },
          setIncludeDndSource: function(include) {
            return _this.includeDndSource = include;
          },
          setRenderDetails: function(compDetails, valueToDisplay, force) {
            return _this.setRenderDetails(compDetails, valueToDisplay, force);
          },
          setEditDetails: function(compDetails, popup, position) {
            return _this.setEditDetails(compDetails, popup, position);
          },
          getCellEditor: function() {
            return _this.cellEditor || null;
          },
          getCellRenderer: function() {
            return _this.cellRenderer || null;
          },
          getParentOfValue: function() {
            return _this.getParentOfValue();
          }
        };
        cellCtrl.setComp(compProxy, _this.getGui(), _this.eCellWrapper, printLayout, editingRow);
        return _this;
      }
      CellComp2.prototype.getParentOfValue = function() {
        if (this.eCellValue) {
          return this.eCellValue;
        }
        if (this.eCellWrapper) {
          return this.eCellWrapper;
        }
        return this.getGui();
      };
      CellComp2.prototype.setRenderDetails = function(compDetails, valueToDisplay, forceNewCellRendererInstance) {
        var isInlineEditing = this.cellEditor && !this.cellEditorPopupWrapper;
        if (isInlineEditing) {
          return;
        }
        this.firstRender = this.firstRender == null;
        var controlWrapperChanged = this.refreshWrapper(false);
        this.refreshEditStyles(false);
        if (compDetails) {
          var neverRefresh = forceNewCellRendererInstance || controlWrapperChanged;
          var cellRendererRefreshSuccessful = neverRefresh ? false : this.refreshCellRenderer(compDetails);
          if (!cellRendererRefreshSuccessful) {
            this.destroyRenderer();
            this.createCellRendererInstance(compDetails);
          }
        } else {
          this.destroyRenderer();
          this.insertValueWithoutCellRenderer(valueToDisplay);
        }
      };
      CellComp2.prototype.setEditDetails = function(compDetails, popup, position) {
        if (compDetails) {
          this.createCellEditorInstance(compDetails, popup, position);
        } else {
          this.destroyEditor();
        }
      };
      CellComp2.prototype.removeControls = function() {
        this.checkboxSelectionComp = this.beans.context.destroyBean(this.checkboxSelectionComp);
        this.dndSourceComp = this.beans.context.destroyBean(this.dndSourceComp);
        this.rowDraggingComp = this.beans.context.destroyBean(this.rowDraggingComp);
      };
      CellComp2.prototype.refreshWrapper = function(editing) {
        var providingControls = this.includeRowDrag || this.includeDndSource || this.includeSelection;
        var usingWrapper = providingControls || this.forceWrapper;
        var putWrapperIn = usingWrapper && this.eCellWrapper == null;
        if (putWrapperIn) {
          this.eCellWrapper = loadTemplate(
            /* html */
            '<div class="ag-cell-wrapper" role="presentation"></div>'
          );
          this.getGui().appendChild(this.eCellWrapper);
        }
        var takeWrapperOut = !usingWrapper && this.eCellWrapper != null;
        if (takeWrapperOut) {
          removeFromParent(this.eCellWrapper);
          this.eCellWrapper = void 0;
        }
        this.addOrRemoveCssClass("ag-cell-value", !usingWrapper);
        var usingCellValue = !editing && usingWrapper;
        var putCellValueIn = usingCellValue && this.eCellValue == null;
        if (putCellValueIn) {
          this.eCellValue = loadTemplate(
            /* html */
            '<span class="ag-cell-value" role="presentation"></span>'
          );
          this.eCellWrapper.appendChild(this.eCellValue);
        }
        var takeCellValueOut = !usingCellValue && this.eCellValue != null;
        if (takeCellValueOut) {
          removeFromParent(this.eCellValue);
          this.eCellValue = void 0;
        }
        var templateChanged = putWrapperIn || takeWrapperOut || putCellValueIn || takeCellValueOut;
        if (templateChanged) {
          this.removeControls();
        }
        if (!editing) {
          if (providingControls) {
            this.addControls();
          }
        }
        return templateChanged;
      };
      CellComp2.prototype.addControls = function() {
        if (this.includeRowDrag) {
          if (this.rowDraggingComp == null) {
            this.rowDraggingComp = this.cellCtrl.createRowDragComp();
            if (this.rowDraggingComp) {
              this.eCellWrapper.insertBefore(this.rowDraggingComp.getGui(), this.eCellValue);
            }
          }
        }
        if (this.includeDndSource) {
          if (this.dndSourceComp == null) {
            this.dndSourceComp = this.cellCtrl.createDndSource();
            this.eCellWrapper.insertBefore(this.dndSourceComp.getGui(), this.eCellValue);
          }
        }
        if (this.includeSelection) {
          if (this.checkboxSelectionComp == null) {
            this.checkboxSelectionComp = this.cellCtrl.createSelectionCheckbox();
            this.eCellWrapper.insertBefore(this.checkboxSelectionComp.getGui(), this.eCellValue);
          }
        }
      };
      CellComp2.prototype.createCellEditorInstance = function(compDetails, popup, position) {
        var _this = this;
        var versionCopy = this.editorVersion;
        var cellEditorPromise = compDetails.newAgStackInstance();
        if (!cellEditorPromise) {
          return;
        }
        var params = compDetails.params;
        cellEditorPromise.then(function(c) {
          return _this.afterCellEditorCreated(versionCopy, c, params, popup, position);
        });
        var cellEditorAsync = missing(this.cellEditor);
        if (cellEditorAsync && params.cellStartedEdit) {
          this.cellCtrl.focusCell(true);
        }
      };
      CellComp2.prototype.insertValueWithoutCellRenderer = function(valueToDisplay) {
        var eParent = this.getParentOfValue();
        clearElement(eParent);
        var escapedValue = valueToDisplay != null ? escapeString(valueToDisplay) : null;
        if (escapedValue != null) {
          eParent.innerHTML = escapedValue;
        }
      };
      CellComp2.prototype.destroyEditorAndRenderer = function() {
        this.destroyRenderer();
        this.destroyEditor();
      };
      CellComp2.prototype.destroyRenderer = function() {
        var context = this.beans.context;
        this.cellRenderer = context.destroyBean(this.cellRenderer);
        removeFromParent(this.cellRendererGui);
        this.cellRendererGui = null;
        this.rendererVersion++;
      };
      CellComp2.prototype.destroyEditor = function() {
        var context = this.beans.context;
        if (this.hideEditorPopup) {
          this.hideEditorPopup();
        }
        this.hideEditorPopup = void 0;
        this.cellEditor = context.destroyBean(this.cellEditor);
        this.cellEditorPopupWrapper = context.destroyBean(this.cellEditorPopupWrapper);
        removeFromParent(this.cellEditorGui);
        this.cellEditorGui = null;
        this.editorVersion++;
      };
      CellComp2.prototype.refreshCellRenderer = function(compClassAndParams) {
        if (this.cellRenderer == null || this.cellRenderer.refresh == null) {
          return false;
        }
        if (this.cellRendererClass !== compClassAndParams.componentClass) {
          return false;
        }
        var result = this.cellRenderer.refresh(compClassAndParams.params);
        return result === true || result === void 0;
      };
      CellComp2.prototype.createCellRendererInstance = function(compDetails) {
        var _this = this;
        var suppressAnimationFrame = this.beans.gridOptionsService.is("suppressAnimationFrame");
        var useTaskService = !suppressAnimationFrame;
        var displayComponentVersionCopy = this.rendererVersion;
        var componentClass = compDetails.componentClass;
        var createCellRendererFunc = function() {
          var staleTask = _this.rendererVersion !== displayComponentVersionCopy || !_this.isAlive();
          if (staleTask) {
            return;
          }
          var componentPromise = compDetails.newAgStackInstance();
          var callback = _this.afterCellRendererCreated.bind(_this, displayComponentVersionCopy, componentClass);
          if (componentPromise) {
            componentPromise.then(callback);
          }
        };
        if (useTaskService && this.firstRender) {
          this.beans.animationFrameService.createTask(createCellRendererFunc, this.rowNode.rowIndex, "createTasksP2");
        } else {
          createCellRendererFunc();
        }
      };
      CellComp2.prototype.getCtrl = function() {
        return this.cellCtrl;
      };
      CellComp2.prototype.getRowCtrl = function() {
        return this.rowCtrl;
      };
      CellComp2.prototype.getCellRenderer = function() {
        return this.cellRenderer;
      };
      CellComp2.prototype.getCellEditor = function() {
        return this.cellEditor;
      };
      CellComp2.prototype.afterCellRendererCreated = function(cellRendererVersion, cellRendererClass, cellRenderer) {
        var staleTask = !this.isAlive() || cellRendererVersion !== this.rendererVersion;
        if (staleTask) {
          this.beans.context.destroyBean(cellRenderer);
          return;
        }
        this.cellRenderer = cellRenderer;
        this.cellRendererClass = cellRendererClass;
        this.cellRendererGui = this.cellRenderer.getGui();
        if (this.cellRendererGui != null) {
          var eParent = this.getParentOfValue();
          clearElement(eParent);
          eParent.appendChild(this.cellRendererGui);
        }
      };
      CellComp2.prototype.afterCellEditorCreated = function(requestVersion, cellEditor, params, popup, position) {
        var staleComp = requestVersion !== this.editorVersion;
        if (staleComp) {
          this.beans.context.destroyBean(cellEditor);
          return;
        }
        var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();
        if (editingCancelledByUserComp) {
          this.beans.context.destroyBean(cellEditor);
          this.cellCtrl.stopEditing(true);
          return;
        }
        if (!cellEditor.getGui) {
          console.warn("AG Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
          this.beans.context.destroyBean(cellEditor);
          return;
        }
        this.cellEditor = cellEditor;
        this.cellEditorGui = cellEditor.getGui();
        var cellEditorInPopup = popup || cellEditor.isPopup !== void 0 && cellEditor.isPopup();
        if (cellEditorInPopup) {
          this.addPopupCellEditor(params, position);
        } else {
          this.addInCellEditor();
        }
        this.refreshEditStyles(true, cellEditorInPopup);
        if (cellEditor.afterGuiAttached) {
          cellEditor.afterGuiAttached();
        }
      };
      CellComp2.prototype.refreshEditStyles = function(editing, isPopup) {
        var _a;
        this.addOrRemoveCssClass("ag-cell-inline-editing", editing && !isPopup);
        this.addOrRemoveCssClass("ag-cell-popup-editing", editing && !!isPopup);
        this.addOrRemoveCssClass("ag-cell-not-inline-editing", !editing || !!isPopup);
        (_a = this.rowCtrl) === null || _a === void 0 ? void 0 : _a.setInlineEditingCss(editing);
      };
      CellComp2.prototype.addInCellEditor = function() {
        var eGui = this.getGui();
        var eDocument = this.beans.gridOptionsService.getDocument();
        if (eGui.contains(eDocument.activeElement)) {
          eGui.focus();
        }
        this.destroyRenderer();
        this.refreshWrapper(true);
        this.clearParentOfValue();
        if (this.cellEditorGui) {
          var eParent = this.getParentOfValue();
          eParent.appendChild(this.cellEditorGui);
        }
      };
      CellComp2.prototype.addPopupCellEditor = function(params, position) {
        var _this = this;
        if (this.beans.gridOptionsService.get("editType") === "fullRow") {
          console.warn("AG Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both - either turn off fullRowEdit, or stop using popup editors.");
        }
        var cellEditor = this.cellEditor;
        this.cellEditorPopupWrapper = this.beans.context.createBean(new PopupEditorWrapper(params));
        var ePopupGui = this.cellEditorPopupWrapper.getGui();
        if (this.cellEditorGui) {
          ePopupGui.appendChild(this.cellEditorGui);
        }
        var popupService = this.beans.popupService;
        var useModelPopup = this.beans.gridOptionsService.is("stopEditingWhenCellsLoseFocus");
        var positionToUse = position != null ? position : cellEditor.getPopupPosition ? cellEditor.getPopupPosition() : "over";
        var isRtl = this.beans.gridOptionsService.is("enableRtl");
        var positionParams = {
          ePopup: ePopupGui,
          column: this.column,
          rowNode: this.rowNode,
          type: "popupCellEditor",
          eventSource: this.getGui(),
          position: positionToUse,
          alignSide: isRtl ? "right" : "left",
          keepWithinBounds: true
        };
        var positionCallback = popupService.positionPopupByComponent.bind(popupService, positionParams);
        var translate = this.beans.localeService.getLocaleTextFunc();
        var addPopupRes = popupService.addPopup({
          modal: useModelPopup,
          eChild: ePopupGui,
          closeOnEsc: true,
          closedCallback: function() {
            _this.cellCtrl.onPopupEditorClosed();
          },
          anchorToElement: this.getGui(),
          positionCallback,
          ariaLabel: translate("ariaLabelCellEditor", "Cell Editor")
        });
        if (addPopupRes) {
          this.hideEditorPopup = addPopupRes.hideFunc;
        }
      };
      CellComp2.prototype.detach = function() {
        this.eRow.removeChild(this.getGui());
      };
      CellComp2.prototype.destroy = function() {
        this.cellCtrl.stopEditing();
        this.destroyEditorAndRenderer();
        this.removeControls();
        _super.prototype.destroy.call(this);
      };
      CellComp2.prototype.clearParentOfValue = function() {
        var eGui = this.getGui();
        var eDocument = this.beans.gridOptionsService.getDocument();
        if (eGui.contains(eDocument.activeElement) && browserSupportsPreventScroll()) {
          eGui.focus({ preventScroll: true });
        }
        clearElement(this.getParentOfValue());
      };
      return CellComp2;
    }(Component);
    __extends$1H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    RowComp = /** @class */
    function(_super) {
      __extends$1H(RowComp2, _super);
      function RowComp2(ctrl, beans, containerType) {
        var _this = _super.call(this) || this;
        _this.cellComps = {};
        _this.beans = beans;
        _this.rowCtrl = ctrl;
        _this.setTemplate(
          /* html */
          '<div comp-id="' + _this.getCompId() + '" style="' + _this.getInitialStyle(containerType) + '"/>'
        );
        var eGui = _this.getGui();
        var style = eGui.style;
        _this.domOrder = _this.rowCtrl.getDomOrder();
        setAriaRole(eGui, "row");
        var tabIndex = _this.rowCtrl.getTabIndex();
        if (tabIndex != null) {
          eGui.setAttribute("tabindex", tabIndex.toString());
        }
        var compProxy = {
          setDomOrder: function(domOrder) {
            return _this.domOrder = domOrder;
          },
          setCellCtrls: function(cellCtrls) {
            return _this.setCellCtrls(cellCtrls);
          },
          showFullWidth: function(compDetails) {
            return _this.showFullWidth(compDetails);
          },
          getFullWidthCellRenderer: function() {
            return _this.getFullWidthCellRenderer();
          },
          addOrRemoveCssClass: function(name, on) {
            return _this.addOrRemoveCssClass(name, on);
          },
          setUserStyles: function(styles) {
            return addStylesToElement(eGui, styles);
          },
          setTop: function(top) {
            return style.top = top;
          },
          setTransform: function(transform) {
            return style.transform = transform;
          },
          setRowIndex: function(rowIndex) {
            return eGui.setAttribute("row-index", rowIndex);
          },
          setRowId: function(rowId) {
            return eGui.setAttribute("row-id", rowId);
          },
          setRowBusinessKey: function(businessKey) {
            return eGui.setAttribute("row-business-key", businessKey);
          }
        };
        ctrl.setComp(compProxy, _this.getGui(), containerType);
        _this.addDestroyFunc(function() {
          ctrl.unsetComp(containerType);
        });
        return _this;
      }
      RowComp2.prototype.getInitialStyle = function(containerType) {
        var transform = this.rowCtrl.getInitialTransform(containerType);
        var top = this.rowCtrl.getInitialRowTop(containerType);
        return transform ? "transform: " + transform : "top: " + top;
      };
      RowComp2.prototype.showFullWidth = function(compDetails) {
        var _this = this;
        var callback = function(cellRenderer) {
          if (_this.isAlive()) {
            var eGui = cellRenderer.getGui();
            _this.getGui().appendChild(eGui);
            _this.rowCtrl.setupDetailRowAutoHeight(eGui);
            _this.setFullWidthRowComp(cellRenderer);
          } else {
            _this.beans.context.destroyBean(cellRenderer);
          }
        };
        var res = compDetails.newAgStackInstance();
        if (!res) {
          return;
        }
        res.then(callback);
      };
      RowComp2.prototype.setCellCtrls = function(cellCtrls) {
        var _this = this;
        var cellsToRemove = Object.assign({}, this.cellComps);
        cellCtrls.forEach(function(cellCtrl) {
          var key = cellCtrl.getInstanceId();
          var existingCellComp = _this.cellComps[key];
          if (existingCellComp == null) {
            _this.newCellComp(cellCtrl);
          } else {
            cellsToRemove[key] = null;
          }
        });
        var cellCompsToRemove = getAllValuesInObject(cellsToRemove).filter(function(cellComp) {
          return cellComp != null;
        });
        this.destroyCells(cellCompsToRemove);
        this.ensureDomOrder(cellCtrls);
      };
      RowComp2.prototype.ensureDomOrder = function(cellCtrls) {
        var _this = this;
        if (!this.domOrder) {
          return;
        }
        var elementsInOrder = [];
        cellCtrls.forEach(function(cellCtrl) {
          var cellComp = _this.cellComps[cellCtrl.getInstanceId()];
          if (cellComp) {
            elementsInOrder.push(cellComp.getGui());
          }
        });
        setDomChildOrder(this.getGui(), elementsInOrder);
      };
      RowComp2.prototype.newCellComp = function(cellCtrl) {
        var cellComp = new CellComp(this.beans, cellCtrl, this.rowCtrl.isPrintLayout(), this.getGui(), this.rowCtrl.isEditing());
        this.cellComps[cellCtrl.getInstanceId()] = cellComp;
        this.getGui().appendChild(cellComp.getGui());
      };
      RowComp2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.destroyAllCells();
      };
      RowComp2.prototype.destroyAllCells = function() {
        var cellsToDestroy = getAllValuesInObject(this.cellComps).filter(function(cp) {
          return cp != null;
        });
        this.destroyCells(cellsToDestroy);
      };
      RowComp2.prototype.setFullWidthRowComp = function(fullWidthRowComponent) {
        var _this = this;
        if (this.fullWidthCellRenderer) {
          console.error("AG Grid - should not be setting fullWidthRowComponent twice");
        }
        this.fullWidthCellRenderer = fullWidthRowComponent;
        this.addDestroyFunc(function() {
          _this.fullWidthCellRenderer = _this.beans.context.destroyBean(_this.fullWidthCellRenderer);
        });
      };
      RowComp2.prototype.getFullWidthCellRenderer = function() {
        return this.fullWidthCellRenderer;
      };
      RowComp2.prototype.destroyCells = function(cellComps) {
        var _this = this;
        cellComps.forEach(function(cellComp) {
          if (!cellComp) {
            return;
          }
          var instanceId = cellComp.getCtrl().getInstanceId();
          if (_this.cellComps[instanceId] !== cellComp) {
            return;
          }
          cellComp.detach();
          cellComp.destroy();
          _this.cellComps[instanceId] = null;
        });
      };
      return RowComp2;
    }(Component);
    __extends$1G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$8 = function() {
      __assign$8 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$8.apply(this, arguments);
    };
    __decorate$1D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowContainerComp = /** @class */
    function(_super) {
      __extends$1G(RowContainerComp2, _super);
      function RowContainerComp2() {
        var _this = _super.call(this, templateFactory()) || this;
        _this.rowComps = {};
        _this.name = Component.elementGettingCreated.getAttribute("name");
        _this.type = getRowContainerTypeForName(_this.name);
        return _this;
      }
      RowContainerComp2.prototype.postConstruct = function() {
        var _this = this;
        var compProxy = {
          setViewportHeight: function(height) {
            return _this.eViewport.style.height = height;
          },
          setRowCtrls: function(rowCtrls) {
            return _this.setRowCtrls(rowCtrls);
          },
          setDomOrder: function(domOrder) {
            _this.domOrder = domOrder;
          },
          setContainerWidth: function(width) {
            return _this.eContainer.style.width = width;
          }
        };
        var ctrl = this.createManagedBean(new RowContainerCtrl(this.name));
        ctrl.setComp(compProxy, this.eContainer, this.eViewport);
      };
      RowContainerComp2.prototype.preDestroy = function() {
        this.setRowCtrls([]);
      };
      RowContainerComp2.prototype.setRowCtrls = function(rowCtrls) {
        var _this = this;
        var oldRows = __assign$8({}, this.rowComps);
        this.rowComps = {};
        this.lastPlacedElement = null;
        var processRow = function(rowCon) {
          var instanceId = rowCon.getInstanceId();
          var existingRowComp = oldRows[instanceId];
          if (existingRowComp) {
            _this.rowComps[instanceId] = existingRowComp;
            delete oldRows[instanceId];
            _this.ensureDomOrder(existingRowComp.getGui());
          } else {
            if (!rowCon.getRowNode().displayed) {
              return;
            }
            var rowComp = new RowComp(rowCon, _this.beans, _this.type);
            _this.rowComps[instanceId] = rowComp;
            _this.appendRow(rowComp.getGui());
          }
        };
        rowCtrls.forEach(processRow);
        getAllValuesInObject(oldRows).forEach(function(oldRowComp) {
          _this.eContainer.removeChild(oldRowComp.getGui());
          oldRowComp.destroy();
        });
        setAriaRole(this.eContainer, rowCtrls.length ? "rowgroup" : "presentation");
      };
      RowContainerComp2.prototype.appendRow = function(element) {
        if (this.domOrder) {
          insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);
        } else {
          this.eContainer.appendChild(element);
        }
        this.lastPlacedElement = element;
      };
      RowContainerComp2.prototype.ensureDomOrder = function(eRow) {
        if (this.domOrder) {
          ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
          this.lastPlacedElement = eRow;
        }
      };
      __decorate$1D([
        Autowired("beans")
      ], RowContainerComp2.prototype, "beans", void 0);
      __decorate$1D([
        RefSelector("eViewport")
      ], RowContainerComp2.prototype, "eViewport", void 0);
      __decorate$1D([
        RefSelector("eContainer")
      ], RowContainerComp2.prototype, "eContainer", void 0);
      __decorate$1D([
        PostConstruct
      ], RowContainerComp2.prototype, "postConstruct", null);
      __decorate$1D([
        PreDestroy
      ], RowContainerComp2.prototype, "preDestroy", null);
      return RowContainerComp2;
    }(Component);
    __decorate$1C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    BodyDropPivotTarget = /** @class */
    function() {
      function BodyDropPivotTarget2(pinned) {
        this.columnsToAggregate = [];
        this.columnsToGroup = [];
        this.columnsToPivot = [];
        this.pinned = pinned;
      }
      BodyDropPivotTarget2.prototype.onDragEnter = function(draggingEvent) {
        var _this = this;
        this.clearColumnsList();
        if (this.gridOptionsService.is("functionsReadOnly")) {
          return;
        }
        var dragColumns = draggingEvent.dragItem.columns;
        if (!dragColumns) {
          return;
        }
        dragColumns.forEach(function(column) {
          if (!column.isPrimary()) {
            return;
          }
          if (column.isAnyFunctionActive()) {
            return;
          }
          if (column.isAllowValue()) {
            _this.columnsToAggregate.push(column);
          } else if (column.isAllowRowGroup()) {
            _this.columnsToGroup.push(column);
          } else if (column.isAllowPivot()) {
            _this.columnsToPivot.push(column);
          }
        });
      };
      BodyDropPivotTarget2.prototype.getIconName = function() {
        var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
        if (totalColumns > 0) {
          return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
        }
        return null;
      };
      BodyDropPivotTarget2.prototype.onDragLeave = function(draggingEvent) {
        this.clearColumnsList();
      };
      BodyDropPivotTarget2.prototype.clearColumnsList = function() {
        this.columnsToAggregate.length = 0;
        this.columnsToGroup.length = 0;
        this.columnsToPivot.length = 0;
      };
      BodyDropPivotTarget2.prototype.onDragging = function(draggingEvent) {
      };
      BodyDropPivotTarget2.prototype.onDragStop = function(draggingEvent) {
        if (this.columnsToAggregate.length > 0) {
          this.columnModel.addValueColumns(this.columnsToAggregate, "toolPanelDragAndDrop");
        }
        if (this.columnsToGroup.length > 0) {
          this.columnModel.addRowGroupColumns(this.columnsToGroup, "toolPanelDragAndDrop");
        }
        if (this.columnsToPivot.length > 0) {
          this.columnModel.addPivotColumns(this.columnsToPivot, "toolPanelDragAndDrop");
        }
      };
      __decorate$1C([
        Autowired("columnModel")
      ], BodyDropPivotTarget2.prototype, "columnModel", void 0);
      __decorate$1C([
        Autowired("gridOptionsService")
      ], BodyDropPivotTarget2.prototype, "gridOptionsService", void 0);
      return BodyDropPivotTarget2;
    }();
    __decorate$1B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$i = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    MoveColumnFeature = /** @class */
    function() {
      function MoveColumnFeature2(pinned, eContainer) {
        this.needToMoveLeft = false;
        this.needToMoveRight = false;
        this.lastMovedInfo = null;
        this.pinned = pinned;
        this.eContainer = eContainer;
        this.centerContainer = !exists(pinned);
      }
      MoveColumnFeature2.prototype.init = function() {
        var _this = this;
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
        });
      };
      MoveColumnFeature2.prototype.getIconName = function() {
        return this.pinned ? DragAndDropService.ICON_PINNED : DragAndDropService.ICON_MOVE;
      };
      MoveColumnFeature2.prototype.onDragEnter = function(draggingEvent) {
        var columns = draggingEvent.dragItem.columns;
        var dragCameFromToolPanel = draggingEvent.dragSource.type === DragSourceType.ToolPanel;
        if (dragCameFromToolPanel) {
          this.setColumnsVisible(columns, true, "uiColumnDragged");
        } else {
          var visibleState_1 = draggingEvent.dragItem.visibleState;
          var visibleColumns = (columns || []).filter(function(column) {
            return visibleState_1[column.getId()];
          });
          this.setColumnsVisible(visibleColumns, true, "uiColumnDragged");
        }
        this.setColumnsPinned(columns, this.pinned, "uiColumnDragged");
        this.onDragging(draggingEvent, true, true);
      };
      MoveColumnFeature2.prototype.onDragLeave = function() {
        this.ensureIntervalCleared();
        this.lastMovedInfo = null;
      };
      MoveColumnFeature2.prototype.setColumnsVisible = function(columns, visible, source) {
        if (source === void 0) {
          source = "api";
        }
        if (columns) {
          var allowedCols = columns.filter(function(c) {
            return !c.getColDef().lockVisible;
          });
          this.columnModel.setColumnsVisible(allowedCols, visible, source);
        }
      };
      MoveColumnFeature2.prototype.setColumnsPinned = function(columns, pinned, source) {
        if (source === void 0) {
          source = "api";
        }
        if (columns) {
          var allowedCols = columns.filter(function(c) {
            return !c.getColDef().lockPinned;
          });
          this.columnModel.setColumnsPinned(allowedCols, pinned, source);
        }
      };
      MoveColumnFeature2.prototype.onDragStop = function() {
        this.onDragging(this.lastDraggingEvent, false, true, true);
        this.ensureIntervalCleared();
        this.lastMovedInfo = null;
      };
      MoveColumnFeature2.prototype.normaliseX = function(x) {
        if (this.gridOptionsService.is("enableRtl")) {
          var clientWidth = this.eContainer.clientWidth;
          x = clientWidth - x;
        }
        if (this.centerContainer) {
          x += this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();
        }
        return x;
      };
      MoveColumnFeature2.prototype.checkCenterForScrolling = function(xAdjustedForScroll) {
        if (this.centerContainer) {
          var firstVisiblePixel = this.ctrlsService.getCenterRowContainerCtrl().getCenterViewportScrollLeft();
          var lastVisiblePixel = firstVisiblePixel + this.ctrlsService.getCenterRowContainerCtrl().getCenterWidth();
          if (this.gridOptionsService.is("enableRtl")) {
            this.needToMoveRight = xAdjustedForScroll < firstVisiblePixel + 50;
            this.needToMoveLeft = xAdjustedForScroll > lastVisiblePixel - 50;
          } else {
            this.needToMoveLeft = xAdjustedForScroll < firstVisiblePixel + 50;
            this.needToMoveRight = xAdjustedForScroll > lastVisiblePixel - 50;
          }
          if (this.needToMoveLeft || this.needToMoveRight) {
            this.ensureIntervalStarted();
          } else {
            this.ensureIntervalCleared();
          }
        }
      };
      MoveColumnFeature2.prototype.onDragging = function(draggingEvent, fromEnter, fakeEvent, finished) {
        var _this = this;
        var _a;
        if (draggingEvent === void 0) {
          draggingEvent = this.lastDraggingEvent;
        }
        if (fromEnter === void 0) {
          fromEnter = false;
        }
        if (fakeEvent === void 0) {
          fakeEvent = false;
        }
        if (finished === void 0) {
          finished = false;
        }
        if (finished) {
          if (this.lastMovedInfo) {
            var _b = this.lastMovedInfo, columns = _b.columns, toIndex = _b.toIndex;
            this.moveColumns(columns, toIndex, "uiColumnMoved", true);
          }
          return;
        }
        this.lastDraggingEvent = draggingEvent;
        if (missing(draggingEvent.hDirection)) {
          return;
        }
        var mouseX = this.normaliseX(draggingEvent.x);
        if (!fromEnter) {
          this.checkCenterForScrolling(mouseX);
        }
        var hDirection = this.normaliseDirection(draggingEvent.hDirection);
        var dragSourceType = draggingEvent.dragSource.type;
        var allMovingColumns = ((_a = draggingEvent.dragSource.getDragItem().columns) === null || _a === void 0 ? void 0 : _a.filter(function(col) {
          if (col.getColDef().lockPinned) {
            return col.getPinned() == _this.pinned;
          }
          return true;
        })) || [];
        this.attemptMoveColumns({ dragSourceType, allMovingColumns, hDirection, mouseX, fromEnter, fakeEvent });
      };
      MoveColumnFeature2.prototype.normaliseDirection = function(hDirection) {
        if (this.gridOptionsService.is("enableRtl")) {
          switch (hDirection) {
            case HorizontalDirection.Left:
              return HorizontalDirection.Right;
            case HorizontalDirection.Right:
              return HorizontalDirection.Left;
            default:
              console.error("AG Grid: Unknown direction " + hDirection);
          }
        } else {
          return hDirection;
        }
      };
      MoveColumnFeature2.prototype.attemptMoveColumns = function(params) {
        var dragSourceType = params.dragSourceType, hDirection = params.hDirection, mouseX = params.mouseX, fromEnter = params.fromEnter, fakeEvent = params.fakeEvent;
        var draggingLeft = hDirection === HorizontalDirection.Left;
        var draggingRight = hDirection === HorizontalDirection.Right;
        var allMovingColumns = params.allMovingColumns;
        if (dragSourceType === DragSourceType.HeaderCell) {
          var newCols_1 = [];
          allMovingColumns.forEach(function(col) {
            var _a;
            var movingGroup = null;
            var parent = col.getParent();
            while (parent != null && parent.getDisplayedLeafColumns().length === 1) {
              movingGroup = parent;
              parent = parent.getParent();
            }
            if (movingGroup != null) {
              var isMarryChildren = !!((_a = movingGroup.getColGroupDef()) === null || _a === void 0 ? void 0 : _a.marryChildren);
              var columnsToMove = isMarryChildren ? movingGroup.getProvidedColumnGroup().getLeafColumns() : movingGroup.getLeafColumns();
              columnsToMove.forEach(function(newCol) {
                if (!newCols_1.includes(newCol)) {
                  newCols_1.push(newCol);
                }
              });
            } else if (!newCols_1.includes(col)) {
              newCols_1.push(col);
            }
          });
          allMovingColumns = newCols_1;
        }
        var allMovingColumnsOrdered = allMovingColumns.slice();
        this.columnModel.sortColumnsLikeGridColumns(allMovingColumnsOrdered);
        var validMoves = this.calculateValidMoves(allMovingColumnsOrdered, draggingRight, mouseX);
        var oldIndex = this.calculateOldIndex(allMovingColumnsOrdered);
        if (validMoves.length === 0) {
          return;
        }
        var firstValidMove = validMoves[0];
        var constrainDirection = oldIndex !== null && !fromEnter;
        if (dragSourceType == DragSourceType.HeaderCell) {
          constrainDirection = oldIndex !== null;
        }
        if (constrainDirection && !fakeEvent) {
          if (draggingLeft && firstValidMove >= oldIndex) {
            return;
          }
          if (draggingRight && firstValidMove <= oldIndex) {
            return;
          }
        }
        var displayedCols = this.columnModel.getAllDisplayedColumns();
        var potentialMoves = [];
        var targetOrder = null;
        for (var i = 0; i < validMoves.length; i++) {
          var move = validMoves[i];
          var order = this.columnModel.getProposedColumnOrder(allMovingColumnsOrdered, move);
          if (!this.columnModel.doesOrderPassRules(order)) {
            continue;
          }
          var displayedOrder = order.filter(function(col) {
            return displayedCols.includes(col);
          });
          if (targetOrder === null) {
            targetOrder = displayedOrder;
          } else if (!_.areEqual(displayedOrder, targetOrder)) {
            break;
          }
          var fragCount = this.groupFragCount(order);
          potentialMoves.push({ move, fragCount });
        }
        if (potentialMoves.length === 0) {
          return;
        }
        potentialMoves.sort(function(a, b) {
          return a.fragCount - b.fragCount;
        });
        this.moveColumns(allMovingColumns, potentialMoves[0].move, "uiColumnMoved", false);
      };
      MoveColumnFeature2.prototype.calculateOldIndex = function(movingCols) {
        var gridCols = this.columnModel.getAllGridColumns();
        var indexes = sortNumerically(movingCols.map(function(col) {
          return gridCols.indexOf(col);
        }));
        var firstIndex = indexes[0];
        var lastIndex = last(indexes);
        var spread = lastIndex - firstIndex;
        var gapsExist = spread !== indexes.length - 1;
        return gapsExist ? null : firstIndex;
      };
      MoveColumnFeature2.prototype.moveColumns = function(columns, toIndex, source, finished) {
        this.columnModel.moveColumns(columns, toIndex, source, finished);
        this.lastMovedInfo = finished ? null : { columns, toIndex };
      };
      MoveColumnFeature2.prototype.groupFragCount = function(columns) {
        function parents(col) {
          var result = [];
          var parent = col.getOriginalParent();
          while (parent != null) {
            result.push(parent);
            parent = parent.getOriginalParent();
          }
          return result;
        }
        var count = 0;
        var _loop_1 = function(i2) {
          var _a;
          var a = parents(columns[i2]);
          var b = parents(columns[i2 + 1]);
          _a = __read$i(a.length > b.length ? [a, b] : [b, a], 2), a = _a[0], b = _a[1];
          a.forEach(function(parent) {
            if (b.indexOf(parent) === -1) {
              count++;
            }
          });
        };
        for (var i = 0; i < columns.length - 1; i++) {
          _loop_1(i);
        }
        return count;
      };
      MoveColumnFeature2.prototype.calculateValidMoves = function(movingCols, draggingRight, mouseX) {
        var isMoveBlocked = this.gridOptionsService.is("suppressMovableColumns") || movingCols.some(function(col2) {
          return col2.getColDef().suppressMovable;
        });
        if (isMoveBlocked) {
          return [];
        }
        var allDisplayedCols = this.columnModel.getDisplayedColumns(this.pinned);
        var allGridCols = this.columnModel.getAllGridColumns();
        var movingDisplayedCols = allDisplayedCols.filter(function(col2) {
          return includes(movingCols, col2);
        });
        var otherDisplayedCols = allDisplayedCols.filter(function(col2) {
          return !includes(movingCols, col2);
        });
        var otherGridCols = allGridCols.filter(function(col2) {
          return !includes(movingCols, col2);
        });
        var displayIndex = 0;
        var availableWidth = mouseX;
        if (draggingRight) {
          var widthOfMovingDisplayedCols_1 = 0;
          movingDisplayedCols.forEach(function(col2) {
            return widthOfMovingDisplayedCols_1 += col2.getActualWidth();
          });
          availableWidth -= widthOfMovingDisplayedCols_1;
        }
        if (availableWidth > 0) {
          for (var i = 0; i < otherDisplayedCols.length; i++) {
            var col = otherDisplayedCols[i];
            availableWidth -= col.getActualWidth();
            if (availableWidth < 0) {
              break;
            }
            displayIndex++;
          }
          if (draggingRight) {
            displayIndex++;
          }
        }
        var firstValidMove;
        if (displayIndex > 0) {
          var leftColumn = otherDisplayedCols[displayIndex - 1];
          firstValidMove = otherGridCols.indexOf(leftColumn) + 1;
        } else {
          firstValidMove = otherGridCols.indexOf(otherDisplayedCols[0]);
          if (firstValidMove === -1) {
            firstValidMove = 0;
          }
        }
        var validMoves = [firstValidMove];
        var numberComparator = function(a, b) {
          return a - b;
        };
        if (draggingRight) {
          var pointer = firstValidMove + 1;
          var lastIndex = allGridCols.length - 1;
          while (pointer <= lastIndex) {
            validMoves.push(pointer);
            pointer++;
          }
          validMoves.sort(numberComparator);
        } else {
          var pointer = firstValidMove;
          var lastIndex = allGridCols.length - 1;
          var displacedCol = allGridCols[pointer];
          while (pointer <= lastIndex && this.isColumnHidden(allDisplayedCols, displacedCol)) {
            pointer++;
            validMoves.push(pointer);
            displacedCol = allGridCols[pointer];
          }
          pointer = firstValidMove - 1;
          var firstDisplayIndex = 0;
          while (pointer >= firstDisplayIndex) {
            validMoves.push(pointer);
            pointer--;
          }
          validMoves.sort(numberComparator).reverse();
        }
        return validMoves;
      };
      MoveColumnFeature2.prototype.isColumnHidden = function(displayedColumns, col) {
        return displayedColumns.indexOf(col) < 0;
      };
      MoveColumnFeature2.prototype.ensureIntervalStarted = function() {
        if (!this.movingIntervalId) {
          this.intervalCount = 0;
          this.failedMoveAttempts = 0;
          this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);
          if (this.needToMoveLeft) {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_LEFT, true);
          } else {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_RIGHT, true);
          }
        }
      };
      MoveColumnFeature2.prototype.ensureIntervalCleared = function() {
        if (this.movingIntervalId) {
          window.clearInterval(this.movingIntervalId);
          this.movingIntervalId = null;
          this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_MOVE);
        }
      };
      MoveColumnFeature2.prototype.moveInterval = function() {
        var pixelsToMove;
        this.intervalCount++;
        pixelsToMove = 10 + this.intervalCount * 5;
        if (pixelsToMove > 100) {
          pixelsToMove = 100;
        }
        var pixelsMoved = null;
        var scrollFeature = this.gridBodyCon.getScrollFeature();
        if (this.needToMoveLeft) {
          pixelsMoved = scrollFeature.scrollHorizontally(-pixelsToMove);
        } else if (this.needToMoveRight) {
          pixelsMoved = scrollFeature.scrollHorizontally(pixelsToMove);
        }
        if (pixelsMoved !== 0) {
          this.onDragging(this.lastDraggingEvent);
          this.failedMoveAttempts = 0;
        } else {
          this.failedMoveAttempts++;
          var columns = this.lastDraggingEvent.dragItem.columns;
          var columnsThatCanPin = columns.filter(function(c) {
            return !c.getColDef().lockPinned;
          });
          if (columnsThatCanPin.length > 0) {
            this.dragAndDropService.setGhostIcon(DragAndDropService.ICON_PINNED);
            if (this.failedMoveAttempts > 7) {
              var pinType = this.needToMoveLeft ? "left" : "right";
              this.setColumnsPinned(columnsThatCanPin, pinType, "uiColumnDragged");
              this.dragAndDropService.nudge();
            }
          }
        }
      };
      __decorate$1B([
        Autowired("columnModel")
      ], MoveColumnFeature2.prototype, "columnModel", void 0);
      __decorate$1B([
        Autowired("dragAndDropService")
      ], MoveColumnFeature2.prototype, "dragAndDropService", void 0);
      __decorate$1B([
        Autowired("gridOptionsService")
      ], MoveColumnFeature2.prototype, "gridOptionsService", void 0);
      __decorate$1B([
        Autowired("ctrlsService")
      ], MoveColumnFeature2.prototype, "ctrlsService", void 0);
      __decorate$1B([
        PostConstruct
      ], MoveColumnFeature2.prototype, "init", null);
      return MoveColumnFeature2;
    }();
    __extends$1F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    BodyDropTarget = /** @class */
    function(_super) {
      __extends$1F(BodyDropTarget2, _super);
      function BodyDropTarget2(pinned, eContainer) {
        var _this = _super.call(this) || this;
        _this.pinned = pinned;
        _this.eContainer = eContainer;
        return _this;
      }
      BodyDropTarget2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          switch (_this.pinned) {
            case "left":
              _this.eSecondaryContainers = [
                [p.gridBodyCtrl.getBodyViewportElement(), p.leftRowContainerCtrl.getContainerElement()],
                [p.bottomLeftRowContainerCtrl.getContainerElement()],
                [p.topLeftRowContainerCtrl.getContainerElement()]
              ];
              break;
            case "right":
              _this.eSecondaryContainers = [
                [p.gridBodyCtrl.getBodyViewportElement(), p.rightRowContainerCtrl.getContainerElement()],
                [p.bottomRightRowContainerCtrl.getContainerElement()],
                [p.topRightRowContainerCtrl.getContainerElement()]
              ];
              break;
            default:
              _this.eSecondaryContainers = [
                [p.gridBodyCtrl.getBodyViewportElement(), p.centerRowContainerCtrl.getViewportElement()],
                [p.bottomCenterRowContainerCtrl.getViewportElement()],
                [p.topCenterRowContainerCtrl.getViewportElement()]
              ];
              break;
          }
        });
      };
      BodyDropTarget2.prototype.isInterestedIn = function(type) {
        return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel && this.gridOptionsService.is("allowDragFromColumnsToolPanel");
      };
      BodyDropTarget2.prototype.getSecondaryContainers = function() {
        return this.eSecondaryContainers;
      };
      BodyDropTarget2.prototype.getContainer = function() {
        return this.eContainer;
      };
      BodyDropTarget2.prototype.init = function() {
        this.moveColumnFeature = this.createManagedBean(new MoveColumnFeature(this.pinned, this.eContainer));
        this.bodyDropPivotTarget = this.createManagedBean(new BodyDropPivotTarget(this.pinned));
        this.dragAndDropService.addDropTarget(this);
      };
      BodyDropTarget2.prototype.getIconName = function() {
        return this.currentDropListener.getIconName();
      };
      BodyDropTarget2.prototype.isDropColumnInPivotMode = function(draggingEvent) {
        return this.columnModel.isPivotMode() && draggingEvent.dragSource.type === DragSourceType.ToolPanel;
      };
      BodyDropTarget2.prototype.onDragEnter = function(draggingEvent) {
        this.currentDropListener = this.isDropColumnInPivotMode(draggingEvent) ? this.bodyDropPivotTarget : this.moveColumnFeature;
        this.currentDropListener.onDragEnter(draggingEvent);
      };
      BodyDropTarget2.prototype.onDragLeave = function(params) {
        this.currentDropListener.onDragLeave(params);
      };
      BodyDropTarget2.prototype.onDragging = function(params) {
        this.currentDropListener.onDragging(params);
      };
      BodyDropTarget2.prototype.onDragStop = function(params) {
        this.currentDropListener.onDragStop(params);
      };
      __decorate$1A([
        Autowired("dragAndDropService")
      ], BodyDropTarget2.prototype, "dragAndDropService", void 0);
      __decorate$1A([
        Autowired("columnModel")
      ], BodyDropTarget2.prototype, "columnModel", void 0);
      __decorate$1A([
        Autowired("ctrlsService")
      ], BodyDropTarget2.prototype, "ctrlsService", void 0);
      __decorate$1A([
        PostConstruct
      ], BodyDropTarget2.prototype, "postConstruct", null);
      __decorate$1A([
        PostConstruct
      ], BodyDropTarget2.prototype, "init", null);
      return BodyDropTarget2;
    }(BeanStub);
    __read$h = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$f = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    CssClassApplier = /** @class */
    function() {
      function CssClassApplier2() {
      }
      CssClassApplier2.getHeaderClassesFromColDef = function(abstractColDef, gridOptionsService, column, columnGroup) {
        if (missing(abstractColDef)) {
          return [];
        }
        return this.getColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, gridOptionsService, column, columnGroup);
      };
      CssClassApplier2.getToolPanelClassesFromColDef = function(abstractColDef, gridOptionsService, column, columnGroup) {
        if (missing(abstractColDef)) {
          return [];
        }
        return this.getColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, gridOptionsService, column, columnGroup);
      };
      CssClassApplier2.getClassParams = function(abstractColDef, gridOptionsService, column, columnGroup) {
        return {
          // bad naming, as colDef here can be a group or a column,
          // however most people won't appreciate the difference,
          // so keeping it as colDef to avoid confusion.
          colDef: abstractColDef,
          column,
          columnGroup,
          api: gridOptionsService.api,
          columnApi: gridOptionsService.columnApi,
          context: gridOptionsService.context
        };
      };
      CssClassApplier2.getColumnClassesFromCollDef = function(classesOrFunc, abstractColDef, gridOptionsService, column, columnGroup) {
        if (missing(classesOrFunc)) {
          return [];
        }
        var classToUse;
        if (typeof classesOrFunc === "function") {
          var params = this.getClassParams(abstractColDef, gridOptionsService, column, columnGroup);
          classToUse = classesOrFunc(params);
        } else {
          classToUse = classesOrFunc;
        }
        if (typeof classToUse === "string") {
          return [classToUse];
        }
        if (Array.isArray(classToUse)) {
          return __spreadArray$f([], __read$h(classToUse));
        }
        return [];
      };
      return CssClassApplier2;
    }();
    __extends$1E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderCellComp = /** @class */
    function(_super) {
      __extends$1E(HeaderCellComp2, _super);
      function HeaderCellComp2(ctrl) {
        var _this = _super.call(this, HeaderCellComp2.TEMPLATE, ctrl) || this;
        _this.headerCompVersion = 0;
        _this.column = ctrl.getColumnGroupChild();
        _this.pinned = ctrl.getPinned();
        return _this;
      }
      HeaderCellComp2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var setAttribute = function(name, value) {
          if (value != null && value != "") {
            eGui.setAttribute(name, value);
          } else {
            eGui.removeAttribute(name);
          }
        };
        setAttribute("col-id", this.column.getColId());
        var compProxy = {
          setWidth: function(width) {
            return eGui.style.width = width;
          },
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setAriaDescription: function(label) {
            return setAriaDescription(eGui, label);
          },
          setAriaSort: function(sort) {
            return sort ? setAriaSort(eGui, sort) : removeAriaSort(eGui);
          },
          setUserCompDetails: function(compDetails) {
            return _this.setUserCompDetails(compDetails);
          },
          getUserCompInstance: function() {
            return _this.headerComp;
          }
        };
        this.ctrl.setComp(compProxy, this.getGui(), this.eResize, this.eHeaderCompWrapper);
        var selectAllGui = this.ctrl.getSelectAllGui();
        this.eResize.insertAdjacentElement("afterend", selectAllGui);
      };
      HeaderCellComp2.prototype.destroyHeaderComp = function() {
        if (this.headerComp) {
          this.eHeaderCompWrapper.removeChild(this.headerCompGui);
          this.headerComp = this.destroyBean(this.headerComp);
          this.headerCompGui = void 0;
        }
      };
      HeaderCellComp2.prototype.setUserCompDetails = function(compDetails) {
        var _this = this;
        this.headerCompVersion++;
        var versionCopy = this.headerCompVersion;
        compDetails.newAgStackInstance().then(function(comp) {
          return _this.afterCompCreated(versionCopy, comp);
        });
      };
      HeaderCellComp2.prototype.afterCompCreated = function(version, headerComp) {
        if (version != this.headerCompVersion || !this.isAlive()) {
          this.destroyBean(headerComp);
          return;
        }
        this.destroyHeaderComp();
        this.headerComp = headerComp;
        this.headerCompGui = headerComp.getGui();
        this.eHeaderCompWrapper.appendChild(this.headerCompGui);
        this.ctrl.setDragSource(this.getGui());
      };
      HeaderCellComp2.TEMPLATE = '<div class="ag-header-cell" role="columnheader" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n            <div ref="eHeaderCompWrapper" class="ag-header-cell-comp-wrapper" role="presentation"></div>\n        </div>';
      __decorate$1z([
        RefSelector("eResize")
      ], HeaderCellComp2.prototype, "eResize", void 0);
      __decorate$1z([
        RefSelector("eHeaderCompWrapper")
      ], HeaderCellComp2.prototype, "eHeaderCompWrapper", void 0);
      __decorate$1z([
        PostConstruct
      ], HeaderCellComp2.prototype, "postConstruct", null);
      __decorate$1z([
        PreDestroy
      ], HeaderCellComp2.prototype, "destroyHeaderComp", null);
      return HeaderCellComp2;
    }(AbstractHeaderCellComp);
    __extends$1D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderGroupCellComp = /** @class */
    function(_super) {
      __extends$1D(HeaderGroupCellComp2, _super);
      function HeaderGroupCellComp2(ctrl) {
        return _super.call(this, HeaderGroupCellComp2.TEMPLATE, ctrl) || this;
      }
      HeaderGroupCellComp2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var setAttribute = function(key, value) {
          return value != void 0 ? eGui.setAttribute(key, value) : eGui.removeAttribute(key);
        };
        eGui.setAttribute("col-id", this.ctrl.getColId());
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setResizableDisplayed: function(displayed) {
            return setDisplayed(_this.eResize, displayed);
          },
          setWidth: function(width) {
            return eGui.style.width = width;
          },
          setAriaExpanded: function(expanded) {
            return setAttribute("aria-expanded", expanded);
          },
          setUserCompDetails: function(details) {
            return _this.setUserCompDetails(details);
          }
        };
        this.ctrl.setComp(compProxy, eGui, this.eResize);
      };
      HeaderGroupCellComp2.prototype.setUserCompDetails = function(details) {
        var _this = this;
        details.newAgStackInstance().then(function(comp) {
          return _this.afterHeaderCompCreated(comp);
        });
      };
      HeaderGroupCellComp2.prototype.afterHeaderCompCreated = function(headerGroupComp) {
        var _this = this;
        var destroyFunc = function() {
          return _this.destroyBean(headerGroupComp);
        };
        if (!this.isAlive()) {
          destroyFunc();
          return;
        }
        var eGui = this.getGui();
        var eHeaderGroupGui = headerGroupComp.getGui();
        eGui.appendChild(eHeaderGroupGui);
        this.addDestroyFunc(destroyFunc);
        this.ctrl.setDragSource(eGui);
      };
      HeaderGroupCellComp2.TEMPLATE = '<div class="ag-header-group-cell" role="columnheader" tabindex="-1">\n            <div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>\n        </div>';
      __decorate$1y([
        Autowired("userComponentFactory")
      ], HeaderGroupCellComp2.prototype, "userComponentFactory", void 0);
      __decorate$1y([
        RefSelector("eResize")
      ], HeaderGroupCellComp2.prototype, "eResize", void 0);
      __decorate$1y([
        PostConstruct
      ], HeaderGroupCellComp2.prototype, "postConstruct", null);
      return HeaderGroupCellComp2;
    }(AbstractHeaderCellComp);
    __extends$1C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(HeaderRowType2) {
      HeaderRowType2["COLUMN_GROUP"] = "group";
      HeaderRowType2["COLUMN"] = "column";
      HeaderRowType2["FLOATING_FILTER"] = "filter";
    })(HeaderRowType || (HeaderRowType = {}));
    HeaderRowComp = /** @class */
    function(_super) {
      __extends$1C(HeaderRowComp2, _super);
      function HeaderRowComp2(ctrl) {
        var _this = _super.call(this) || this;
        _this.headerComps = {};
        _this.ctrl = ctrl;
        _this.setTemplate(
          /* html */
          '<div class="' + _this.ctrl.getHeaderRowClass() + '" role="row"></div>'
        );
        return _this;
      }
      HeaderRowComp2.prototype.init = function() {
        var _this = this;
        this.getGui().style.transform = this.ctrl.getTransform();
        setAriaRowIndex(this.getGui(), this.ctrl.getAriaRowIndex());
        var compProxy = {
          setHeight: function(height) {
            return _this.getGui().style.height = height;
          },
          setTop: function(top) {
            return _this.getGui().style.top = top;
          },
          setHeaderCtrls: function(ctrls, forceOrder) {
            return _this.setHeaderCtrls(ctrls, forceOrder);
          },
          setWidth: function(width) {
            return _this.getGui().style.width = width;
          }
        };
        this.ctrl.setComp(compProxy);
      };
      HeaderRowComp2.prototype.destroyHeaderCtrls = function() {
        this.setHeaderCtrls([], false);
      };
      HeaderRowComp2.prototype.setHeaderCtrls = function(ctrls, forceOrder) {
        var _this = this;
        if (!this.isAlive()) {
          return;
        }
        var oldComps = this.headerComps;
        this.headerComps = {};
        ctrls.forEach(function(ctrl) {
          var id = ctrl.getInstanceId();
          var comp = oldComps[id];
          delete oldComps[id];
          if (comp == null) {
            comp = _this.createHeaderComp(ctrl);
            _this.getGui().appendChild(comp.getGui());
          }
          _this.headerComps[id] = comp;
        });
        iterateObject(oldComps, function(id, comp) {
          _this.getGui().removeChild(comp.getGui());
          _this.destroyBean(comp);
        });
        if (forceOrder) {
          var comps = getAllValuesInObject(this.headerComps);
          comps.sort(function(a, b) {
            var leftA = a.getCtrl().getColumnGroupChild().getLeft();
            var leftB = b.getCtrl().getColumnGroupChild().getLeft();
            return leftA - leftB;
          });
          var elementsInOrder = comps.map(function(c) {
            return c.getGui();
          });
          setDomChildOrder(this.getGui(), elementsInOrder);
        }
      };
      HeaderRowComp2.prototype.createHeaderComp = function(headerCtrl) {
        var result;
        switch (this.ctrl.getType()) {
          case HeaderRowType.COLUMN_GROUP:
            result = new HeaderGroupCellComp(headerCtrl);
            break;
          case HeaderRowType.FLOATING_FILTER:
            result = new HeaderFilterCellComp(headerCtrl);
            break;
          default:
            result = new HeaderCellComp(headerCtrl);
            break;
        }
        this.createBean(result);
        result.setParentComponent(this);
        return result;
      };
      __decorate$1x([
        PostConstruct
      ], HeaderRowComp2.prototype, "init", null);
      __decorate$1x([
        PreDestroy
      ], HeaderRowComp2.prototype, "destroyHeaderCtrls", null);
      return HeaderRowComp2;
    }(Component);
    __extends$1B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    instanceIdSequence$1 = 0;
    AbstractHeaderCellCtrl = /** @class */
    function(_super) {
      __extends$1B(AbstractHeaderCellCtrl2, _super);
      function AbstractHeaderCellCtrl2(columnGroupChild, parentRowCtrl) {
        var _this = _super.call(this) || this;
        _this.lastFocusEvent = null;
        _this.columnGroupChild = columnGroupChild;
        _this.parentRowCtrl = parentRowCtrl;
        _this.instanceId = columnGroupChild.getUniqueId() + "-" + instanceIdSequence$1++;
        return _this;
      }
      AbstractHeaderCellCtrl2.prototype.shouldStopEventPropagation = function(e) {
        var _a = this.focusService.getFocusedHeader(), headerRowIndex = _a.headerRowIndex, column = _a.column;
        return isUserSuppressingHeaderKeyboardEvent(this.gridOptionsService, e, headerRowIndex, column);
      };
      AbstractHeaderCellCtrl2.prototype.getWrapperHasFocus = function() {
        var eDocument = this.gridOptionsService.getDocument();
        var activeEl = eDocument.activeElement;
        return activeEl === this.eGui;
      };
      AbstractHeaderCellCtrl2.prototype.setGui = function(eGui) {
        this.eGui = eGui;
        this.addDomData();
      };
      AbstractHeaderCellCtrl2.prototype.handleKeyDown = function(e) {
        var wrapperHasFocus = this.getWrapperHasFocus();
        switch (e.key) {
          case KeyCode.PAGE_DOWN:
          case KeyCode.PAGE_UP:
          case KeyCode.PAGE_HOME:
          case KeyCode.PAGE_END:
            if (wrapperHasFocus) {
              e.preventDefault();
            }
        }
      };
      AbstractHeaderCellCtrl2.prototype.addDomData = function() {
        var _this = this;
        var key = AbstractHeaderCellCtrl2.DOM_DATA_KEY_HEADER_CTRL;
        this.gridOptionsService.setDomData(this.eGui, key, this);
        this.addDestroyFunc(function() {
          return _this.gridOptionsService.setDomData(_this.eGui, key, null);
        });
      };
      AbstractHeaderCellCtrl2.prototype.getGui = function() {
        return this.eGui;
      };
      AbstractHeaderCellCtrl2.prototype.focus = function(event) {
        if (!this.eGui) {
          return false;
        }
        this.lastFocusEvent = event || null;
        this.eGui.focus();
        return true;
      };
      AbstractHeaderCellCtrl2.prototype.getRowIndex = function() {
        return this.parentRowCtrl.getRowIndex();
      };
      AbstractHeaderCellCtrl2.prototype.getParentRowCtrl = function() {
        return this.parentRowCtrl;
      };
      AbstractHeaderCellCtrl2.prototype.getPinned = function() {
        return this.parentRowCtrl.getPinned();
      };
      AbstractHeaderCellCtrl2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      AbstractHeaderCellCtrl2.prototype.getColumnGroupChild = function() {
        return this.columnGroupChild;
      };
      AbstractHeaderCellCtrl2.DOM_DATA_KEY_HEADER_CTRL = "headerCtrl";
      __decorate$1w([
        Autowired("focusService")
      ], AbstractHeaderCellCtrl2.prototype, "focusService", void 0);
      __decorate$1w([
        Autowired("beans")
      ], AbstractHeaderCellCtrl2.prototype, "beans", void 0);
      __decorate$1w([
        Autowired("userComponentFactory")
      ], AbstractHeaderCellCtrl2.prototype, "userComponentFactory", void 0);
      return AbstractHeaderCellCtrl2;
    }(BeanStub);
    __extends$1A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SetLeftFeature = /** @class */
    function(_super) {
      __extends$1A(SetLeftFeature2, _super);
      function SetLeftFeature2(columnOrGroup, eCell, beans, colsSpanning) {
        var _this = _super.call(this) || this;
        _this.columnOrGroup = columnOrGroup;
        _this.eCell = eCell;
        _this.ariaEl = _this.eCell.querySelector("[role=columnheader]") || _this.eCell;
        _this.colsSpanning = colsSpanning;
        _this.beans = beans;
        return _this;
      }
      SetLeftFeature2.prototype.setColsSpanning = function(colsSpanning) {
        this.colsSpanning = colsSpanning;
        this.onLeftChanged();
      };
      SetLeftFeature2.prototype.getColumnOrGroup = function() {
        if (this.beans.gridOptionsService.is("enableRtl") && this.colsSpanning) {
          return last(this.colsSpanning);
        }
        return this.columnOrGroup;
      };
      SetLeftFeature2.prototype.postConstruct = function() {
        this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
        this.setLeftFirstTime();
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));
        this.addManagedPropertyListener("domLayout", this.onLeftChanged.bind(this));
      };
      SetLeftFeature2.prototype.setLeftFirstTime = function() {
        var suppressMoveAnimation = this.beans.gridOptionsService.is("suppressColumnMoveAnimation");
        var oldLeftExists = exists(this.columnOrGroup.getOldLeft());
        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
        if (animateColumnMove) {
          this.animateInLeft();
        } else {
          this.onLeftChanged();
        }
      };
      SetLeftFeature2.prototype.animateInLeft = function() {
        var _this = this;
        var colOrGroup = this.getColumnOrGroup();
        var left = colOrGroup.getLeft();
        var oldLeft = colOrGroup.getOldLeft();
        var oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft);
        var actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
        this.setLeft(oldActualLeft);
        this.actualLeft = actualLeft;
        this.beans.columnAnimationService.executeNextVMTurn(function() {
          if (_this.actualLeft === actualLeft) {
            _this.setLeft(actualLeft);
          }
        });
      };
      SetLeftFeature2.prototype.onLeftChanged = function() {
        var colOrGroup = this.getColumnOrGroup();
        var left = colOrGroup.getLeft();
        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);
        this.setLeft(this.actualLeft);
      };
      SetLeftFeature2.prototype.modifyLeftForPrintLayout = function(colOrGroup, leftPosition) {
        var printLayout = this.beans.gridOptionsService.isDomLayout("print");
        if (!printLayout) {
          return leftPosition;
        }
        if (colOrGroup.getPinned() === "left") {
          return leftPosition;
        }
        var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();
        if (colOrGroup.getPinned() === "right") {
          var bodyWidth = this.beans.columnModel.getBodyContainerWidth();
          return leftWidth + bodyWidth + leftPosition;
        }
        return leftWidth + leftPosition;
      };
      SetLeftFeature2.prototype.setLeft = function(value) {
        if (exists(value)) {
          this.eCell.style.left = value + "px";
        }
        var indexColumn;
        if (this.columnOrGroup instanceof Column) {
          indexColumn = this.columnOrGroup;
        } else {
          var columnGroup = this.columnOrGroup;
          var children = columnGroup.getLeafColumns();
          if (!children.length) {
            return;
          }
          if (children.length > 1) {
            setAriaColSpan(this.ariaEl, children.length);
          }
          indexColumn = children[0];
        }
        var index = this.beans.columnModel.getAriaColumnIndex(indexColumn);
        setAriaColIndex(this.ariaEl, index);
      };
      __decorate$1v([
        PostConstruct
      ], SetLeftFeature2.prototype, "postConstruct", null);
      return SetLeftFeature2;
    }(BeanStub);
    __extends$1z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HoverFeature = /** @class */
    function(_super) {
      __extends$1z(HoverFeature2, _super);
      function HoverFeature2(columns, element) {
        var _this = _super.call(this) || this;
        _this.columns = columns;
        _this.element = element;
        return _this;
      }
      HoverFeature2.prototype.postConstruct = function() {
        if (this.gridOptionsService.is("columnHoverHighlight")) {
          this.addMouseHoverListeners();
        }
      };
      HoverFeature2.prototype.addMouseHoverListeners = function() {
        this.addManagedListener(this.element, "mouseout", this.onMouseOut.bind(this));
        this.addManagedListener(this.element, "mouseover", this.onMouseOver.bind(this));
      };
      HoverFeature2.prototype.onMouseOut = function() {
        this.columnHoverService.clearMouseOver();
      };
      HoverFeature2.prototype.onMouseOver = function() {
        this.columnHoverService.setMouseOver(this.columns);
      };
      __decorate$1u([
        Autowired("columnHoverService")
      ], HoverFeature2.prototype, "columnHoverService", void 0);
      __decorate$1u([
        PostConstruct
      ], HoverFeature2.prototype, "postConstruct", null);
      return HoverFeature2;
    }(BeanStub);
    __extends$1y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderFilterCellCtrl = /** @class */
    function(_super) {
      __extends$1y(HeaderFilterCellCtrl2, _super);
      function HeaderFilterCellCtrl2(column, parentRowCtrl) {
        var _this = _super.call(this, column, parentRowCtrl) || this;
        _this.iconCreated = false;
        _this.column = column;
        return _this;
      }
      HeaderFilterCellCtrl2.prototype.setComp = function(comp, eGui, eButtonShowMainFilter, eFloatingFilterBody) {
        _super.prototype.setGui.call(this, eGui);
        this.comp = comp;
        this.eButtonShowMainFilter = eButtonShowMainFilter;
        this.eFloatingFilterBody = eFloatingFilterBody;
        this.setupActive();
        this.setupWidth();
        this.setupLeft();
        this.setupHover();
        this.setupFocus();
        this.setupAria();
        this.setupFilterButton();
        this.setupUserComp();
        this.setupSyncWithFilter();
        this.setupUi();
        this.addManagedListener(this.eButtonShowMainFilter, "click", this.showParentFilter.bind(this));
        this.setupFilterChangedListener();
        this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.onColDefChanged.bind(this));
      };
      HeaderFilterCellCtrl2.prototype.setupActive = function() {
        var colDef = this.column.getColDef();
        var filterExists = !!colDef.filter;
        var floatingFilterExists = !!colDef.floatingFilter;
        this.active = filterExists && floatingFilterExists;
      };
      HeaderFilterCellCtrl2.prototype.setupUi = function() {
        this.comp.setButtonWrapperDisplayed(!this.suppressFilterButton && this.active);
        this.comp.addOrRemoveBodyCssClass("ag-floating-filter-full-body", this.suppressFilterButton);
        this.comp.addOrRemoveBodyCssClass("ag-floating-filter-body", !this.suppressFilterButton);
        if (!this.active || this.iconCreated) {
          return;
        }
        var eMenuIcon = createIconNoSpan("filter", this.gridOptionsService, this.column);
        if (eMenuIcon) {
          this.iconCreated = true;
          this.eButtonShowMainFilter.appendChild(eMenuIcon);
        }
      };
      HeaderFilterCellCtrl2.prototype.setupFocus = function() {
        this.createManagedBean(new ManagedFocusFeature(this.eGui, {
          shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
          onTabKeyDown: this.onTabKeyDown.bind(this),
          handleKeyDown: this.handleKeyDown.bind(this),
          onFocusIn: this.onFocusIn.bind(this)
        }));
      };
      HeaderFilterCellCtrl2.prototype.setupAria = function() {
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        setAriaLabel(this.eButtonShowMainFilter, localeTextFunc("ariaFilterMenuOpen", "Open Filter Menu"));
      };
      HeaderFilterCellCtrl2.prototype.onTabKeyDown = function(e) {
        var eDocument = this.gridOptionsService.getDocument();
        var activeEl = eDocument.activeElement;
        var wrapperHasFocus = activeEl === this.eGui;
        if (wrapperHasFocus) {
          return;
        }
        var nextFocusableEl = this.focusService.findNextFocusableElement(this.eGui, null, e.shiftKey);
        if (nextFocusableEl) {
          this.beans.headerNavigationService.scrollToColumn(this.column);
          e.preventDefault();
          nextFocusableEl.focus();
          return;
        }
        var nextFocusableColumn = this.findNextColumnWithFloatingFilter(e.shiftKey);
        if (!nextFocusableColumn) {
          return;
        }
        if (this.focusService.focusHeaderPosition({
          headerPosition: {
            headerRowIndex: this.getParentRowCtrl().getRowIndex(),
            column: nextFocusableColumn
          },
          event: e
        })) {
          e.preventDefault();
        }
      };
      HeaderFilterCellCtrl2.prototype.findNextColumnWithFloatingFilter = function(backwards) {
        var columModel = this.beans.columnModel;
        var nextCol = this.column;
        do {
          nextCol = backwards ? columModel.getDisplayedColBefore(nextCol) : columModel.getDisplayedColAfter(nextCol);
          if (!nextCol) {
            break;
          }
        } while (!nextCol.getColDef().filter || !nextCol.getColDef().floatingFilter);
        return nextCol;
      };
      HeaderFilterCellCtrl2.prototype.handleKeyDown = function(e) {
        _super.prototype.handleKeyDown.call(this, e);
        var wrapperHasFocus = this.getWrapperHasFocus();
        switch (e.key) {
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (!wrapperHasFocus) {
              e.preventDefault();
            }
          case KeyCode.LEFT:
          case KeyCode.RIGHT:
            if (wrapperHasFocus) {
              return;
            }
            e.stopPropagation();
          case KeyCode.ENTER:
            if (wrapperHasFocus) {
              if (this.focusService.focusInto(this.eGui)) {
                e.preventDefault();
              }
            }
            break;
          case KeyCode.ESCAPE:
            if (!wrapperHasFocus) {
              this.eGui.focus();
            }
        }
      };
      HeaderFilterCellCtrl2.prototype.onFocusIn = function(e) {
        var isRelatedWithin = this.eGui.contains(e.relatedTarget);
        if (isRelatedWithin) {
          return;
        }
        var notFromHeaderWrapper = !!e.relatedTarget && !e.relatedTarget.classList.contains("ag-floating-filter");
        var fromWithinHeader = !!e.relatedTarget && isElementChildOfClass(e.relatedTarget, "ag-floating-filter");
        if (notFromHeaderWrapper && fromWithinHeader && e.target === this.eGui) {
          var lastFocusEvent = this.lastFocusEvent;
          var fromTab = !!(lastFocusEvent && lastFocusEvent.key === KeyCode.TAB);
          if (lastFocusEvent && fromTab) {
            var shouldFocusLast = lastFocusEvent.shiftKey;
            this.focusService.focusInto(this.eGui, shouldFocusLast);
          }
        }
        var rowIndex = this.getRowIndex();
        this.beans.focusService.setFocusedHeader(rowIndex, this.column);
      };
      HeaderFilterCellCtrl2.prototype.setupHover = function() {
        var _this = this;
        this.createManagedBean(new HoverFeature([this.column], this.eGui));
        var listener = function() {
          if (!_this.gridOptionsService.is("columnHoverHighlight")) {
            return;
          }
          var hovered = _this.columnHoverService.isHovered(_this.column);
          _this.comp.addOrRemoveCssClass("ag-column-hover", hovered);
        };
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);
        listener();
      };
      HeaderFilterCellCtrl2.prototype.setupLeft = function() {
        var setLeftFeature = new SetLeftFeature(this.column, this.eGui, this.beans);
        this.createManagedBean(setLeftFeature);
      };
      HeaderFilterCellCtrl2.prototype.setupFilterButton = function() {
        var colDef = this.column.getColDef();
        this.suppressFilterButton = colDef.floatingFilterComponentParams ? !!colDef.floatingFilterComponentParams.suppressFilterButton : false;
      };
      HeaderFilterCellCtrl2.prototype.setupUserComp = function() {
        var _this = this;
        if (!this.active) {
          return;
        }
        var compDetails = this.filterManager.getFloatingFilterCompDetails(this.column, function() {
          return _this.showParentFilter();
        });
        if (compDetails) {
          this.setCompDetails(compDetails);
        }
      };
      HeaderFilterCellCtrl2.prototype.setCompDetails = function(compDetails) {
        this.userCompDetails = compDetails;
        this.comp.setCompDetails(compDetails);
      };
      HeaderFilterCellCtrl2.prototype.showParentFilter = function() {
        var eventSource = this.suppressFilterButton ? this.eFloatingFilterBody : this.eButtonShowMainFilter;
        this.menuFactory.showMenuAfterButtonClick(this.column, eventSource, "floatingFilter", "filterMenuTab", ["filterMenuTab"]);
      };
      HeaderFilterCellCtrl2.prototype.setupSyncWithFilter = function() {
        var _this = this;
        if (!this.active) {
          return;
        }
        var syncWithFilter = function(filterChangedEvent) {
          var compPromise = _this.comp.getFloatingFilterComp();
          if (!compPromise) {
            return;
          }
          compPromise.then(function(comp) {
            if (comp) {
              var parentModel = _this.filterManager.getCurrentFloatingFilterParentModel(_this.column);
              comp.onParentModelChanged(parentModel, filterChangedEvent);
            }
          });
        };
        this.destroySyncListener = this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, syncWithFilter);
        if (this.filterManager.isFilterActive(this.column)) {
          syncWithFilter(null);
        }
      };
      HeaderFilterCellCtrl2.prototype.setupWidth = function() {
        var _this = this;
        var listener = function() {
          var width = _this.column.getActualWidth() + "px";
          _this.comp.setWidth(width);
        };
        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);
        listener();
      };
      HeaderFilterCellCtrl2.prototype.setupFilterChangedListener = function() {
        if (this.active) {
          this.destroyFilterChangedListener = this.addManagedListener(this.column, Column.EVENT_FILTER_CHANGED, this.updateFilterButton.bind(this));
        }
      };
      HeaderFilterCellCtrl2.prototype.updateFilterButton = function() {
        if (!this.suppressFilterButton && this.comp) {
          this.comp.setButtonWrapperDisplayed(this.filterManager.isFilterAllowed(this.column));
        }
      };
      HeaderFilterCellCtrl2.prototype.onColDefChanged = function() {
        var _this = this;
        var _a, _b;
        var wasActive = this.active;
        this.setupActive();
        var becomeActive = !wasActive && this.active;
        if (wasActive && !this.active) {
          (_a = this.destroySyncListener) === null || _a === void 0 ? void 0 : _a.call(this);
          (_b = this.destroyFilterChangedListener) === null || _b === void 0 ? void 0 : _b.call(this);
        }
        var newCompDetails = this.active ? this.filterManager.getFloatingFilterCompDetails(this.column, function() {
          return _this.showParentFilter();
        }) : null;
        var compPromise = this.comp.getFloatingFilterComp();
        if (!compPromise || !newCompDetails) {
          this.updateCompDetails(newCompDetails, becomeActive);
        } else {
          compPromise.then(function(compInstance) {
            var _a2;
            if (!compInstance || _this.filterManager.areFilterCompsDifferent((_a2 = _this.userCompDetails) !== null && _a2 !== void 0 ? _a2 : null, newCompDetails)) {
              _this.updateCompDetails(newCompDetails, becomeActive);
            } else {
              _this.updateFloatingFilterParams(newCompDetails);
            }
          });
        }
      };
      HeaderFilterCellCtrl2.prototype.updateCompDetails = function(compDetails, becomeActive) {
        this.setCompDetails(compDetails);
        this.setupFilterButton();
        this.setupUi();
        if (becomeActive) {
          this.setupSyncWithFilter();
          this.setupFilterChangedListener();
        }
      };
      HeaderFilterCellCtrl2.prototype.updateFloatingFilterParams = function(userCompDetails) {
        var _a;
        if (!userCompDetails) {
          return;
        }
        var params = userCompDetails.params;
        (_a = this.comp.getFloatingFilterComp()) === null || _a === void 0 ? void 0 : _a.then(function(floatingFilter) {
          if ((floatingFilter === null || floatingFilter === void 0 ? void 0 : floatingFilter.onParamsUpdated) && typeof floatingFilter.onParamsUpdated === "function") {
            floatingFilter.onParamsUpdated(params);
          }
        });
      };
      __decorate$1t([
        Autowired("filterManager")
      ], HeaderFilterCellCtrl2.prototype, "filterManager", void 0);
      __decorate$1t([
        Autowired("columnHoverService")
      ], HeaderFilterCellCtrl2.prototype, "columnHoverService", void 0);
      __decorate$1t([
        Autowired("menuFactory")
      ], HeaderFilterCellCtrl2.prototype, "menuFactory", void 0);
      return HeaderFilterCellCtrl2;
    }(AbstractHeaderCellCtrl);
    __extends$1x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ResizeFeature = /** @class */
    function(_super) {
      __extends$1x(ResizeFeature2, _super);
      function ResizeFeature2(pinned, column, eResize, comp, ctrl) {
        var _this = _super.call(this) || this;
        _this.pinned = pinned;
        _this.column = column;
        _this.eResize = eResize;
        _this.comp = comp;
        _this.ctrl = ctrl;
        return _this;
      }
      ResizeFeature2.prototype.postConstruct = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        var destroyResizeFuncs = [];
        var canResize;
        var canAutosize;
        var addResize = function() {
          setDisplayed(_this.eResize, canResize);
          if (!canResize) {
            return;
          }
          var finishedWithResizeFunc = _this.horizontalResizeService.addResizeBar({
            eResizeBar: _this.eResize,
            onResizeStart: _this.onResizeStart.bind(_this),
            onResizing: _this.onResizing.bind(_this, false),
            onResizeEnd: _this.onResizing.bind(_this, true)
          });
          destroyResizeFuncs.push(finishedWithResizeFunc);
          if (canAutosize) {
            var skipHeaderOnAutoSize_1 = _this.gridOptionsService.is("skipHeaderOnAutoSize");
            var autoSizeColListener_1 = function() {
              _this.columnModel.autoSizeColumn(_this.column, skipHeaderOnAutoSize_1, "uiColumnResized");
            };
            _this.eResize.addEventListener("dblclick", autoSizeColListener_1);
            var touchListener_1 = new TouchListener(_this.eResize);
            touchListener_1.addEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
            _this.addDestroyFunc(function() {
              _this.eResize.removeEventListener("dblclick", autoSizeColListener_1);
              touchListener_1.removeEventListener(TouchListener.EVENT_DOUBLE_TAP, autoSizeColListener_1);
              touchListener_1.destroy();
            });
          }
        };
        var removeResize = function() {
          destroyResizeFuncs.forEach(function(f) {
            return f();
          });
          destroyResizeFuncs.length = 0;
        };
        var refresh = function() {
          var resize = _this.column.isResizable();
          var autoSize = !_this.gridOptionsService.is("suppressAutoSize") && !colDef.suppressAutoSize;
          var propertyChange = resize !== canResize || autoSize !== canAutosize;
          if (propertyChange) {
            canResize = resize;
            canAutosize = autoSize;
            removeResize();
            addResize();
          }
        };
        refresh();
        this.addDestroyFunc(removeResize);
        this.ctrl.addRefreshFunction(refresh);
      };
      ResizeFeature2.prototype.onResizing = function(finished, resizeAmount) {
        var resizeAmountNormalised = this.normaliseResizeAmount(resizeAmount);
        var columnWidths = [{ key: this.column, newWidth: this.resizeStartWidth + resizeAmountNormalised }];
        this.columnModel.setColumnWidths(columnWidths, this.resizeWithShiftKey, finished, "uiColumnResized");
        if (finished) {
          this.comp.addOrRemoveCssClass("ag-column-resizing", false);
        }
      };
      ResizeFeature2.prototype.onResizeStart = function(shiftKey) {
        this.resizeStartWidth = this.column.getActualWidth();
        this.resizeWithShiftKey = shiftKey;
        this.comp.addOrRemoveCssClass("ag-column-resizing", true);
      };
      ResizeFeature2.prototype.normaliseResizeAmount = function(dragChange) {
        var result = dragChange;
        var notPinningLeft = this.pinned !== "left";
        var pinningRight = this.pinned === "right";
        if (this.gridOptionsService.is("enableRtl")) {
          if (notPinningLeft) {
            result *= -1;
          }
        } else {
          if (pinningRight) {
            result *= -1;
          }
        }
        return result;
      };
      __decorate$1s([
        Autowired("horizontalResizeService")
      ], ResizeFeature2.prototype, "horizontalResizeService", void 0);
      __decorate$1s([
        Autowired("columnModel")
      ], ResizeFeature2.prototype, "columnModel", void 0);
      __decorate$1s([
        PostConstruct
      ], ResizeFeature2.prototype, "postConstruct", null);
      return ResizeFeature2;
    }(BeanStub);
    __extends$1w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SelectAllFeature = /** @class */
    function(_super) {
      __extends$1w(SelectAllFeature2, _super);
      function SelectAllFeature2(column) {
        var _this = _super.call(this) || this;
        _this.cbSelectAllVisible = false;
        _this.processingEventFromCheckbox = false;
        _this.column = column;
        var colDef = column.getColDef();
        _this.filteredOnly = !!(colDef === null || colDef === void 0 ? void 0 : colDef.headerCheckboxSelectionFilteredOnly);
        _this.currentPageOnly = !!(colDef === null || colDef === void 0 ? void 0 : colDef.headerCheckboxSelectionCurrentPageOnly);
        return _this;
      }
      SelectAllFeature2.prototype.onSpaceKeyDown = function(e) {
        var checkbox = this.cbSelectAll;
        var eDocument = this.gridOptionsService.getDocument();
        if (checkbox.isDisplayed() && !checkbox.getGui().contains(eDocument.activeElement)) {
          e.preventDefault();
          checkbox.setValue(!checkbox.getValue());
        }
      };
      SelectAllFeature2.prototype.getCheckboxGui = function() {
        return this.cbSelectAll.getGui();
      };
      SelectAllFeature2.prototype.setComp = function(ctrl) {
        this.headerCellCtrl = ctrl;
        this.cbSelectAll = this.createManagedBean(new AgCheckbox());
        this.cbSelectAll.addCssClass("ag-header-select-all");
        setAriaRole(this.cbSelectAll.getGui(), "presentation");
        this.showOrHideSelectAll();
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.showOrHideSelectAll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onSelectionChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
        this.addManagedListener(this.cbSelectAll, Events.EVENT_FIELD_VALUE_CHANGED, this.onCbSelectAll.bind(this));
        setAriaHidden(this.cbSelectAll.getGui(), true);
        this.cbSelectAll.getInputElement().setAttribute("tabindex", "-1");
        this.refreshSelectAllLabel();
      };
      SelectAllFeature2.prototype.showOrHideSelectAll = function() {
        this.cbSelectAllVisible = this.isCheckboxSelection();
        this.cbSelectAll.setDisplayed(this.cbSelectAllVisible, { skipAriaHidden: true });
        if (this.cbSelectAllVisible) {
          this.checkRightRowModelType("selectAllCheckbox");
          this.checkSelectionType("selectAllCheckbox");
          this.updateStateOfCheckbox();
        }
        this.refreshSelectAllLabel();
      };
      SelectAllFeature2.prototype.onModelChanged = function() {
        if (!this.cbSelectAllVisible) {
          return;
        }
        this.updateStateOfCheckbox();
      };
      SelectAllFeature2.prototype.onSelectionChanged = function() {
        if (!this.cbSelectAllVisible) {
          return;
        }
        this.updateStateOfCheckbox();
      };
      SelectAllFeature2.prototype.updateStateOfCheckbox = function() {
        if (this.processingEventFromCheckbox) {
          return;
        }
        this.processingEventFromCheckbox = true;
        var allSelected = this.selectionService.getSelectAllState(this.filteredOnly, this.currentPageOnly);
        this.cbSelectAll.setValue(allSelected);
        this.refreshSelectAllLabel();
        this.processingEventFromCheckbox = false;
      };
      SelectAllFeature2.prototype.refreshSelectAllLabel = function() {
        var translate = this.localeService.getLocaleTextFunc();
        var checked = this.cbSelectAll.getValue();
        var ariaStatus = checked ? translate("ariaChecked", "checked") : translate("ariaUnchecked", "unchecked");
        var ariaLabel = translate("ariaRowSelectAll", "Press Space to toggle all rows selection");
        if (!this.cbSelectAllVisible) {
          this.headerCellCtrl.setAriaDescriptionProperty("selectAll", null);
        } else {
          this.headerCellCtrl.setAriaDescriptionProperty("selectAll", ariaLabel + " (" + ariaStatus + ")");
        }
        this.cbSelectAll.setInputAriaLabel(ariaLabel + " (" + ariaStatus + ")");
        this.headerCellCtrl.refreshAriaDescription();
      };
      SelectAllFeature2.prototype.checkSelectionType = function(feature) {
        var isMultiSelect = this.gridOptionsService.get("rowSelection") === "multiple";
        if (!isMultiSelect) {
          console.warn("AG Grid: " + feature + " is only available if using 'multiple' rowSelection.");
          return false;
        }
        return true;
      };
      SelectAllFeature2.prototype.checkRightRowModelType = function(feature) {
        var rowModelType = this.rowModel.getType();
        var rowModelMatches = rowModelType === "clientSide" || rowModelType === "serverSide";
        if (!rowModelMatches) {
          console.warn("AG Grid: " + feature + " is only available if using 'clientSide' or 'serverSide' rowModelType, you are using " + rowModelType + ".");
          return false;
        }
        return true;
      };
      SelectAllFeature2.prototype.onCbSelectAll = function() {
        if (this.processingEventFromCheckbox) {
          return;
        }
        if (!this.cbSelectAllVisible) {
          return;
        }
        var value = this.cbSelectAll.getValue();
        var source = "uiSelectAll";
        if (this.currentPageOnly)
          source = "uiSelectAllCurrentPage";
        else if (this.filteredOnly)
          source = "uiSelectAllFiltered";
        var params = {
          source,
          justFiltered: this.filteredOnly,
          justCurrentPage: this.currentPageOnly
        };
        if (value) {
          this.selectionService.selectAllRowNodes(params);
        } else {
          this.selectionService.deselectAllRowNodes(params);
        }
      };
      SelectAllFeature2.prototype.isCheckboxSelection = function() {
        var result = this.column.getColDef().headerCheckboxSelection;
        if (typeof result === "function") {
          var func = result;
          var params = {
            column: this.column,
            colDef: this.column.getColDef(),
            columnApi: this.columnApi,
            api: this.gridApi,
            context: this.gridOptionsService.context
          };
          result = func(params);
        }
        if (result) {
          return this.checkRightRowModelType("headerCheckboxSelection") && this.checkSelectionType("headerCheckboxSelection");
        }
        return false;
      };
      __decorate$1r([
        Autowired("gridApi")
      ], SelectAllFeature2.prototype, "gridApi", void 0);
      __decorate$1r([
        Autowired("columnApi")
      ], SelectAllFeature2.prototype, "columnApi", void 0);
      __decorate$1r([
        Autowired("rowModel")
      ], SelectAllFeature2.prototype, "rowModel", void 0);
      __decorate$1r([
        Autowired("selectionService")
      ], SelectAllFeature2.prototype, "selectionService", void 0);
      return SelectAllFeature2;
    }(BeanStub);
    __extends$1v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(TabGuardClassNames2) {
      TabGuardClassNames2["TAB_GUARD"] = "ag-tab-guard";
      TabGuardClassNames2["TAB_GUARD_TOP"] = "ag-tab-guard-top";
      TabGuardClassNames2["TAB_GUARD_BOTTOM"] = "ag-tab-guard-bottom";
    })(TabGuardClassNames || (TabGuardClassNames = {}));
    TabGuardCtrl = /** @class */
    function(_super) {
      __extends$1v(TabGuardCtrl2, _super);
      function TabGuardCtrl2(params) {
        var _this = _super.call(this) || this;
        _this.skipTabGuardFocus = false;
        var comp = params.comp, eTopGuard = params.eTopGuard, eBottomGuard = params.eBottomGuard, focusInnerElement = params.focusInnerElement, onFocusIn = params.onFocusIn, onFocusOut = params.onFocusOut, shouldStopEventPropagation = params.shouldStopEventPropagation, onTabKeyDown = params.onTabKeyDown, handleKeyDown = params.handleKeyDown, eFocusableElement = params.eFocusableElement;
        _this.comp = comp;
        _this.eTopGuard = eTopGuard;
        _this.eBottomGuard = eBottomGuard;
        _this.providedFocusInnerElement = focusInnerElement;
        _this.eFocusableElement = eFocusableElement;
        _this.providedFocusIn = onFocusIn;
        _this.providedFocusOut = onFocusOut;
        _this.providedShouldStopEventPropagation = shouldStopEventPropagation;
        _this.providedOnTabKeyDown = onTabKeyDown;
        _this.providedHandleKeyDown = handleKeyDown;
        return _this;
      }
      TabGuardCtrl2.prototype.postConstruct = function() {
        var _this = this;
        this.createManagedBean(new ManagedFocusFeature(this.eFocusableElement, {
          shouldStopEventPropagation: function() {
            return _this.shouldStopEventPropagation();
          },
          onTabKeyDown: function(e) {
            return _this.onTabKeyDown(e);
          },
          handleKeyDown: function(e) {
            return _this.handleKeyDown(e);
          },
          onFocusIn: function(e) {
            return _this.onFocusIn(e);
          },
          onFocusOut: function(e) {
            return _this.onFocusOut(e);
          }
        }));
        this.activateTabGuards();
        [this.eTopGuard, this.eBottomGuard].forEach(function(guard) {
          return _this.addManagedListener(guard, "focus", _this.onFocus.bind(_this));
        });
      };
      TabGuardCtrl2.prototype.handleKeyDown = function(e) {
        if (this.providedHandleKeyDown) {
          this.providedHandleKeyDown(e);
        }
      };
      TabGuardCtrl2.prototype.tabGuardsAreActive = function() {
        return !!this.eTopGuard && this.eTopGuard.hasAttribute("tabIndex");
      };
      TabGuardCtrl2.prototype.shouldStopEventPropagation = function() {
        if (this.providedShouldStopEventPropagation) {
          return this.providedShouldStopEventPropagation();
        }
        return false;
      };
      TabGuardCtrl2.prototype.activateTabGuards = function() {
        var tabIndex = this.gridOptionsService.getNum("tabIndex") || 0;
        this.comp.setTabIndex(tabIndex.toString());
      };
      TabGuardCtrl2.prototype.deactivateTabGuards = function() {
        this.comp.setTabIndex();
      };
      TabGuardCtrl2.prototype.onFocus = function(e) {
        if (this.skipTabGuardFocus) {
          this.skipTabGuardFocus = false;
          return;
        }
        var fromBottom = e.target === this.eBottomGuard;
        if (this.providedFocusInnerElement) {
          this.providedFocusInnerElement(fromBottom);
        } else {
          this.focusInnerElement(fromBottom);
        }
      };
      TabGuardCtrl2.prototype.onFocusIn = function(e) {
        if (this.providedFocusIn && this.providedFocusIn(e)) {
          return;
        }
        this.deactivateTabGuards();
      };
      TabGuardCtrl2.prototype.onFocusOut = function(e) {
        if (this.providedFocusOut && this.providedFocusOut(e)) {
          return;
        }
        if (!this.eFocusableElement.contains(e.relatedTarget)) {
          this.activateTabGuards();
        }
      };
      TabGuardCtrl2.prototype.onTabKeyDown = function(e) {
        var _this = this;
        if (this.providedOnTabKeyDown) {
          this.providedOnTabKeyDown(e);
          return;
        }
        if (e.defaultPrevented) {
          return;
        }
        var tabGuardsAreActive = this.tabGuardsAreActive();
        if (tabGuardsAreActive) {
          this.deactivateTabGuards();
        }
        var nextRoot = this.getNextFocusableElement(e.shiftKey);
        if (tabGuardsAreActive) {
          setTimeout(function() {
            return _this.activateTabGuards();
          }, 0);
        }
        if (!nextRoot) {
          return;
        }
        nextRoot.focus();
        e.preventDefault();
      };
      TabGuardCtrl2.prototype.focusInnerElement = function(fromBottom) {
        if (fromBottom === void 0) {
          fromBottom = false;
        }
        var focusable = this.focusService.findFocusableElements(this.eFocusableElement);
        if (this.tabGuardsAreActive()) {
          focusable.splice(0, 1);
          focusable.splice(focusable.length - 1, 1);
        }
        if (!focusable.length) {
          return;
        }
        focusable[fromBottom ? focusable.length - 1 : 0].focus({ preventScroll: true });
      };
      TabGuardCtrl2.prototype.getNextFocusableElement = function(backwards) {
        return this.focusService.findNextFocusableElement(this.eFocusableElement, false, backwards);
      };
      TabGuardCtrl2.prototype.forceFocusOutOfContainer = function(up) {
        if (up === void 0) {
          up = false;
        }
        var tabGuardToFocus = up ? this.eTopGuard : this.eBottomGuard;
        this.activateTabGuards();
        this.skipTabGuardFocus = true;
        tabGuardToFocus.focus();
      };
      __decorate$1q([
        Autowired("focusService")
      ], TabGuardCtrl2.prototype, "focusService", void 0);
      __decorate$1q([
        PostConstruct
      ], TabGuardCtrl2.prototype, "postConstruct", null);
      return TabGuardCtrl2;
    }(BeanStub);
    __extends$1u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$7 = function() {
      __assign$7 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$7.apply(this, arguments);
    };
    __decorate$1p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$g = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$e = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    FocusService = /** @class */
    function(_super) {
      __extends$1u(FocusService2, _super);
      function FocusService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FocusService_1 = FocusService2;
      FocusService2.addKeyboardModeEvents = function(doc, controller) {
        var docControllers = FocusService_1.instancesMonitored.get(doc);
        if (docControllers && docControllers.length > 0) {
          if (docControllers.indexOf(controller) === -1) {
            docControllers.push(controller);
          }
        } else {
          FocusService_1.instancesMonitored.set(doc, [controller]);
          doc.addEventListener("keydown", FocusService_1.toggleKeyboardMode);
          doc.addEventListener("mousedown", FocusService_1.toggleKeyboardMode);
        }
      };
      FocusService2.removeKeyboardModeEvents = function(doc, controller) {
        var docControllers = FocusService_1.instancesMonitored.get(doc);
        var newControllers = [];
        if (docControllers && docControllers.length) {
          newControllers = __spreadArray$e([], __read$g(docControllers)).filter(function(currentGridCore) {
            return currentGridCore !== controller;
          });
          FocusService_1.instancesMonitored.set(doc, newControllers);
        }
        if (newControllers.length === 0) {
          doc.removeEventListener("keydown", FocusService_1.toggleKeyboardMode);
          doc.removeEventListener("mousedown", FocusService_1.toggleKeyboardMode);
        }
      };
      FocusService2.toggleKeyboardMode = function(event) {
        var isKeyboardActive = FocusService_1.keyboardModeActive;
        var isKeyboardEvent = event.type === "keydown";
        if (isKeyboardEvent) {
          if (event.ctrlKey || event.metaKey || event.altKey) {
            return;
          }
        }
        if (isKeyboardActive && isKeyboardEvent || !isKeyboardActive && !isKeyboardEvent) {
          return;
        }
        FocusService_1.keyboardModeActive = isKeyboardEvent;
        var doc = event.target.ownerDocument;
        if (!doc) {
          return;
        }
        var controllersForDoc = FocusService_1.instancesMonitored.get(doc);
        if (controllersForDoc) {
          controllersForDoc.forEach(function(controller) {
            controller.dispatchEvent({ type: isKeyboardEvent ? Events.EVENT_KEYBOARD_FOCUS : Events.EVENT_MOUSE_FOCUS });
          });
        }
      };
      FocusService2.prototype.init = function() {
        var _this = this;
        var clearFocusedCellListener = this.clearFocusedCell.bind(this);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, clearFocusedCellListener);
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverythingChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, clearFocusedCellListener);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, clearFocusedCellListener);
        this.ctrlsService.whenReady(function(p) {
          _this.gridCtrl = p.gridCtrl;
          var doc = _this.gridOptionsService.getDocument();
          FocusService_1.addKeyboardModeEvents(doc, _this.gridCtrl);
          _this.addDestroyFunc(function() {
            return _this.unregisterGridCompController(_this.gridCtrl);
          });
        });
      };
      FocusService2.prototype.unregisterGridCompController = function(gridCompController) {
        var doc = this.gridOptionsService.getDocument();
        FocusService_1.removeKeyboardModeEvents(doc, gridCompController);
      };
      FocusService2.prototype.onColumnEverythingChanged = function() {
        if (!this.focusedCellPosition) {
          return;
        }
        var col = this.focusedCellPosition.column;
        var colFromColumnModel = this.columnModel.getGridColumn(col.getId());
        if (col !== colFromColumnModel) {
          this.clearFocusedCell();
        }
      };
      FocusService2.prototype.isKeyboardMode = function() {
        return FocusService_1.keyboardModeActive;
      };
      FocusService2.prototype.getFocusCellToUseAfterRefresh = function() {
        var eDocument = this.gridOptionsService.getDocument();
        if (this.gridOptionsService.is("suppressFocusAfterRefresh") || !this.focusedCellPosition) {
          return null;
        }
        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL)) {
          return null;
        }
        return this.focusedCellPosition;
      };
      FocusService2.prototype.getFocusHeaderToUseAfterRefresh = function() {
        var eDocument = this.gridOptionsService.getDocument();
        if (this.gridOptionsService.is("suppressFocusAfterRefresh") || !this.focusedHeaderPosition) {
          return null;
        }
        if (this.isDomDataMissingInHierarchy(eDocument.activeElement, AbstractHeaderCellCtrl.DOM_DATA_KEY_HEADER_CTRL)) {
          return null;
        }
        return this.focusedHeaderPosition;
      };
      FocusService2.prototype.isDomDataMissingInHierarchy = function(eBrowserCell, key) {
        var ePointer = eBrowserCell;
        while (ePointer) {
          var data = this.gridOptionsService.getDomData(ePointer, key);
          if (data) {
            return false;
          }
          ePointer = ePointer.parentNode;
        }
        return true;
      };
      FocusService2.prototype.getFocusedCell = function() {
        return this.focusedCellPosition;
      };
      FocusService2.prototype.shouldRestoreFocus = function(cell) {
        var _this = this;
        if (this.isCellRestoreFocused(cell)) {
          setTimeout(function() {
            _this.restoredFocusedCellPosition = null;
          }, 0);
          return true;
        }
        return false;
      };
      FocusService2.prototype.isCellRestoreFocused = function(cellPosition) {
        if (this.restoredFocusedCellPosition == null) {
          return false;
        }
        return this.cellPositionUtils.equals(cellPosition, this.restoredFocusedCellPosition);
      };
      FocusService2.prototype.setRestoreFocusedCell = function(cellPosition) {
        if (this.getFrameworkOverrides().renderingEngine === "react") {
          this.restoredFocusedCellPosition = cellPosition;
        }
      };
      FocusService2.prototype.getFocusEventParams = function() {
        var _a = this.focusedCellPosition, rowIndex = _a.rowIndex, rowPinned = _a.rowPinned, column = _a.column;
        var params = {
          rowIndex,
          rowPinned,
          column,
          isFullWidthCell: false
        };
        var rowCtrl = this.rowRenderer.getRowByPosition({ rowIndex, rowPinned });
        if (rowCtrl) {
          params.isFullWidthCell = rowCtrl.isFullWidth();
        }
        return params;
      };
      FocusService2.prototype.clearFocusedCell = function() {
        this.restoredFocusedCellPosition = null;
        if (this.focusedCellPosition == null) {
          return;
        }
        var event = __assign$7({ type: Events.EVENT_CELL_FOCUS_CLEARED }, this.getFocusEventParams());
        this.focusedCellPosition = null;
        this.eventService.dispatchEvent(event);
      };
      FocusService2.prototype.setFocusedCell = function(params) {
        var column = params.column, rowIndex = params.rowIndex, rowPinned = params.rowPinned, _a = params.forceBrowserFocus, forceBrowserFocus = _a === void 0 ? false : _a, _b = params.preventScrollOnBrowserFocus, preventScrollOnBrowserFocus = _b === void 0 ? false : _b;
        var gridColumn = this.columnModel.getGridColumn(column);
        if (!gridColumn) {
          this.focusedCellPosition = null;
          return;
        }
        this.focusedCellPosition = gridColumn ? {
          rowIndex,
          rowPinned: makeNull(rowPinned),
          column: gridColumn
        } : null;
        var event = __assign$7(__assign$7({ type: Events.EVENT_CELL_FOCUSED }, this.getFocusEventParams()), { forceBrowserFocus, preventScrollOnBrowserFocus, floating: null });
        this.eventService.dispatchEvent(event);
      };
      FocusService2.prototype.isCellFocused = function(cellPosition) {
        if (this.focusedCellPosition == null) {
          return false;
        }
        return this.cellPositionUtils.equals(cellPosition, this.focusedCellPosition);
      };
      FocusService2.prototype.isRowNodeFocused = function(rowNode) {
        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
      };
      FocusService2.prototype.isHeaderWrapperFocused = function(headerCtrl) {
        if (this.focusedHeaderPosition == null) {
          return false;
        }
        var column = headerCtrl.getColumnGroupChild();
        var headerRowIndex = headerCtrl.getRowIndex();
        var pinned = headerCtrl.getPinned();
        var _a = this.focusedHeaderPosition, focusedColumn = _a.column, focusedHeaderRowIndex = _a.headerRowIndex;
        return column === focusedColumn && headerRowIndex === focusedHeaderRowIndex && pinned == focusedColumn.getPinned();
      };
      FocusService2.prototype.clearFocusedHeader = function() {
        this.focusedHeaderPosition = null;
      };
      FocusService2.prototype.getFocusedHeader = function() {
        return this.focusedHeaderPosition;
      };
      FocusService2.prototype.setFocusedHeader = function(headerRowIndex, column) {
        this.focusedHeaderPosition = { headerRowIndex, column };
      };
      FocusService2.prototype.focusHeaderPosition = function(params) {
        var direction = params.direction, fromTab = params.fromTab, allowUserOverride = params.allowUserOverride, event = params.event, fromCell = params.fromCell;
        var headerPosition = params.headerPosition;
        if (fromCell && this.filterManager.isAdvancedFilterHeaderActive()) {
          return this.focusAdvancedFilter(headerPosition);
        }
        if (allowUserOverride) {
          var currentPosition = this.getFocusedHeader();
          var headerRowCount = this.headerNavigationService.getHeaderRowCount();
          if (fromTab) {
            var userFunc = this.gridOptionsService.getCallback("tabToNextHeader");
            if (userFunc) {
              var params_1 = {
                backwards: direction === "Before",
                previousHeaderPosition: currentPosition,
                nextHeaderPosition: headerPosition,
                headerRowCount
              };
              headerPosition = userFunc(params_1);
            }
          } else {
            var userFunc = this.gridOptionsService.getCallback("navigateToNextHeader");
            if (userFunc && event) {
              var params_2 = {
                key: event.key,
                previousHeaderPosition: currentPosition,
                nextHeaderPosition: headerPosition,
                headerRowCount,
                event
              };
              headerPosition = userFunc(params_2);
            }
          }
        }
        if (!headerPosition) {
          return false;
        }
        if (headerPosition.headerRowIndex === -1) {
          if (this.filterManager.isAdvancedFilterHeaderActive()) {
            return this.focusAdvancedFilter(headerPosition);
          } else {
            return this.focusGridView(headerPosition.column);
          }
        }
        this.headerNavigationService.scrollToColumn(headerPosition.column, direction);
        var headerRowContainerCtrl = this.ctrlsService.getHeaderRowContainerCtrl(headerPosition.column.getPinned());
        var focusSuccess = headerRowContainerCtrl.focusHeader(headerPosition.headerRowIndex, headerPosition.column, event);
        return focusSuccess;
      };
      FocusService2.prototype.focusFirstHeader = function() {
        var firstColumn = this.columnModel.getAllDisplayedColumns()[0];
        if (!firstColumn) {
          return false;
        }
        if (firstColumn.getParent()) {
          firstColumn = this.columnModel.getColumnGroupAtLevel(firstColumn, 0);
        }
        return this.focusHeaderPosition({
          headerPosition: { headerRowIndex: 0, column: firstColumn }
        });
      };
      FocusService2.prototype.focusLastHeader = function(event) {
        var headerRowIndex = this.headerNavigationService.getHeaderRowCount() - 1;
        var column = last(this.columnModel.getAllDisplayedColumns());
        return this.focusHeaderPosition({
          headerPosition: { headerRowIndex, column },
          event
        });
      };
      FocusService2.prototype.focusPreviousFromFirstCell = function(event) {
        if (this.filterManager.isAdvancedFilterHeaderActive()) {
          return this.focusAdvancedFilter(null);
        } else {
          return this.focusLastHeader(event);
        }
      };
      FocusService2.prototype.isAnyCellFocused = function() {
        return !!this.focusedCellPosition;
      };
      FocusService2.prototype.isRowFocused = function(rowIndex, floating) {
        if (this.focusedCellPosition == null) {
          return false;
        }
        return this.focusedCellPosition.rowIndex === rowIndex && this.focusedCellPosition.rowPinned === makeNull(floating);
      };
      FocusService2.prototype.findFocusableElements = function(rootNode, exclude, onlyUnmanaged) {
        if (onlyUnmanaged === void 0) {
          onlyUnmanaged = false;
        }
        var focusableString = FOCUSABLE_SELECTOR;
        var excludeString = FOCUSABLE_EXCLUDE;
        if (exclude) {
          excludeString += ", " + exclude;
        }
        if (onlyUnmanaged) {
          excludeString += ', [tabindex="-1"]';
        }
        var nodes = Array.prototype.slice.apply(rootNode.querySelectorAll(focusableString));
        var excludeNodes = Array.prototype.slice.apply(rootNode.querySelectorAll(excludeString));
        if (!excludeNodes.length) {
          return nodes;
        }
        var diff = function(a, b) {
          return a.filter(function(element) {
            return b.indexOf(element) === -1;
          });
        };
        return diff(nodes, excludeNodes);
      };
      FocusService2.prototype.focusInto = function(rootNode, up, onlyUnmanaged) {
        if (up === void 0) {
          up = false;
        }
        if (onlyUnmanaged === void 0) {
          onlyUnmanaged = false;
        }
        var focusableElements = this.findFocusableElements(rootNode, null, onlyUnmanaged);
        var toFocus = up ? last(focusableElements) : focusableElements[0];
        if (toFocus) {
          toFocus.focus({ preventScroll: true });
          return true;
        }
        return false;
      };
      FocusService2.prototype.findFocusableElementBeforeTabGuard = function(rootNode, referenceElement) {
        if (!referenceElement) {
          return null;
        }
        var focusableElements = this.findFocusableElements(rootNode);
        var referenceIndex = focusableElements.indexOf(referenceElement);
        if (referenceIndex === -1) {
          return null;
        }
        var lastTabGuardIndex = -1;
        for (var i = referenceIndex - 1; i >= 0; i--) {
          if (focusableElements[i].classList.contains(TabGuardClassNames.TAB_GUARD_TOP)) {
            lastTabGuardIndex = i;
            break;
          }
        }
        if (lastTabGuardIndex <= 0) {
          return null;
        }
        return focusableElements[lastTabGuardIndex - 1];
      };
      FocusService2.prototype.findNextFocusableElement = function(rootNode, onlyManaged, backwards) {
        if (rootNode === void 0) {
          rootNode = this.eGridDiv;
        }
        var focusable = this.findFocusableElements(rootNode, onlyManaged ? ':not([tabindex="-1"])' : null);
        var eDocument = this.gridOptionsService.getDocument();
        var activeEl = eDocument.activeElement;
        var currentIndex;
        if (onlyManaged) {
          currentIndex = focusable.findIndex(function(el) {
            return el.contains(activeEl);
          });
        } else {
          currentIndex = focusable.indexOf(activeEl);
        }
        var nextIndex = currentIndex + (backwards ? -1 : 1);
        if (nextIndex < 0 || nextIndex >= focusable.length) {
          return null;
        }
        return focusable[nextIndex];
      };
      FocusService2.prototype.isTargetUnderManagedComponent = function(rootNode, target) {
        if (!target) {
          return false;
        }
        var managedContainers = rootNode.querySelectorAll("." + ManagedFocusFeature.FOCUS_MANAGED_CLASS);
        if (!managedContainers.length) {
          return false;
        }
        for (var i = 0; i < managedContainers.length; i++) {
          if (managedContainers[i].contains(target)) {
            return true;
          }
        }
        return false;
      };
      FocusService2.prototype.findTabbableParent = function(node, limit) {
        if (limit === void 0) {
          limit = 5;
        }
        var counter = 0;
        while (node && getTabIndex(node) === null && ++counter <= limit) {
          node = node.parentElement;
        }
        if (getTabIndex(node) === null) {
          return null;
        }
        return node;
      };
      FocusService2.prototype.focusGridView = function(column, backwards) {
        if (this.gridOptionsService.is("suppressCellFocus")) {
          if (backwards) {
            return this.focusLastHeader();
          }
          return this.focusNextGridCoreContainer(false);
        }
        var nextRow = backwards ? this.rowPositionUtils.getLastRow() : this.rowPositionUtils.getFirstRow();
        if (!nextRow) {
          return false;
        }
        var rowIndex = nextRow.rowIndex, rowPinned = nextRow.rowPinned;
        var focusedHeader = this.getFocusedHeader();
        if (!column && focusedHeader) {
          column = focusedHeader.column;
        }
        if (rowIndex == null || !column) {
          return false;
        }
        this.navigationService.ensureCellVisible({ rowIndex, column, rowPinned });
        this.setFocusedCell({
          rowIndex,
          column,
          rowPinned: makeNull(rowPinned),
          forceBrowserFocus: true
        });
        if (this.rangeService) {
          var cellPosition = { rowIndex, rowPinned, column };
          this.rangeService.setRangeToCell(cellPosition);
        }
        return true;
      };
      FocusService2.prototype.focusNextGridCoreContainer = function(backwards, forceOut) {
        if (forceOut === void 0) {
          forceOut = false;
        }
        if (!forceOut && this.gridCtrl.focusNextInnerContainer(backwards)) {
          return true;
        }
        if (forceOut || !backwards && !this.gridCtrl.isDetailGrid()) {
          this.gridCtrl.forceFocusOutOfContainer(backwards);
        }
        return false;
      };
      FocusService2.prototype.focusAdvancedFilter = function(position) {
        this.advancedFilterFocusColumn = position === null || position === void 0 ? void 0 : position.column;
        return this.advancedFilterService.getCtrl().focusHeaderComp();
      };
      FocusService2.prototype.focusNextFromAdvancedFilter = function(backwards, forceFirstColumn) {
        var _a, _b;
        var column = (_a = forceFirstColumn ? void 0 : this.advancedFilterFocusColumn) !== null && _a !== void 0 ? _a : (_b = this.columnModel.getAllDisplayedColumns()) === null || _b === void 0 ? void 0 : _b[0];
        if (backwards) {
          return this.focusHeaderPosition({
            headerPosition: {
              column,
              headerRowIndex: this.headerNavigationService.getHeaderRowCount() - 1
            }
          });
        } else {
          return this.focusGridView(column);
        }
      };
      FocusService2.prototype.clearAdvancedFilterColumn = function() {
        this.advancedFilterFocusColumn = void 0;
      };
      var FocusService_1;
      FocusService2.AG_KEYBOARD_FOCUS = "ag-keyboard-focus";
      FocusService2.keyboardModeActive = false;
      FocusService2.instancesMonitored = /* @__PURE__ */ new Map();
      __decorate$1p([
        Autowired("eGridDiv")
      ], FocusService2.prototype, "eGridDiv", void 0);
      __decorate$1p([
        Autowired("columnModel")
      ], FocusService2.prototype, "columnModel", void 0);
      __decorate$1p([
        Autowired("headerNavigationService")
      ], FocusService2.prototype, "headerNavigationService", void 0);
      __decorate$1p([
        Autowired("rowRenderer")
      ], FocusService2.prototype, "rowRenderer", void 0);
      __decorate$1p([
        Autowired("rowPositionUtils")
      ], FocusService2.prototype, "rowPositionUtils", void 0);
      __decorate$1p([
        Autowired("cellPositionUtils")
      ], FocusService2.prototype, "cellPositionUtils", void 0);
      __decorate$1p([
        Optional("rangeService")
      ], FocusService2.prototype, "rangeService", void 0);
      __decorate$1p([
        Autowired("navigationService")
      ], FocusService2.prototype, "navigationService", void 0);
      __decorate$1p([
        Autowired("ctrlsService")
      ], FocusService2.prototype, "ctrlsService", void 0);
      __decorate$1p([
        Autowired("filterManager")
      ], FocusService2.prototype, "filterManager", void 0);
      __decorate$1p([
        Optional("advancedFilterService")
      ], FocusService2.prototype, "advancedFilterService", void 0);
      __decorate$1p([
        PostConstruct
      ], FocusService2.prototype, "init", null);
      FocusService2 = FocusService_1 = __decorate$1p([
        Bean("focusService")
      ], FocusService2);
      return FocusService2;
    }(BeanStub);
    __extends$1t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderCellCtrl = /** @class */
    function(_super) {
      __extends$1t(HeaderCellCtrl2, _super);
      function HeaderCellCtrl2(column, parentRowCtrl) {
        var _this = _super.call(this, column, parentRowCtrl) || this;
        _this.refreshFunctions = [];
        _this.userHeaderClasses = /* @__PURE__ */ new Set();
        _this.ariaDescriptionProperties = /* @__PURE__ */ new Map();
        _this.column = column;
        return _this;
      }
      HeaderCellCtrl2.prototype.setComp = function(comp, eGui, eResize, eHeaderCompWrapper) {
        var _this = this;
        _super.prototype.setGui.call(this, eGui);
        this.comp = comp;
        this.updateState();
        this.setupWidth();
        this.setupMovingCss();
        this.setupMenuClass();
        this.setupSortableClass();
        this.setupWrapTextClass();
        this.refreshSpanHeaderHeight();
        this.setupAutoHeight(eHeaderCompWrapper);
        this.addColumnHoverListener();
        this.setupFilterCss();
        this.setupClassesFromColDef();
        this.setupTooltip();
        this.addActiveHeaderMouseListeners();
        this.setupSelectAll();
        this.setupUserComp();
        this.refreshAria();
        this.createManagedBean(new ResizeFeature(this.getPinned(), this.column, eResize, comp, this));
        this.createManagedBean(new HoverFeature([this.column], eGui));
        this.createManagedBean(new SetLeftFeature(this.column, eGui, this.beans));
        this.createManagedBean(new ManagedFocusFeature(eGui, {
          shouldStopEventPropagation: function(e) {
            return _this.shouldStopEventPropagation(e);
          },
          onTabKeyDown: function() {
            return null;
          },
          handleKeyDown: this.handleKeyDown.bind(this),
          onFocusIn: this.onFocusIn.bind(this),
          onFocusOut: this.onFocusOut.bind(this)
        }));
        this.addMouseDownListenerIfNeeded(eGui);
        this.addManagedListener(this.column, Column.EVENT_COL_DEF_CHANGED, this.onColDefChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_HEADER_HEIGHT_CHANGED, this.onHeaderHeightChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onHeaderHeightChanged.bind(this));
      };
      HeaderCellCtrl2.prototype.addMouseDownListenerIfNeeded = function(eGui) {
        var _this = this;
        if (!isBrowserSafari()) {
          return;
        }
        var events = ["mousedown", "touchstart"];
        var eDocument = this.gridOptionsService.getDocument();
        events.forEach(function(eventName) {
          _this.addManagedListener(eGui, eventName, function(e) {
            var activeEl = eDocument.activeElement;
            if (activeEl !== eGui && !eGui.contains(activeEl)) {
              eGui.focus();
              FocusService.toggleKeyboardMode(e);
            }
          });
        });
      };
      HeaderCellCtrl2.prototype.setupUserComp = function() {
        var compDetails = this.lookupUserCompDetails();
        this.setCompDetails(compDetails);
      };
      HeaderCellCtrl2.prototype.setCompDetails = function(compDetails) {
        this.userCompDetails = compDetails;
        this.comp.setUserCompDetails(compDetails);
      };
      HeaderCellCtrl2.prototype.lookupUserCompDetails = function() {
        var params = this.createParams();
        var colDef = this.column.getColDef();
        return this.userComponentFactory.getHeaderCompDetails(colDef, params);
      };
      HeaderCellCtrl2.prototype.createParams = function() {
        var _this = this;
        var colDef = this.column.getColDef();
        var params = {
          column: this.column,
          displayName: this.displayName,
          enableSorting: colDef.sortable,
          enableMenu: this.menuEnabled,
          showColumnMenu: function(source) {
            _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
          },
          progressSort: function(multiSort) {
            _this.sortController.progressSort(_this.column, !!multiSort, "uiColumnSorted");
          },
          setSort: function(sort, multiSort) {
            _this.sortController.setSortForColumn(_this.column, sort, !!multiSort, "uiColumnSorted");
          },
          api: this.gridApi,
          columnApi: this.columnApi,
          context: this.gridOptionsService.context,
          eGridHeader: this.getGui()
        };
        return params;
      };
      HeaderCellCtrl2.prototype.setupSelectAll = function() {
        this.selectAllFeature = this.createManagedBean(new SelectAllFeature(this.column));
        this.selectAllFeature.setComp(this);
      };
      HeaderCellCtrl2.prototype.getSelectAllGui = function() {
        return this.selectAllFeature.getCheckboxGui();
      };
      HeaderCellCtrl2.prototype.handleKeyDown = function(e) {
        _super.prototype.handleKeyDown.call(this, e);
        if (e.key === KeyCode.SPACE) {
          this.selectAllFeature.onSpaceKeyDown(e);
        }
        if (e.key === KeyCode.ENTER) {
          this.onEnterKeyDown(e);
        }
      };
      HeaderCellCtrl2.prototype.onEnterKeyDown = function(e) {
        var headerComp = this.comp.getUserCompInstance();
        if (!headerComp) {
          return;
        }
        if (e.ctrlKey || e.metaKey) {
          if (this.menuEnabled && headerComp.showMenu) {
            e.preventDefault();
            headerComp.showMenu();
          }
        } else if (this.sortable) {
          var multiSort = e.shiftKey;
          this.sortController.progressSort(this.column, multiSort, "uiColumnSorted");
        }
      };
      HeaderCellCtrl2.prototype.isMenuEnabled = function() {
        return this.menuEnabled;
      };
      HeaderCellCtrl2.prototype.onFocusIn = function(e) {
        if (!this.getGui().contains(e.relatedTarget)) {
          var rowIndex = this.getRowIndex();
          this.focusService.setFocusedHeader(rowIndex, this.column);
        }
        this.setActiveHeader(true);
      };
      HeaderCellCtrl2.prototype.onFocusOut = function(e) {
        if (this.getGui().contains(e.relatedTarget)) {
          return;
        }
        this.setActiveHeader(false);
      };
      HeaderCellCtrl2.prototype.setupTooltip = function() {
        var _this = this;
        var tooltipCtrl = {
          getColumn: function() {
            return _this.column;
          },
          getColDef: function() {
            return _this.column.getColDef();
          },
          getGui: function() {
            return _this.eGui;
          },
          getLocation: function() {
            return "header";
          },
          getTooltipValue: function() {
            var res = _this.column.getColDef().headerTooltip;
            return res;
          }
        };
        var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));
        tooltipFeature.setComp(this.eGui);
        this.refreshFunctions.push(function() {
          return tooltipFeature.refreshToolTip();
        });
      };
      HeaderCellCtrl2.prototype.setupClassesFromColDef = function() {
        var _this = this;
        var refreshHeaderClasses = function() {
          var colDef = _this.column.getColDef();
          var classes = CssClassApplier.getHeaderClassesFromColDef(colDef, _this.gridOptionsService, _this.column, null);
          var oldClasses = _this.userHeaderClasses;
          _this.userHeaderClasses = new Set(classes);
          classes.forEach(function(c) {
            if (oldClasses.has(c)) {
              oldClasses.delete(c);
            } else {
              _this.comp.addOrRemoveCssClass(c, true);
            }
          });
          oldClasses.forEach(function(c) {
            return _this.comp.addOrRemoveCssClass(c, false);
          });
        };
        this.refreshFunctions.push(refreshHeaderClasses);
        refreshHeaderClasses();
      };
      HeaderCellCtrl2.prototype.setDragSource = function(eSource) {
        var _this = this;
        this.dragSourceElement = eSource;
        this.removeDragSource();
        if (!eSource) {
          return;
        }
        if (!this.draggable) {
          return;
        }
        var hideColumnOnExit = !this.gridOptionsService.is("suppressDragLeaveHidesColumns");
        this.moveDragSource = {
          type: DragSourceType.HeaderCell,
          eElement: eSource,
          getDefaultIconName: function() {
            return hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED;
          },
          getDragItem: function() {
            return _this.createDragItem();
          },
          dragItemName: this.displayName,
          onDragStarted: function() {
            hideColumnOnExit = !_this.gridOptionsService.is("suppressDragLeaveHidesColumns");
            _this.column.setMoving(true, "uiColumnMoved");
          },
          onDragStopped: function() {
            return _this.column.setMoving(false, "uiColumnMoved");
          },
          onGridEnter: function(dragItem) {
            var _a;
            if (hideColumnOnExit) {
              var unlockedColumns = ((_a = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a === void 0 ? void 0 : _a.filter(function(col) {
                return !col.getColDef().lockVisible;
              })) || [];
              _this.columnModel.setColumnsVisible(unlockedColumns, true, "uiColumnMoved");
            }
          },
          onGridExit: function(dragItem) {
            var _a;
            if (hideColumnOnExit) {
              var unlockedColumns = ((_a = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a === void 0 ? void 0 : _a.filter(function(col) {
                return !col.getColDef().lockVisible;
              })) || [];
              _this.columnModel.setColumnsVisible(unlockedColumns, false, "uiColumnMoved");
            }
          }
        };
        this.dragAndDropService.addDragSource(this.moveDragSource, true);
      };
      HeaderCellCtrl2.prototype.createDragItem = function() {
        var visibleState = {};
        visibleState[this.column.getId()] = this.column.isVisible();
        return {
          columns: [this.column],
          visibleState
        };
      };
      HeaderCellCtrl2.prototype.removeDragSource = function() {
        if (this.moveDragSource) {
          this.dragAndDropService.removeDragSource(this.moveDragSource);
          this.moveDragSource = void 0;
        }
      };
      HeaderCellCtrl2.prototype.onColDefChanged = function() {
        this.refresh();
      };
      HeaderCellCtrl2.prototype.updateState = function() {
        var colDef = this.column.getColDef();
        this.menuEnabled = this.menuFactory.isMenuEnabled(this.column) && !colDef.suppressMenu;
        this.sortable = colDef.sortable;
        this.displayName = this.calculateDisplayName();
        this.draggable = this.workOutDraggable();
      };
      HeaderCellCtrl2.prototype.addRefreshFunction = function(func) {
        this.refreshFunctions.push(func);
      };
      HeaderCellCtrl2.prototype.refresh = function() {
        this.updateState();
        this.refreshHeaderComp();
        this.refreshAria();
        this.refreshFunctions.forEach(function(f) {
          return f();
        });
      };
      HeaderCellCtrl2.prototype.refreshHeaderComp = function() {
        var newCompDetails = this.lookupUserCompDetails();
        var compInstance = this.comp.getUserCompInstance();
        var attemptRefresh = compInstance != null && this.userCompDetails.componentClass == newCompDetails.componentClass;
        var headerCompRefreshed = attemptRefresh ? this.attemptHeaderCompRefresh(newCompDetails.params) : false;
        if (headerCompRefreshed) {
          this.setDragSource(this.dragSourceElement);
        } else {
          this.setCompDetails(newCompDetails);
        }
      };
      HeaderCellCtrl2.prototype.attemptHeaderCompRefresh = function(params) {
        var headerComp = this.comp.getUserCompInstance();
        if (!headerComp) {
          return false;
        }
        if (!headerComp.refresh) {
          return false;
        }
        var res = headerComp.refresh(params);
        return res;
      };
      HeaderCellCtrl2.prototype.calculateDisplayName = function() {
        return this.columnModel.getDisplayNameForColumn(this.column, "header", true);
      };
      HeaderCellCtrl2.prototype.checkDisplayName = function() {
        if (this.displayName !== this.calculateDisplayName()) {
          this.refresh();
        }
      };
      HeaderCellCtrl2.prototype.workOutDraggable = function() {
        var colDef = this.column.getColDef();
        var isSuppressMovableColumns = this.gridOptionsService.is("suppressMovableColumns");
        var colCanMove = !isSuppressMovableColumns && !colDef.suppressMovable && !colDef.lockPosition;
        return !!colCanMove || !!colDef.enableRowGroup || !!colDef.enablePivot;
      };
      HeaderCellCtrl2.prototype.onColumnRowGroupChanged = function() {
        this.checkDisplayName();
      };
      HeaderCellCtrl2.prototype.onColumnPivotChanged = function() {
        this.checkDisplayName();
      };
      HeaderCellCtrl2.prototype.onColumnValueChanged = function() {
        this.checkDisplayName();
      };
      HeaderCellCtrl2.prototype.setupWidth = function() {
        var _this = this;
        var listener = function() {
          var columnWidth = _this.column.getActualWidth();
          _this.comp.setWidth(columnWidth + "px");
        };
        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupMovingCss = function() {
        var _this = this;
        var listener = function() {
          _this.comp.addOrRemoveCssClass("ag-header-cell-moving", _this.column.isMoving());
        };
        this.addManagedListener(this.column, Column.EVENT_MOVING_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupMenuClass = function() {
        var _this = this;
        var listener = function() {
          _this.comp.addOrRemoveCssClass("ag-column-menu-visible", _this.column.isMenuVisible());
        };
        this.addManagedListener(this.column, Column.EVENT_MENU_VISIBLE_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupSortableClass = function() {
        var _this = this;
        var updateSortableCssClass = function() {
          _this.comp.addOrRemoveCssClass("ag-header-cell-sortable", !!_this.sortable);
        };
        updateSortableCssClass();
        this.addRefreshFunction(updateSortableCssClass);
        this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, this.refreshAriaSort.bind(this));
      };
      HeaderCellCtrl2.prototype.setupWrapTextClass = function() {
        var _this = this;
        var listener = function() {
          var wrapText = !!_this.column.getColDef().wrapHeaderText;
          _this.comp.addOrRemoveCssClass("ag-header-cell-wrap-text", wrapText);
        };
        listener();
        this.addRefreshFunction(listener);
      };
      HeaderCellCtrl2.prototype.onHeaderHeightChanged = function() {
        this.refreshSpanHeaderHeight();
      };
      HeaderCellCtrl2.prototype.refreshSpanHeaderHeight = function() {
        var _a = this, eGui = _a.eGui, column = _a.column, comp = _a.comp, columnModel = _a.columnModel, gridOptionsService = _a.gridOptionsService;
        if (!column.isSpanHeaderHeight()) {
          return;
        }
        var _b = this.getColumnGroupPaddingInfo(), numberOfParents = _b.numberOfParents, isSpanningTotal = _b.isSpanningTotal;
        comp.addOrRemoveCssClass("ag-header-span-height", numberOfParents > 0);
        var headerHeight = columnModel.getColumnHeaderRowHeight();
        if (numberOfParents === 0) {
          comp.addOrRemoveCssClass("ag-header-span-total", false);
          eGui.style.setProperty("top", "0px");
          eGui.style.setProperty("height", headerHeight + "px");
          return;
        }
        comp.addOrRemoveCssClass("ag-header-span-total", isSpanningTotal);
        var pivotMode = gridOptionsService.is("pivotMode");
        var groupHeaderHeight = pivotMode ? columnModel.getPivotGroupHeaderHeight() : columnModel.getGroupHeaderHeight();
        var extraHeight = numberOfParents * groupHeaderHeight;
        eGui.style.setProperty("top", -extraHeight + "px");
        eGui.style.setProperty("height", headerHeight + extraHeight + "px");
      };
      HeaderCellCtrl2.prototype.getColumnGroupPaddingInfo = function() {
        var parent = this.column.getParent();
        if (!parent || !parent.isPadding()) {
          return { numberOfParents: 0, isSpanningTotal: false };
        }
        var numberOfParents = parent.getPaddingLevel() + 1;
        var isSpanningTotal = true;
        while (parent) {
          if (!parent.isPadding()) {
            isSpanningTotal = false;
            break;
          }
          parent = parent.getParent();
        }
        return { numberOfParents, isSpanningTotal };
      };
      HeaderCellCtrl2.prototype.setupAutoHeight = function(wrapperElement) {
        var _this = this;
        var measureHeight = function(timesCalled) {
          if (!_this.isAlive()) {
            return;
          }
          var _a = getElementSize(_this.getGui()), paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom, borderBottomWidth = _a.borderBottomWidth, borderTopWidth = _a.borderTopWidth;
          var extraHeight = paddingTop + paddingBottom + borderBottomWidth + borderTopWidth;
          var wrapperHeight = wrapperElement.offsetHeight;
          var autoHeight = wrapperHeight + extraHeight;
          if (timesCalled < 5) {
            var doc = _this.beans.gridOptionsService.getDocument();
            var notYetInDom = !doc || !doc.contains(wrapperElement);
            var possiblyNoContentYet = autoHeight == 0;
            if (notYetInDom || possiblyNoContentYet) {
              _this.beans.frameworkOverrides.setTimeout(function() {
                return measureHeight(timesCalled + 1);
              }, 0);
              return;
            }
          }
          _this.columnModel.setColumnHeaderHeight(_this.column, autoHeight);
        };
        var isMeasuring = false;
        var stopResizeObserver;
        var checkMeasuring = function() {
          var newValue = _this.column.isAutoHeaderHeight();
          if (newValue && !isMeasuring) {
            startMeasuring();
          }
          if (!newValue && isMeasuring) {
            stopMeasuring();
          }
        };
        var startMeasuring = function() {
          isMeasuring = true;
          measureHeight(0);
          _this.comp.addOrRemoveCssClass("ag-header-cell-auto-height", true);
          stopResizeObserver = _this.resizeObserverService.observeResize(wrapperElement, function() {
            return measureHeight(0);
          });
        };
        var stopMeasuring = function() {
          isMeasuring = false;
          if (stopResizeObserver) {
            stopResizeObserver();
          }
          _this.comp.addOrRemoveCssClass("ag-header-cell-auto-height", false);
          stopResizeObserver = void 0;
        };
        checkMeasuring();
        this.addDestroyFunc(function() {
          return stopMeasuring();
        });
        this.addManagedListener(this.column, Column.EVENT_WIDTH_CHANGED, function() {
          return isMeasuring && measureHeight(0);
        });
        this.addManagedListener(this.eventService, Column.EVENT_SORT_CHANGED, function() {
          if (isMeasuring) {
            _this.beans.frameworkOverrides.setTimeout(function() {
              return measureHeight(0);
            });
          }
        });
        this.addRefreshFunction(checkMeasuring);
      };
      HeaderCellCtrl2.prototype.refreshAriaSort = function() {
        if (this.sortable) {
          var translate = this.localeService.getLocaleTextFunc();
          var sort = this.sortController.getDisplaySortForColumn(this.column) || null;
          this.comp.setAriaSort(getAriaSortState(sort));
          this.setAriaDescriptionProperty("sort", translate("ariaSortableColumn", "Press ENTER to sort."));
        } else {
          this.comp.setAriaSort();
          this.setAriaDescriptionProperty("sort", null);
        }
      };
      HeaderCellCtrl2.prototype.refreshAriaMenu = function() {
        if (this.menuEnabled) {
          var translate = this.localeService.getLocaleTextFunc();
          this.setAriaDescriptionProperty("menu", translate("ariaMenuColumn", "Press CTRL ENTER to open column menu."));
        } else {
          this.setAriaDescriptionProperty("menu", null);
        }
      };
      HeaderCellCtrl2.prototype.setAriaDescriptionProperty = function(property, value) {
        if (value != null) {
          this.ariaDescriptionProperties.set(property, value);
        } else {
          this.ariaDescriptionProperties.delete(property);
        }
      };
      HeaderCellCtrl2.prototype.refreshAriaDescription = function() {
        var descriptionArray = Array.from(this.ariaDescriptionProperties.values());
        this.comp.setAriaDescription(descriptionArray.length ? descriptionArray.join(" ") : void 0);
      };
      HeaderCellCtrl2.prototype.refreshAria = function() {
        this.refreshAriaSort();
        this.refreshAriaMenu();
        this.refreshAriaDescription();
      };
      HeaderCellCtrl2.prototype.addColumnHoverListener = function() {
        var _this = this;
        var listener = function() {
          if (!_this.gridOptionsService.is("columnHoverHighlight")) {
            return;
          }
          var isHovered = _this.columnHoverService.isHovered(_this.column);
          _this.comp.addOrRemoveCssClass("ag-column-hover", isHovered);
        };
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.setupFilterCss = function() {
        var _this = this;
        var listener = function() {
          _this.comp.addOrRemoveCssClass("ag-header-cell-filtered", _this.column.isFilterActive());
        };
        this.addManagedListener(this.column, Column.EVENT_FILTER_ACTIVE_CHANGED, listener);
        listener();
      };
      HeaderCellCtrl2.prototype.getColId = function() {
        return this.column.getColId();
      };
      HeaderCellCtrl2.prototype.addActiveHeaderMouseListeners = function() {
        var _this = this;
        var listener = function(e) {
          return _this.setActiveHeader(e.type === "mouseenter");
        };
        this.addManagedListener(this.getGui(), "mouseenter", listener);
        this.addManagedListener(this.getGui(), "mouseleave", listener);
      };
      HeaderCellCtrl2.prototype.setActiveHeader = function(active) {
        this.comp.addOrRemoveCssClass("ag-header-active", active);
      };
      __decorate$1o([
        Autowired("columnModel")
      ], HeaderCellCtrl2.prototype, "columnModel", void 0);
      __decorate$1o([
        Autowired("columnHoverService")
      ], HeaderCellCtrl2.prototype, "columnHoverService", void 0);
      __decorate$1o([
        Autowired("sortController")
      ], HeaderCellCtrl2.prototype, "sortController", void 0);
      __decorate$1o([
        Autowired("menuFactory")
      ], HeaderCellCtrl2.prototype, "menuFactory", void 0);
      __decorate$1o([
        Autowired("dragAndDropService")
      ], HeaderCellCtrl2.prototype, "dragAndDropService", void 0);
      __decorate$1o([
        Autowired("resizeObserverService")
      ], HeaderCellCtrl2.prototype, "resizeObserverService", void 0);
      __decorate$1o([
        Autowired("gridApi")
      ], HeaderCellCtrl2.prototype, "gridApi", void 0);
      __decorate$1o([
        Autowired("columnApi")
      ], HeaderCellCtrl2.prototype, "columnApi", void 0);
      __decorate$1o([
        PreDestroy
      ], HeaderCellCtrl2.prototype, "removeDragSource", null);
      return HeaderCellCtrl2;
    }(AbstractHeaderCellCtrl);
    __extends$1s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GroupResizeFeature = /** @class */
    function(_super) {
      __extends$1s(GroupResizeFeature2, _super);
      function GroupResizeFeature2(comp, eResize, pinned, columnGroup) {
        var _this = _super.call(this) || this;
        _this.eResize = eResize;
        _this.comp = comp;
        _this.pinned = pinned;
        _this.columnGroup = columnGroup;
        return _this;
      }
      GroupResizeFeature2.prototype.postConstruct = function() {
        var _this = this;
        if (!this.columnGroup.isResizable()) {
          this.comp.setResizableDisplayed(false);
          return;
        }
        var finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({
          eResizeBar: this.eResize,
          onResizeStart: this.onResizeStart.bind(this),
          onResizing: this.onResizing.bind(this, false),
          onResizeEnd: this.onResizing.bind(this, true)
        });
        this.addDestroyFunc(finishedWithResizeFunc);
        if (!this.gridOptionsService.is("suppressAutoSize")) {
          var skipHeaderOnAutoSize_1 = this.gridOptionsService.is("skipHeaderOnAutoSize");
          this.eResize.addEventListener("dblclick", function() {
            var keys2 = [];
            var leafCols = _this.columnGroup.getDisplayedLeafColumns();
            leafCols.forEach(function(column) {
              if (!column.getColDef().suppressAutoSize) {
                keys2.push(column.getColId());
              }
            });
            if (keys2.length > 0) {
              _this.columnModel.autoSizeColumns({
                columns: keys2,
                skipHeader: skipHeaderOnAutoSize_1,
                stopAtGroup: _this.columnGroup,
                source: "uiColumnResized"
              });
            }
            _this.resizeLeafColumnsToFit("uiColumnResized");
          });
        }
      };
      GroupResizeFeature2.prototype.onResizeStart = function(shiftKey) {
        var _this = this;
        this.calculateInitialValues();
        var takeFromGroup = null;
        if (shiftKey) {
          takeFromGroup = this.columnModel.getDisplayedGroupAfter(this.columnGroup);
        }
        if (takeFromGroup) {
          var takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();
          this.resizeTakeFromCols = takeFromLeafCols.filter(function(col) {
            return col.isResizable();
          });
          this.resizeTakeFromStartWidth = 0;
          this.resizeTakeFromCols.forEach(function(col) {
            return _this.resizeTakeFromStartWidth += col.getActualWidth();
          });
          this.resizeTakeFromRatios = [];
          this.resizeTakeFromCols.forEach(function(col) {
            return _this.resizeTakeFromRatios.push(col.getActualWidth() / _this.resizeTakeFromStartWidth);
          });
        } else {
          this.resizeTakeFromCols = null;
          this.resizeTakeFromStartWidth = null;
          this.resizeTakeFromRatios = null;
        }
        this.comp.addOrRemoveCssClass("ag-column-resizing", true);
      };
      GroupResizeFeature2.prototype.onResizing = function(finished, resizeAmount, source) {
        if (source === void 0) {
          source = "uiColumnResized";
        }
        var resizeAmountNormalised = this.normaliseDragChange(resizeAmount);
        var width = this.resizeStartWidth + resizeAmountNormalised;
        this.resizeColumns(width, source, finished);
      };
      GroupResizeFeature2.prototype.resizeLeafColumnsToFit = function(source) {
        var preferredSize = this.autoWidthCalculator.getPreferredWidthForColumnGroup(this.columnGroup);
        this.calculateInitialValues();
        if (preferredSize > this.resizeStartWidth) {
          this.resizeColumns(preferredSize, source, true);
        }
      };
      GroupResizeFeature2.prototype.resizeColumns = function(totalWidth, source, finished) {
        if (finished === void 0) {
          finished = true;
        }
        var resizeSets = [];
        resizeSets.push({
          columns: this.resizeCols,
          ratios: this.resizeRatios,
          width: totalWidth
        });
        if (this.resizeTakeFromCols) {
          var diff = totalWidth - this.resizeStartWidth;
          resizeSets.push({
            columns: this.resizeTakeFromCols,
            ratios: this.resizeTakeFromRatios,
            width: this.resizeTakeFromStartWidth - diff
          });
        }
        this.columnModel.resizeColumnSets({
          resizeSets,
          finished,
          source
        });
        if (finished) {
          this.comp.addOrRemoveCssClass("ag-column-resizing", false);
        }
      };
      GroupResizeFeature2.prototype.calculateInitialValues = function() {
        var _this = this;
        var leafCols = this.columnGroup.getDisplayedLeafColumns();
        this.resizeCols = leafCols.filter(function(col) {
          return col.isResizable();
        });
        this.resizeStartWidth = 0;
        this.resizeCols.forEach(function(col) {
          return _this.resizeStartWidth += col.getActualWidth();
        });
        this.resizeRatios = [];
        this.resizeCols.forEach(function(col) {
          return _this.resizeRatios.push(col.getActualWidth() / _this.resizeStartWidth);
        });
      };
      GroupResizeFeature2.prototype.normaliseDragChange = function(dragChange) {
        var result = dragChange;
        if (this.gridOptionsService.is("enableRtl")) {
          if (this.pinned !== "left") {
            result *= -1;
          }
        } else if (this.pinned === "right") {
          result *= -1;
        }
        return result;
      };
      __decorate$1n([
        Autowired("horizontalResizeService")
      ], GroupResizeFeature2.prototype, "horizontalResizeService", void 0);
      __decorate$1n([
        Autowired("autoWidthCalculator")
      ], GroupResizeFeature2.prototype, "autoWidthCalculator", void 0);
      __decorate$1n([
        Autowired("columnModel")
      ], GroupResizeFeature2.prototype, "columnModel", void 0);
      __decorate$1n([
        PostConstruct
      ], GroupResizeFeature2.prototype, "postConstruct", null);
      return GroupResizeFeature2;
    }(BeanStub);
    __extends$1r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GroupWidthFeature = /** @class */
    function(_super) {
      __extends$1r(GroupWidthFeature2, _super);
      function GroupWidthFeature2(comp, columnGroup) {
        var _this = _super.call(this) || this;
        _this.removeChildListenersFuncs = [];
        _this.columnGroup = columnGroup;
        _this.comp = comp;
        return _this;
      }
      GroupWidthFeature2.prototype.postConstruct = function() {
        this.addListenersToChildrenColumns();
        this.addManagedListener(this.columnGroup, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
        this.onWidthChanged();
        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));
      };
      GroupWidthFeature2.prototype.addListenersToChildrenColumns = function() {
        var _this = this;
        this.removeListenersOnChildrenColumns();
        var widthChangedListener = this.onWidthChanged.bind(this);
        this.columnGroup.getLeafColumns().forEach(function(column) {
          column.addEventListener("widthChanged", widthChangedListener);
          column.addEventListener("visibleChanged", widthChangedListener);
          _this.removeChildListenersFuncs.push(function() {
            column.removeEventListener("widthChanged", widthChangedListener);
            column.removeEventListener("visibleChanged", widthChangedListener);
          });
        });
      };
      GroupWidthFeature2.prototype.removeListenersOnChildrenColumns = function() {
        this.removeChildListenersFuncs.forEach(function(func) {
          return func();
        });
        this.removeChildListenersFuncs = [];
      };
      GroupWidthFeature2.prototype.onDisplayedChildrenChanged = function() {
        this.addListenersToChildrenColumns();
        this.onWidthChanged();
      };
      GroupWidthFeature2.prototype.onWidthChanged = function() {
        var columnWidth = this.columnGroup.getActualWidth();
        this.comp.setWidth(columnWidth + "px");
        this.comp.addOrRemoveCssClass("ag-hidden", columnWidth === 0);
      };
      __decorate$1m([
        PostConstruct
      ], GroupWidthFeature2.prototype, "postConstruct", null);
      return GroupWidthFeature2;
    }(BeanStub);
    __extends$1q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderGroupCellCtrl = /** @class */
    function(_super) {
      __extends$1q(HeaderGroupCellCtrl2, _super);
      function HeaderGroupCellCtrl2(columnGroup, parentRowCtrl) {
        var _this = _super.call(this, columnGroup, parentRowCtrl) || this;
        _this.columnGroup = columnGroup;
        return _this;
      }
      HeaderGroupCellCtrl2.prototype.setComp = function(comp, eGui, eResize) {
        _super.prototype.setGui.call(this, eGui);
        this.comp = comp;
        this.displayName = this.columnModel.getDisplayNameForColumnGroup(this.columnGroup, "header");
        this.addClasses();
        this.setupMovingCss();
        this.setupExpandable();
        this.setupTooltip();
        this.setupUserComp();
        var pinned = this.getParentRowCtrl().getPinned();
        var leafCols = this.columnGroup.getProvidedColumnGroup().getLeafColumns();
        this.createManagedBean(new HoverFeature(leafCols, eGui));
        this.createManagedBean(new SetLeftFeature(this.columnGroup, eGui, this.beans));
        this.createManagedBean(new GroupWidthFeature(comp, this.columnGroup));
        this.groupResizeFeature = this.createManagedBean(new GroupResizeFeature(comp, eResize, pinned, this.columnGroup));
        this.createManagedBean(new ManagedFocusFeature(eGui, {
          shouldStopEventPropagation: this.shouldStopEventPropagation.bind(this),
          onTabKeyDown: function() {
            return void 0;
          },
          handleKeyDown: this.handleKeyDown.bind(this),
          onFocusIn: this.onFocusIn.bind(this)
        }));
      };
      HeaderGroupCellCtrl2.prototype.resizeLeafColumnsToFit = function(source) {
        if (!this.groupResizeFeature) {
          return;
        }
        this.groupResizeFeature.resizeLeafColumnsToFit(source);
      };
      HeaderGroupCellCtrl2.prototype.setupUserComp = function() {
        var _this = this;
        var displayName = this.displayName;
        var params = {
          displayName: this.displayName,
          columnGroup: this.columnGroup,
          setExpanded: function(expanded) {
            _this.columnModel.setColumnGroupOpened(_this.columnGroup.getProvidedColumnGroup(), expanded, "gridInitializing");
          },
          api: this.gridApi,
          columnApi: this.columnApi,
          context: this.gridOptionsService.context
        };
        if (!displayName) {
          var columnGroup = this.columnGroup;
          var leafCols = columnGroup.getLeafColumns();
          while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {
            columnGroup = columnGroup.getParent();
          }
          var colGroupDef = columnGroup.getColGroupDef();
          if (colGroupDef) {
            displayName = colGroupDef.headerName;
          }
          if (!displayName) {
            displayName = leafCols ? this.columnModel.getDisplayNameForColumn(leafCols[0], "header", true) : "";
          }
        }
        var compDetails = this.userComponentFactory.getHeaderGroupCompDetails(params);
        this.comp.setUserCompDetails(compDetails);
      };
      HeaderGroupCellCtrl2.prototype.setupTooltip = function() {
        var _this = this;
        var colGroupDef = this.columnGroup.getColGroupDef();
        var tooltipCtrl = {
          getColumn: function() {
            return _this.columnGroup;
          },
          getGui: function() {
            return _this.eGui;
          },
          getLocation: function() {
            return "headerGroup";
          },
          getTooltipValue: function() {
            return colGroupDef && colGroupDef.headerTooltip;
          }
        };
        if (colGroupDef) {
          tooltipCtrl.getColDef = function() {
            return colGroupDef;
          };
        }
        var tooltipFeature = this.createManagedBean(new TooltipFeature(tooltipCtrl, this.beans));
        tooltipFeature.setComp(this.eGui);
      };
      HeaderGroupCellCtrl2.prototype.setupExpandable = function() {
        var providedColGroup = this.columnGroup.getProvidedColumnGroup();
        this.refreshExpanded();
        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));
        this.addManagedListener(providedColGroup, ProvidedColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));
      };
      HeaderGroupCellCtrl2.prototype.refreshExpanded = function() {
        var column = this.columnGroup;
        this.expandable = column.isExpandable();
        var expanded = column.isExpanded();
        if (this.expandable) {
          this.comp.setAriaExpanded(expanded ? "true" : "false");
        } else {
          this.comp.setAriaExpanded(void 0);
        }
      };
      HeaderGroupCellCtrl2.prototype.getColId = function() {
        return this.columnGroup.getUniqueId();
      };
      HeaderGroupCellCtrl2.prototype.addClasses = function() {
        var _this = this;
        var colGroupDef = this.columnGroup.getColGroupDef();
        var classes = CssClassApplier.getHeaderClassesFromColDef(colGroupDef, this.gridOptionsService, null, this.columnGroup);
        if (this.columnGroup.isPadding()) {
          classes.push("ag-header-group-cell-no-group");
          var leafCols = this.columnGroup.getLeafColumns();
          if (leafCols.every(function(col) {
            return col.isSpanHeaderHeight();
          })) {
            classes.push("ag-header-span-height");
          }
        } else {
          classes.push("ag-header-group-cell-with-group");
        }
        classes.forEach(function(c) {
          return _this.comp.addOrRemoveCssClass(c, true);
        });
      };
      HeaderGroupCellCtrl2.prototype.setupMovingCss = function() {
        var _this = this;
        var providedColumnGroup = this.columnGroup.getProvidedColumnGroup();
        var leafColumns = providedColumnGroup.getLeafColumns();
        var listener = function() {
          return _this.comp.addOrRemoveCssClass("ag-header-cell-moving", _this.columnGroup.isMoving());
        };
        leafColumns.forEach(function(col) {
          _this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, listener);
        });
        listener();
      };
      HeaderGroupCellCtrl2.prototype.onFocusIn = function(e) {
        if (!this.eGui.contains(e.relatedTarget)) {
          var rowIndex = this.getRowIndex();
          this.beans.focusService.setFocusedHeader(rowIndex, this.columnGroup);
        }
      };
      HeaderGroupCellCtrl2.prototype.handleKeyDown = function(e) {
        _super.prototype.handleKeyDown.call(this, e);
        var wrapperHasFocus = this.getWrapperHasFocus();
        if (!this.expandable || !wrapperHasFocus) {
          return;
        }
        if (e.key === KeyCode.ENTER) {
          var column = this.columnGroup;
          var newExpandedValue = !column.isExpanded();
          this.columnModel.setColumnGroupOpened(column.getProvidedColumnGroup(), newExpandedValue, "uiColumnExpanded");
        }
      };
      HeaderGroupCellCtrl2.prototype.setDragSource = function(eHeaderGroup) {
        var _this = this;
        if (this.isSuppressMoving()) {
          return;
        }
        var allLeafColumns = this.columnGroup.getProvidedColumnGroup().getLeafColumns();
        var hideColumnOnExit = !this.gridOptionsService.is("suppressDragLeaveHidesColumns");
        var dragSource = {
          type: DragSourceType.HeaderCell,
          eElement: eHeaderGroup,
          getDefaultIconName: function() {
            return hideColumnOnExit ? DragAndDropService.ICON_HIDE : DragAndDropService.ICON_NOT_ALLOWED;
          },
          dragItemName: this.displayName,
          // we add in the original group leaf columns, so we move both visible and non-visible items
          getDragItem: this.getDragItemForGroup.bind(this),
          onDragStarted: function() {
            hideColumnOnExit = !_this.gridOptionsService.is("suppressDragLeaveHidesColumns");
            allLeafColumns.forEach(function(col) {
              return col.setMoving(true, "uiColumnDragged");
            });
          },
          onDragStopped: function() {
            return allLeafColumns.forEach(function(col) {
              return col.setMoving(false, "uiColumnDragged");
            });
          },
          onGridEnter: function(dragItem) {
            var _a;
            if (hideColumnOnExit) {
              var unlockedColumns = ((_a = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a === void 0 ? void 0 : _a.filter(function(col) {
                return !col.getColDef().lockVisible;
              })) || [];
              _this.columnModel.setColumnsVisible(unlockedColumns, true, "uiColumnMoved");
            }
          },
          onGridExit: function(dragItem) {
            var _a;
            if (hideColumnOnExit) {
              var unlockedColumns = ((_a = dragItem === null || dragItem === void 0 ? void 0 : dragItem.columns) === null || _a === void 0 ? void 0 : _a.filter(function(col) {
                return !col.getColDef().lockVisible;
              })) || [];
              _this.columnModel.setColumnsVisible(unlockedColumns, false, "uiColumnMoved");
            }
          }
        };
        this.dragAndDropService.addDragSource(dragSource, true);
        this.addDestroyFunc(function() {
          return _this.dragAndDropService.removeDragSource(dragSource);
        });
      };
      HeaderGroupCellCtrl2.prototype.getDragItemForGroup = function() {
        var allColumnsOriginalOrder = this.columnGroup.getProvidedColumnGroup().getLeafColumns();
        var visibleState = {};
        allColumnsOriginalOrder.forEach(function(column) {
          return visibleState[column.getId()] = column.isVisible();
        });
        var allColumnsCurrentOrder = [];
        this.columnModel.getAllDisplayedColumns().forEach(function(column) {
          if (allColumnsOriginalOrder.indexOf(column) >= 0) {
            allColumnsCurrentOrder.push(column);
            removeFromArray(allColumnsOriginalOrder, column);
          }
        });
        allColumnsOriginalOrder.forEach(function(column) {
          return allColumnsCurrentOrder.push(column);
        });
        return {
          columns: allColumnsCurrentOrder,
          visibleState
        };
      };
      HeaderGroupCellCtrl2.prototype.isSuppressMoving = function() {
        var childSuppressesMoving = false;
        this.columnGroup.getLeafColumns().forEach(function(column) {
          if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {
            childSuppressesMoving = true;
          }
        });
        var result = childSuppressesMoving || this.gridOptionsService.is("suppressMovableColumns");
        return result;
      };
      __decorate$1l([
        Autowired("columnModel")
      ], HeaderGroupCellCtrl2.prototype, "columnModel", void 0);
      __decorate$1l([
        Autowired("dragAndDropService")
      ], HeaderGroupCellCtrl2.prototype, "dragAndDropService", void 0);
      __decorate$1l([
        Autowired("gridApi")
      ], HeaderGroupCellCtrl2.prototype, "gridApi", void 0);
      __decorate$1l([
        Autowired("columnApi")
      ], HeaderGroupCellCtrl2.prototype, "columnApi", void 0);
      return HeaderGroupCellCtrl2;
    }(AbstractHeaderCellCtrl);
    __extends$1p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    instanceIdSequence = 0;
    HeaderRowCtrl = /** @class */
    function(_super) {
      __extends$1p(HeaderRowCtrl2, _super);
      function HeaderRowCtrl2(rowIndex, pinned, type) {
        var _this = _super.call(this) || this;
        _this.instanceId = instanceIdSequence++;
        _this.headerCellCtrls = {};
        _this.rowIndex = rowIndex;
        _this.pinned = pinned;
        _this.type = type;
        var typeClass = type == HeaderRowType.COLUMN_GROUP ? "ag-header-row-column-group" : type == HeaderRowType.FLOATING_FILTER ? "ag-header-row-column-filter" : "ag-header-row-column";
        _this.headerRowClass = "ag-header-row " + typeClass;
        return _this;
      }
      HeaderRowCtrl2.prototype.postConstruct = function() {
        this.isPrintLayout = this.gridOptionsService.isDomLayout("print");
        this.isEnsureDomOrder = this.gridOptionsService.is("ensureDomOrder");
      };
      HeaderRowCtrl2.prototype.getInstanceId = function() {
        return this.instanceId;
      };
      HeaderRowCtrl2.prototype.setComp = function(comp, initCompState) {
        if (initCompState === void 0) {
          initCompState = true;
        }
        this.comp = comp;
        if (initCompState) {
          this.onRowHeightChanged();
          this.onVirtualColumnsChanged();
        }
        this.setWidth();
        this.addEventListeners();
      };
      HeaderRowCtrl2.prototype.getHeaderRowClass = function() {
        return this.headerRowClass;
      };
      HeaderRowCtrl2.prototype.getAriaRowIndex = function() {
        return this.rowIndex + 1;
      };
      HeaderRowCtrl2.prototype.getTransform = function() {
        if (isBrowserSafari()) {
          return "translateZ(0)";
        }
      };
      HeaderRowCtrl2.prototype.addEventListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_VIRTUAL_COLUMNS_CHANGED, function(params) {
          return _this.onVirtualColumnsChanged(params.afterScroll);
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onRowHeightChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, this.onRowHeightChanged.bind(this));
        this.addManagedPropertyListener("domLayout", this.onDisplayedColumnsChanged.bind(this));
        this.addManagedPropertyListener("ensureDomOrder", function(e) {
          return _this.isEnsureDomOrder = e.currentValue;
        });
        this.addManagedPropertyListener("headerHeight", this.onRowHeightChanged.bind(this));
        this.addManagedPropertyListener("pivotHeaderHeight", this.onRowHeightChanged.bind(this));
        this.addManagedPropertyListener("groupHeaderHeight", this.onRowHeightChanged.bind(this));
        this.addManagedPropertyListener("pivotGroupHeaderHeight", this.onRowHeightChanged.bind(this));
        this.addManagedPropertyListener("floatingFiltersHeight", this.onRowHeightChanged.bind(this));
      };
      HeaderRowCtrl2.prototype.getHeaderCellCtrl = function(column) {
        return values(this.headerCellCtrls).find(function(cellCtrl) {
          return cellCtrl.getColumnGroupChild() === column;
        });
      };
      HeaderRowCtrl2.prototype.onDisplayedColumnsChanged = function() {
        this.isPrintLayout = this.gridOptionsService.isDomLayout("print");
        this.onVirtualColumnsChanged();
        this.setWidth();
        this.onRowHeightChanged();
      };
      HeaderRowCtrl2.prototype.getType = function() {
        return this.type;
      };
      HeaderRowCtrl2.prototype.onColumnResized = function() {
        this.setWidth();
      };
      HeaderRowCtrl2.prototype.setWidth = function() {
        var width = this.getWidthForRow();
        this.comp.setWidth(width + "px");
      };
      HeaderRowCtrl2.prototype.getWidthForRow = function() {
        if (this.isPrintLayout) {
          var pinned = this.pinned != null;
          if (pinned) {
            return 0;
          }
          return this.columnModel.getContainerWidth("right") + this.columnModel.getContainerWidth("left") + this.columnModel.getContainerWidth(null);
        }
        return this.columnModel.getContainerWidth(this.pinned);
      };
      HeaderRowCtrl2.prototype.onRowHeightChanged = function() {
        var _a = this.getTopAndHeight(), topOffset = _a.topOffset, rowHeight = _a.rowHeight;
        this.comp.setTop(topOffset + "px");
        this.comp.setHeight(rowHeight + "px");
      };
      HeaderRowCtrl2.prototype.getTopAndHeight = function() {
        var headerRowCount = this.columnModel.getHeaderRowCount();
        var sizes = [];
        var numberOfFloating = 0;
        if (this.filterManager.hasFloatingFilters()) {
          headerRowCount++;
          numberOfFloating = 1;
        }
        var groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();
        var headerHeight = this.columnModel.getColumnHeaderRowHeight();
        var numberOfNonGroups = 1 + numberOfFloating;
        var numberOfGroups = headerRowCount - numberOfNonGroups;
        for (var i = 0; i < numberOfGroups; i++) {
          sizes.push(groupHeight);
        }
        sizes.push(headerHeight);
        for (var i = 0; i < numberOfFloating; i++) {
          sizes.push(this.columnModel.getFloatingFiltersHeight());
        }
        var topOffset = 0;
        for (var i = 0; i < this.rowIndex; i++) {
          topOffset += sizes[i];
        }
        var rowHeight = sizes[this.rowIndex];
        return { topOffset, rowHeight };
      };
      HeaderRowCtrl2.prototype.getPinned = function() {
        return this.pinned;
      };
      HeaderRowCtrl2.prototype.getRowIndex = function() {
        return this.rowIndex;
      };
      HeaderRowCtrl2.prototype.onVirtualColumnsChanged = function(afterScroll) {
        if (afterScroll === void 0) {
          afterScroll = false;
        }
        var ctrlsToDisplay = this.getHeaderCtrls();
        var forceOrder = this.isEnsureDomOrder || this.isPrintLayout;
        this.comp.setHeaderCtrls(ctrlsToDisplay, forceOrder, afterScroll);
      };
      HeaderRowCtrl2.prototype.getHeaderCtrls = function() {
        var _this = this;
        var oldCtrls = this.headerCellCtrls;
        this.headerCellCtrls = {};
        var columns = this.getColumnsInViewport();
        columns.forEach(function(child) {
          if (child.isEmptyGroup()) {
            return;
          }
          var idOfChild = child.getUniqueId();
          var headerCtrl = oldCtrls[idOfChild];
          delete oldCtrls[idOfChild];
          var forOldColumn = headerCtrl && headerCtrl.getColumnGroupChild() != child;
          if (forOldColumn) {
            _this.destroyBean(headerCtrl);
            headerCtrl = void 0;
          }
          if (headerCtrl == null) {
            switch (_this.type) {
              case HeaderRowType.FLOATING_FILTER:
                headerCtrl = _this.createBean(new HeaderFilterCellCtrl(child, _this));
                break;
              case HeaderRowType.COLUMN_GROUP:
                headerCtrl = _this.createBean(new HeaderGroupCellCtrl(child, _this));
                break;
              default:
                headerCtrl = _this.createBean(new HeaderCellCtrl(child, _this));
                break;
            }
          }
          _this.headerCellCtrls[idOfChild] = headerCtrl;
        });
        var isFocusedAndDisplayed = function(ctrl) {
          var isFocused = _this.focusService.isHeaderWrapperFocused(ctrl);
          if (!isFocused) {
            return false;
          }
          var isDisplayed = _this.columnModel.isDisplayed(ctrl.getColumnGroupChild());
          return isDisplayed;
        };
        iterateObject(oldCtrls, function(id, oldCtrl) {
          var keepCtrl = isFocusedAndDisplayed(oldCtrl);
          if (keepCtrl) {
            _this.headerCellCtrls[id] = oldCtrl;
          } else {
            _this.destroyBean(oldCtrl);
          }
        });
        var ctrlsToDisplay = getAllValuesInObject(this.headerCellCtrls);
        return ctrlsToDisplay;
      };
      HeaderRowCtrl2.prototype.getColumnsInViewport = function() {
        return this.isPrintLayout ? this.getColumnsInViewportPrintLayout() : this.getColumnsInViewportNormalLayout();
      };
      HeaderRowCtrl2.prototype.getColumnsInViewportPrintLayout = function() {
        var _this = this;
        if (this.pinned != null) {
          return [];
        }
        var viewportColumns = [];
        var actualDepth = this.getActualDepth();
        ["left", null, "right"].forEach(function(pinned) {
          var items = _this.columnModel.getVirtualHeaderGroupRow(pinned, actualDepth);
          viewportColumns = viewportColumns.concat(items);
        });
        return viewportColumns;
      };
      HeaderRowCtrl2.prototype.getActualDepth = function() {
        return this.type == HeaderRowType.FLOATING_FILTER ? this.rowIndex - 1 : this.rowIndex;
      };
      HeaderRowCtrl2.prototype.getColumnsInViewportNormalLayout = function() {
        return this.columnModel.getVirtualHeaderGroupRow(this.pinned, this.getActualDepth());
      };
      HeaderRowCtrl2.prototype.focusHeader = function(column, event) {
        var allCtrls = getAllValuesInObject(this.headerCellCtrls);
        var ctrl = allCtrls.find(function(ctrl2) {
          return ctrl2.getColumnGroupChild() == column;
        });
        if (!ctrl) {
          return false;
        }
        ctrl.focus(event);
        return true;
      };
      HeaderRowCtrl2.prototype.destroy = function() {
        var _this = this;
        iterateObject(this.headerCellCtrls, function(key, ctrl) {
          _this.destroyBean(ctrl);
        });
        this.headerCellCtrls = {};
        _super.prototype.destroy.call(this);
      };
      __decorate$1k([
        Autowired("columnModel")
      ], HeaderRowCtrl2.prototype, "columnModel", void 0);
      __decorate$1k([
        Autowired("focusService")
      ], HeaderRowCtrl2.prototype, "focusService", void 0);
      __decorate$1k([
        Autowired("filterManager")
      ], HeaderRowCtrl2.prototype, "filterManager", void 0);
      __decorate$1k([
        PostConstruct
      ], HeaderRowCtrl2.prototype, "postConstruct", null);
      return HeaderRowCtrl2;
    }(BeanStub);
    __extends$1o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$f = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$d = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    HeaderRowContainerCtrl = /** @class */
    function(_super) {
      __extends$1o(HeaderRowContainerCtrl2, _super);
      function HeaderRowContainerCtrl2(pinned) {
        var _this = _super.call(this) || this;
        _this.hidden = false;
        _this.includeFloatingFilter = false;
        _this.groupsRowCtrls = [];
        _this.pinned = pinned;
        return _this;
      }
      HeaderRowContainerCtrl2.prototype.setComp = function(comp, eGui) {
        this.comp = comp;
        this.eViewport = eGui;
        this.setupCenterWidth();
        this.setupPinnedWidth();
        this.setupDragAndDrop(this.eViewport);
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.ctrlsService.registerHeaderContainer(this, this.pinned);
        if (this.columnModel.isReady()) {
          this.refresh();
        }
      };
      HeaderRowContainerCtrl2.prototype.setupDragAndDrop = function(dropContainer) {
        var bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);
        this.createManagedBean(bodyDropTarget);
      };
      HeaderRowContainerCtrl2.prototype.refresh = function(keepColumns) {
        var _this = this;
        if (keepColumns === void 0) {
          keepColumns = false;
        }
        var sequence = new NumberSequence();
        var focusedHeaderPosition = this.focusService.getFocusHeaderToUseAfterRefresh();
        var refreshColumnGroups = function() {
          var groupRowCount = _this.columnModel.getHeaderRowCount() - 1;
          _this.groupsRowCtrls = _this.destroyBeans(_this.groupsRowCtrls);
          for (var i = 0; i < groupRowCount; i++) {
            var ctrl = _this.createBean(new HeaderRowCtrl(sequence.next(), _this.pinned, HeaderRowType.COLUMN_GROUP));
            _this.groupsRowCtrls.push(ctrl);
          }
        };
        var refreshColumns = function() {
          var rowIndex = sequence.next();
          var needNewInstance = !_this.hidden && (_this.columnsRowCtrl == null || !keepColumns || _this.columnsRowCtrl.getRowIndex() !== rowIndex);
          var shouldDestroyInstance = needNewInstance || _this.hidden;
          if (shouldDestroyInstance) {
            _this.columnsRowCtrl = _this.destroyBean(_this.columnsRowCtrl);
          }
          if (needNewInstance) {
            _this.columnsRowCtrl = _this.createBean(new HeaderRowCtrl(rowIndex, _this.pinned, HeaderRowType.COLUMN));
          }
        };
        var refreshFilters = function() {
          _this.includeFloatingFilter = _this.filterManager.hasFloatingFilters() && !_this.hidden;
          var destroyPreviousComp = function() {
            _this.filtersRowCtrl = _this.destroyBean(_this.filtersRowCtrl);
          };
          if (!_this.includeFloatingFilter) {
            destroyPreviousComp();
            return;
          }
          var rowIndex = sequence.next();
          if (_this.filtersRowCtrl) {
            var rowIndexMismatch = _this.filtersRowCtrl.getRowIndex() !== rowIndex;
            if (!keepColumns || rowIndexMismatch) {
              destroyPreviousComp();
            }
          }
          if (!_this.filtersRowCtrl) {
            _this.filtersRowCtrl = _this.createBean(new HeaderRowCtrl(rowIndex, _this.pinned, HeaderRowType.FLOATING_FILTER));
          }
        };
        refreshColumnGroups();
        refreshColumns();
        refreshFilters();
        var allCtrls = this.getAllCtrls();
        this.comp.setCtrls(allCtrls);
        this.restoreFocusOnHeader(focusedHeaderPosition);
      };
      HeaderRowContainerCtrl2.prototype.restoreFocusOnHeader = function(position) {
        if (position == null || position.column.getPinned() != this.pinned) {
          return;
        }
        this.focusService.focusHeaderPosition({ headerPosition: position });
      };
      HeaderRowContainerCtrl2.prototype.getAllCtrls = function() {
        var res = __spreadArray$d([], __read$f(this.groupsRowCtrls));
        if (this.columnsRowCtrl) {
          res.push(this.columnsRowCtrl);
        }
        if (this.filtersRowCtrl) {
          res.push(this.filtersRowCtrl);
        }
        return res;
      };
      HeaderRowContainerCtrl2.prototype.onGridColumnsChanged = function() {
        this.refresh(true);
      };
      HeaderRowContainerCtrl2.prototype.onDisplayedColumnsChanged = function() {
        var includeFloatingFilter = this.filterManager.hasFloatingFilters() && !this.hidden;
        if (this.includeFloatingFilter !== includeFloatingFilter) {
          this.refresh(true);
        }
      };
      HeaderRowContainerCtrl2.prototype.setupCenterWidth = function() {
        var _this = this;
        if (this.pinned != null) {
          return;
        }
        this.createManagedBean(new CenterWidthFeature(function(width) {
          return _this.comp.setCenterWidth(width + "px");
        }, true));
      };
      HeaderRowContainerCtrl2.prototype.setHorizontalScroll = function(offset) {
        this.comp.setViewportScrollLeft(offset);
      };
      HeaderRowContainerCtrl2.prototype.setupPinnedWidth = function() {
        var _this = this;
        if (this.pinned == null) {
          return;
        }
        var pinningLeft = this.pinned === "left";
        var pinningRight = this.pinned === "right";
        this.hidden = true;
        var listener = function() {
          var width = pinningLeft ? _this.pinnedWidthService.getPinnedLeftWidth() : _this.pinnedWidthService.getPinnedRightWidth();
          if (width == null) {
            return;
          }
          var hidden = width == 0;
          var hiddenChanged = _this.hidden !== hidden;
          var isRtl = _this.gridOptionsService.is("enableRtl");
          var scrollbarWidth = _this.gridOptionsService.getScrollbarWidth();
          var addPaddingForScrollbar = _this.scrollVisibleService.isVerticalScrollShowing() && (isRtl && pinningLeft || !isRtl && pinningRight);
          var widthWithPadding = addPaddingForScrollbar ? width + scrollbarWidth : width;
          _this.comp.setPinnedContainerWidth(widthWithPadding + "px");
          _this.comp.setDisplayed(!hidden);
          if (hiddenChanged) {
            _this.hidden = hidden;
            _this.refresh();
          }
        };
        this.addManagedListener(this.eventService, Events.EVENT_LEFT_PINNED_WIDTH_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, listener);
      };
      HeaderRowContainerCtrl2.prototype.getHeaderCtrlForColumn = function(column) {
        if (column instanceof Column) {
          if (!this.columnsRowCtrl) {
            return;
          }
          return this.columnsRowCtrl.getHeaderCellCtrl(column);
        }
        if (this.groupsRowCtrls.length === 0) {
          return;
        }
        for (var i = 0; i < this.groupsRowCtrls.length; i++) {
          var ctrl = this.groupsRowCtrls[i].getHeaderCellCtrl(column);
          if (ctrl) {
            return ctrl;
          }
        }
      };
      HeaderRowContainerCtrl2.prototype.getHtmlElementForColumnHeader = function(column) {
        var cellCtrl = this.getHeaderCtrlForColumn(column);
        if (!cellCtrl) {
          return null;
        }
        return cellCtrl.getGui();
      };
      HeaderRowContainerCtrl2.prototype.getRowType = function(rowIndex) {
        var allCtrls = this.getAllCtrls();
        var ctrl = allCtrls[rowIndex];
        return ctrl ? ctrl.getType() : void 0;
      };
      HeaderRowContainerCtrl2.prototype.focusHeader = function(rowIndex, column, event) {
        var allCtrls = this.getAllCtrls();
        var ctrl = allCtrls[rowIndex];
        if (!ctrl) {
          return false;
        }
        return ctrl.focusHeader(column, event);
      };
      HeaderRowContainerCtrl2.prototype.getRowCount = function() {
        return this.groupsRowCtrls.length + (this.columnsRowCtrl ? 1 : 0) + (this.filtersRowCtrl ? 1 : 0);
      };
      HeaderRowContainerCtrl2.prototype.destroy = function() {
        if (this.filtersRowCtrl) {
          this.filtersRowCtrl = this.destroyBean(this.filtersRowCtrl);
        }
        if (this.columnsRowCtrl) {
          this.columnsRowCtrl = this.destroyBean(this.columnsRowCtrl);
        }
        if (this.groupsRowCtrls && this.groupsRowCtrls.length) {
          this.groupsRowCtrls = this.destroyBeans(this.groupsRowCtrls);
        }
        _super.prototype.destroy.call(this);
      };
      __decorate$1j([
        Autowired("ctrlsService")
      ], HeaderRowContainerCtrl2.prototype, "ctrlsService", void 0);
      __decorate$1j([
        Autowired("scrollVisibleService")
      ], HeaderRowContainerCtrl2.prototype, "scrollVisibleService", void 0);
      __decorate$1j([
        Autowired("pinnedWidthService")
      ], HeaderRowContainerCtrl2.prototype, "pinnedWidthService", void 0);
      __decorate$1j([
        Autowired("columnModel")
      ], HeaderRowContainerCtrl2.prototype, "columnModel", void 0);
      __decorate$1j([
        Autowired("focusService")
      ], HeaderRowContainerCtrl2.prototype, "focusService", void 0);
      __decorate$1j([
        Autowired("filterManager")
      ], HeaderRowContainerCtrl2.prototype, "filterManager", void 0);
      return HeaderRowContainerCtrl2;
    }(BeanStub);
    __extends$1n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderRowContainerComp = /** @class */
    function(_super) {
      __extends$1n(HeaderRowContainerComp2, _super);
      function HeaderRowContainerComp2(pinned) {
        var _this = _super.call(this) || this;
        _this.headerRowComps = {};
        _this.rowCompsList = [];
        _this.pinned = pinned;
        return _this;
      }
      HeaderRowContainerComp2.prototype.init = function() {
        var _this = this;
        this.selectAndSetTemplate();
        var compProxy = {
          setDisplayed: function(displayed) {
            return _this.setDisplayed(displayed);
          },
          setCtrls: function(ctrls) {
            return _this.setCtrls(ctrls);
          },
          // only gets called for center section
          setCenterWidth: function(width) {
            return _this.eCenterContainer.style.width = width;
          },
          setViewportScrollLeft: function(left) {
            return _this.getGui().scrollLeft = left;
          },
          // only gets called for pinned sections
          setPinnedContainerWidth: function(width) {
            var eGui = _this.getGui();
            eGui.style.width = width;
            eGui.style.maxWidth = width;
            eGui.style.minWidth = width;
          }
        };
        var ctrl = this.createManagedBean(new HeaderRowContainerCtrl(this.pinned));
        ctrl.setComp(compProxy, this.getGui());
      };
      HeaderRowContainerComp2.prototype.selectAndSetTemplate = function() {
        var pinnedLeft = this.pinned == "left";
        var pinnedRight = this.pinned == "right";
        var template = pinnedLeft ? HeaderRowContainerComp2.PINNED_LEFT_TEMPLATE : pinnedRight ? HeaderRowContainerComp2.PINNED_RIGHT_TEMPLATE : HeaderRowContainerComp2.CENTER_TEMPLATE;
        this.setTemplate(template);
        this.eRowContainer = this.eCenterContainer ? this.eCenterContainer : this.getGui();
      };
      HeaderRowContainerComp2.prototype.destroyRowComps = function() {
        this.setCtrls([]);
      };
      HeaderRowContainerComp2.prototype.destroyRowComp = function(rowComp) {
        this.destroyBean(rowComp);
        this.eRowContainer.removeChild(rowComp.getGui());
      };
      HeaderRowContainerComp2.prototype.setCtrls = function(ctrls) {
        var _this = this;
        var oldRowComps = this.headerRowComps;
        this.headerRowComps = {};
        this.rowCompsList = [];
        var prevGui;
        var appendEnsuringDomOrder = function(rowComp) {
          var eGui = rowComp.getGui();
          var notAlreadyIn = eGui.parentElement != _this.eRowContainer;
          if (notAlreadyIn) {
            _this.eRowContainer.appendChild(eGui);
          }
          if (prevGui) {
            ensureDomOrder(_this.eRowContainer, eGui, prevGui);
          }
          prevGui = eGui;
        };
        ctrls.forEach(function(ctrl) {
          var ctrlId = ctrl.getInstanceId();
          var existingComp = oldRowComps[ctrlId];
          delete oldRowComps[ctrlId];
          var rowComp = existingComp ? existingComp : _this.createBean(new HeaderRowComp(ctrl));
          _this.headerRowComps[ctrlId] = rowComp;
          _this.rowCompsList.push(rowComp);
          appendEnsuringDomOrder(rowComp);
        });
        getAllValuesInObject(oldRowComps).forEach(function(c) {
          return _this.destroyRowComp(c);
        });
      };
      HeaderRowContainerComp2.PINNED_LEFT_TEMPLATE = '<div class="ag-pinned-left-header" role="presentation"></div>';
      HeaderRowContainerComp2.PINNED_RIGHT_TEMPLATE = '<div class="ag-pinned-right-header" role="presentation"></div>';
      HeaderRowContainerComp2.CENTER_TEMPLATE = '<div class="ag-header-viewport" role="presentation">\n            <div class="ag-header-container" ref="eCenterContainer" role="rowgroup"></div>\n        </div>';
      __decorate$1i([
        RefSelector("eCenterContainer")
      ], HeaderRowContainerComp2.prototype, "eCenterContainer", void 0);
      __decorate$1i([
        PostConstruct
      ], HeaderRowContainerComp2.prototype, "init", null);
      __decorate$1i([
        PreDestroy
      ], HeaderRowContainerComp2.prototype, "destroyRowComps", null);
      return HeaderRowContainerComp2;
    }(Component);
    __extends$1m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(HeaderNavigationDirection2) {
      HeaderNavigationDirection2[HeaderNavigationDirection2["UP"] = 0] = "UP";
      HeaderNavigationDirection2[HeaderNavigationDirection2["DOWN"] = 1] = "DOWN";
      HeaderNavigationDirection2[HeaderNavigationDirection2["LEFT"] = 2] = "LEFT";
      HeaderNavigationDirection2[HeaderNavigationDirection2["RIGHT"] = 3] = "RIGHT";
    })(HeaderNavigationDirection || (HeaderNavigationDirection = {}));
    HeaderNavigationService = /** @class */
    function(_super) {
      __extends$1m(HeaderNavigationService2, _super);
      function HeaderNavigationService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HeaderNavigationService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.gridBodyCon = p.gridBodyCtrl;
        });
      };
      HeaderNavigationService2.prototype.getHeaderRowCount = function() {
        var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
        return centerHeaderContainer ? centerHeaderContainer.getRowCount() : 0;
      };
      HeaderNavigationService2.prototype.navigateVertically = function(direction, fromHeader, event) {
        if (!fromHeader) {
          fromHeader = this.focusService.getFocusedHeader();
        }
        if (!fromHeader) {
          return false;
        }
        var headerRowIndex = fromHeader.headerRowIndex, column = fromHeader.column;
        var rowLen = this.getHeaderRowCount();
        var isUp = direction === HeaderNavigationDirection.UP;
        var _a = isUp ? this.headerPositionUtils.getColumnVisibleParent(column, headerRowIndex) : this.headerPositionUtils.getColumnVisibleChild(column, headerRowIndex), nextRow = _a.nextRow, nextFocusColumn = _a.nextFocusColumn;
        var skipColumn = false;
        if (nextRow < 0) {
          nextRow = 0;
          nextFocusColumn = column;
          skipColumn = true;
        }
        if (nextRow >= rowLen) {
          nextRow = -1;
        }
        if (!skipColumn && !nextFocusColumn) {
          return false;
        }
        return this.focusService.focusHeaderPosition({
          headerPosition: { headerRowIndex: nextRow, column: nextFocusColumn },
          allowUserOverride: true,
          event
        });
      };
      HeaderNavigationService2.prototype.navigateHorizontally = function(direction, fromTab, event) {
        if (fromTab === void 0) {
          fromTab = false;
        }
        var focusedHeader = this.focusService.getFocusedHeader();
        var isLeft = direction === HeaderNavigationDirection.LEFT;
        var isRtl = this.gridOptionsService.is("enableRtl");
        var nextHeader;
        var normalisedDirection;
        if (isLeft !== isRtl) {
          normalisedDirection = "Before";
          nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
        } else {
          normalisedDirection = "After";
          nextHeader = this.headerPositionUtils.findHeader(focusedHeader, normalisedDirection);
        }
        if (nextHeader || !fromTab) {
          return this.focusService.focusHeaderPosition({
            headerPosition: nextHeader,
            direction: normalisedDirection,
            fromTab,
            allowUserOverride: true,
            event
          });
        }
        return this.focusNextHeaderRow(focusedHeader, normalisedDirection, event);
      };
      HeaderNavigationService2.prototype.focusNextHeaderRow = function(focusedHeader, direction, event) {
        var currentIndex = focusedHeader.headerRowIndex;
        var nextPosition = null;
        var nextRowIndex;
        if (direction === "Before") {
          if (currentIndex > 0) {
            nextRowIndex = currentIndex - 1;
            nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "end");
          }
        } else {
          nextRowIndex = currentIndex + 1;
          nextPosition = this.headerPositionUtils.findColAtEdgeForHeaderRow(nextRowIndex, "start");
        }
        return this.focusService.focusHeaderPosition({
          headerPosition: nextPosition,
          direction,
          fromTab: true,
          allowUserOverride: true,
          event
        });
      };
      HeaderNavigationService2.prototype.scrollToColumn = function(column, direction) {
        if (direction === void 0) {
          direction = "After";
        }
        if (column.getPinned()) {
          return;
        }
        var columnToScrollTo;
        if (column instanceof ColumnGroup) {
          var columns = column.getDisplayedLeafColumns();
          columnToScrollTo = direction === "Before" ? last(columns) : columns[0];
        } else {
          columnToScrollTo = column;
        }
        this.gridBodyCon.getScrollFeature().ensureColumnVisible(columnToScrollTo);
      };
      __decorate$1h([
        Autowired("focusService")
      ], HeaderNavigationService2.prototype, "focusService", void 0);
      __decorate$1h([
        Autowired("headerPositionUtils")
      ], HeaderNavigationService2.prototype, "headerPositionUtils", void 0);
      __decorate$1h([
        Autowired("ctrlsService")
      ], HeaderNavigationService2.prototype, "ctrlsService", void 0);
      __decorate$1h([
        PostConstruct
      ], HeaderNavigationService2.prototype, "postConstruct", null);
      HeaderNavigationService2 = __decorate$1h([
        Bean("headerNavigationService")
      ], HeaderNavigationService2);
      return HeaderNavigationService2;
    }(BeanStub);
    __extends$1l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridHeaderCtrl = /** @class */
    function(_super) {
      __extends$1l(GridHeaderCtrl2, _super);
      function GridHeaderCtrl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GridHeaderCtrl2.prototype.setComp = function(comp, eGui, eFocusableElement) {
        this.comp = comp;
        this.eGui = eGui;
        this.createManagedBean(new ManagedFocusFeature(eFocusableElement, {
          onTabKeyDown: this.onTabKeyDown.bind(this),
          handleKeyDown: this.handleKeyDown.bind(this),
          onFocusOut: this.onFocusOut.bind(this)
        }));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.onPivotModeChanged();
        this.setupHeaderHeight();
        this.ctrlsService.registerGridHeaderCtrl(this);
      };
      GridHeaderCtrl2.prototype.setupHeaderHeight = function() {
        var listener = this.setHeaderHeight.bind(this);
        listener();
        this.addManagedPropertyListener("headerHeight", listener);
        this.addManagedPropertyListener("pivotHeaderHeight", listener);
        this.addManagedPropertyListener("groupHeaderHeight", listener);
        this.addManagedPropertyListener("pivotGroupHeaderHeight", listener);
        this.addManagedPropertyListener("floatingFiltersHeight", listener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HEADER_HEIGHT_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_ADVANCED_FILTER_ENABLED_CHANGED, listener);
      };
      GridHeaderCtrl2.prototype.getHeaderHeight = function() {
        return this.headerHeight;
      };
      GridHeaderCtrl2.prototype.setHeaderHeight = function() {
        var columnModel = this.columnModel;
        var numberOfFloating = 0;
        var headerRowCount = columnModel.getHeaderRowCount();
        var totalHeaderHeight;
        var hasFloatingFilters = this.filterManager.hasFloatingFilters();
        if (hasFloatingFilters) {
          headerRowCount++;
          numberOfFloating = 1;
        }
        var groupHeight = this.columnModel.getColumnGroupHeaderRowHeight();
        var headerHeight = this.columnModel.getColumnHeaderRowHeight();
        var numberOfNonGroups = 1 + numberOfFloating;
        var numberOfGroups = headerRowCount - numberOfNonGroups;
        totalHeaderHeight = numberOfFloating * columnModel.getFloatingFiltersHeight();
        totalHeaderHeight += numberOfGroups * groupHeight;
        totalHeaderHeight += headerHeight;
        if (this.headerHeight === totalHeaderHeight) {
          return;
        }
        this.headerHeight = totalHeaderHeight;
        var px = totalHeaderHeight + 1 + "px";
        this.comp.setHeightAndMinHeight(px);
        this.eventService.dispatchEvent({
          type: Events.EVENT_HEADER_HEIGHT_CHANGED
        });
      };
      GridHeaderCtrl2.prototype.onPivotModeChanged = function() {
        var pivotMode = this.columnModel.isPivotMode();
        this.comp.addOrRemoveCssClass("ag-pivot-on", pivotMode);
        this.comp.addOrRemoveCssClass("ag-pivot-off", !pivotMode);
      };
      GridHeaderCtrl2.prototype.onDisplayedColumnsChanged = function() {
        var columns = this.columnModel.getAllDisplayedColumns();
        var shouldAllowOverflow = columns.some(function(col) {
          return col.isSpanHeaderHeight();
        });
        this.comp.addOrRemoveCssClass("ag-header-allow-overflow", shouldAllowOverflow);
      };
      GridHeaderCtrl2.prototype.onTabKeyDown = function(e) {
        var isRtl = this.gridOptionsService.is("enableRtl");
        var direction = e.shiftKey !== isRtl ? HeaderNavigationDirection.LEFT : HeaderNavigationDirection.RIGHT;
        if (this.headerNavigationService.navigateHorizontally(direction, true, e) || this.focusService.focusNextGridCoreContainer(e.shiftKey)) {
          e.preventDefault();
        }
      };
      GridHeaderCtrl2.prototype.handleKeyDown = function(e) {
        var direction = null;
        switch (e.key) {
          case KeyCode.LEFT:
            direction = HeaderNavigationDirection.LEFT;
          case KeyCode.RIGHT:
            if (!exists(direction)) {
              direction = HeaderNavigationDirection.RIGHT;
            }
            this.headerNavigationService.navigateHorizontally(direction, false, e);
            break;
          case KeyCode.UP:
            direction = HeaderNavigationDirection.UP;
          case KeyCode.DOWN:
            if (!exists(direction)) {
              direction = HeaderNavigationDirection.DOWN;
            }
            if (this.headerNavigationService.navigateVertically(direction, null, e)) {
              e.preventDefault();
            }
            break;
          default:
            return;
        }
      };
      GridHeaderCtrl2.prototype.onFocusOut = function(e) {
        var eDocument = this.gridOptionsService.getDocument();
        var relatedTarget = e.relatedTarget;
        if (!relatedTarget && this.eGui.contains(eDocument.activeElement)) {
          return;
        }
        if (!this.eGui.contains(relatedTarget)) {
          this.focusService.clearFocusedHeader();
        }
      };
      __decorate$1g([
        Autowired("headerNavigationService")
      ], GridHeaderCtrl2.prototype, "headerNavigationService", void 0);
      __decorate$1g([
        Autowired("focusService")
      ], GridHeaderCtrl2.prototype, "focusService", void 0);
      __decorate$1g([
        Autowired("columnModel")
      ], GridHeaderCtrl2.prototype, "columnModel", void 0);
      __decorate$1g([
        Autowired("ctrlsService")
      ], GridHeaderCtrl2.prototype, "ctrlsService", void 0);
      __decorate$1g([
        Autowired("filterManager")
      ], GridHeaderCtrl2.prototype, "filterManager", void 0);
      return GridHeaderCtrl2;
    }(BeanStub);
    __extends$1k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridHeaderComp = /** @class */
    function(_super) {
      __extends$1k(GridHeaderComp2, _super);
      function GridHeaderComp2() {
        return _super.call(this, GridHeaderComp2.TEMPLATE) || this;
      }
      GridHeaderComp2.prototype.postConstruct = function() {
        var _this = this;
        var compProxy = {
          addOrRemoveCssClass: function(cssClassName, on) {
            return _this.addOrRemoveCssClass(cssClassName, on);
          },
          setHeightAndMinHeight: function(height) {
            _this.getGui().style.height = height;
            _this.getGui().style.minHeight = height;
          }
        };
        var ctrl = this.createManagedBean(new GridHeaderCtrl());
        ctrl.setComp(compProxy, this.getGui(), this.getFocusableElement());
        var addContainer = function(container) {
          _this.createManagedBean(container);
          _this.appendChild(container);
        };
        addContainer(new HeaderRowContainerComp("left"));
        addContainer(new HeaderRowContainerComp(null));
        addContainer(new HeaderRowContainerComp("right"));
      };
      GridHeaderComp2.TEMPLATE = '<div class="ag-header" role="presentation"/>';
      __decorate$1f([
        PostConstruct
      ], GridHeaderComp2.prototype, "postConstruct", null);
      return GridHeaderComp2;
    }(Component);
    __extends$1j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HorizontalResizeService = /** @class */
    function(_super) {
      __extends$1j(HorizontalResizeService2, _super);
      function HorizontalResizeService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HorizontalResizeService2.prototype.addResizeBar = function(params) {
        var _this = this;
        var dragSource = {
          dragStartPixels: params.dragStartPixels || 0,
          eElement: params.eResizeBar,
          onDragStart: this.onDragStart.bind(this, params),
          onDragStop: this.onDragStop.bind(this, params),
          onDragging: this.onDragging.bind(this, params),
          includeTouch: true,
          stopPropagationForTouch: true
        };
        this.dragService.addDragSource(dragSource);
        var finishedWithResizeFunc = function() {
          return _this.dragService.removeDragSource(dragSource);
        };
        return finishedWithResizeFunc;
      };
      HorizontalResizeService2.prototype.onDragStart = function(params, mouseEvent) {
        this.dragStartX = mouseEvent.clientX;
        this.setResizeIcons();
        var shiftKey = mouseEvent instanceof MouseEvent && mouseEvent.shiftKey === true;
        params.onResizeStart(shiftKey);
      };
      HorizontalResizeService2.prototype.setResizeIcons = function() {
        var ctrl = this.ctrlsService.getGridCtrl();
        ctrl.setResizeCursor(true);
        ctrl.disableUserSelect(true);
      };
      HorizontalResizeService2.prototype.onDragStop = function(params, mouseEvent) {
        params.onResizeEnd(this.resizeAmount);
        this.resetIcons();
      };
      HorizontalResizeService2.prototype.resetIcons = function() {
        var ctrl = this.ctrlsService.getGridCtrl();
        ctrl.setResizeCursor(false);
        ctrl.disableUserSelect(false);
      };
      HorizontalResizeService2.prototype.onDragging = function(params, mouseEvent) {
        this.resizeAmount = mouseEvent.clientX - this.dragStartX;
        params.onResizing(this.resizeAmount);
      };
      __decorate$1e([
        Autowired("dragService")
      ], HorizontalResizeService2.prototype, "dragService", void 0);
      __decorate$1e([
        Autowired("ctrlsService")
      ], HorizontalResizeService2.prototype, "ctrlsService", void 0);
      HorizontalResizeService2 = __decorate$1e([
        Bean("horizontalResizeService")
      ], HorizontalResizeService2);
      return HorizontalResizeService2;
    }(BeanStub);
    __extends$1i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    StandardMenuFactory = /** @class */
    function(_super) {
      __extends$1i(StandardMenuFactory2, _super);
      function StandardMenuFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      StandardMenuFactory2.prototype.hideActiveMenu = function() {
        if (this.hidePopup) {
          this.hidePopup();
        }
      };
      StandardMenuFactory2.prototype.showMenuAfterMouseEvent = function(column, mouseEvent) {
        var _this = this;
        this.showPopup(column, function(eMenu) {
          _this.popupService.positionPopupUnderMouseEvent({
            column,
            type: "columnMenu",
            mouseEvent,
            ePopup: eMenu
          });
        }, "columnMenu", mouseEvent.target);
      };
      StandardMenuFactory2.prototype.showMenuAfterButtonClick = function(column, eventSource, containerType) {
        var _this = this;
        this.showPopup(column, function(eMenu) {
          _this.popupService.positionPopupByComponent({
            type: containerType,
            eventSource,
            ePopup: eMenu,
            keepWithinBounds: true,
            position: "under",
            column
          });
        }, containerType, eventSource);
      };
      StandardMenuFactory2.prototype.showPopup = function(column, positionCallback, containerType, eventSource) {
        var _this = this;
        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column, "COLUMN_MENU");
        if (!filterWrapper) {
          throw new Error("AG Grid - unable to show popup filter, filter instantiation failed");
        }
        var eMenu = document.createElement("div");
        setAriaRole(eMenu, "presentation");
        eMenu.classList.add("ag-menu");
        this.tabListener = this.addManagedListener(eMenu, "keydown", function(e) {
          return _this.trapFocusWithin(e, eMenu);
        });
        filterWrapper.guiPromise.then(function(gui) {
          return eMenu.appendChild(gui);
        });
        var hidePopup;
        var afterGuiDetached = function() {
          var _a;
          return (_a = filterWrapper.filterPromise) === null || _a === void 0 ? void 0 : _a.then(function(filter) {
            var _a2;
            return (_a2 = filter === null || filter === void 0 ? void 0 : filter.afterGuiDetached) === null || _a2 === void 0 ? void 0 : _a2.call(filter);
          });
        };
        var anchorToElement = eventSource || this.ctrlsService.getGridBodyCtrl().getGui();
        var closedCallback = function(e) {
          column.setMenuVisible(false, "contextMenu");
          var isKeyboardEvent = e instanceof KeyboardEvent;
          if (_this.tabListener) {
            _this.tabListener = _this.tabListener();
          }
          if (isKeyboardEvent && eventSource && isVisible(eventSource)) {
            var focusableEl = _this.focusService.findTabbableParent(eventSource);
            if (focusableEl) {
              focusableEl.focus();
            }
          }
          afterGuiDetached();
        };
        var translate = this.localeService.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          modal: true,
          eChild: eMenu,
          closeOnEsc: true,
          closedCallback,
          positionCallback: function() {
            return positionCallback(eMenu);
          },
          anchorToElement,
          ariaLabel: translate("ariaLabelColumnMenu", "Column Menu")
        });
        if (addPopupRes) {
          this.hidePopup = hidePopup = addPopupRes.hideFunc;
        }
        filterWrapper.filterPromise.then(function(filter) {
          positionCallback(eMenu);
          if (filter.afterGuiAttached) {
            filter.afterGuiAttached({ container: containerType, hidePopup });
          }
        });
        column.setMenuVisible(true, "contextMenu");
      };
      StandardMenuFactory2.prototype.trapFocusWithin = function(e, menu) {
        if (e.key !== KeyCode.TAB || e.defaultPrevented || this.focusService.findNextFocusableElement(menu, false, e.shiftKey)) {
          return;
        }
        e.preventDefault();
        this.focusService.focusInto(menu, e.shiftKey);
      };
      StandardMenuFactory2.prototype.isMenuEnabled = function(column) {
        return column.isFilterAllowed() && column.getMenuTabs(["filterMenuTab"]).includes("filterMenuTab");
      };
      __decorate$1d([
        Autowired("filterManager")
      ], StandardMenuFactory2.prototype, "filterManager", void 0);
      __decorate$1d([
        Autowired("popupService")
      ], StandardMenuFactory2.prototype, "popupService", void 0);
      __decorate$1d([
        Autowired("focusService")
      ], StandardMenuFactory2.prototype, "focusService", void 0);
      __decorate$1d([
        Autowired("ctrlsService")
      ], StandardMenuFactory2.prototype, "ctrlsService", void 0);
      StandardMenuFactory2 = __decorate$1d([
        Bean("menuFactory")
      ], StandardMenuFactory2);
      return StandardMenuFactory2;
    }(BeanStub);
    __extends$1h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TabbedLayout = /** @class */
    function(_super) {
      __extends$1h(TabbedLayout2, _super);
      function TabbedLayout2(params) {
        var _this = _super.call(this, TabbedLayout2.getTemplate(params.cssClass)) || this;
        _this.items = [];
        _this.tabbedItemScrollMap = /* @__PURE__ */ new Map();
        _this.params = params;
        if (params.items) {
          params.items.forEach(function(item) {
            return _this.addItem(item);
          });
        }
        return _this;
      }
      TabbedLayout2.prototype.postConstruct = function() {
        var _this = this;
        this.createManagedBean(new ManagedFocusFeature(this.getFocusableElement(), {
          onTabKeyDown: this.onTabKeyDown.bind(this),
          handleKeyDown: this.handleKeyDown.bind(this)
        }));
        this.addDestroyFunc(function() {
          var _a, _b, _c;
          return (_c = (_b = (_a = _this.activeItem) === null || _a === void 0 ? void 0 : _a.tabbedItem) === null || _b === void 0 ? void 0 : _b.afterDetachedCallback) === null || _c === void 0 ? void 0 : _c.call(_b);
        });
      };
      TabbedLayout2.getTemplate = function(cssClass) {
        return (
          /* html */
          '<div class="ag-tabs ' + cssClass + '">\n            <div ref="eHeader" role="tablist" class="ag-tabs-header ' + (cssClass ? cssClass + "-header" : "") + '"></div>\n            <div ref="eBody" role="presentation" class="ag-tabs-body ' + (cssClass ? cssClass + "-body" : "") + '"></div>\n        </div>'
        );
      };
      TabbedLayout2.prototype.handleKeyDown = function(e) {
        var eDocument = this.gridOptionsService.getDocument();
        switch (e.key) {
          case KeyCode.RIGHT:
          case KeyCode.LEFT:
            if (!this.eHeader.contains(eDocument.activeElement)) {
              return;
            }
            var isRightKey = e.key === KeyCode.RIGHT;
            var isRtl = this.gridOptionsService.is("enableRtl");
            var currentPosition = this.items.indexOf(this.activeItem);
            var nextPosition = isRightKey !== isRtl ? Math.min(currentPosition + 1, this.items.length - 1) : Math.max(currentPosition - 1, 0);
            if (currentPosition === nextPosition) {
              return;
            }
            e.preventDefault();
            var nextItem = this.items[nextPosition];
            this.showItemWrapper(nextItem);
            nextItem.eHeaderButton.focus();
            break;
          case KeyCode.UP:
          case KeyCode.DOWN:
            e.stopPropagation();
            break;
        }
      };
      TabbedLayout2.prototype.onTabKeyDown = function(e) {
        if (e.defaultPrevented) {
          return;
        }
        var _a = this, focusService = _a.focusService, eHeader = _a.eHeader, eBody = _a.eBody, activeItem = _a.activeItem;
        var eDocument = this.gridOptionsService.getDocument();
        var activeElement = eDocument.activeElement;
        var target = e.target;
        e.preventDefault();
        if (eHeader.contains(activeElement)) {
          focusService.focusInto(eBody, e.shiftKey);
          return;
        }
        var nextEl = null;
        if (focusService.isTargetUnderManagedComponent(eBody, target)) {
          if (e.shiftKey) {
            nextEl = this.focusService.findFocusableElementBeforeTabGuard(eBody, target);
          }
          if (!nextEl) {
            nextEl = activeItem.eHeaderButton;
          }
        }
        if (!nextEl && eBody.contains(activeElement)) {
          nextEl = focusService.findNextFocusableElement(eBody, false, e.shiftKey);
          if (!nextEl) {
            nextEl = activeItem.eHeaderButton;
          }
        }
        if (nextEl) {
          nextEl.focus();
        }
      };
      TabbedLayout2.prototype.setAfterAttachedParams = function(params) {
        this.afterAttachedParams = params;
      };
      TabbedLayout2.prototype.showFirstItem = function() {
        if (this.items.length > 0) {
          this.showItemWrapper(this.items[0]);
        }
      };
      TabbedLayout2.prototype.addItem = function(item) {
        var eHeaderButton = document.createElement("span");
        setAriaRole(eHeaderButton, "tab");
        eHeaderButton.setAttribute("tabindex", "-1");
        eHeaderButton.appendChild(item.title);
        eHeaderButton.classList.add("ag-tab");
        this.eHeader.appendChild(eHeaderButton);
        setAriaLabel(eHeaderButton, item.titleLabel);
        var wrapper = {
          tabbedItem: item,
          eHeaderButton
        };
        this.items.push(wrapper);
        eHeaderButton.addEventListener("click", this.showItemWrapper.bind(this, wrapper));
      };
      TabbedLayout2.prototype.showItem = function(tabbedItem) {
        var itemWrapper = this.items.find(function(wrapper) {
          return wrapper.tabbedItem === tabbedItem;
        });
        if (itemWrapper) {
          this.showItemWrapper(itemWrapper);
        }
      };
      TabbedLayout2.prototype.showItemWrapper = function(wrapper) {
        var _this = this;
        var _a, _b;
        var tabbedItem = wrapper.tabbedItem, eHeaderButton = wrapper.eHeaderButton;
        if (this.params.onItemClicked) {
          this.params.onItemClicked({ item: tabbedItem });
        }
        if (this.activeItem === wrapper) {
          callIfPresent(this.params.onActiveItemClicked);
          return;
        }
        if (this.lastScrollListener) {
          this.lastScrollListener = this.lastScrollListener();
        }
        clearElement(this.eBody);
        tabbedItem.bodyPromise.then(function(body) {
          _this.eBody.appendChild(body);
          var onlyUnmanaged = !_this.focusService.isKeyboardMode();
          _this.focusService.focusInto(_this.eBody, false, onlyUnmanaged);
          if (tabbedItem.afterAttachedCallback) {
            tabbedItem.afterAttachedCallback(_this.afterAttachedParams);
          }
          if (_this.params.keepScrollPosition) {
            var scrollableContainer_1 = tabbedItem.getScrollableContainer && tabbedItem.getScrollableContainer() || body;
            _this.lastScrollListener = _this.addManagedListener(scrollableContainer_1, "scroll", function() {
              _this.tabbedItemScrollMap.set(tabbedItem.name, scrollableContainer_1.scrollTop);
            });
            var scrollPosition_1 = _this.tabbedItemScrollMap.get(tabbedItem.name);
            if (scrollPosition_1 !== void 0) {
              setTimeout(function() {
                scrollableContainer_1.scrollTop = scrollPosition_1;
              }, 0);
            }
          }
        });
        if (this.activeItem) {
          this.activeItem.eHeaderButton.classList.remove("ag-tab-selected");
          (_b = (_a = this.activeItem.tabbedItem).afterDetachedCallback) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
        eHeaderButton.classList.add("ag-tab-selected");
        this.activeItem = wrapper;
      };
      __decorate$1c([
        Autowired("focusService")
      ], TabbedLayout2.prototype, "focusService", void 0);
      __decorate$1c([
        RefSelector("eHeader")
      ], TabbedLayout2.prototype, "eHeader", void 0);
      __decorate$1c([
        RefSelector("eBody")
      ], TabbedLayout2.prototype, "eBody", void 0);
      __decorate$1c([
        PostConstruct
      ], TabbedLayout2.prototype, "postConstruct", null);
      return TabbedLayout2;
    }(Component);
    __extends$1g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    DEBOUNCE_DELAY = 50;
    ResizeObserverService = /** @class */
    function(_super) {
      __extends$1g(ResizeObserverService2, _super);
      function ResizeObserverService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.polyfillFunctions = [];
        return _this;
      }
      ResizeObserverService2.prototype.observeResize = function(element, callback) {
        var _this = this;
        var win = this.gridOptionsService.getWindow();
        var useBrowserResizeObserver = function() {
          var resizeObserver = new win.ResizeObserver(callback);
          resizeObserver.observe(element);
          return function() {
            return resizeObserver.disconnect();
          };
        };
        var usePolyfill = function() {
          var widthLastTime = offsetWidth(element);
          var heightLastTime = offsetHeight(element);
          var running = true;
          var periodicallyCheckWidthAndHeight = function() {
            if (running) {
              var newWidth = offsetWidth(element);
              var newHeight = offsetHeight(element);
              var changed = newWidth !== widthLastTime || newHeight !== heightLastTime;
              if (changed) {
                widthLastTime = newWidth;
                heightLastTime = newHeight;
                callback();
              }
              _this.doNextPolyfillTurn(periodicallyCheckWidthAndHeight);
            }
          };
          periodicallyCheckWidthAndHeight();
          return function() {
            return running = false;
          };
        };
        var suppressResize = this.gridOptionsService.is("suppressBrowserResizeObserver");
        var resizeObserverExists = !!win.ResizeObserver;
        if (resizeObserverExists && !suppressResize) {
          return useBrowserResizeObserver();
        }
        return usePolyfill();
      };
      ResizeObserverService2.prototype.doNextPolyfillTurn = function(func) {
        this.polyfillFunctions.push(func);
        this.schedulePolyfill();
      };
      ResizeObserverService2.prototype.schedulePolyfill = function() {
        var _this = this;
        if (this.polyfillScheduled) {
          return;
        }
        var executeAllFuncs = function() {
          var funcs = _this.polyfillFunctions;
          _this.polyfillScheduled = false;
          _this.polyfillFunctions = [];
          funcs.forEach(function(f) {
            return f();
          });
        };
        this.polyfillScheduled = true;
        this.getFrameworkOverrides().setTimeout(executeAllFuncs, DEBOUNCE_DELAY);
      };
      ResizeObserverService2 = __decorate$1b([
        Bean("resizeObserverService")
      ], ResizeObserverService2);
      return ResizeObserverService2;
    }(BeanStub);
    __extends$1f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AnimationFrameService = /** @class */
    function(_super) {
      __extends$1f(AnimationFrameService2, _super);
      function AnimationFrameService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.createTasksP1 = { list: [], sorted: false };
        _this.createTasksP2 = { list: [], sorted: false };
        _this.destroyTasks = [];
        _this.ticking = false;
        _this.scrollGoingDown = true;
        _this.lastPage = 0;
        _this.lastScrollTop = 0;
        _this.taskCount = 0;
        _this.cancelledTasks = /* @__PURE__ */ new Set();
        return _this;
      }
      AnimationFrameService2.prototype.setScrollTop = function(scrollTop) {
        var isPaginationActive = this.gridOptionsService.is("pagination");
        this.scrollGoingDown = scrollTop >= this.lastScrollTop;
        if (isPaginationActive && scrollTop === 0) {
          var currentPage = this.paginationProxy.getCurrentPage();
          if (currentPage !== this.lastPage) {
            this.lastPage = currentPage;
            this.scrollGoingDown = true;
          }
        }
        this.lastScrollTop = scrollTop;
      };
      AnimationFrameService2.prototype.init = function() {
        this.useAnimationFrame = !this.gridOptionsService.is("suppressAnimationFrame");
      };
      AnimationFrameService2.prototype.isOn = function() {
        return this.useAnimationFrame;
      };
      AnimationFrameService2.prototype.verifyAnimationFrameOn = function(methodName) {
        if (this.useAnimationFrame === false) {
          console.warn("AG Grid: AnimationFrameService." + methodName + " called but animation frames are off");
        }
      };
      AnimationFrameService2.prototype.createTask = function(task, index, list) {
        this.verifyAnimationFrameOn(list);
        var taskItem = { task, index, createOrder: ++this.taskCount };
        this.addTaskToList(this[list], taskItem);
        this.schedule();
      };
      AnimationFrameService2.prototype.cancelTask = function(task) {
        this.cancelledTasks.add(task);
      };
      AnimationFrameService2.prototype.addTaskToList = function(taskList, task) {
        taskList.list.push(task);
        taskList.sorted = false;
      };
      AnimationFrameService2.prototype.sortTaskList = function(taskList) {
        if (taskList.sorted) {
          return;
        }
        var sortDirection = this.scrollGoingDown ? 1 : -1;
        taskList.list.sort(function(a, b) {
          return a.index !== b.index ? sortDirection * (b.index - a.index) : b.createOrder - a.createOrder;
        });
        taskList.sorted = true;
      };
      AnimationFrameService2.prototype.addDestroyTask = function(task) {
        this.verifyAnimationFrameOn("createTasksP3");
        this.destroyTasks.push(task);
        this.schedule();
      };
      AnimationFrameService2.prototype.executeFrame = function(millis) {
        this.verifyAnimationFrameOn("executeFrame");
        var p1TaskList = this.createTasksP1;
        var p1Tasks = p1TaskList.list;
        var p2TaskList = this.createTasksP2;
        var p2Tasks = p2TaskList.list;
        var destroyTasks = this.destroyTasks;
        var frameStart = (/* @__PURE__ */ new Date()).getTime();
        var duration = (/* @__PURE__ */ new Date()).getTime() - frameStart;
        var noMaxMillis = millis <= 0;
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        while (noMaxMillis || duration < millis) {
          var gridBodyDidSomething = gridBodyCon.getScrollFeature().scrollGridIfNeeded();
          if (!gridBodyDidSomething) {
            var task = void 0;
            if (p1Tasks.length) {
              this.sortTaskList(p1TaskList);
              task = p1Tasks.pop().task;
            } else if (p2Tasks.length) {
              this.sortTaskList(p2TaskList);
              task = p2Tasks.pop().task;
            } else if (destroyTasks.length) {
              task = destroyTasks.pop();
            } else {
              this.cancelledTasks.clear();
              break;
            }
            if (!this.cancelledTasks.has(task)) {
              task();
            }
          }
          duration = (/* @__PURE__ */ new Date()).getTime() - frameStart;
        }
        if (p1Tasks.length || p2Tasks.length || destroyTasks.length) {
          this.requestFrame();
        } else {
          this.stopTicking();
        }
      };
      AnimationFrameService2.prototype.stopTicking = function() {
        this.ticking = false;
      };
      AnimationFrameService2.prototype.flushAllFrames = function() {
        if (!this.useAnimationFrame) {
          return;
        }
        this.executeFrame(-1);
      };
      AnimationFrameService2.prototype.schedule = function() {
        if (!this.useAnimationFrame) {
          return;
        }
        if (!this.ticking) {
          this.ticking = true;
          this.requestFrame();
        }
      };
      AnimationFrameService2.prototype.requestFrame = function() {
        var callback = this.executeFrame.bind(this, 60);
        this.requestAnimationFrame(callback);
      };
      AnimationFrameService2.prototype.requestAnimationFrame = function(callback) {
        var win = this.gridOptionsService.getWindow();
        if (win.requestAnimationFrame) {
          win.requestAnimationFrame(callback);
        } else if (win.webkitRequestAnimationFrame) {
          win.webkitRequestAnimationFrame(callback);
        } else {
          win.setTimeout(callback, 0);
        }
      };
      AnimationFrameService2.prototype.isQueueEmpty = function() {
        return !this.ticking;
      };
      AnimationFrameService2.prototype.debounce = function(func) {
        var _this = this;
        var pending = false;
        return function() {
          if (!_this.isOn()) {
            _this.getFrameworkOverrides().setTimeout(func, 0);
            return;
          }
          if (pending) {
            return;
          }
          pending = true;
          _this.addDestroyTask(function() {
            pending = false;
            func();
          });
        };
      };
      __decorate$1a([
        Autowired("ctrlsService")
      ], AnimationFrameService2.prototype, "ctrlsService", void 0);
      __decorate$1a([
        Autowired("paginationProxy")
      ], AnimationFrameService2.prototype, "paginationProxy", void 0);
      __decorate$1a([
        PostConstruct
      ], AnimationFrameService2.prototype, "init", null);
      AnimationFrameService2 = __decorate$1a([
        Bean("animationFrameService")
      ], AnimationFrameService2);
      return AnimationFrameService2;
    }(BeanStub);
    __extends$1e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$19 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AutoWidthCalculator = /** @class */
    function(_super) {
      __extends$1e(AutoWidthCalculator2, _super);
      function AutoWidthCalculator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AutoWidthCalculator2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.centerRowContainerCtrl = p.centerRowContainerCtrl;
        });
      };
      AutoWidthCalculator2.prototype.getPreferredWidthForColumn = function(column, skipHeader) {
        var eHeaderCell = this.getHeaderCellForColumn(column);
        if (!eHeaderCell) {
          return -1;
        }
        var elements = this.rowRenderer.getAllCellsForColumn(column);
        if (!skipHeader) {
          elements.push(eHeaderCell);
        }
        return this.addElementsToContainerAndGetWidth(elements);
      };
      AutoWidthCalculator2.prototype.getPreferredWidthForColumnGroup = function(columnGroup) {
        var eHeaderCell = this.getHeaderCellForColumn(columnGroup);
        if (!eHeaderCell) {
          return -1;
        }
        return this.addElementsToContainerAndGetWidth([eHeaderCell]);
      };
      AutoWidthCalculator2.prototype.addElementsToContainerAndGetWidth = function(elements) {
        var _this = this;
        var eDummyContainer = document.createElement("form");
        eDummyContainer.style.position = "fixed";
        var eBodyContainer = this.centerRowContainerCtrl.getContainerElement();
        elements.forEach(function(el) {
          return _this.cloneItemIntoDummy(el, eDummyContainer);
        });
        eBodyContainer.appendChild(eDummyContainer);
        var dummyContainerWidth = eDummyContainer.offsetWidth;
        eBodyContainer.removeChild(eDummyContainer);
        var autoSizePadding = this.getAutoSizePadding();
        return dummyContainerWidth + autoSizePadding;
      };
      AutoWidthCalculator2.prototype.getAutoSizePadding = function() {
        var value = this.gridOptionsService.getNum("autoSizePadding");
        return value != null && value >= 0 ? value : 20;
      };
      AutoWidthCalculator2.prototype.getHeaderCellForColumn = function(column) {
        var element = null;
        this.ctrlsService.getHeaderRowContainerCtrls().forEach(function(container) {
          var res = container.getHtmlElementForColumnHeader(column);
          if (res != null) {
            element = res;
          }
        });
        return element;
      };
      AutoWidthCalculator2.prototype.cloneItemIntoDummy = function(eCell, eDummyContainer) {
        var eCellClone = eCell.cloneNode(true);
        eCellClone.style.width = "";
        eCellClone.style.position = "static";
        eCellClone.style.left = "";
        var eCloneParent = document.createElement("div");
        var eCloneParentClassList = eCloneParent.classList;
        var isHeader = ["ag-header-cell", "ag-header-group-cell"].some(function(cls) {
          return eCellClone.classList.contains(cls);
        });
        if (isHeader) {
          eCloneParentClassList.add("ag-header", "ag-header-row");
          eCloneParent.style.position = "static";
        } else {
          eCloneParentClassList.add("ag-row");
        }
        var pointer = eCell.parentElement;
        while (pointer) {
          var isRow = ["ag-header-row", "ag-row"].some(function(cls) {
            return pointer.classList.contains(cls);
          });
          if (isRow) {
            for (var i = 0; i < pointer.classList.length; i++) {
              var item = pointer.classList[i];
              if (item != "ag-row-position-absolute") {
                eCloneParentClassList.add(item);
              }
            }
            break;
          }
          pointer = pointer.parentElement;
        }
        eCloneParent.appendChild(eCellClone);
        eDummyContainer.appendChild(eCloneParent);
      };
      __decorate$19([
        Autowired("rowRenderer")
      ], AutoWidthCalculator2.prototype, "rowRenderer", void 0);
      __decorate$19([
        Autowired("ctrlsService")
      ], AutoWidthCalculator2.prototype, "ctrlsService", void 0);
      __decorate$19([
        Autowired("rowCssClassCalculator")
      ], AutoWidthCalculator2.prototype, "rowCssClassCalculator", void 0);
      __decorate$19([
        PostConstruct
      ], AutoWidthCalculator2.prototype, "postConstruct", null);
      AutoWidthCalculator2 = __decorate$19([
        Bean("autoWidthCalculator")
      ], AutoWidthCalculator2);
      return AutoWidthCalculator2;
    }(BeanStub);
    __extends$1d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$18 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __values$2 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read$e = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$c = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    StickyRowFeature = /** @class */
    function(_super) {
      __extends$1d(StickyRowFeature2, _super);
      function StickyRowFeature2(createRowCon, destroyRowCtrls) {
        var _this = _super.call(this) || this;
        _this.createRowCon = createRowCon;
        _this.destroyRowCtrls = destroyRowCtrls;
        _this.stickyRowCtrls = [];
        _this.containerHeight = 0;
        return _this;
      }
      StickyRowFeature2.prototype.postConstruct = function() {
        var _this = this;
        this.isClientSide = this.rowModel.getType() === "clientSide";
        this.ctrlsService.whenReady(function(params) {
          _this.gridBodyCtrl = params.gridBodyCtrl;
        });
      };
      StickyRowFeature2.prototype.getStickyRowCtrls = function() {
        return this.stickyRowCtrls;
      };
      StickyRowFeature2.prototype.checkStickyRows = function() {
        var _this = this;
        var height = 0;
        if (!this.gridOptionsService.isGroupRowsSticky()) {
          return this.refreshNodesAndContainerHeight([], height);
        }
        var stickyRows = [];
        var firstPixel = this.rowRenderer.getFirstVisibleVerticalPixel();
        var addStickyRow = function(stickyRow) {
          var _a, _b, _c;
          stickyRows.push(stickyRow);
          var lastChildBottom;
          if (_this.isClientSide) {
            var lastAncestor = stickyRow;
            while (lastAncestor.expanded) {
              if (lastAncestor.master) {
                lastAncestor = lastAncestor.detailNode;
              } else if (lastAncestor.childrenAfterSort) {
                if (lastAncestor.childrenAfterSort.length === 0) {
                  break;
                }
                lastAncestor = last(lastAncestor.childrenAfterSort);
              }
            }
            lastChildBottom = lastAncestor.rowTop + lastAncestor.rowHeight;
          } else {
            if (stickyRow.master) {
              lastChildBottom = stickyRow.detailNode.rowTop + stickyRow.detailNode.rowHeight;
            } else {
              var storeBounds = (_a = stickyRow.childStore) === null || _a === void 0 ? void 0 : _a.getStoreBounds();
              lastChildBottom = ((_b = storeBounds === null || storeBounds === void 0 ? void 0 : storeBounds.heightPx) !== null && _b !== void 0 ? _b : 0) + ((_c = storeBounds === null || storeBounds === void 0 ? void 0 : storeBounds.topPx) !== null && _c !== void 0 ? _c : 0);
            }
          }
          var stickRowBottom = firstPixel + height + stickyRow.rowHeight;
          if (lastChildBottom < stickRowBottom) {
            stickyRow.stickyRowTop = height + (lastChildBottom - stickRowBottom);
          } else {
            stickyRow.stickyRowTop = height;
          }
          height = 0;
          stickyRows.forEach(function(rowNode) {
            var thisRowLastPx = rowNode.stickyRowTop + rowNode.rowHeight;
            if (height < thisRowLastPx) {
              height = thisRowLastPx;
            }
          });
        };
        while (true) {
          var firstPixelAfterStickyRows = firstPixel + height;
          var firstIndex = this.rowModel.getRowIndexAtPixel(firstPixelAfterStickyRows);
          var firstRow = this.rowModel.getRow(firstIndex);
          if (firstRow == null) {
            break;
          }
          if (firstRow.level < 0) {
            break;
          }
          var parents = [];
          var p = firstRow.parent;
          while (p.level >= 0) {
            parents.push(p);
            p = p.parent;
          }
          var firstMissingParent = parents.reverse().find(function(parent) {
            return stickyRows.indexOf(parent) < 0 && parent.displayed;
          });
          if (firstMissingParent) {
            addStickyRow(firstMissingParent);
            continue;
          }
          if (firstRow.isExpandable() && firstRow.expanded && firstRow.rowTop < firstPixelAfterStickyRows) {
            addStickyRow(firstRow);
            continue;
          }
          break;
        }
        return this.refreshNodesAndContainerHeight(stickyRows, height);
      };
      StickyRowFeature2.prototype.refreshStickyNode = function(stickRowNode) {
        var allStickyNodes = [];
        for (var i = 0; i < this.stickyRowCtrls.length; i++) {
          var currentNode = this.stickyRowCtrls[i].getRowNode();
          if (currentNode !== stickRowNode) {
            allStickyNodes.push(currentNode);
          }
        }
        if (this.refreshNodesAndContainerHeight(allStickyNodes, this.containerHeight)) {
          this.checkStickyRows();
        }
      };
      StickyRowFeature2.prototype.refreshNodesAndContainerHeight = function(allStickyNodes, height) {
        var e_1, _a, _b;
        var _this = this;
        var stickyRowsChanged = false;
        var removedCtrls = this.stickyRowCtrls.filter(function(ctrl2) {
          return allStickyNodes.indexOf(ctrl2.getRowNode()) === -1;
        });
        var addedNodes = allStickyNodes.filter(function(rowNode) {
          return _this.stickyRowCtrls.findIndex(function(ctrl2) {
            return ctrl2.getRowNode() === rowNode;
          }) === -1;
        });
        if (removedCtrls.length || addedNodes.length) {
          stickyRowsChanged = true;
        }
        var ctrlsToDestroy = {};
        removedCtrls.forEach(function(removedCtrl) {
          ctrlsToDestroy[removedCtrl.getRowNode().id] = removedCtrl;
          _this.stickyRowCtrls = _this.stickyRowCtrls.filter(function(ctrl2) {
            return ctrl2 !== removedCtrl;
          });
        });
        try {
          for (var _c = __values$2(Object.values(ctrlsToDestroy)), _d = _c.next(); !_d.done; _d = _c.next()) {
            var ctrl = _d.value;
            ctrl.getRowNode().sticky = false;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return))
              _a.call(_c);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        this.destroyRowCtrls(ctrlsToDestroy, false);
        var newCtrls = addedNodes.map(function(rowNode) {
          rowNode.sticky = true;
          return _this.createRowCon(rowNode, false, false);
        });
        (_b = this.stickyRowCtrls).push.apply(_b, __spreadArray$c([], __read$e(newCtrls)));
        this.stickyRowCtrls.forEach(function(ctrl2) {
          return ctrl2.setRowTop(ctrl2.getRowNode().stickyRowTop);
        });
        this.stickyRowCtrls.sort(function(a, b) {
          return b.getRowNode().rowIndex - a.getRowNode().rowIndex;
        });
        if (this.containerHeight !== height) {
          this.containerHeight = height;
          this.gridBodyCtrl.setStickyTopHeight(height);
          stickyRowsChanged = true;
        }
        return stickyRowsChanged;
      };
      __decorate$18([
        Autowired("rowModel")
      ], StickyRowFeature2.prototype, "rowModel", void 0);
      __decorate$18([
        Autowired("rowRenderer")
      ], StickyRowFeature2.prototype, "rowRenderer", void 0);
      __decorate$18([
        Autowired("ctrlsService")
      ], StickyRowFeature2.prototype, "ctrlsService", void 0);
      __decorate$18([
        PostConstruct
      ], StickyRowFeature2.prototype, "postConstruct", null);
      return StickyRowFeature2;
    }(BeanStub);
    __extends$1c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$17 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$d = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$b = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    __values$1 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    DEFAULT_KEEP_DETAIL_ROW_COUNT = 10;
    RowRenderer = /** @class */
    function(_super) {
      __extends$1c(RowRenderer2, _super);
      function RowRenderer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.destroyFuncsForColumnListeners = [];
        _this.rowCtrlsByRowIndex = {};
        _this.zombieRowCtrls = {};
        _this.allRowCtrls = [];
        _this.topRowCtrls = [];
        _this.bottomRowCtrls = [];
        _this.refreshInProgress = false;
        _this.dataFirstRenderedFired = false;
        return _this;
      }
      RowRenderer2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
          _this.initialise();
        });
      };
      RowRenderer2.prototype.initialise = function() {
        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.onBodyScroll.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.redraw.bind(this));
        this.addManagedPropertyListener("domLayout", this.onDomLayoutChanged.bind(this));
        this.addManagedPropertyListener("rowClass", this.redrawRows.bind(this));
        if (this.gridOptionsService.isGroupRowsSticky()) {
          var rowModelType = this.rowModel.getType();
          if (rowModelType === "clientSide" || rowModelType === "serverSide") {
            this.stickyRowFeature = this.createManagedBean(new StickyRowFeature(this.createRowCon.bind(this), this.destroyRowCtrls.bind(this)));
          }
        }
        this.registerCellEventListeners();
        this.initialiseCache();
        this.printLayout = this.gridOptionsService.isDomLayout("print");
        this.embedFullWidthRows = this.printLayout || this.gridOptionsService.is("embedFullWidthRows");
        this.redrawAfterModelUpdate();
      };
      RowRenderer2.prototype.initialiseCache = function() {
        if (this.gridOptionsService.is("keepDetailRows")) {
          var countProp = this.getKeepDetailRowsCount();
          var count = countProp != null ? countProp : 3;
          this.cachedRowCtrls = new RowCtrlCache(count);
        }
      };
      RowRenderer2.prototype.getKeepDetailRowsCount = function() {
        var keepDetailRowsCount = this.gridOptionsService.getNum("keepDetailRowsCount");
        if (exists(keepDetailRowsCount) && keepDetailRowsCount > 0) {
          return keepDetailRowsCount;
        }
        return DEFAULT_KEEP_DETAIL_ROW_COUNT;
      };
      RowRenderer2.prototype.getStickyTopRowCtrls = function() {
        if (!this.stickyRowFeature) {
          return [];
        }
        return this.stickyRowFeature.getStickyRowCtrls();
      };
      RowRenderer2.prototype.updateAllRowCtrls = function() {
        var liveList = getAllValuesInObject(this.rowCtrlsByRowIndex);
        var isEnsureDomOrder = this.gridOptionsService.is("ensureDomOrder");
        var isPrintLayout = this.gridOptionsService.isDomLayout("print");
        if (isEnsureDomOrder || isPrintLayout) {
          liveList.sort(function(a, b) {
            return a.getRowNode().rowIndex - b.getRowNode.rowIndex;
          });
        }
        var zombieList = getAllValuesInObject(this.zombieRowCtrls);
        var cachedList = this.cachedRowCtrls ? this.cachedRowCtrls.getEntries() : [];
        if (zombieList.length > 0 || cachedList.length > 0) {
          this.allRowCtrls = __spreadArray$b(__spreadArray$b(__spreadArray$b([], __read$d(liveList)), __read$d(zombieList)), __read$d(cachedList));
        } else {
          this.allRowCtrls = liveList;
        }
      };
      RowRenderer2.prototype.onCellFocusChanged = function(event) {
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          return cellCtrl.onCellFocused(event);
        });
        this.getFullWidthRowCtrls().forEach(function(rowCtrl) {
          return rowCtrl.onFullWidthRowFocused(event);
        });
      };
      RowRenderer2.prototype.registerCellEventListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUSED, function(event) {
          _this.onCellFocusChanged(event);
        });
        this.addManagedListener(this.eventService, Events.EVENT_CELL_FOCUS_CLEARED, function() {
          _this.onCellFocusChanged();
        });
        this.addManagedListener(this.eventService, Events.EVENT_FLASH_CELLS, function(event) {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onFlashCells(event);
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_HOVER_CHANGED, function() {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onColumnHover();
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, function() {
          _this.getAllCellCtrls().forEach(function(cellCtrl) {
            return cellCtrl.onDisplayedColumnsChanged();
          });
        });
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, function() {
          if (_this.printLayout) {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onLeftChanged();
            });
          }
        });
        var rangeSelectionEnabled = this.gridOptionsService.is("enableRangeSelection");
        if (rangeSelectionEnabled) {
          this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.onRangeSelectionChanged();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.updateRangeBordersIfRangeCount();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.updateRangeBordersIfRangeCount();
            });
          });
          this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, function() {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              return cellCtrl.updateRangeBordersIfRangeCount();
            });
          });
        }
        this.refreshListenersToColumnsForCellComps();
        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.refreshListenersToColumnsForCellComps.bind(this));
        this.addDestroyFunc(this.removeGridColumnListeners.bind(this));
      };
      RowRenderer2.prototype.removeGridColumnListeners = function() {
        this.destroyFuncsForColumnListeners.forEach(function(func) {
          return func();
        });
        this.destroyFuncsForColumnListeners.length = 0;
      };
      RowRenderer2.prototype.refreshListenersToColumnsForCellComps = function() {
        var _this = this;
        this.removeGridColumnListeners();
        var cols = this.columnModel.getAllGridColumns();
        if (!cols) {
          return;
        }
        cols.forEach(function(col) {
          var forEachCellWithThisCol = function(callback) {
            _this.getAllCellCtrls().forEach(function(cellCtrl) {
              if (cellCtrl.getColumn() === col) {
                callback(cellCtrl);
              }
            });
          };
          var leftChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onLeftChanged();
            });
          };
          var widthChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onWidthChanged();
            });
          };
          var firstRightPinnedChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onFirstRightPinnedChanged();
            });
          };
          var lastLeftPinnedChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onLastLeftPinnedChanged();
            });
          };
          var colDefChangedListener = function() {
            forEachCellWithThisCol(function(cellCtrl) {
              return cellCtrl.onColDefChanged();
            });
          };
          col.addEventListener("leftChanged", leftChangedListener);
          col.addEventListener("widthChanged", widthChangedListener);
          col.addEventListener("firstRightPinnedChanged", firstRightPinnedChangedListener);
          col.addEventListener("lastLeftPinnedChanged", lastLeftPinnedChangedListener);
          col.addEventListener("colDefChanged", colDefChangedListener);
          _this.destroyFuncsForColumnListeners.push(function() {
            col.removeEventListener("leftChanged", leftChangedListener);
            col.removeEventListener("widthChanged", widthChangedListener);
            col.removeEventListener("firstRightPinnedChanged", firstRightPinnedChangedListener);
            col.removeEventListener("lastLeftPinnedChanged", lastLeftPinnedChangedListener);
            col.removeEventListener("colDefChanged", colDefChangedListener);
          });
        });
      };
      RowRenderer2.prototype.onDomLayoutChanged = function() {
        var printLayout = this.gridOptionsService.isDomLayout("print");
        var embedFullWidthRows = printLayout || this.gridOptionsService.is("embedFullWidthRows");
        var destroyRows = embedFullWidthRows !== this.embedFullWidthRows || this.printLayout !== printLayout;
        this.printLayout = printLayout;
        this.embedFullWidthRows = embedFullWidthRows;
        if (destroyRows) {
          this.redrawAfterModelUpdate({ domLayoutChanged: true });
        }
      };
      RowRenderer2.prototype.datasourceChanged = function() {
        this.firstRenderedRow = 0;
        this.lastRenderedRow = -1;
        var rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);
        this.removeRowCtrls(rowIndexesToRemove);
      };
      RowRenderer2.prototype.onPageLoaded = function(event) {
        var params = {
          recycleRows: event.keepRenderedRows,
          animate: event.animate,
          newData: event.newData,
          newPage: event.newPage,
          // because this is a model updated event (not pinned rows), we
          // can skip updating the pinned rows. this is needed so that if user
          // is doing transaction updates, the pinned rows are not getting constantly
          // trashed - or editing cells in pinned rows are not refreshed and put into read mode
          onlyBody: true
        };
        this.redrawAfterModelUpdate(params);
      };
      RowRenderer2.prototype.getAllCellsForColumn = function(column) {
        var res = [];
        this.getAllRowCtrls().forEach(function(rowCtrl) {
          var eCell = rowCtrl.getCellElement(column);
          if (eCell) {
            res.push(eCell);
          }
        });
        return res;
      };
      RowRenderer2.prototype.refreshFloatingRowComps = function() {
        this.refreshFloatingRows(this.topRowCtrls, this.pinnedRowModel.getPinnedTopRowData());
        this.refreshFloatingRows(this.bottomRowCtrls, this.pinnedRowModel.getPinnedBottomRowData());
      };
      RowRenderer2.prototype.getTopRowCtrls = function() {
        return this.topRowCtrls;
      };
      RowRenderer2.prototype.getCentreRowCtrls = function() {
        return this.allRowCtrls;
      };
      RowRenderer2.prototype.getBottomRowCtrls = function() {
        return this.bottomRowCtrls;
      };
      RowRenderer2.prototype.refreshFloatingRows = function(rowComps, rowNodes) {
        var _this = this;
        rowComps.forEach(function(row) {
          row.destroyFirstPass();
          row.destroySecondPass();
        });
        rowComps.length = 0;
        if (!rowNodes) {
          return;
        }
        rowNodes.forEach(function(rowNode) {
          var rowCtrl = new RowCtrl(rowNode, _this.beans, false, false, _this.printLayout);
          rowComps.push(rowCtrl);
        });
      };
      RowRenderer2.prototype.onPinnedRowDataChanged = function() {
        var params = {
          recycleRows: true
        };
        this.redrawAfterModelUpdate(params);
      };
      RowRenderer2.prototype.redrawRow = function(rowNode, suppressEvent) {
        var _this = this;
        if (suppressEvent === void 0) {
          suppressEvent = false;
        }
        if (rowNode.sticky) {
          this.stickyRowFeature.refreshStickyNode(rowNode);
        } else {
          var destroyAndRecreateCtrl = function(dataStruct) {
            var ctrl = dataStruct[rowNode.rowIndex];
            if (!ctrl) {
              return;
            }
            if (ctrl.getRowNode() !== rowNode) {
              return;
            }
            ctrl.destroyFirstPass();
            ctrl.destroySecondPass();
            dataStruct[rowNode.rowIndex] = _this.createRowCon(rowNode, false, false);
          };
          switch (rowNode.rowPinned) {
            case "top":
              destroyAndRecreateCtrl(this.topRowCtrls);
            case "bottom":
              destroyAndRecreateCtrl(this.bottomRowCtrls);
            default:
              destroyAndRecreateCtrl(this.rowCtrlsByRowIndex);
              this.updateAllRowCtrls();
          }
        }
        if (!suppressEvent) {
          this.dispatchDisplayedRowsChanged(false);
        }
      };
      RowRenderer2.prototype.redrawRows = function(rowNodes) {
        var _this = this;
        var partialRefresh = rowNodes != null;
        if (partialRefresh) {
          rowNodes === null || rowNodes === void 0 ? void 0 : rowNodes.forEach(function(node) {
            return _this.redrawRow(node, true);
          });
          this.dispatchDisplayedRowsChanged(false);
          return;
        }
        this.redrawAfterModelUpdate();
      };
      RowRenderer2.prototype.getCellToRestoreFocusToAfterRefresh = function(params) {
        var focusedCell = (params === null || params === void 0 ? void 0 : params.suppressKeepFocus) ? null : this.focusService.getFocusCellToUseAfterRefresh();
        if (focusedCell == null) {
          return null;
        }
        var eDocument = this.gridOptionsService.getDocument();
        var activeElement = eDocument.activeElement;
        var cellDomData = this.gridOptionsService.getDomData(activeElement, CellCtrl.DOM_DATA_KEY_CELL_CTRL);
        var rowDomData = this.gridOptionsService.getDomData(activeElement, RowCtrl.DOM_DATA_KEY_ROW_CTRL);
        var gridElementFocused = cellDomData || rowDomData;
        return gridElementFocused ? focusedCell : null;
      };
      RowRenderer2.prototype.redrawAfterModelUpdate = function(params) {
        if (params === void 0) {
          params = {};
        }
        this.getLockOnRefresh();
        var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
        this.updateContainerHeights();
        this.scrollToTopIfNewData(params);
        var recycleRows = !params.domLayoutChanged && !!params.recycleRows;
        var animate = params.animate && this.gridOptionsService.isAnimateRows();
        var rowsToRecycle = recycleRows ? this.getRowsToRecycle() : null;
        if (!recycleRows) {
          this.removeAllRowComps();
        }
        this.workOutFirstAndLastRowsToRender();
        if (this.stickyRowFeature) {
          this.stickyRowFeature.checkStickyRows();
        }
        this.recycleRows(rowsToRecycle, animate);
        this.gridBodyCtrl.updateRowCount();
        if (!params.onlyBody) {
          this.refreshFloatingRowComps();
        }
        this.dispatchDisplayedRowsChanged();
        if (focusedCell != null) {
          this.restoreFocusedCell(focusedCell);
        }
        this.releaseLockOnRefresh();
      };
      RowRenderer2.prototype.scrollToTopIfNewData = function(params) {
        var scrollToTop = params.newData || params.newPage;
        var suppressScrollToTop = this.gridOptionsService.is("suppressScrollOnNewData");
        if (scrollToTop && !suppressScrollToTop) {
          this.gridBodyCtrl.getScrollFeature().scrollToTop();
        }
      };
      RowRenderer2.prototype.updateContainerHeights = function() {
        if (this.printLayout) {
          this.rowContainerHeightService.setModelHeight(null);
          return;
        }
        var containerHeight = this.paginationProxy.getCurrentPageHeight();
        if (containerHeight === 0) {
          containerHeight = 1;
        }
        this.rowContainerHeightService.setModelHeight(containerHeight);
      };
      RowRenderer2.prototype.getLockOnRefresh = function() {
        if (this.refreshInProgress) {
          throw new Error("AG Grid: cannot get grid to draw rows when it is in the middle of drawing rows. Your code probably called a grid API method while the grid was in the render stage. To overcome this, put the API call into a timeout, e.g. instead of api.redrawRows(), call setTimeout(function() { api.redrawRows(); }, 0). To see what part of your code that caused the refresh check this stacktrace.");
        }
        this.refreshInProgress = true;
      };
      RowRenderer2.prototype.releaseLockOnRefresh = function() {
        this.refreshInProgress = false;
      };
      RowRenderer2.prototype.isRefreshInProgress = function() {
        return this.refreshInProgress;
      };
      RowRenderer2.prototype.restoreFocusedCell = function(cellPosition) {
        if (cellPosition) {
          this.focusService.setRestoreFocusedCell(cellPosition);
          this.onCellFocusChanged({
            rowIndex: cellPosition.rowIndex,
            column: cellPosition.column,
            rowPinned: cellPosition.rowPinned,
            forceBrowserFocus: true,
            preventScrollOnBrowserFocus: true,
            api: this.beans.gridApi,
            columnApi: this.beans.columnApi,
            context: this.beans.gridOptionsService.context,
            type: "mock"
          });
        }
      };
      RowRenderer2.prototype.stopEditing = function(cancel) {
        if (cancel === void 0) {
          cancel = false;
        }
        this.getAllRowCtrls().forEach(function(rowCtrl) {
          rowCtrl.stopEditing(cancel);
        });
      };
      RowRenderer2.prototype.getAllCellCtrls = function() {
        var res = [];
        var rowCtrls = this.getAllRowCtrls();
        var rowCtrlsLength = rowCtrls.length;
        for (var i = 0; i < rowCtrlsLength; i++) {
          var cellCtrls = rowCtrls[i].getAllCellCtrls();
          var cellCtrlsLength = cellCtrls.length;
          for (var j = 0; j < cellCtrlsLength; j++) {
            res.push(cellCtrls[j]);
          }
        }
        return res;
      };
      RowRenderer2.prototype.getAllRowCtrls = function() {
        var e_1, _a;
        var stickyRowCtrls = this.stickyRowFeature && this.stickyRowFeature.getStickyRowCtrls() || [];
        var res = __spreadArray$b(__spreadArray$b(__spreadArray$b([], __read$d(this.topRowCtrls)), __read$d(this.bottomRowCtrls)), __read$d(stickyRowCtrls));
        try {
          for (var _b = __values$1(Object.keys(this.rowCtrlsByRowIndex)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            res.push(this.rowCtrlsByRowIndex[key]);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return res;
      };
      RowRenderer2.prototype.addRenderedRowListener = function(eventName, rowIndex, callback) {
        var rowComp = this.rowCtrlsByRowIndex[rowIndex];
        if (rowComp) {
          rowComp.addEventListener(eventName, callback);
        }
      };
      RowRenderer2.prototype.flashCells = function(params) {
        if (params === void 0) {
          params = {};
        }
        var flashDelay = params.flashDelay, fadeDelay = params.fadeDelay;
        this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
          return cellCtrl.flashCell({ flashDelay, fadeDelay });
        });
      };
      RowRenderer2.prototype.refreshCells = function(params) {
        var _this = this;
        if (params === void 0) {
          params = {};
        }
        var refreshCellParams = {
          forceRefresh: params.force,
          newData: false,
          suppressFlash: params.suppressFlash
        };
        this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
          if (cellCtrl.refreshShouldDestroy()) {
            var rowCtrl = cellCtrl.getRowCtrl();
            if (rowCtrl) {
              rowCtrl.refreshCell(cellCtrl);
            }
          } else {
            cellCtrl.refreshCell(refreshCellParams);
          }
        });
        if (params.rowNodes) {
          this.getRowCtrls(params.rowNodes).forEach(function(rowCtrl) {
            if (!rowCtrl.isFullWidth()) {
              return;
            }
            var refreshed = rowCtrl.refreshFullWidth();
            if (!refreshed) {
              _this.redrawRow(rowCtrl.getRowNode(), true);
            }
          });
          this.dispatchDisplayedRowsChanged(false);
        }
      };
      RowRenderer2.prototype.getCellRendererInstances = function(params) {
        var _this = this;
        var _a;
        var cellRenderers = this.getCellCtrls(params.rowNodes, params.columns).map(function(cellCtrl) {
          return cellCtrl.getCellRenderer();
        }).filter(function(renderer) {
          return renderer != null;
        });
        if ((_a = params.columns) === null || _a === void 0 ? void 0 : _a.length) {
          return cellRenderers;
        }
        var fullWidthRenderers = [];
        var rowIdMap = this.mapRowNodes(params.rowNodes);
        this.getAllRowCtrls().forEach(function(rowCtrl) {
          if (rowIdMap && !_this.isRowInMap(rowCtrl.getRowNode(), rowIdMap)) {
            return;
          }
          if (!rowCtrl.isFullWidth()) {
            return;
          }
          var fullWidthRenderer = rowCtrl.getFullWidthCellRenderer();
          if (fullWidthRenderer) {
            fullWidthRenderers.push(fullWidthRenderer);
          }
        });
        return __spreadArray$b(__spreadArray$b([], __read$d(fullWidthRenderers)), __read$d(cellRenderers));
      };
      RowRenderer2.prototype.getCellEditorInstances = function(params) {
        var res = [];
        this.getCellCtrls(params.rowNodes, params.columns).forEach(function(cellCtrl) {
          var cellEditor = cellCtrl.getCellEditor();
          if (cellEditor) {
            res.push(cellEditor);
          }
        });
        return res;
      };
      RowRenderer2.prototype.getEditingCells = function() {
        var res = [];
        this.getAllCellCtrls().forEach(function(cellCtrl) {
          if (cellCtrl.isEditing()) {
            var cellPosition = cellCtrl.getCellPosition();
            res.push(cellPosition);
          }
        });
        return res;
      };
      RowRenderer2.prototype.mapRowNodes = function(rowNodes) {
        if (!rowNodes) {
          return;
        }
        var res = {
          top: {},
          bottom: {},
          normal: {}
        };
        rowNodes.forEach(function(rowNode) {
          var id = rowNode.id;
          if (rowNode.rowPinned === "top") {
            res.top[id] = rowNode;
          } else if (rowNode.rowPinned === "bottom") {
            res.bottom[id] = rowNode;
          } else {
            res.normal[id] = rowNode;
          }
        });
        return res;
      };
      RowRenderer2.prototype.isRowInMap = function(rowNode, rowIdsMap) {
        var id = rowNode.id;
        var floating = rowNode.rowPinned;
        if (floating === "bottom") {
          return rowIdsMap.bottom[id] != null;
        }
        if (floating === "top") {
          return rowIdsMap.top[id] != null;
        }
        return rowIdsMap.normal[id] != null;
      };
      RowRenderer2.prototype.getRowCtrls = function(rowNodes) {
        var _this = this;
        var rowIdsMap = this.mapRowNodes(rowNodes);
        var allRowCtrls = this.getAllRowCtrls();
        if (!rowNodes || !rowIdsMap) {
          return allRowCtrls;
        }
        return allRowCtrls.filter(function(rowCtrl) {
          var rowNode = rowCtrl.getRowNode();
          return _this.isRowInMap(rowNode, rowIdsMap);
        });
      };
      RowRenderer2.prototype.getCellCtrls = function(rowNodes, columns) {
        var _this = this;
        var colIdsMap;
        if (exists(columns)) {
          colIdsMap = {};
          columns.forEach(function(colKey) {
            var column = _this.columnModel.getGridColumn(colKey);
            if (exists(column)) {
              colIdsMap[column.getId()] = true;
            }
          });
        }
        var res = [];
        this.getRowCtrls(rowNodes).forEach(function(rowCtrl) {
          rowCtrl.getAllCellCtrls().forEach(function(cellCtrl) {
            var colId = cellCtrl.getColumn().getId();
            var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
            if (excludeColFromRefresh) {
              return;
            }
            res.push(cellCtrl);
          });
        });
        return res;
      };
      RowRenderer2.prototype.destroy = function() {
        this.removeAllRowComps();
        _super.prototype.destroy.call(this);
      };
      RowRenderer2.prototype.removeAllRowComps = function() {
        var rowIndexesToRemove = Object.keys(this.rowCtrlsByRowIndex);
        this.removeRowCtrls(rowIndexesToRemove);
      };
      RowRenderer2.prototype.getRowsToRecycle = function() {
        var stubNodeIndexes = [];
        iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
          var stubNode = rowComp.getRowNode().id == null;
          if (stubNode) {
            stubNodeIndexes.push(index);
          }
        });
        this.removeRowCtrls(stubNodeIndexes);
        var ctrlsByIdMap = {};
        iterateObject(this.rowCtrlsByRowIndex, function(index, rowComp) {
          var rowNode = rowComp.getRowNode();
          ctrlsByIdMap[rowNode.id] = rowComp;
        });
        this.rowCtrlsByRowIndex = {};
        return ctrlsByIdMap;
      };
      RowRenderer2.prototype.removeRowCtrls = function(rowsToRemove) {
        var _this = this;
        rowsToRemove.forEach(function(indexToRemove) {
          var rowCtrl = _this.rowCtrlsByRowIndex[indexToRemove];
          if (rowCtrl) {
            rowCtrl.destroyFirstPass();
            rowCtrl.destroySecondPass();
          }
          delete _this.rowCtrlsByRowIndex[indexToRemove];
        });
      };
      RowRenderer2.prototype.onBodyScroll = function(e) {
        if (e.direction !== "vertical") {
          return;
        }
        this.redraw({ afterScroll: true });
      };
      RowRenderer2.prototype.redraw = function(params) {
        if (params === void 0) {
          params = {};
        }
        var afterScroll = params.afterScroll;
        var cellFocused;
        if (this.stickyRowFeature && browserSupportsPreventScroll()) {
          cellFocused = this.getCellToRestoreFocusToAfterRefresh() || void 0;
        }
        var oldFirstRow = this.firstRenderedRow;
        var oldLastRow = this.lastRenderedRow;
        this.workOutFirstAndLastRowsToRender();
        var hasStickyRowChanges = false;
        if (this.stickyRowFeature) {
          hasStickyRowChanges = this.stickyRowFeature.checkStickyRows();
        }
        var rangeChanged = this.firstRenderedRow !== oldFirstRow || this.lastRenderedRow !== oldLastRow;
        if (afterScroll && !hasStickyRowChanges && !rangeChanged) {
          return;
        }
        this.getLockOnRefresh();
        this.recycleRows(null, false, afterScroll);
        this.releaseLockOnRefresh();
        this.dispatchDisplayedRowsChanged(afterScroll);
        if (cellFocused != null) {
          var newFocusedCell = this.getCellToRestoreFocusToAfterRefresh();
          if (cellFocused != null && newFocusedCell == null) {
            this.animationFrameService.flushAllFrames();
            this.restoreFocusedCell(cellFocused);
          }
        }
      };
      RowRenderer2.prototype.removeRowCompsNotToDraw = function(indexesToDraw) {
        var indexesToDrawMap = {};
        indexesToDraw.forEach(function(index) {
          return indexesToDrawMap[index] = true;
        });
        var existingIndexes = Object.keys(this.rowCtrlsByRowIndex);
        var indexesNotToDraw = existingIndexes.filter(function(index) {
          return !indexesToDrawMap[index];
        });
        this.removeRowCtrls(indexesNotToDraw);
      };
      RowRenderer2.prototype.calculateIndexesToDraw = function(rowsToRecycle) {
        var _this = this;
        var indexesToDraw = createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
        var checkRowToDraw = function(indexStr, rowComp) {
          var index = rowComp.getRowNode().rowIndex;
          if (index == null) {
            return;
          }
          if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
            if (_this.doNotUnVirtualiseRow(rowComp)) {
              indexesToDraw.push(index);
            }
          }
        };
        iterateObject(this.rowCtrlsByRowIndex, checkRowToDraw);
        iterateObject(rowsToRecycle, checkRowToDraw);
        indexesToDraw.sort(function(a, b) {
          return a - b;
        });
        var ret = [];
        for (var i = 0; i < indexesToDraw.length; i++) {
          var currRow = indexesToDraw[i];
          var rowNode = this.paginationProxy.getRow(currRow);
          if (rowNode && !rowNode.sticky) {
            ret.push(currRow);
          }
        }
        return ret;
      };
      RowRenderer2.prototype.recycleRows = function(rowsToRecycle, animate, afterScroll) {
        var _this = this;
        if (animate === void 0) {
          animate = false;
        }
        if (afterScroll === void 0) {
          afterScroll = false;
        }
        var indexesToDraw = this.calculateIndexesToDraw(rowsToRecycle);
        this.removeRowCompsNotToDraw(indexesToDraw);
        if (this.printLayout) {
          animate = false;
        }
        indexesToDraw.forEach(function(rowIndex) {
          var rowCtrl = _this.createOrUpdateRowCtrl(rowIndex, rowsToRecycle, animate, afterScroll);
          if (exists(rowCtrl))
            ;
        });
        if (rowsToRecycle) {
          var useAnimationFrame = afterScroll && !this.gridOptionsService.is("suppressAnimationFrame") && !this.printLayout;
          if (useAnimationFrame) {
            this.beans.animationFrameService.addDestroyTask(function() {
              _this.destroyRowCtrls(rowsToRecycle, animate);
              _this.updateAllRowCtrls();
              _this.dispatchDisplayedRowsChanged();
            });
          } else {
            this.destroyRowCtrls(rowsToRecycle, animate);
          }
        }
        this.updateAllRowCtrls();
      };
      RowRenderer2.prototype.dispatchDisplayedRowsChanged = function(afterScroll) {
        if (afterScroll === void 0) {
          afterScroll = false;
        }
        var event = { type: Events.EVENT_DISPLAYED_ROWS_CHANGED, afterScroll };
        this.eventService.dispatchEvent(event);
      };
      RowRenderer2.prototype.onDisplayedColumnsChanged = function() {
        var pinningLeft = this.columnModel.isPinningLeft();
        var pinningRight = this.columnModel.isPinningRight();
        var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
        if (atLeastOneChanged) {
          this.pinningLeft = pinningLeft;
          this.pinningRight = pinningRight;
          if (this.embedFullWidthRows) {
            this.redrawFullWidthEmbeddedRows();
          }
        }
      };
      RowRenderer2.prototype.redrawFullWidthEmbeddedRows = function() {
        var rowsToRemove = [];
        this.getFullWidthRowCtrls().forEach(function(fullWidthCtrl) {
          var rowIndex = fullWidthCtrl.getRowNode().rowIndex;
          rowsToRemove.push(rowIndex.toString());
        });
        this.refreshFloatingRowComps();
        this.removeRowCtrls(rowsToRemove);
        this.redraw({ afterScroll: true });
      };
      RowRenderer2.prototype.getFullWidthRowCtrls = function(rowNodes) {
        var _this = this;
        var rowNodesMap = this.mapRowNodes(rowNodes);
        return this.getAllRowCtrls().filter(function(rowCtrl) {
          if (!rowCtrl.isFullWidth()) {
            return false;
          }
          var rowNode = rowCtrl.getRowNode();
          if (rowNodesMap != null && !_this.isRowInMap(rowNode, rowNodesMap)) {
            return false;
          }
          return true;
        });
      };
      RowRenderer2.prototype.createOrUpdateRowCtrl = function(rowIndex, rowsToRecycle, animate, afterScroll) {
        var rowNode;
        var rowCtrl = this.rowCtrlsByRowIndex[rowIndex];
        if (!rowCtrl) {
          rowNode = this.paginationProxy.getRow(rowIndex);
          if (exists(rowNode) && exists(rowsToRecycle) && rowsToRecycle[rowNode.id] && rowNode.alreadyRendered) {
            rowCtrl = rowsToRecycle[rowNode.id];
            rowsToRecycle[rowNode.id] = null;
          }
        }
        var creatingNewRowCtrl = !rowCtrl;
        if (creatingNewRowCtrl) {
          if (!rowNode) {
            rowNode = this.paginationProxy.getRow(rowIndex);
          }
          if (exists(rowNode)) {
            rowCtrl = this.createRowCon(rowNode, animate, afterScroll);
          } else {
            return;
          }
        }
        if (rowNode) {
          rowNode.alreadyRendered = true;
        }
        this.rowCtrlsByRowIndex[rowIndex] = rowCtrl;
        return rowCtrl;
      };
      RowRenderer2.prototype.destroyRowCtrls = function(rowCtrlsMap, animate) {
        var _this = this;
        var executeInAWhileFuncs = [];
        iterateObject(rowCtrlsMap, function(nodeId, rowCtrl) {
          if (!rowCtrl) {
            return;
          }
          if (_this.cachedRowCtrls && rowCtrl.isCacheable()) {
            _this.cachedRowCtrls.addRow(rowCtrl);
            return;
          }
          rowCtrl.destroyFirstPass();
          if (animate) {
            _this.zombieRowCtrls[rowCtrl.getInstanceId()] = rowCtrl;
            executeInAWhileFuncs.push(function() {
              rowCtrl.destroySecondPass();
              delete _this.zombieRowCtrls[rowCtrl.getInstanceId()];
            });
          } else {
            rowCtrl.destroySecondPass();
          }
        });
        if (animate) {
          executeInAWhileFuncs.push(function() {
            _this.updateAllRowCtrls();
            _this.dispatchDisplayedRowsChanged();
          });
          executeInAWhile(executeInAWhileFuncs);
        }
      };
      RowRenderer2.prototype.getRowBuffer = function() {
        var rowBuffer = this.gridOptionsService.getNum("rowBuffer");
        if (typeof rowBuffer === "number") {
          if (rowBuffer < 0) {
            doOnce(function() {
              return console.warn("AG Grid: rowBuffer should not be negative");
            }, "warn rowBuffer negative");
            rowBuffer = 0;
            this.gridOptionsService.set("rowBuffer", 0);
          }
        } else {
          rowBuffer = 10;
        }
        return rowBuffer;
      };
      RowRenderer2.prototype.getRowBufferInPixels = function() {
        var rowsToBuffer = this.getRowBuffer();
        var defaultRowHeight = this.gridOptionsService.getRowHeightAsNumber();
        return rowsToBuffer * defaultRowHeight;
      };
      RowRenderer2.prototype.workOutFirstAndLastRowsToRender = function() {
        this.rowContainerHeightService.updateOffset();
        var newFirst;
        var newLast;
        if (!this.paginationProxy.isRowsToRender()) {
          newFirst = 0;
          newLast = -1;
        } else if (this.printLayout) {
          this.environment.refreshRowHeightVariable();
          newFirst = this.paginationProxy.getPageFirstRow();
          newLast = this.paginationProxy.getPageLastRow();
        } else {
          var bufferPixels = this.getRowBufferInPixels();
          var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
          var suppressRowVirtualisation = this.gridOptionsService.is("suppressRowVirtualisation");
          var rowHeightsChanged = false;
          var firstPixel = void 0;
          var lastPixel = void 0;
          do {
            var paginationOffset = this.paginationProxy.getPixelOffset();
            var _a = this.paginationProxy.getCurrentPagePixelRange(), pageFirstPixel = _a.pageFirstPixel, pageLastPixel = _a.pageLastPixel;
            var divStretchOffset = this.rowContainerHeightService.getDivStretchOffset();
            var bodyVRange = gridBodyCtrl.getScrollFeature().getVScrollPosition();
            var bodyTopPixel = bodyVRange.top;
            var bodyBottomPixel = bodyVRange.bottom;
            if (suppressRowVirtualisation) {
              firstPixel = pageFirstPixel + divStretchOffset;
              lastPixel = pageLastPixel + divStretchOffset;
            } else {
              firstPixel = Math.max(bodyTopPixel + paginationOffset - bufferPixels, pageFirstPixel) + divStretchOffset;
              lastPixel = Math.min(bodyBottomPixel + paginationOffset + bufferPixels, pageLastPixel) + divStretchOffset;
            }
            this.firstVisibleVPixel = Math.max(bodyTopPixel + paginationOffset, pageFirstPixel) + divStretchOffset;
            rowHeightsChanged = this.ensureAllRowsInRangeHaveHeightsCalculated(firstPixel, lastPixel);
          } while (rowHeightsChanged);
          var firstRowIndex = this.paginationProxy.getRowIndexAtPixel(firstPixel);
          var lastRowIndex = this.paginationProxy.getRowIndexAtPixel(lastPixel);
          var pageFirstRow = this.paginationProxy.getPageFirstRow();
          var pageLastRow = this.paginationProxy.getPageLastRow();
          if (firstRowIndex < pageFirstRow) {
            firstRowIndex = pageFirstRow;
          }
          if (lastRowIndex > pageLastRow) {
            lastRowIndex = pageLastRow;
          }
          newFirst = firstRowIndex;
          newLast = lastRowIndex;
        }
        var rowLayoutNormal = this.gridOptionsService.isDomLayout("normal");
        var suppressRowCountRestriction = this.gridOptionsService.is("suppressMaxRenderedRowRestriction");
        var rowBufferMaxSize = Math.max(this.getRowBuffer(), 500);
        if (rowLayoutNormal && !suppressRowCountRestriction) {
          if (newLast - newFirst > rowBufferMaxSize) {
            newLast = newFirst + rowBufferMaxSize;
          }
        }
        var firstDiffers = newFirst !== this.firstRenderedRow;
        var lastDiffers = newLast !== this.lastRenderedRow;
        if (firstDiffers || lastDiffers) {
          this.firstRenderedRow = newFirst;
          this.lastRenderedRow = newLast;
          var event_1 = {
            type: Events.EVENT_VIEWPORT_CHANGED,
            firstRow: newFirst,
            lastRow: newLast
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      RowRenderer2.prototype.dispatchFirstDataRenderedEvent = function() {
        var _this = this;
        if (this.dataFirstRenderedFired) {
          return;
        }
        this.dataFirstRenderedFired = true;
        var event = {
          type: Events.EVENT_FIRST_DATA_RENDERED,
          firstRow: this.firstRenderedRow,
          lastRow: this.lastRenderedRow
        };
        window.requestAnimationFrame(function() {
          _this.beans.eventService.dispatchEvent(event);
        });
      };
      RowRenderer2.prototype.ensureAllRowsInRangeHaveHeightsCalculated = function(topPixel, bottomPixel) {
        var res = this.paginationProxy.ensureRowHeightsValid(topPixel, bottomPixel, -1, -1);
        if (res) {
          this.updateContainerHeights();
        }
        return res;
      };
      RowRenderer2.prototype.getFirstVisibleVerticalPixel = function() {
        return this.firstVisibleVPixel;
      };
      RowRenderer2.prototype.getFirstVirtualRenderedRow = function() {
        return this.firstRenderedRow;
      };
      RowRenderer2.prototype.getLastVirtualRenderedRow = function() {
        return this.lastRenderedRow;
      };
      RowRenderer2.prototype.doNotUnVirtualiseRow = function(rowComp) {
        var REMOVE_ROW = false;
        var KEEP_ROW = true;
        var rowNode = rowComp.getRowNode();
        var rowHasFocus = this.focusService.isRowNodeFocused(rowNode);
        var rowIsEditing = rowComp.isEditing();
        var rowIsDetail = rowNode.detail;
        var mightWantToKeepRow = rowHasFocus || rowIsEditing || rowIsDetail;
        if (!mightWantToKeepRow) {
          return REMOVE_ROW;
        }
        var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
      };
      RowRenderer2.prototype.createRowCon = function(rowNode, animate, afterScroll) {
        var rowCtrlFromCache = this.cachedRowCtrls ? this.cachedRowCtrls.getRow(rowNode) : null;
        if (rowCtrlFromCache) {
          return rowCtrlFromCache;
        }
        var suppressAnimationFrame = this.gridOptionsService.is("suppressAnimationFrame");
        var useAnimationFrameForCreate = afterScroll && !suppressAnimationFrame && !this.printLayout;
        var res = new RowCtrl(rowNode, this.beans, animate, useAnimationFrameForCreate, this.printLayout);
        return res;
      };
      RowRenderer2.prototype.getRenderedNodes = function() {
        var renderedRows = this.rowCtrlsByRowIndex;
        return Object.keys(renderedRows).map(function(key) {
          return renderedRows[key].getRowNode();
        });
      };
      RowRenderer2.prototype.getRowByPosition = function(rowPosition) {
        var rowCtrl;
        var rowIndex = rowPosition.rowIndex;
        switch (rowPosition.rowPinned) {
          case "top":
            rowCtrl = this.topRowCtrls[rowIndex];
            break;
          case "bottom":
            rowCtrl = this.bottomRowCtrls[rowIndex];
            break;
          default:
            rowCtrl = this.rowCtrlsByRowIndex[rowIndex];
            if (!rowCtrl) {
              rowCtrl = this.getStickyTopRowCtrls().find(function(ctrl) {
                return ctrl.getRowNode().rowIndex === rowIndex;
              }) || null;
            }
            break;
        }
        return rowCtrl;
      };
      RowRenderer2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case "top":
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case "bottom":
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      RowRenderer2.prototype.isRangeInRenderedViewport = function(startIndex, endIndex) {
        var parentClosed = startIndex == null || endIndex == null;
        if (parentClosed) {
          return false;
        }
        var blockAfterViewport = startIndex > this.lastRenderedRow;
        var blockBeforeViewport = endIndex < this.firstRenderedRow;
        var blockInsideViewport = !blockBeforeViewport && !blockAfterViewport;
        return blockInsideViewport;
      };
      __decorate$17([
        Autowired("animationFrameService")
      ], RowRenderer2.prototype, "animationFrameService", void 0);
      __decorate$17([
        Autowired("paginationProxy")
      ], RowRenderer2.prototype, "paginationProxy", void 0);
      __decorate$17([
        Autowired("columnModel")
      ], RowRenderer2.prototype, "columnModel", void 0);
      __decorate$17([
        Autowired("pinnedRowModel")
      ], RowRenderer2.prototype, "pinnedRowModel", void 0);
      __decorate$17([
        Autowired("rowModel")
      ], RowRenderer2.prototype, "rowModel", void 0);
      __decorate$17([
        Autowired("focusService")
      ], RowRenderer2.prototype, "focusService", void 0);
      __decorate$17([
        Autowired("beans")
      ], RowRenderer2.prototype, "beans", void 0);
      __decorate$17([
        Autowired("rowContainerHeightService")
      ], RowRenderer2.prototype, "rowContainerHeightService", void 0);
      __decorate$17([
        Autowired("ctrlsService")
      ], RowRenderer2.prototype, "ctrlsService", void 0);
      __decorate$17([
        PostConstruct
      ], RowRenderer2.prototype, "postConstruct", null);
      RowRenderer2 = __decorate$17([
        Bean("rowRenderer")
      ], RowRenderer2);
      return RowRenderer2;
    }(BeanStub);
    RowCtrlCache = /** @class */
    function() {
      function RowCtrlCache2(maxCount) {
        this.entriesMap = {};
        this.entriesList = [];
        this.maxCount = maxCount;
      }
      RowCtrlCache2.prototype.addRow = function(rowCtrl) {
        this.entriesMap[rowCtrl.getRowNode().id] = rowCtrl;
        this.entriesList.push(rowCtrl);
        rowCtrl.setCached(true);
        if (this.entriesList.length > this.maxCount) {
          var rowCtrlToDestroy = this.entriesList[0];
          rowCtrlToDestroy.destroyFirstPass();
          rowCtrlToDestroy.destroySecondPass();
          this.removeFromCache(rowCtrlToDestroy);
        }
      };
      RowCtrlCache2.prototype.getRow = function(rowNode) {
        if (rowNode == null || rowNode.id == null) {
          return null;
        }
        var res = this.entriesMap[rowNode.id];
        if (!res) {
          return null;
        }
        this.removeFromCache(res);
        res.setCached(false);
        var rowNodeMismatch = res.getRowNode() != rowNode;
        return rowNodeMismatch ? null : res;
      };
      RowCtrlCache2.prototype.removeFromCache = function(rowCtrl) {
        var rowNodeId = rowCtrl.getRowNode().id;
        delete this.entriesMap[rowNodeId];
        removeFromArray(this.entriesList, rowCtrl);
      };
      RowCtrlCache2.prototype.getEntries = function() {
        return this.entriesList;
      };
      return RowCtrlCache2;
    }();
    __extends$1b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$16 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ValueFormatterService = /** @class */
    function(_super) {
      __extends$1b(ValueFormatterService2, _super);
      function ValueFormatterService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ValueFormatterService2.prototype.formatValue = function(column, node, value, suppliedFormatter, useFormatterFromColumn) {
        if (useFormatterFromColumn === void 0) {
          useFormatterFromColumn = true;
        }
        var result = null;
        var formatter;
        var colDef = column.getColDef();
        if (suppliedFormatter) {
          formatter = suppliedFormatter;
        } else if (useFormatterFromColumn) {
          formatter = colDef.valueFormatter;
        }
        if (formatter) {
          var params = {
            value,
            node,
            data: node ? node.data : null,
            colDef,
            column,
            api: this.gridOptionsService.api,
            columnApi: this.gridOptionsService.columnApi,
            context: this.gridOptionsService.context
          };
          if (typeof formatter === "function") {
            result = formatter(params);
          } else {
            result = this.expressionService.evaluate(formatter, params);
          }
        } else if (colDef.refData) {
          return colDef.refData[value] || "";
        }
        if (result == null && Array.isArray(value)) {
          result = value.join(", ");
        }
        return result;
      };
      __decorate$16([
        Autowired("expressionService")
      ], ValueFormatterService2.prototype, "expressionService", void 0);
      ValueFormatterService2 = __decorate$16([
        Bean("valueFormatterService")
      ], ValueFormatterService2);
      return ValueFormatterService2;
    }(BeanStub);
    __extends$1a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$15 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PinnedRowModel = /** @class */
    function(_super) {
      __extends$1a(PinnedRowModel2, _super);
      function PinnedRowModel2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PinnedRowModel2.prototype.init = function() {
        this.setPinnedTopRowData(this.gridOptionsService.get("pinnedTopRowData"));
        this.setPinnedBottomRowData(this.gridOptionsService.get("pinnedBottomRowData"));
      };
      PinnedRowModel2.prototype.isEmpty = function(floating) {
        var rows = floating === "top" ? this.pinnedTopRows : this.pinnedBottomRows;
        return missingOrEmpty(rows);
      };
      PinnedRowModel2.prototype.isRowsToRender = function(floating) {
        return !this.isEmpty(floating);
      };
      PinnedRowModel2.prototype.getRowAtPixel = function(pixel, floating) {
        var rows = floating === "top" ? this.pinnedTopRows : this.pinnedBottomRows;
        if (missingOrEmpty(rows)) {
          return 0;
        }
        for (var i = 0; i < rows.length; i++) {
          var rowNode = rows[i];
          var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
          if (rowTopPixel >= pixel) {
            return i;
          }
        }
        return rows.length - 1;
      };
      PinnedRowModel2.prototype.setPinnedTopRowData = function(rowData) {
        this.pinnedTopRows = this.createNodesFromData(rowData, true);
        var event = {
          type: Events.EVENT_PINNED_ROW_DATA_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      PinnedRowModel2.prototype.setPinnedBottomRowData = function(rowData) {
        this.pinnedBottomRows = this.createNodesFromData(rowData, false);
        var event = {
          type: Events.EVENT_PINNED_ROW_DATA_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      PinnedRowModel2.prototype.createNodesFromData = function(allData, isTop) {
        var _this = this;
        var rowNodes = [];
        if (allData) {
          var nextRowTop_1 = 0;
          allData.forEach(function(dataItem, index) {
            var rowNode = new RowNode(_this.beans);
            rowNode.data = dataItem;
            var idPrefix = isTop ? RowNode.ID_PREFIX_TOP_PINNED : RowNode.ID_PREFIX_BOTTOM_PINNED;
            rowNode.id = idPrefix + index;
            rowNode.rowPinned = isTop ? "top" : "bottom";
            rowNode.setRowTop(nextRowTop_1);
            rowNode.setRowHeight(_this.gridOptionsService.getRowHeightForNode(rowNode).height);
            rowNode.setRowIndex(index);
            nextRowTop_1 += rowNode.rowHeight;
            rowNodes.push(rowNode);
          });
        }
        return rowNodes;
      };
      PinnedRowModel2.prototype.getPinnedTopRowData = function() {
        return this.pinnedTopRows;
      };
      PinnedRowModel2.prototype.getPinnedBottomRowData = function() {
        return this.pinnedBottomRows;
      };
      PinnedRowModel2.prototype.getPinnedTopTotalHeight = function() {
        return this.getTotalHeight(this.pinnedTopRows);
      };
      PinnedRowModel2.prototype.getPinnedTopRowCount = function() {
        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
      };
      PinnedRowModel2.prototype.getPinnedBottomRowCount = function() {
        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
      };
      PinnedRowModel2.prototype.getPinnedTopRow = function(index) {
        return this.pinnedTopRows[index];
      };
      PinnedRowModel2.prototype.getPinnedBottomRow = function(index) {
        return this.pinnedBottomRows[index];
      };
      PinnedRowModel2.prototype.forEachPinnedTopRow = function(callback) {
        if (missingOrEmpty(this.pinnedTopRows)) {
          return;
        }
        this.pinnedTopRows.forEach(callback);
      };
      PinnedRowModel2.prototype.forEachPinnedBottomRow = function(callback) {
        if (missingOrEmpty(this.pinnedBottomRows)) {
          return;
        }
        this.pinnedBottomRows.forEach(callback);
      };
      PinnedRowModel2.prototype.getPinnedBottomTotalHeight = function() {
        return this.getTotalHeight(this.pinnedBottomRows);
      };
      PinnedRowModel2.prototype.getTotalHeight = function(rowNodes) {
        if (!rowNodes || rowNodes.length === 0) {
          return 0;
        }
        var lastNode = last(rowNodes);
        return lastNode.rowTop + lastNode.rowHeight;
      };
      __decorate$15([
        Autowired("beans")
      ], PinnedRowModel2.prototype, "beans", void 0);
      __decorate$15([
        PostConstruct
      ], PinnedRowModel2.prototype, "init", null);
      PinnedRowModel2 = __decorate$15([
        Bean("pinnedRowModel")
      ], PinnedRowModel2);
      return PinnedRowModel2;
    }(BeanStub);
    (function(ServerSideTransactionResultStatus2) {
      ServerSideTransactionResultStatus2["Applied"] = "Applied";
      ServerSideTransactionResultStatus2["StoreNotFound"] = "StoreNotFound";
      ServerSideTransactionResultStatus2["StoreLoading"] = "StoreLoading";
      ServerSideTransactionResultStatus2["StoreWaitingToLoad"] = "StoreWaitingToLoad";
      ServerSideTransactionResultStatus2["StoreLoadingFailed"] = "StoreLoadingFailed";
      ServerSideTransactionResultStatus2["StoreWrongType"] = "StoreWrongType";
      ServerSideTransactionResultStatus2["Cancelled"] = "Cancelled";
    })(ServerSideTransactionResultStatus || (ServerSideTransactionResultStatus = {}));
    ChangedPath = /** @class */
    function() {
      function ChangedPath2(keepingColumns, rootNode) {
        this.active = true;
        this.nodeIdsToColumns = {};
        this.mapToItems = {};
        this.keepingColumns = keepingColumns;
        this.pathRoot = {
          rowNode: rootNode,
          children: null
        };
        this.mapToItems[rootNode.id] = this.pathRoot;
      }
      ChangedPath2.prototype.setInactive = function() {
        this.active = false;
      };
      ChangedPath2.prototype.isActive = function() {
        return this.active;
      };
      ChangedPath2.prototype.depthFirstSearchChangedPath = function(pathItem, callback) {
        if (pathItem.children) {
          for (var i = 0; i < pathItem.children.length; i++) {
            this.depthFirstSearchChangedPath(pathItem.children[i], callback);
          }
        }
        callback(pathItem.rowNode);
      };
      ChangedPath2.prototype.depthFirstSearchEverything = function(rowNode, callback, traverseEverything) {
        if (rowNode.childrenAfterGroup) {
          for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
            var childNode = rowNode.childrenAfterGroup[i];
            if (childNode.childrenAfterGroup) {
              this.depthFirstSearchEverything(rowNode.childrenAfterGroup[i], callback, traverseEverything);
            } else if (traverseEverything) {
              callback(childNode);
            }
          }
        }
        callback(rowNode);
      };
      ChangedPath2.prototype.forEachChangedNodeDepthFirst = function(callback, traverseLeafNodes, includeUnchangedNodes) {
        if (traverseLeafNodes === void 0) {
          traverseLeafNodes = false;
        }
        if (includeUnchangedNodes === void 0) {
          includeUnchangedNodes = false;
        }
        if (this.active && !includeUnchangedNodes) {
          this.depthFirstSearchChangedPath(this.pathRoot, callback);
        } else {
          this.depthFirstSearchEverything(this.pathRoot.rowNode, callback, traverseLeafNodes);
        }
      };
      ChangedPath2.prototype.executeFromRootNode = function(callback) {
        callback(this.pathRoot.rowNode);
      };
      ChangedPath2.prototype.createPathItems = function(rowNode) {
        var pointer = rowNode;
        var newEntryCount = 0;
        while (!this.mapToItems[pointer.id]) {
          var newEntry = {
            rowNode: pointer,
            children: null
          };
          this.mapToItems[pointer.id] = newEntry;
          newEntryCount++;
          pointer = pointer.parent;
        }
        return newEntryCount;
      };
      ChangedPath2.prototype.populateColumnsMap = function(rowNode, columns) {
        var _this = this;
        if (!this.keepingColumns || !columns) {
          return;
        }
        var pointer = rowNode;
        while (pointer) {
          if (!this.nodeIdsToColumns[pointer.id]) {
            this.nodeIdsToColumns[pointer.id] = {};
          }
          columns.forEach(function(col) {
            return _this.nodeIdsToColumns[pointer.id][col.getId()] = true;
          });
          pointer = pointer.parent;
        }
      };
      ChangedPath2.prototype.linkPathItems = function(rowNode, newEntryCount) {
        var pointer = rowNode;
        for (var i = 0; i < newEntryCount; i++) {
          var thisItem = this.mapToItems[pointer.id];
          var parentItem = this.mapToItems[pointer.parent.id];
          if (!parentItem.children) {
            parentItem.children = [];
          }
          parentItem.children.push(thisItem);
          pointer = pointer.parent;
        }
      };
      ChangedPath2.prototype.addParentNode = function(rowNode, columns) {
        if (!rowNode || rowNode.isRowPinned()) {
          return;
        }
        var newEntryCount = this.createPathItems(rowNode);
        this.linkPathItems(rowNode, newEntryCount);
        this.populateColumnsMap(rowNode, columns);
      };
      ChangedPath2.prototype.canSkip = function(rowNode) {
        return this.active && !this.mapToItems[rowNode.id];
      };
      ChangedPath2.prototype.getValueColumnsForNode = function(rowNode, valueColumns) {
        if (!this.keepingColumns) {
          return valueColumns;
        }
        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
        var result = valueColumns.filter(function(col) {
          return colsForThisNode[col.getId()];
        });
        return result;
      };
      ChangedPath2.prototype.getNotValueColumnsForNode = function(rowNode, valueColumns) {
        if (!this.keepingColumns) {
          return null;
        }
        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
        var result = valueColumns.filter(function(col) {
          return !colsForThisNode[col.getId()];
        });
        return result;
      };
      return ChangedPath2;
    }();
    __extends$19 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    RowNodeBlock = /** @class */
    function(_super) {
      __extends$19(RowNodeBlock2, _super);
      function RowNodeBlock2(id) {
        var _this = _super.call(this) || this;
        _this.state = RowNodeBlock2.STATE_WAITING_TO_LOAD;
        _this.version = 0;
        _this.id = id;
        return _this;
      }
      RowNodeBlock2.prototype.getId = function() {
        return this.id;
      };
      RowNodeBlock2.prototype.load = function() {
        this.state = RowNodeBlock2.STATE_LOADING;
        this.loadFromDatasource();
      };
      RowNodeBlock2.prototype.getVersion = function() {
        return this.version;
      };
      RowNodeBlock2.prototype.setStateWaitingToLoad = function() {
        this.version++;
        this.state = RowNodeBlock2.STATE_WAITING_TO_LOAD;
      };
      RowNodeBlock2.prototype.getState = function() {
        return this.state;
      };
      RowNodeBlock2.prototype.pageLoadFailed = function(version) {
        var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
        if (requestMostRecentAndLive) {
          this.state = RowNodeBlock2.STATE_FAILED;
          this.processServerFail();
        }
        this.dispatchLoadCompleted(false);
      };
      RowNodeBlock2.prototype.success = function(version, params) {
        this.successCommon(version, params);
      };
      RowNodeBlock2.prototype.pageLoaded = function(version, rows, lastRow) {
        this.successCommon(version, { rowData: rows, rowCount: lastRow });
      };
      RowNodeBlock2.prototype.isRequestMostRecentAndLive = function(version) {
        var thisIsMostRecentRequest = version === this.version;
        var weAreNotDestroyed = this.isAlive();
        return thisIsMostRecentRequest && weAreNotDestroyed;
      };
      RowNodeBlock2.prototype.successCommon = function(version, params) {
        this.dispatchLoadCompleted();
        var requestMostRecentAndLive = this.isRequestMostRecentAndLive(version);
        if (requestMostRecentAndLive) {
          this.state = RowNodeBlock2.STATE_LOADED;
          this.processServerResult(params);
        }
      };
      RowNodeBlock2.prototype.dispatchLoadCompleted = function(success) {
        if (success === void 0) {
          success = true;
        }
        var event = {
          type: RowNodeBlock2.EVENT_LOAD_COMPLETE,
          success,
          block: this
        };
        this.dispatchEvent(event);
      };
      RowNodeBlock2.EVENT_LOAD_COMPLETE = "loadComplete";
      RowNodeBlock2.STATE_WAITING_TO_LOAD = "needsLoading";
      RowNodeBlock2.STATE_LOADING = "loading";
      RowNodeBlock2.STATE_LOADED = "loaded";
      RowNodeBlock2.STATE_FAILED = "failed";
      return RowNodeBlock2;
    }(BeanStub);
    __extends$18 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$14 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$7 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    RowNodeBlockLoader = /** @class */
    function(_super) {
      __extends$18(RowNodeBlockLoader2, _super);
      function RowNodeBlockLoader2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.activeBlockLoadsCount = 0;
        _this.blocks = [];
        _this.active = true;
        return _this;
      }
      RowNodeBlockLoader_1 = RowNodeBlockLoader2;
      RowNodeBlockLoader2.prototype.postConstruct = function() {
        this.maxConcurrentRequests = this.getMaxConcurrentDatasourceRequests();
        var blockLoadDebounceMillis = this.gridOptionsService.getNum("blockLoadDebounceMillis");
        if (blockLoadDebounceMillis && blockLoadDebounceMillis > 0) {
          this.checkBlockToLoadDebounce = _.debounce(this.performCheckBlocksToLoad.bind(this), blockLoadDebounceMillis);
        }
      };
      RowNodeBlockLoader2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("RowNodeBlockLoader");
      };
      RowNodeBlockLoader2.prototype.getMaxConcurrentDatasourceRequests = function() {
        var res = this.gridOptionsService.getNum("maxConcurrentDatasourceRequests");
        if (res == null) {
          return 2;
        }
        if (res <= 0) {
          return;
        }
        return res;
      };
      RowNodeBlockLoader2.prototype.addBlock = function(block) {
        this.blocks.push(block);
        block.addEventListener(RowNodeBlock.EVENT_LOAD_COMPLETE, this.loadComplete.bind(this));
        this.checkBlockToLoad();
      };
      RowNodeBlockLoader2.prototype.removeBlock = function(block) {
        _.removeFromArray(this.blocks, block);
      };
      RowNodeBlockLoader2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
        this.active = false;
      };
      RowNodeBlockLoader2.prototype.loadComplete = function() {
        this.activeBlockLoadsCount--;
        this.checkBlockToLoad();
        this.dispatchEvent({ type: RowNodeBlockLoader_1.BLOCK_LOADED_EVENT });
        if (this.activeBlockLoadsCount == 0) {
          this.dispatchEvent({ type: RowNodeBlockLoader_1.BLOCK_LOADER_FINISHED_EVENT });
        }
      };
      RowNodeBlockLoader2.prototype.checkBlockToLoad = function() {
        if (this.checkBlockToLoadDebounce) {
          this.checkBlockToLoadDebounce();
        } else {
          this.performCheckBlocksToLoad();
        }
      };
      RowNodeBlockLoader2.prototype.performCheckBlocksToLoad = function() {
        if (!this.active) {
          return;
        }
        this.printCacheStatus();
        if (this.maxConcurrentRequests != null && this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
          this.logger.log("checkBlockToLoad: max loads exceeded");
          return;
        }
        var loadAvailability = this.getAvailableLoadingCount();
        var blocksToLoad = this.blocks.filter(function(block) {
          return block.getState() === RowNodeBlock.STATE_WAITING_TO_LOAD;
        }).slice(0, loadAvailability);
        this.registerLoads(blocksToLoad.length);
        blocksToLoad.forEach(function(block) {
          return block.load();
        });
        this.printCacheStatus();
      };
      RowNodeBlockLoader2.prototype.getBlockState = function() {
        if (this.gridOptionsService.isRowModelType("serverSide")) {
          var ssrm = this.rowModel;
          return ssrm.getBlockStates();
        }
        var result = {};
        this.blocks.forEach(function(block) {
          var _a = block.getBlockStateJson(), id = _a.id, state = _a.state;
          result[id] = state;
        });
        return result;
      };
      RowNodeBlockLoader2.prototype.printCacheStatus = function() {
        if (this.logger.isLogging()) {
          this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + "," + (" blocks = " + JSON.stringify(this.getBlockState())));
        }
      };
      RowNodeBlockLoader2.prototype.isLoading = function() {
        return this.activeBlockLoadsCount > 0;
      };
      RowNodeBlockLoader2.prototype.registerLoads = function(count) {
        this.activeBlockLoadsCount += count;
      };
      RowNodeBlockLoader2.prototype.getAvailableLoadingCount = function() {
        return this.maxConcurrentRequests !== void 0 ? this.maxConcurrentRequests - this.activeBlockLoadsCount : void 0;
      };
      var RowNodeBlockLoader_1;
      RowNodeBlockLoader2.BLOCK_LOADED_EVENT = "blockLoaded";
      RowNodeBlockLoader2.BLOCK_LOADER_FINISHED_EVENT = "blockLoaderFinished";
      __decorate$14([
        Autowired("rowModel")
      ], RowNodeBlockLoader2.prototype, "rowModel", void 0);
      __decorate$14([
        PostConstruct
      ], RowNodeBlockLoader2.prototype, "postConstruct", null);
      __decorate$14([
        __param$7(0, Qualifier("loggerFactory"))
      ], RowNodeBlockLoader2.prototype, "setBeans", null);
      RowNodeBlockLoader2 = RowNodeBlockLoader_1 = __decorate$14([
        Bean("rowNodeBlockLoader")
      ], RowNodeBlockLoader2);
      return RowNodeBlockLoader2;
    }(BeanStub);
    __extends$17 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$13 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PaginationProxy = /** @class */
    function(_super) {
      __extends$17(PaginationProxy2, _super);
      function PaginationProxy2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentPage = 0;
        _this.topDisplayedRowIndex = 0;
        _this.bottomDisplayedRowIndex = 0;
        _this.pixelOffset = 0;
        _this.masterRowCount = 0;
        return _this;
      }
      PaginationProxy2.prototype.postConstruct = function() {
        this.active = this.gridOptionsService.is("pagination");
        this.paginateChildRows = this.isPaginateChildRows();
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
        this.addManagedPropertyListener("pagination", this.onPaginationPageSizeChanged.bind(this));
        this.addManagedPropertyListener("paginationPageSize", this.onPaginationPageSizeChanged.bind(this));
        this.onModelUpdated();
      };
      PaginationProxy2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        var res = this.rowModel.ensureRowHeightsValid(startPixel, endPixel, this.getPageFirstRow(), this.getPageLastRow());
        if (res) {
          this.calculatePages();
        }
        return res;
      };
      PaginationProxy2.prototype.isPaginateChildRows = function() {
        var shouldPaginate = this.gridOptionsService.is("groupRemoveSingleChildren") || this.gridOptionsService.is("groupRemoveLowestSingleChildren");
        if (shouldPaginate) {
          return true;
        }
        return this.gridOptionsService.is("paginateChildRows");
      };
      PaginationProxy2.prototype.onModelUpdated = function(modelUpdatedEvent) {
        this.calculatePages();
        var paginationChangedEvent = {
          type: Events.EVENT_PAGINATION_CHANGED,
          animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
          newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
          newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
          keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false
        };
        this.eventService.dispatchEvent(paginationChangedEvent);
      };
      PaginationProxy2.prototype.onPaginationPageSizeChanged = function() {
        this.active = this.gridOptionsService.is("pagination");
        this.calculatePages();
        var paginationChangedEvent = {
          type: Events.EVENT_PAGINATION_CHANGED,
          animate: false,
          newData: false,
          newPage: false,
          // important to keep rendered rows, otherwise every time grid is resized,
          // we would destroy all the rows.
          keepRenderedRows: true
        };
        this.eventService.dispatchEvent(paginationChangedEvent);
      };
      PaginationProxy2.prototype.goToPage = function(page) {
        if (!this.active || this.currentPage === page || typeof this.currentPage !== "number") {
          return;
        }
        this.currentPage = page;
        var event = {
          type: Events.EVENT_MODEL_UPDATED,
          animate: false,
          keepRenderedRows: false,
          newData: false,
          newPage: true
        };
        this.onModelUpdated(event);
      };
      PaginationProxy2.prototype.getPixelOffset = function() {
        return this.pixelOffset;
      };
      PaginationProxy2.prototype.getRow = function(index) {
        return this.rowModel.getRow(index);
      };
      PaginationProxy2.prototype.getRowNode = function(id) {
        return this.rowModel.getRowNode(id);
      };
      PaginationProxy2.prototype.getRowIndexAtPixel = function(pixel) {
        return this.rowModel.getRowIndexAtPixel(pixel);
      };
      PaginationProxy2.prototype.getCurrentPageHeight = function() {
        if (missing(this.topRowBounds) || missing(this.bottomRowBounds)) {
          return 0;
        }
        return Math.max(this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop, 0);
      };
      PaginationProxy2.prototype.getCurrentPagePixelRange = function() {
        var pageFirstPixel = this.topRowBounds ? this.topRowBounds.rowTop : 0;
        var pageLastPixel = this.bottomRowBounds ? this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight : 0;
        return { pageFirstPixel, pageLastPixel };
      };
      PaginationProxy2.prototype.isRowPresent = function(rowNode) {
        if (!this.rowModel.isRowPresent(rowNode)) {
          return false;
        }
        var nodeIsInPage = rowNode.rowIndex >= this.topDisplayedRowIndex && rowNode.rowIndex <= this.bottomDisplayedRowIndex;
        return nodeIsInPage;
      };
      PaginationProxy2.prototype.isEmpty = function() {
        return this.rowModel.isEmpty();
      };
      PaginationProxy2.prototype.isRowsToRender = function() {
        return this.rowModel.isRowsToRender();
      };
      PaginationProxy2.prototype.forEachNode = function(callback) {
        return this.rowModel.forEachNode(callback);
      };
      PaginationProxy2.prototype.forEachNodeOnPage = function(callback) {
        var firstRow = this.getPageFirstRow();
        var lastRow = this.getPageLastRow();
        for (var i = firstRow; i <= lastRow; i++) {
          var node = this.getRow(i);
          if (node) {
            callback(node);
          }
        }
      };
      PaginationProxy2.prototype.getType = function() {
        return this.rowModel.getType();
      };
      PaginationProxy2.prototype.getRowBounds = function(index) {
        var res = this.rowModel.getRowBounds(index);
        res.rowIndex = index;
        return res;
      };
      PaginationProxy2.prototype.getPageFirstRow = function() {
        return this.topRowBounds ? this.topRowBounds.rowIndex : -1;
      };
      PaginationProxy2.prototype.getPageLastRow = function() {
        return this.bottomRowBounds ? this.bottomRowBounds.rowIndex : -1;
      };
      PaginationProxy2.prototype.getRowCount = function() {
        return this.rowModel.getRowCount();
      };
      PaginationProxy2.prototype.getPageForIndex = function(index) {
        return Math.floor(index / this.pageSize);
      };
      PaginationProxy2.prototype.goToPageWithIndex = function(index) {
        if (!this.active) {
          return;
        }
        var pageNumber = this.getPageForIndex(index);
        this.goToPage(pageNumber);
      };
      PaginationProxy2.prototype.isRowInPage = function(row) {
        if (!this.active) {
          return true;
        }
        var rowPage = this.getPageForIndex(row.rowIndex);
        return rowPage === this.currentPage;
      };
      PaginationProxy2.prototype.isLastPageFound = function() {
        return this.rowModel.isLastRowIndexKnown();
      };
      PaginationProxy2.prototype.getCurrentPage = function() {
        return this.currentPage;
      };
      PaginationProxy2.prototype.goToNextPage = function() {
        this.goToPage(this.currentPage + 1);
      };
      PaginationProxy2.prototype.goToPreviousPage = function() {
        this.goToPage(this.currentPage - 1);
      };
      PaginationProxy2.prototype.goToFirstPage = function() {
        this.goToPage(0);
      };
      PaginationProxy2.prototype.goToLastPage = function() {
        var rowCount = this.rowModel.getRowCount();
        var lastPage = Math.floor(rowCount / this.pageSize);
        this.goToPage(lastPage);
      };
      PaginationProxy2.prototype.getPageSize = function() {
        return this.pageSize;
      };
      PaginationProxy2.prototype.getTotalPages = function() {
        return this.totalPages;
      };
      PaginationProxy2.prototype.setPageSize = function() {
        this.pageSize = this.gridOptionsService.getNum("paginationPageSize");
        if (this.pageSize == null || this.pageSize < 1) {
          this.pageSize = 100;
        }
      };
      PaginationProxy2.prototype.calculatePages = function() {
        if (this.active) {
          this.setPageSize();
          if (this.paginateChildRows) {
            this.calculatePagesAllRows();
          } else {
            this.calculatePagesMasterRowsOnly();
          }
        } else {
          this.calculatedPagesNotActive();
        }
        this.topRowBounds = this.rowModel.getRowBounds(this.topDisplayedRowIndex);
        if (this.topRowBounds) {
          this.topRowBounds.rowIndex = this.topDisplayedRowIndex;
        }
        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomDisplayedRowIndex);
        if (this.bottomRowBounds) {
          this.bottomRowBounds.rowIndex = this.bottomDisplayedRowIndex;
        }
        this.setPixelOffset(exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0);
      };
      PaginationProxy2.prototype.setPixelOffset = function(value) {
        if (this.pixelOffset === value) {
          return;
        }
        this.pixelOffset = value;
        this.eventService.dispatchEvent({ type: Events.EVENT_PAGINATION_PIXEL_OFFSET_CHANGED });
      };
      PaginationProxy2.prototype.setZeroRows = function() {
        this.masterRowCount = 0;
        this.topDisplayedRowIndex = 0;
        this.bottomDisplayedRowIndex = -1;
        this.currentPage = 0;
        this.totalPages = 0;
      };
      PaginationProxy2.prototype.adjustCurrentPageIfInvalid = function() {
        if (this.currentPage >= this.totalPages) {
          this.currentPage = this.totalPages - 1;
        }
        if (!isFinite(this.currentPage) || isNaN(this.currentPage) || this.currentPage < 0) {
          this.currentPage = 0;
        }
      };
      PaginationProxy2.prototype.calculatePagesMasterRowsOnly = function() {
        this.masterRowCount = this.rowModel.getTopLevelRowCount();
        if (this.masterRowCount <= 0) {
          this.setZeroRows();
          return;
        }
        var masterLastRowIndex = this.masterRowCount - 1;
        this.totalPages = Math.floor(masterLastRowIndex / this.pageSize) + 1;
        this.adjustCurrentPageIfInvalid();
        var masterPageStartIndex = this.pageSize * this.currentPage;
        var masterPageEndIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (masterPageEndIndex > masterLastRowIndex) {
          masterPageEndIndex = masterLastRowIndex;
        }
        this.topDisplayedRowIndex = this.rowModel.getTopLevelRowDisplayedIndex(masterPageStartIndex);
        if (masterPageEndIndex === masterLastRowIndex) {
          this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
        } else {
          var firstIndexNotToShow = this.rowModel.getTopLevelRowDisplayedIndex(masterPageEndIndex + 1);
          this.bottomDisplayedRowIndex = firstIndexNotToShow - 1;
        }
      };
      PaginationProxy2.prototype.getMasterRowCount = function() {
        return this.masterRowCount;
      };
      PaginationProxy2.prototype.calculatePagesAllRows = function() {
        this.masterRowCount = this.rowModel.getRowCount();
        if (this.masterRowCount === 0) {
          this.setZeroRows();
          return;
        }
        var maxRowIndex = this.masterRowCount - 1;
        this.totalPages = Math.floor(maxRowIndex / this.pageSize) + 1;
        this.adjustCurrentPageIfInvalid();
        this.topDisplayedRowIndex = this.pageSize * this.currentPage;
        this.bottomDisplayedRowIndex = this.pageSize * (this.currentPage + 1) - 1;
        if (this.bottomDisplayedRowIndex > maxRowIndex) {
          this.bottomDisplayedRowIndex = maxRowIndex;
        }
      };
      PaginationProxy2.prototype.calculatedPagesNotActive = function() {
        this.pageSize = this.rowModel.getRowCount();
        this.totalPages = 1;
        this.currentPage = 0;
        this.topDisplayedRowIndex = 0;
        this.bottomDisplayedRowIndex = this.rowModel.getRowCount() - 1;
      };
      __decorate$13([
        Autowired("rowModel")
      ], PaginationProxy2.prototype, "rowModel", void 0);
      __decorate$13([
        PostConstruct
      ], PaginationProxy2.prototype, "postConstruct", null);
      PaginationProxy2 = __decorate$13([
        Bean("paginationProxy")
      ], PaginationProxy2);
      return PaginationProxy2;
    }(BeanStub);
    __extends$16 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$12 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    StylingService = /** @class */
    function(_super) {
      __extends$16(StylingService2, _super);
      function StylingService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      StylingService2.prototype.processAllCellClasses = function(colDef, params, onApplicableClass, onNotApplicableClass) {
        this.processClassRules(colDef.cellClassRules, params, onApplicableClass, onNotApplicableClass);
        this.processStaticCellClasses(colDef, params, onApplicableClass);
      };
      StylingService2.prototype.processClassRules = function(classRules, params, onApplicableClass, onNotApplicableClass) {
        if (classRules == null) {
          return;
        }
        var classNames = Object.keys(classRules);
        var classesToApply = {};
        var classesToRemove = {};
        var _loop_1 = function(i2) {
          var className = classNames[i2];
          var rule = classRules[className];
          var resultOfRule;
          if (typeof rule === "string") {
            resultOfRule = this_1.expressionService.evaluate(rule, params);
          } else if (typeof rule === "function") {
            resultOfRule = rule(params);
          }
          className.split(" ").forEach(function(singleClass) {
            if (singleClass == null || singleClass.trim() == "") {
              return;
            }
            resultOfRule ? classesToApply[singleClass] = true : classesToRemove[singleClass] = true;
          });
        };
        var this_1 = this;
        for (var i = 0; i < classNames.length; i++) {
          _loop_1(i);
        }
        if (onNotApplicableClass) {
          Object.keys(classesToRemove).forEach(onNotApplicableClass);
        }
        Object.keys(classesToApply).forEach(onApplicableClass);
      };
      StylingService2.prototype.getStaticCellClasses = function(colDef, params) {
        var cellClass = colDef.cellClass;
        if (!cellClass) {
          return [];
        }
        var classOrClasses;
        if (typeof cellClass === "function") {
          var cellClassFunc = cellClass;
          classOrClasses = cellClassFunc(params);
        } else {
          classOrClasses = cellClass;
        }
        if (typeof classOrClasses === "string") {
          classOrClasses = [classOrClasses];
        }
        return classOrClasses || [];
      };
      StylingService2.prototype.processStaticCellClasses = function(colDef, params, onApplicableClass) {
        var classOrClasses = this.getStaticCellClasses(colDef, params);
        classOrClasses.forEach(function(cssClassItem) {
          onApplicableClass(cssClassItem);
        });
      };
      __decorate$12([
        Autowired("expressionService")
      ], StylingService2.prototype, "expressionService", void 0);
      StylingService2 = __decorate$12([
        Bean("stylingService")
      ], StylingService2);
      return StylingService2;
    }(BeanStub);
    __extends$15 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgToggleButton = /** @class */
    function(_super) {
      __extends$15(AgToggleButton2, _super);
      function AgToggleButton2(config) {
        return _super.call(this, config, "ag-toggle-button") || this;
      }
      AgToggleButton2.prototype.setValue = function(value, silent) {
        _super.prototype.setValue.call(this, value, silent);
        this.addOrRemoveCssClass("ag-selected", this.getValue());
        return this;
      };
      return AgToggleButton2;
    }(AgCheckbox);
    __extends$14 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputTextArea = /** @class */
    function(_super) {
      __extends$14(AgInputTextArea2, _super);
      function AgInputTextArea2(config) {
        return _super.call(this, config, "ag-text-area", null, "textarea") || this;
      }
      AgInputTextArea2.prototype.setValue = function(value, silent) {
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
      };
      AgInputTextArea2.prototype.setCols = function(cols) {
        this.eInput.cols = cols;
        return this;
      };
      AgInputTextArea2.prototype.setRows = function(rows) {
        this.eInput.rows = rows;
        return this;
      };
      return AgInputTextArea2;
    }(AgAbstractInputField);
    __extends$13 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputDateField = /** @class */
    function(_super) {
      __extends$13(AgInputDateField2, _super);
      function AgInputDateField2(config) {
        return _super.call(this, config, "ag-date-field", "date") || this;
      }
      AgInputDateField2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        this.addManagedListener(this.eInput, "wheel", this.onWheel.bind(this));
        var usingSafari = isBrowserSafari();
        this.addManagedListener(this.eInput, "mousedown", function() {
          if (_this.isDisabled() || usingSafari) {
            return;
          }
          _this.eInput.focus();
        });
        this.eInput.step = "any";
      };
      AgInputDateField2.prototype.onWheel = function(e) {
        if (document.activeElement === this.eInput) {
          e.preventDefault();
        }
      };
      AgInputDateField2.prototype.setMin = function(minDate) {
        var _a;
        var min = minDate instanceof Date ? (_a = serialiseDate(minDate !== null && minDate !== void 0 ? minDate : null, false)) !== null && _a !== void 0 ? _a : void 0 : minDate;
        if (this.min === min) {
          return this;
        }
        this.min = min;
        addOrRemoveAttribute(this.eInput, "min", min);
        return this;
      };
      AgInputDateField2.prototype.setMax = function(maxDate) {
        var _a;
        var max = maxDate instanceof Date ? (_a = serialiseDate(maxDate !== null && maxDate !== void 0 ? maxDate : null, false)) !== null && _a !== void 0 ? _a : void 0 : maxDate;
        if (this.max === max) {
          return this;
        }
        this.max = max;
        addOrRemoveAttribute(this.eInput, "max", max);
        return this;
      };
      AgInputDateField2.prototype.setStep = function(step) {
        if (this.step === step) {
          return this;
        }
        this.step = step;
        addOrRemoveAttribute(this.eInput, "step", step);
        return this;
      };
      AgInputDateField2.prototype.getDate = function() {
        var _a;
        if (!this.eInput.validity.valid) {
          return void 0;
        }
        return (_a = parseDateTimeFromString(this.getValue())) !== null && _a !== void 0 ? _a : void 0;
      };
      AgInputDateField2.prototype.setDate = function(date, silent) {
        this.setValue(serialiseDate(date !== null && date !== void 0 ? date : null, false), silent);
      };
      return AgInputDateField2;
    }(AgInputTextField);
    __extends$12 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgInputRange = /** @class */
    function(_super) {
      __extends$12(AgInputRange2, _super);
      function AgInputRange2(config) {
        return _super.call(this, config, "ag-range-field", "range") || this;
      }
      AgInputRange2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
        if (min != null) {
          this.setMinValue(min);
        }
        if (max != null) {
          this.setMaxValue(max);
        }
        this.setStep(step || 1);
      };
      AgInputRange2.prototype.addInputListeners = function() {
        var _this = this;
        this.addManagedListener(this.eInput, "input", function(e) {
          var value = e.target.value;
          _this.setValue(value);
        });
      };
      AgInputRange2.prototype.setMinValue = function(value) {
        this.min = value;
        this.eInput.setAttribute("min", value.toString());
        return this;
      };
      AgInputRange2.prototype.setMaxValue = function(value) {
        this.max = value;
        this.eInput.setAttribute("max", value.toString());
        return this;
      };
      AgInputRange2.prototype.setStep = function(value) {
        this.eInput.setAttribute("step", value.toString());
        return this;
      };
      AgInputRange2.prototype.setValue = function(value, silent) {
        if (this.min != null) {
          value = Math.max(parseFloat(value), this.min).toString();
        }
        if (this.max != null) {
          value = Math.min(parseFloat(value), this.max).toString();
        }
        var ret = _super.prototype.setValue.call(this, value, silent);
        this.eInput.value = value;
        return ret;
      };
      return AgInputRange2;
    }(AgAbstractInputField);
    __extends$11 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$11 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RichSelectRow = /** @class */
    function(_super) {
      __extends$11(RichSelectRow2, _super);
      function RichSelectRow2(params, wrapperEl) {
        var _this = _super.call(
          this,
          /* html */
          '<div class="ag-rich-select-row" role="presentation"></div>'
        ) || this;
        _this.params = params;
        _this.wrapperEl = wrapperEl;
        return _this;
      }
      RichSelectRow2.prototype.postConstruct = function() {
        this.addManagedListener(this.getGui(), "mouseup", this.onMouseUp.bind(this));
      };
      RichSelectRow2.prototype.setState = function(value) {
        var formattedValue = "";
        if (this.params.valueFormatter) {
          formattedValue = this.params.valueFormatter(value);
        }
        var rendererSuccessful = this.populateWithRenderer(value, formattedValue);
        if (!rendererSuccessful) {
          this.populateWithoutRenderer(value, formattedValue);
        }
        this.value = value;
      };
      RichSelectRow2.prototype.highlightString = function(matchString) {
        var parsedValue = this.parsedValue;
        if (this.params.cellRenderer || !exists(parsedValue)) {
          return;
        }
        if (exists(matchString)) {
          var index = parsedValue === null || parsedValue === void 0 ? void 0 : parsedValue.toLocaleLowerCase().indexOf(matchString.toLocaleLowerCase());
          if (index >= 0) {
            var highlightEndIndex = index + matchString.length;
            var startPart = escapeString(parsedValue.slice(0, index), true);
            var highlightedPart = escapeString(parsedValue.slice(index, highlightEndIndex), true);
            var endPart = escapeString(parsedValue.slice(highlightEndIndex));
            this.renderValueWithoutRenderer(startPart + '<span class="ag-rich-select-row-text-highlight">' + highlightedPart + "</span>" + endPart);
          }
        } else {
          this.renderValueWithoutRenderer(parsedValue);
        }
      };
      RichSelectRow2.prototype.updateHighlighted = function(highlighted) {
        var _a;
        var eGui = this.getGui();
        var parentId = "ag-rich-select-row-" + this.getCompId();
        (_a = eGui.parentElement) === null || _a === void 0 ? void 0 : _a.setAttribute("id", parentId);
        if (highlighted) {
          var parentAriaEl = this.getParentComponent().getAriaElement();
          setAriaActiveDescendant(parentAriaEl, parentId);
          this.wrapperEl.setAttribute("data-active-option", parentId);
        }
        setAriaSelected(eGui.parentElement, highlighted);
        this.addOrRemoveCssClass("ag-rich-select-row-selected", highlighted);
      };
      RichSelectRow2.prototype.populateWithoutRenderer = function(value, valueFormatted) {
        var eDocument = this.gridOptionsService.getDocument();
        var eGui = this.getGui();
        var span = eDocument.createElement("span");
        span.style.overflow = "hidden";
        span.style.textOverflow = "ellipsis";
        var parsedValue = escapeString(exists(valueFormatted) ? valueFormatted : value, true);
        this.parsedValue = exists(parsedValue) ? parsedValue : null;
        eGui.appendChild(span);
        this.renderValueWithoutRenderer(parsedValue);
      };
      RichSelectRow2.prototype.renderValueWithoutRenderer = function(value) {
        var span = this.getGui().querySelector("span");
        if (!span) {
          return;
        }
        span.innerHTML = exists(value) ? value : "&nbsp;";
      };
      RichSelectRow2.prototype.populateWithRenderer = function(value, valueFormatted) {
        var _this = this;
        var cellRendererPromise;
        var userCompDetails;
        if (this.params.cellRenderer) {
          userCompDetails = this.userComponentFactory.getCellRendererDetails(this.params, {
            value,
            valueFormatted,
            api: this.gridOptionsService.api
          });
        }
        if (userCompDetails) {
          cellRendererPromise = userCompDetails.newAgStackInstance();
        }
        if (cellRendererPromise) {
          bindCellRendererToHtmlElement(cellRendererPromise, this.getGui());
        }
        if (cellRendererPromise) {
          cellRendererPromise.then(function(childComponent) {
            _this.addDestroyFunc(function() {
              _this.getContext().destroyBean(childComponent);
            });
          });
          return true;
        }
        return false;
      };
      RichSelectRow2.prototype.onMouseUp = function() {
        var parent = this.getParentComponent();
        var event = {
          type: Events.EVENT_FIELD_PICKER_VALUE_SELECTED,
          fromEnterKey: false,
          value: this.value
        };
        parent === null || parent === void 0 ? void 0 : parent.dispatchEvent(event);
      };
      __decorate$11([
        Autowired("userComponentFactory")
      ], RichSelectRow2.prototype, "userComponentFactory", void 0);
      __decorate$11([
        PostConstruct
      ], RichSelectRow2.prototype, "postConstruct", null);
      return RichSelectRow2;
    }(Component);
    __extends$10 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __read$c = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$a = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    TabGuardComp = /** @class */
    function(_super) {
      __extends$10(TabGuardComp2, _super);
      function TabGuardComp2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      TabGuardComp2.prototype.initialiseTabGuard = function(params) {
        this.eTopGuard = this.createTabGuard("top");
        this.eBottomGuard = this.createTabGuard("bottom");
        this.eFocusableElement = this.getFocusableElement();
        var tabGuards = [this.eTopGuard, this.eBottomGuard];
        var compProxy = {
          setTabIndex: function(tabIndex) {
            tabGuards.forEach(function(tabGuard) {
              return tabIndex != null ? tabGuard.setAttribute("tabindex", tabIndex) : tabGuard.removeAttribute("tabindex");
            });
          }
        };
        this.addTabGuards(this.eTopGuard, this.eBottomGuard);
        this.tabGuardCtrl = this.createManagedBean(new TabGuardCtrl({
          comp: compProxy,
          eTopGuard: this.eTopGuard,
          eBottomGuard: this.eBottomGuard,
          eFocusableElement: this.eFocusableElement,
          onFocusIn: params.onFocusIn,
          onFocusOut: params.onFocusOut,
          focusInnerElement: params.focusInnerElement,
          handleKeyDown: params.handleKeyDown,
          onTabKeyDown: params.onTabKeyDown,
          shouldStopEventPropagation: params.shouldStopEventPropagation
        }));
      };
      TabGuardComp2.prototype.createTabGuard = function(side) {
        var tabGuard = document.createElement("div");
        var cls = side === "top" ? TabGuardClassNames.TAB_GUARD_TOP : TabGuardClassNames.TAB_GUARD_BOTTOM;
        tabGuard.classList.add(TabGuardClassNames.TAB_GUARD, cls);
        setAriaRole(tabGuard, "presentation");
        return tabGuard;
      };
      TabGuardComp2.prototype.addTabGuards = function(topTabGuard, bottomTabGuard) {
        this.eFocusableElement.insertAdjacentElement("afterbegin", topTabGuard);
        this.eFocusableElement.insertAdjacentElement("beforeend", bottomTabGuard);
      };
      TabGuardComp2.prototype.removeAllChildrenExceptTabGuards = function() {
        var tabGuards = [this.eTopGuard, this.eBottomGuard];
        clearElement(this.getFocusableElement());
        this.addTabGuards.apply(this, __spreadArray$a([], __read$c(tabGuards)));
      };
      TabGuardComp2.prototype.forceFocusOutOfContainer = function(up) {
        if (up === void 0) {
          up = false;
        }
        this.tabGuardCtrl.forceFocusOutOfContainer(up);
      };
      TabGuardComp2.prototype.appendChild = function(newChild, container) {
        if (!isNodeOrElement(newChild)) {
          newChild = newChild.getGui();
        }
        var bottomTabGuard = this.eBottomGuard;
        if (bottomTabGuard) {
          bottomTabGuard.insertAdjacentElement("beforebegin", newChild);
        } else {
          _super.prototype.appendChild.call(this, newChild, container);
        }
      };
      return TabGuardComp2;
    }(Component);
    __extends$$ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$10 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    VirtualList = /** @class */
    function(_super) {
      __extends$$(VirtualList2, _super);
      function VirtualList2(params) {
        var _this = _super.call(this, VirtualList2.getTemplate((params === null || params === void 0 ? void 0 : params.cssIdentifier) || "default")) || this;
        _this.renderedRows = /* @__PURE__ */ new Map();
        _this.rowHeight = 20;
        var _a = params || {}, _b = _a.cssIdentifier, cssIdentifier = _b === void 0 ? "default" : _b, _c = _a.ariaRole, ariaRole = _c === void 0 ? "listbox" : _c, listName = _a.listName;
        _this.cssIdentifier = cssIdentifier;
        _this.ariaRole = ariaRole;
        _this.listName = listName;
        return _this;
      }
      VirtualList2.prototype.postConstruct = function() {
        var _this = this;
        this.addScrollListener();
        this.rowHeight = this.getItemHeight();
        this.addResizeObserver();
        this.initialiseTabGuard({
          onFocusIn: function(e) {
            return _this.onFocusIn(e);
          },
          onFocusOut: function(e) {
            return _this.onFocusOut(e);
          },
          focusInnerElement: function(fromBottom) {
            return _this.focusInnerElement(fromBottom);
          },
          onTabKeyDown: function(e) {
            return _this.onTabKeyDown(e);
          },
          handleKeyDown: function(e) {
            return _this.handleKeyDown(e);
          }
        });
        this.setAriaProperties();
        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanged.bind(this));
      };
      VirtualList2.prototype.onGridStylesChanged = function() {
        this.rowHeight = this.getItemHeight();
        this.refresh();
      };
      VirtualList2.prototype.setAriaProperties = function() {
        var translate = this.localeService.getLocaleTextFunc();
        var listName = translate("ariaDefaultListName", this.listName || "List");
        var ariaEl = this.eContainer;
        setAriaRole(ariaEl, this.ariaRole);
        setAriaLabel(ariaEl, listName);
      };
      VirtualList2.prototype.addResizeObserver = function() {
        var _this = this;
        var listener = function() {
          return _this.animationFrameService.requestAnimationFrame(function() {
            return _this.drawVirtualRows();
          });
        };
        var destroyObserver = this.resizeObserverService.observeResize(this.getGui(), listener);
        this.addDestroyFunc(destroyObserver);
      };
      VirtualList2.prototype.focusInnerElement = function(fromBottom) {
        this.focusRow(fromBottom ? this.model.getRowCount() - 1 : 0);
      };
      VirtualList2.prototype.onFocusIn = function(e) {
        var target = e.target;
        if (target.classList.contains("ag-virtual-list-item")) {
          this.lastFocusedRowIndex = getAriaPosInSet(target) - 1;
        }
        return false;
      };
      VirtualList2.prototype.onFocusOut = function(e) {
        if (!this.getFocusableElement().contains(e.relatedTarget)) {
          this.lastFocusedRowIndex = null;
        }
        return false;
      };
      VirtualList2.prototype.handleKeyDown = function(e) {
        switch (e.key) {
          case KeyCode.UP:
          case KeyCode.DOWN:
            if (this.navigate(e.key === KeyCode.UP)) {
              e.preventDefault();
            }
            break;
        }
      };
      VirtualList2.prototype.onTabKeyDown = function(e) {
        if (this.navigate(e.shiftKey)) {
          e.preventDefault();
        } else {
          stopPropagationForAgGrid(e);
          this.forceFocusOutOfContainer(e.shiftKey);
        }
      };
      VirtualList2.prototype.navigate = function(up) {
        if (this.lastFocusedRowIndex == null) {
          return false;
        }
        var nextRow = this.lastFocusedRowIndex + (up ? -1 : 1);
        if (nextRow < 0 || nextRow >= this.model.getRowCount()) {
          return false;
        }
        this.focusRow(nextRow);
        return true;
      };
      VirtualList2.prototype.getLastFocusedRow = function() {
        return this.lastFocusedRowIndex;
      };
      VirtualList2.prototype.focusRow = function(rowNumber) {
        var _this = this;
        this.ensureIndexVisible(rowNumber);
        window.setTimeout(function() {
          if (!_this.isAlive()) {
            return;
          }
          var renderedRow = _this.renderedRows.get(rowNumber);
          if (renderedRow) {
            renderedRow.eDiv.focus();
          }
        }, 10);
      };
      VirtualList2.prototype.getComponentAt = function(rowIndex) {
        var comp = this.renderedRows.get(rowIndex);
        return comp && comp.rowComponent;
      };
      VirtualList2.prototype.forEachRenderedRow = function(func) {
        this.renderedRows.forEach(function(value, key) {
          return func(value.rowComponent, key);
        });
      };
      VirtualList2.getTemplate = function(cssIdentifier) {
        return (
          /* html */
          '<div class="ag-virtual-list-viewport ag-' + cssIdentifier + '-virtual-list-viewport" role="presentation">\n                <div class="ag-virtual-list-container ag-' + cssIdentifier + '-virtual-list-container" ref="eContainer"></div>\n            </div>'
        );
      };
      VirtualList2.prototype.getItemHeight = function() {
        return this.environment.getListItemHeight();
      };
      VirtualList2.prototype.ensureIndexVisible = function(index, scrollPartialIntoView) {
        if (scrollPartialIntoView === void 0) {
          scrollPartialIntoView = true;
        }
        var lastRow = this.model.getRowCount();
        if (typeof index !== "number" || index < 0 || index >= lastRow) {
          console.warn("AG Grid: invalid row index for ensureIndexVisible: " + index);
          return false;
        }
        var rowTopPixel = index * this.rowHeight;
        var rowBottomPixel = rowTopPixel + this.rowHeight;
        var eGui = this.getGui();
        var viewportTopPixel = eGui.scrollTop;
        var viewportHeight = eGui.offsetHeight;
        var viewportBottomPixel = viewportTopPixel + viewportHeight;
        var diff = scrollPartialIntoView ? 0 : this.rowHeight;
        var viewportScrolledPastRow = viewportTopPixel > rowTopPixel + diff;
        var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel - diff;
        if (viewportScrolledPastRow) {
          eGui.scrollTop = rowTopPixel;
          return true;
        }
        if (viewportScrolledBeforeRow) {
          var newScrollPosition = rowBottomPixel - viewportHeight;
          eGui.scrollTop = newScrollPosition;
          return true;
        }
        return false;
      };
      VirtualList2.prototype.setComponentCreator = function(componentCreator) {
        this.componentCreator = componentCreator;
      };
      VirtualList2.prototype.setComponentUpdater = function(componentUpdater) {
        this.componentUpdater = componentUpdater;
      };
      VirtualList2.prototype.getRowHeight = function() {
        return this.rowHeight;
      };
      VirtualList2.prototype.getScrollTop = function() {
        return this.getGui().scrollTop;
      };
      VirtualList2.prototype.setRowHeight = function(rowHeight) {
        this.rowHeight = rowHeight;
        this.refresh();
      };
      VirtualList2.prototype.refresh = function(softRefresh) {
        var _this = this;
        if (this.model == null || !this.isAlive()) {
          return;
        }
        var rowCount = this.model.getRowCount();
        this.eContainer.style.height = rowCount * this.rowHeight + "px";
        waitUntil(function() {
          return _this.eContainer.clientHeight >= rowCount * _this.rowHeight;
        }, function() {
          if (!_this.isAlive()) {
            return;
          }
          if (_this.canSoftRefresh(softRefresh)) {
            _this.drawVirtualRows(true);
          } else {
            _this.clearVirtualRows();
            _this.drawVirtualRows();
          }
        });
      };
      VirtualList2.prototype.canSoftRefresh = function(softRefresh) {
        return !!(softRefresh && this.renderedRows.size && typeof this.model.areRowsEqual === "function" && this.componentUpdater);
      };
      VirtualList2.prototype.clearVirtualRows = function() {
        var _this = this;
        this.renderedRows.forEach(function(_2, rowIndex) {
          return _this.removeRow(rowIndex);
        });
      };
      VirtualList2.prototype.drawVirtualRows = function(softRefresh) {
        if (!this.isAlive() || !this.model) {
          return;
        }
        var gui = this.getGui();
        var topPixel = gui.scrollTop;
        var bottomPixel = topPixel + gui.offsetHeight;
        var firstRow = Math.floor(topPixel / this.rowHeight);
        var lastRow = Math.floor(bottomPixel / this.rowHeight);
        this.ensureRowsRendered(firstRow, lastRow, softRefresh);
      };
      VirtualList2.prototype.ensureRowsRendered = function(start, finish, softRefresh) {
        var _this = this;
        this.renderedRows.forEach(function(_2, rowIndex2) {
          if ((rowIndex2 < start || rowIndex2 > finish) && rowIndex2 !== _this.lastFocusedRowIndex) {
            _this.removeRow(rowIndex2);
          }
        });
        if (softRefresh) {
          this.refreshRows();
        }
        for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
          if (this.renderedRows.has(rowIndex)) {
            continue;
          }
          if (rowIndex < this.model.getRowCount()) {
            this.insertRow(rowIndex);
          }
        }
      };
      VirtualList2.prototype.insertRow = function(rowIndex) {
        var _this = this;
        var value = this.model.getRow(rowIndex);
        var eDiv = document.createElement("div");
        eDiv.classList.add("ag-virtual-list-item", "ag-" + this.cssIdentifier + "-virtual-list-item");
        setAriaRole(eDiv, this.ariaRole === "tree" ? "treeitem" : "option");
        setAriaSetSize(eDiv, this.model.getRowCount());
        setAriaPosInSet(eDiv, rowIndex + 1);
        eDiv.setAttribute("tabindex", "-1");
        if (typeof this.model.isRowSelected === "function") {
          var isSelected = this.model.isRowSelected(rowIndex);
          setAriaSelected(eDiv, !!isSelected);
          setAriaChecked(eDiv, isSelected);
        }
        eDiv.style.height = this.rowHeight + "px";
        eDiv.style.top = this.rowHeight * rowIndex + "px";
        var rowComponent = this.componentCreator(value, eDiv);
        rowComponent.addGuiEventListener("focusin", function() {
          return _this.lastFocusedRowIndex = rowIndex;
        });
        eDiv.appendChild(rowComponent.getGui());
        if (this.renderedRows.has(rowIndex - 1)) {
          this.renderedRows.get(rowIndex - 1).eDiv.insertAdjacentElement("afterend", eDiv);
        } else if (this.renderedRows.has(rowIndex + 1)) {
          this.renderedRows.get(rowIndex + 1).eDiv.insertAdjacentElement("beforebegin", eDiv);
        } else {
          this.eContainer.appendChild(eDiv);
        }
        this.renderedRows.set(rowIndex, { rowComponent, eDiv, value });
      };
      VirtualList2.prototype.removeRow = function(rowIndex) {
        var component = this.renderedRows.get(rowIndex);
        this.eContainer.removeChild(component.eDiv);
        this.destroyBean(component.rowComponent);
        this.renderedRows.delete(rowIndex);
      };
      VirtualList2.prototype.refreshRows = function() {
        var _this = this;
        var rowCount = this.model.getRowCount();
        this.renderedRows.forEach(function(row, rowIndex) {
          var _a, _b;
          if (rowIndex >= rowCount) {
            _this.removeRow(rowIndex);
          } else {
            var newValue = _this.model.getRow(rowIndex);
            if ((_b = (_a = _this.model).areRowsEqual) === null || _b === void 0 ? void 0 : _b.call(_a, row.value, newValue)) {
              _this.componentUpdater(newValue, row.rowComponent);
            } else {
              _this.removeRow(rowIndex);
            }
          }
        });
      };
      VirtualList2.prototype.addScrollListener = function() {
        var _this = this;
        this.addGuiEventListener("scroll", function() {
          return _this.drawVirtualRows();
        }, { passive: true });
      };
      VirtualList2.prototype.setModel = function(model) {
        this.model = model;
      };
      VirtualList2.prototype.getAriaElement = function() {
        return this.eContainer;
      };
      VirtualList2.prototype.destroy = function() {
        if (!this.isAlive()) {
          return;
        }
        this.clearVirtualRows();
        _super.prototype.destroy.call(this);
      };
      __decorate$10([
        Autowired("resizeObserverService")
      ], VirtualList2.prototype, "resizeObserverService", void 0);
      __decorate$10([
        Autowired("animationFrameService")
      ], VirtualList2.prototype, "animationFrameService", void 0);
      __decorate$10([
        RefSelector("eContainer")
      ], VirtualList2.prototype, "eContainer", void 0);
      __decorate$10([
        PostConstruct
      ], VirtualList2.prototype, "postConstruct", null);
      return VirtualList2;
    }(TabGuardComp);
    __extends$_ = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$6 = function() {
      __assign$6 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$6.apply(this, arguments);
    };
    __decorate$$ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TEMPLATE = /* html */
    '\n    <div class="ag-picker-field" role="presentation">\n        <div ref="eLabel"></div>\n            <div ref="eWrapper" class="ag-wrapper ag-picker-field-wrapper ag-rich-select-value ag-picker-collapsed">\n            <div ref="eDisplayField" class="ag-picker-field-display"></div>\n            <ag-input-text-field ref="eInput" class="ag-rich-select-field-input"></ag-input-text-field>\n            <div ref="eIcon" class="ag-picker-field-icon" aria-hidden="true"></div>\n        </div>\n    </div>';
    AgRichSelect = /** @class */
    function(_super) {
      __extends$_(AgRichSelect2, _super);
      function AgRichSelect2(config) {
        var _a, _b;
        var _this = _super.call(this, __assign$6(__assign$6({ pickerAriaLabelKey: "ariaLabelRichSelectField", pickerAriaLabelValue: "Rich Select Field", pickerType: "ag-list", className: "ag-rich-select", pickerIcon: "smallDown", ariaRole: "combobox", template: (_a = config === null || config === void 0 ? void 0 : config.template) !== null && _a !== void 0 ? _a : TEMPLATE, modalPicker: false }, config), {
          // maxPickerHeight needs to be set after expanding `config`
          maxPickerHeight: (_b = config === null || config === void 0 ? void 0 : config.maxPickerHeight) !== null && _b !== void 0 ? _b : "calc(var(--ag-row-height) * 6.5)"
        })) || this;
        _this.searchString = "";
        _this.highlightedItem = -1;
        _this.lastRowHovered = -1;
        _this.searchStringCreator = null;
        var _c = config || {}, cellRowHeight = _c.cellRowHeight, value = _c.value, valueList = _c.valueList, searchStringCreator = _c.searchStringCreator;
        if (cellRowHeight != null) {
          _this.cellRowHeight = cellRowHeight;
        }
        if (value !== void 0) {
          _this.value = value;
        }
        if (valueList != null) {
          _this.values = valueList;
        }
        if (searchStringCreator) {
          _this.searchStringCreator = searchStringCreator;
        }
        return _this;
      }
      AgRichSelect2.prototype.postConstruct = function() {
        var _this = this;
        var _a;
        _super.prototype.postConstruct.call(this);
        this.createLoadingElement();
        this.createListComponent();
        var _b = this.config, allowTyping = _b.allowTyping, placeholder = _b.placeholder;
        if (allowTyping) {
          this.eInput.setAutoComplete(false).setInputPlaceholder(placeholder);
          this.eDisplayField.classList.add("ag-hidden");
        } else {
          this.eInput.setDisplayed(false);
        }
        this.eWrapper.tabIndex = (_a = this.gridOptionsService.getNum("tabIndex")) !== null && _a !== void 0 ? _a : 0;
        var _c = this.config.searchDebounceDelay, searchDebounceDelay = _c === void 0 ? 300 : _c;
        this.clearSearchString = debounce(this.clearSearchString, searchDebounceDelay);
        this.renderSelectedValue();
        if (allowTyping) {
          this.eInput.onValueChange(function(value) {
            return _this.searchTextFromString(value);
          });
          this.addManagedListener(this.eWrapper, "focus", this.onWrapperFocus.bind(this));
        }
        this.addManagedListener(this.eWrapper, "focusout", this.onWrapperFocusOut.bind(this));
      };
      AgRichSelect2.prototype.createLoadingElement = function() {
        var eDocument = this.gridOptionsService.getDocument();
        var translate = this.localeService.getLocaleTextFunc();
        var el = eDocument.createElement("div");
        el.classList.add("ag-loading-text");
        el.innerText = translate("loadingOoo", "Loading...");
        this.eLoading = el;
      };
      AgRichSelect2.prototype.createListComponent = function() {
        var _this = this;
        this.listComponent = this.createBean(new VirtualList({ cssIdentifier: "rich-select" }));
        this.listComponent.setComponentCreator(this.createRowComponent.bind(this));
        this.listComponent.setParentComponent(this);
        this.addManagedListener(this.listComponent, Events.EVENT_FIELD_PICKER_VALUE_SELECTED, function(e) {
          _this.onListValueSelected(e.value, e.fromEnterKey);
        });
        var cellRowHeight = this.cellRowHeight;
        if (cellRowHeight) {
          this.listComponent.setRowHeight(cellRowHeight);
        }
        var eListGui = this.listComponent.getGui();
        var eListAriaEl = this.listComponent.getAriaElement();
        this.addManagedListener(eListGui, "mousemove", this.onPickerMouseMove.bind(this));
        this.addManagedListener(eListGui, "mousedown", function(e) {
          return e.preventDefault();
        });
        eListGui.classList.add("ag-rich-select-list");
        var listId = "ag-rich-select-list-" + this.listComponent.getCompId();
        eListAriaEl.setAttribute("id", listId);
        var translate = this.localeService.getLocaleTextFunc();
        var ariaLabel = translate(this.config.pickerAriaLabelKey, this.config.pickerAriaLabelValue);
        setAriaLabel(eListAriaEl, ariaLabel);
        setAriaControls(this.eWrapper, eListAriaEl);
      };
      AgRichSelect2.prototype.renderSelectedValue = function() {
        var _this = this;
        var _a = this, value = _a.value, eDisplayField = _a.eDisplayField, config = _a.config;
        var valueFormatted = this.config.valueFormatter ? this.config.valueFormatter(value) : value;
        if (config.allowTyping) {
          this.eInput.setValue(valueFormatted);
          return;
        }
        var userCompDetails;
        if (config.cellRenderer) {
          userCompDetails = this.userComponentFactory.getCellRendererDetails(this.config, {
            value,
            valueFormatted,
            api: this.gridOptionsService.api
          });
        }
        var userCompDetailsPromise;
        if (userCompDetails) {
          userCompDetailsPromise = userCompDetails.newAgStackInstance();
        }
        if (userCompDetailsPromise) {
          clearElement(eDisplayField);
          bindCellRendererToHtmlElement(userCompDetailsPromise, eDisplayField);
          userCompDetailsPromise.then(function(renderer) {
            _this.addDestroyFunc(function() {
              return _this.getContext().destroyBean(renderer);
            });
          });
        } else {
          if (exists(this.value)) {
            eDisplayField.innerText = valueFormatted;
            eDisplayField.classList.remove("ag-display-as-placeholder");
          } else {
            var placeholder = config.placeholder;
            if (exists(placeholder)) {
              eDisplayField.innerHTML = "" + escapeString(placeholder);
              eDisplayField.classList.add("ag-display-as-placeholder");
            } else {
              clearElement(eDisplayField);
            }
          }
        }
      };
      AgRichSelect2.prototype.getCurrentValueIndex = function() {
        var _a = this, currentList = _a.currentList, value = _a.value;
        if (value == null) {
          return -1;
        }
        for (var i = 0; i < currentList.length; i++) {
          if (currentList[i] === value) {
            return i;
          }
        }
        return -1;
      };
      AgRichSelect2.prototype.highlightFilterMatch = function() {
        var _this = this;
        var _a;
        (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.forEachRenderedRow(function(cmp, idx) {
          cmp.highlightString(_this.searchString);
        });
      };
      AgRichSelect2.prototype.highlightSelectedValue = function(index) {
        var _this = this;
        var _a;
        if (index == null) {
          index = this.getCurrentValueIndex();
        }
        this.highlightedItem = index;
        (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.forEachRenderedRow(function(cmp, idx) {
          var highlighted = index === -1 ? false : _this.highlightedItem === idx;
          cmp.updateHighlighted(highlighted);
        });
      };
      AgRichSelect2.prototype.setRowHeight = function(height) {
        if (height !== this.cellRowHeight) {
          this.cellRowHeight = height;
        }
        if (this.listComponent) {
          this.listComponent.setRowHeight(height);
        }
      };
      AgRichSelect2.prototype.createPickerComponent = function() {
        var values2 = this.values;
        if (values2) {
          this.setValueList({ valueList: values2 });
        }
        return this.listComponent;
      };
      AgRichSelect2.prototype.setSearchStringCreator = function(searchStringFn) {
        this.searchStringCreator = searchStringFn;
      };
      AgRichSelect2.prototype.setValueList = function(params) {
        var valueList = params.valueList, refresh = params.refresh;
        if (!this.listComponent) {
          return;
        }
        if (this.currentList === valueList) {
          return;
        }
        this.currentList = valueList;
        this.listComponent.setModel({
          getRowCount: function() {
            return valueList.length;
          },
          getRow: function(index) {
            return valueList[index];
          }
        });
        if (refresh) {
          if (!this.values) {
            this.values = valueList;
            if (this.isPickerDisplayed) {
              this.showCurrentValueInPicker();
            }
          } else {
            this.listComponent.refresh();
          }
        }
      };
      AgRichSelect2.prototype.showPicker = function() {
        _super.prototype.showPicker.call(this);
        this.showCurrentValueInPicker();
      };
      AgRichSelect2.prototype.showCurrentValueInPicker = function() {
        var _a, _b;
        if (!this.listComponent) {
          return;
        }
        if (!this.currentList) {
          if (this.isPickerDisplayed && this.eLoading) {
            this.listComponent.appendChild(this.eLoading);
          }
          return;
        }
        if ((_a = this.eLoading) === null || _a === void 0 ? void 0 : _a.offsetParent) {
          (_b = this.eLoading.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.eLoading);
        }
        var currentValueIndex = this.getCurrentValueIndex();
        if (currentValueIndex !== -1) {
          this.listComponent.refresh();
          this.listComponent.ensureIndexVisible(currentValueIndex);
          this.listComponent.refresh(true);
          this.highlightSelectedValue(currentValueIndex);
        } else {
          this.listComponent.refresh();
        }
      };
      AgRichSelect2.prototype.beforeHidePicker = function() {
        this.highlightedItem = -1;
        _super.prototype.beforeHidePicker.call(this);
      };
      AgRichSelect2.prototype.onWrapperFocus = function(e) {
        if (this.eInput) {
          this.eInput.getFocusableElement().focus();
        }
      };
      AgRichSelect2.prototype.onWrapperFocusOut = function(e) {
        if (!this.eWrapper.contains(e.relatedTarget)) {
          this.hidePicker();
        }
      };
      AgRichSelect2.prototype.buildSearchStringFromKeyboardEvent = function(searchKey) {
        var key = searchKey.key;
        if (key === KeyCode.BACKSPACE) {
          this.searchString = this.searchString.slice(0, -1);
          key = "";
        } else if (!isEventFromPrintableCharacter(searchKey)) {
          return;
        }
        searchKey.preventDefault();
        this.searchTextFromCharacter(key);
      };
      AgRichSelect2.prototype.searchTextFromCharacter = function(char) {
        this.searchString += char;
        this.runSearch();
        this.clearSearchString();
      };
      AgRichSelect2.prototype.searchTextFromString = function(str) {
        if (str == null) {
          str = "";
        }
        this.searchString = str;
        this.runSearch();
      };
      AgRichSelect2.prototype.buildSearchStrings = function(values2) {
        var _a = this.config.valueFormatter, valueFormatter = _a === void 0 ? function(value) {
          return value;
        } : _a;
        var searchStrings;
        if (typeof values2[0] === "number" || typeof values2[0] === "string") {
          searchStrings = values2.map(function(v) {
            return valueFormatter(v);
          });
        } else if (typeof values2[0] === "object" && this.searchStringCreator) {
          searchStrings = this.searchStringCreator(values2);
        }
        return searchStrings;
      };
      AgRichSelect2.prototype.getSuggestionsAndFilteredValues = function(searchValue, valueList) {
        var _this = this;
        var suggestions = [];
        var filteredValues = [];
        if (!searchValue.length) {
          return { suggestions, filteredValues };
        }
        var _a = this.config, allowTyping = _a.allowTyping, _b = _a.searchType, searchType = _b === void 0 ? "fuzzy" : _b, filterList = _a.filterList;
        var shouldFilterList = filterList && allowTyping;
        if (searchType === "fuzzy") {
          var fuzzySearchResult = fuzzySuggestions(this.searchString, valueList, true);
          suggestions = fuzzySearchResult.values;
          var indices = fuzzySearchResult.indices;
          if (shouldFilterList && indices.length) {
            for (var i = 0; i < indices.length; i++) {
              filteredValues.push(this.values[indices[i]]);
            }
          }
        } else {
          suggestions = valueList.filter(function(val, idx) {
            var currentValue = val.toLocaleLowerCase();
            var valueToMatch = _this.searchString.toLocaleLowerCase();
            var isMatch = searchType === "match" ? currentValue.startsWith(valueToMatch) : currentValue.indexOf(valueToMatch) !== -1;
            if (shouldFilterList && isMatch) {
              filteredValues.push(_this.values[idx]);
            }
            return isMatch;
          });
        }
        return { suggestions, filteredValues };
      };
      AgRichSelect2.prototype.filterListModel = function(filteredValues) {
        var _a = this.config, allowTyping = _a.allowTyping, filterList = _a.filterList;
        if (!allowTyping || !filterList) {
          return;
        }
        this.setValueList({ valueList: filteredValues, refresh: true });
      };
      AgRichSelect2.prototype.runSearch = function() {
        var _a, _b, _c;
        var values2 = this.values;
        var searchStrings = this.buildSearchStrings(values2);
        if (!searchStrings) {
          this.highlightSelectedValue(-1);
          return;
        }
        var _d = this.getSuggestionsAndFilteredValues(this.searchString, searchStrings), suggestions = _d.suggestions, filteredValues = _d.filteredValues;
        var _e = this.config, allowTyping = _e.allowTyping, filterList = _e.filterList, highlightMatch = _e.highlightMatch, _f = _e.searchType, searchType = _f === void 0 ? "fuzzy" : _f;
        var filterValueLen = filteredValues.length;
        var shouldFilter = !!(allowTyping && filterList && this.searchString !== "");
        if (shouldFilter) {
          this.filterListModel(shouldFilter ? filteredValues : values2);
        }
        if (suggestions.length) {
          var topSuggestionIndex = shouldFilter ? 0 : searchStrings.indexOf(suggestions[0]);
          this.selectListItem(topSuggestionIndex);
          if (highlightMatch && searchType !== "fuzzy") {
            this.highlightFilterMatch();
          }
        } else {
          this.highlightSelectedValue(-1);
          if (!shouldFilter || filterValueLen) {
            (_a = this.listComponent) === null || _a === void 0 ? void 0 : _a.ensureIndexVisible(0);
          } else if (shouldFilter) {
            this.getAriaElement().removeAttribute("data-active-option");
            var eListAriaEl = (_b = this.listComponent) === null || _b === void 0 ? void 0 : _b.getAriaElement();
            if (eListAriaEl) {
              setAriaActiveDescendant(eListAriaEl, null);
            }
          }
        }
        var eListGui = (_c = this.listComponent) === null || _c === void 0 ? void 0 : _c.getGui();
        eListGui === null || eListGui === void 0 ? void 0 : eListGui.classList.toggle("ag-hidden", shouldFilter && !filterValueLen);
      };
      AgRichSelect2.prototype.clearSearchString = function() {
        this.searchString = "";
      };
      AgRichSelect2.prototype.selectListItem = function(index, preventUnnecessaryScroll, skipRefresh) {
        if (!this.isPickerDisplayed || !this.listComponent || index < 0 || index >= this.currentList.length) {
          return;
        }
        var wasScrolled = this.listComponent.ensureIndexVisible(index, !preventUnnecessaryScroll);
        if (wasScrolled && !skipRefresh) {
          this.listComponent.refresh(true);
        }
        this.highlightSelectedValue(index);
      };
      AgRichSelect2.prototype.setValue = function(value, silent, fromPicker) {
        var index = this.currentList.indexOf(value);
        if (index === -1) {
          return this;
        }
        this.value = value;
        if (!fromPicker) {
          this.selectListItem(index);
        }
        this.renderSelectedValue();
        return _super.prototype.setValue.call(this, value, silent);
      };
      AgRichSelect2.prototype.createRowComponent = function(value) {
        var row = new RichSelectRow(this.config, this.eWrapper);
        row.setParentComponent(this.listComponent);
        this.getContext().createBean(row);
        row.setState(value);
        var _a = this.config, highlightMatch = _a.highlightMatch, _b = _a.searchType, searchType = _b === void 0 ? "fuzzy" : _b;
        if (highlightMatch && searchType !== "fuzzy") {
          row.highlightString(this.searchString);
        }
        return row;
      };
      AgRichSelect2.prototype.getRowForMouseEvent = function(e) {
        var listComponent = this.listComponent;
        if (!listComponent) {
          return -1;
        }
        var eGui = listComponent === null || listComponent === void 0 ? void 0 : listComponent.getGui();
        var rect = eGui.getBoundingClientRect();
        var scrollTop = listComponent.getScrollTop();
        var mouseY = e.clientY - rect.top + scrollTop;
        return Math.floor(mouseY / listComponent.getRowHeight());
      };
      AgRichSelect2.prototype.onPickerMouseMove = function(e) {
        if (!this.listComponent) {
          return;
        }
        var row = this.getRowForMouseEvent(e);
        if (row !== -1 && row != this.lastRowHovered) {
          this.lastRowHovered = row;
          this.selectListItem(row, true, true);
        }
      };
      AgRichSelect2.prototype.onNavigationKeyDown = function(event, key) {
        event.preventDefault();
        var isDown = key === KeyCode.DOWN;
        if (!this.isPickerDisplayed && isDown) {
          this.showPicker();
          return;
        }
        var oldIndex = this.highlightedItem;
        var diff = isDown ? 1 : -1;
        var newIndex = oldIndex === -1 ? 0 : oldIndex + diff;
        this.selectListItem(newIndex, false, true);
      };
      AgRichSelect2.prototype.onEnterKeyDown = function(e) {
        if (!this.isPickerDisplayed) {
          return;
        }
        e.preventDefault();
        this.onListValueSelected(this.currentList[this.highlightedItem], true);
      };
      AgRichSelect2.prototype.onTabKeyDown = function() {
        if (!this.isPickerDisplayed) {
          return;
        }
        this.setValue(this.currentList[this.highlightedItem], false, true);
      };
      AgRichSelect2.prototype.onListValueSelected = function(value, fromEnterKey) {
        this.setValue(value, false, true);
        this.dispatchPickerEvent(value, fromEnterKey);
        this.hidePicker();
      };
      AgRichSelect2.prototype.dispatchPickerEvent = function(value, fromEnterKey) {
        var event = {
          type: Events.EVENT_FIELD_PICKER_VALUE_SELECTED,
          fromEnterKey,
          value
        };
        this.dispatchEvent(event);
      };
      AgRichSelect2.prototype.getFocusableElement = function() {
        var allowTyping = this.config.allowTyping;
        if (allowTyping) {
          return this.eInput.getFocusableElement();
        }
        return _super.prototype.getFocusableElement.call(this);
      };
      AgRichSelect2.prototype.onKeyDown = function(event) {
        var key = event.key;
        var allowTyping = this.config.allowTyping;
        switch (key) {
          case KeyCode.LEFT:
          case KeyCode.RIGHT:
          case KeyCode.PAGE_HOME:
          case KeyCode.PAGE_END:
            if (!allowTyping) {
              event.preventDefault();
            }
            break;
          case KeyCode.PAGE_UP:
          case KeyCode.PAGE_DOWN:
            event.preventDefault();
            break;
          case KeyCode.DOWN:
          case KeyCode.UP:
            this.onNavigationKeyDown(event, key);
            break;
          case KeyCode.ESCAPE:
            if (this.isPickerDisplayed) {
              event.preventDefault();
              stopPropagationForAgGrid(event);
              this.hidePicker();
            }
            break;
          case KeyCode.ENTER:
            this.onEnterKeyDown(event);
            break;
          case KeyCode.TAB:
            this.onTabKeyDown();
            break;
          default:
            if (!allowTyping) {
              this.buildSearchStringFromKeyboardEvent(event);
            }
        }
      };
      AgRichSelect2.prototype.destroy = function() {
        if (this.listComponent) {
          this.destroyBean(this.listComponent);
          this.listComponent = void 0;
        }
        this.eLoading = void 0;
        _super.prototype.destroy.call(this);
      };
      __decorate$$([
        Autowired("userComponentFactory")
      ], AgRichSelect2.prototype, "userComponentFactory", void 0);
      __decorate$$([
        RefSelector("eInput")
      ], AgRichSelect2.prototype, "eInput", void 0);
      return AgRichSelect2;
    }(AgPickerField);
    __extends$Z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$_ = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgSlider = /** @class */
    function(_super) {
      __extends$Z(AgSlider2, _super);
      function AgSlider2(config) {
        var _this = _super.call(this, config, AgSlider2.TEMPLATE) || this;
        _this.labelAlignment = "top";
        return _this;
      }
      AgSlider2.prototype.init = function() {
        this.eSlider.addCssClass("ag-slider-field");
      };
      AgSlider2.prototype.onValueChange = function(callbackFn) {
        var _this = this;
        var eventChanged = Events.EVENT_FIELD_VALUE_CHANGED;
        this.addManagedListener(this.eText, eventChanged, function() {
          var textValue = parseFloat(_this.eText.getValue());
          _this.eSlider.setValue(textValue.toString(), true);
          callbackFn(textValue || 0);
        });
        this.addManagedListener(this.eSlider, eventChanged, function() {
          var sliderValue = _this.eSlider.getValue();
          _this.eText.setValue(sliderValue, true);
          callbackFn(parseFloat(sliderValue));
        });
        return this;
      };
      AgSlider2.prototype.setSliderWidth = function(width) {
        this.eSlider.setWidth(width);
        return this;
      };
      AgSlider2.prototype.setTextFieldWidth = function(width) {
        this.eText.setWidth(width);
        return this;
      };
      AgSlider2.prototype.setMinValue = function(minValue) {
        this.eSlider.setMinValue(minValue);
        this.eText.setMin(minValue);
        return this;
      };
      AgSlider2.prototype.setMaxValue = function(maxValue) {
        this.eSlider.setMaxValue(maxValue);
        this.eText.setMax(maxValue);
        return this;
      };
      AgSlider2.prototype.getValue = function() {
        return this.eText.getValue();
      };
      AgSlider2.prototype.setValue = function(value) {
        if (this.getValue() === value) {
          return this;
        }
        this.eText.setValue(value, true);
        this.eSlider.setValue(value, true);
        this.dispatchEvent({ type: Events.EVENT_FIELD_VALUE_CHANGED });
        return this;
      };
      AgSlider2.prototype.setStep = function(step) {
        this.eSlider.setStep(step);
        this.eText.setStep(step);
        return this;
      };
      AgSlider2.TEMPLATE = '<div class="ag-slider">\n            <label ref="eLabel"></label>\n            <div class="ag-wrapper ag-slider-wrapper">\n                <ag-input-range ref="eSlider"></ag-input-range>\n                <ag-input-number-field ref="eText"></ag-input-number-field>\n            </div>\n        </div>';
      __decorate$_([
        RefSelector("eLabel")
      ], AgSlider2.prototype, "eLabel", void 0);
      __decorate$_([
        RefSelector("eSlider")
      ], AgSlider2.prototype, "eSlider", void 0);
      __decorate$_([
        RefSelector("eText")
      ], AgSlider2.prototype, "eText", void 0);
      __decorate$_([
        PostConstruct
      ], AgSlider2.prototype, "init", null);
      return AgSlider2;
    }(AgAbstractLabel);
    __extends$Y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$Z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgGroupComponent = /** @class */
    function(_super) {
      __extends$Y(AgGroupComponent2, _super);
      function AgGroupComponent2(params) {
        if (params === void 0) {
          params = {};
        }
        var _this = _super.call(this, AgGroupComponent2.getTemplate(params)) || this;
        _this.suppressEnabledCheckbox = true;
        _this.suppressOpenCloseIcons = false;
        var title = params.title, enabled = params.enabled, items = params.items, suppressEnabledCheckbox = params.suppressEnabledCheckbox, suppressOpenCloseIcons = params.suppressOpenCloseIcons;
        _this.title = title;
        _this.cssIdentifier = params.cssIdentifier || "default";
        _this.enabled = enabled != null ? enabled : true;
        _this.items = items || [];
        _this.alignItems = params.alignItems || "center";
        if (suppressEnabledCheckbox != null) {
          _this.suppressEnabledCheckbox = suppressEnabledCheckbox;
        }
        if (suppressOpenCloseIcons != null) {
          _this.suppressOpenCloseIcons = suppressOpenCloseIcons;
        }
        return _this;
      }
      AgGroupComponent2.getTemplate = function(params) {
        var cssIdentifier = params.cssIdentifier || "default";
        var direction = params.direction || "vertical";
        return (
          /* html */
          '<div class="ag-group ag-' + cssIdentifier + '-group" role="presentation">\n            <div class="ag-group-title-bar ag-' + cssIdentifier + '-group-title-bar ag-unselectable" ref="eTitleBar" role="button">\n                <span class="ag-group-title-bar-icon ag-' + cssIdentifier + '-group-title-bar-icon" ref="eGroupOpenedIcon" role="presentation"></span>\n                <span class="ag-group-title-bar-icon ag-' + cssIdentifier + '-group-title-bar-icon" ref="eGroupClosedIcon" role="presentation"></span>\n                <span ref="eTitle" class="ag-group-title ag-' + cssIdentifier + '-group-title"></span>\n            </div>\n            <div ref="eToolbar" class="ag-group-toolbar ag-' + cssIdentifier + '-group-toolbar">\n                <ag-checkbox ref="cbGroupEnabled"></ag-checkbox>\n            </div>\n            <div ref="eContainer" class="ag-group-container ag-group-container-' + direction + " ag-" + cssIdentifier + '-group-container"></div>\n        </div>'
        );
      };
      AgGroupComponent2.prototype.postConstruct = function() {
        if (this.items.length) {
          var initialItems = this.items;
          this.items = [];
          this.addItems(initialItems);
        }
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        this.cbGroupEnabled.setLabel(localeTextFunc("enabled", "Enabled"));
        if (this.title) {
          this.setTitle(this.title);
        }
        if (this.enabled) {
          this.setEnabled(this.enabled);
        }
        this.setAlignItems(this.alignItems);
        this.hideEnabledCheckbox(this.suppressEnabledCheckbox);
        this.hideOpenCloseIcons(this.suppressOpenCloseIcons);
        this.setupExpandContract();
        this.refreshAriaStatus();
        this.refreshChildDisplay();
      };
      AgGroupComponent2.prototype.setupExpandContract = function() {
        var _this = this;
        this.eGroupClosedIcon.appendChild(createIcon("columnSelectClosed", this.gridOptionsService, null));
        this.eGroupOpenedIcon.appendChild(createIcon("columnSelectOpen", this.gridOptionsService, null));
        this.addManagedListener(this.eTitleBar, "click", function() {
          return _this.toggleGroupExpand();
        });
        this.addManagedListener(this.eTitleBar, "keydown", function(e) {
          switch (e.key) {
            case KeyCode.ENTER:
            case KeyCode.SPACE:
              e.preventDefault();
              _this.toggleGroupExpand();
              break;
            case KeyCode.RIGHT:
            case KeyCode.LEFT:
              e.preventDefault();
              _this.toggleGroupExpand(e.key === KeyCode.RIGHT);
              break;
          }
        });
      };
      AgGroupComponent2.prototype.refreshAriaStatus = function() {
        if (!this.suppressOpenCloseIcons) {
          setAriaExpanded(this.eTitleBar, this.expanded);
        }
      };
      AgGroupComponent2.prototype.refreshChildDisplay = function() {
        var showIcon = !this.suppressOpenCloseIcons;
        setDisplayed(this.eToolbar, this.expanded && !this.suppressEnabledCheckbox);
        setDisplayed(this.eGroupOpenedIcon, showIcon && this.expanded);
        setDisplayed(this.eGroupClosedIcon, showIcon && !this.expanded);
      };
      AgGroupComponent2.prototype.isExpanded = function() {
        return this.expanded;
      };
      AgGroupComponent2.prototype.setAlignItems = function(alignment) {
        if (this.alignItems !== alignment) {
          this.removeCssClass("ag-group-item-alignment-" + this.alignItems);
        }
        this.alignItems = alignment;
        var newCls = "ag-group-item-alignment-" + this.alignItems;
        this.addCssClass(newCls);
        return this;
      };
      AgGroupComponent2.prototype.toggleGroupExpand = function(expanded) {
        if (this.suppressOpenCloseIcons) {
          this.expanded = true;
          this.refreshChildDisplay();
          setDisplayed(this.eContainer, true);
          return this;
        }
        expanded = expanded != null ? expanded : !this.expanded;
        if (this.expanded === expanded) {
          return this;
        }
        this.expanded = expanded;
        this.refreshAriaStatus();
        this.refreshChildDisplay();
        setDisplayed(this.eContainer, expanded);
        this.dispatchEvent({ type: this.expanded ? AgGroupComponent2.EVENT_EXPANDED : AgGroupComponent2.EVENT_COLLAPSED });
        return this;
      };
      AgGroupComponent2.prototype.addItems = function(items) {
        var _this = this;
        items.forEach(function(item) {
          return _this.addItem(item);
        });
      };
      AgGroupComponent2.prototype.addItem = function(item) {
        var container = this.eContainer;
        var el = item instanceof Component ? item.getGui() : item;
        el.classList.add("ag-group-item", "ag-" + this.cssIdentifier + "-group-item");
        container.appendChild(el);
        this.items.push(el);
      };
      AgGroupComponent2.prototype.hideItem = function(hide, index) {
        var itemToHide = this.items[index];
        setDisplayed(itemToHide, !hide);
      };
      AgGroupComponent2.prototype.setTitle = function(title) {
        this.eTitle.innerText = title;
        return this;
      };
      AgGroupComponent2.prototype.addCssClassToTitleBar = function(cssClass) {
        this.eTitleBar.classList.add(cssClass);
      };
      AgGroupComponent2.prototype.setEnabled = function(enabled, skipToggle) {
        this.enabled = enabled;
        this.refreshDisabledStyles();
        this.toggleGroupExpand(enabled);
        if (!skipToggle) {
          this.cbGroupEnabled.setValue(enabled);
        }
        return this;
      };
      AgGroupComponent2.prototype.isEnabled = function() {
        return this.enabled;
      };
      AgGroupComponent2.prototype.onEnableChange = function(callbackFn) {
        var _this = this;
        this.cbGroupEnabled.onValueChange(function(newSelection) {
          _this.setEnabled(newSelection, true);
          callbackFn(newSelection);
        });
        return this;
      };
      AgGroupComponent2.prototype.hideEnabledCheckbox = function(hide) {
        this.suppressEnabledCheckbox = hide;
        this.refreshChildDisplay();
        this.refreshDisabledStyles();
        return this;
      };
      AgGroupComponent2.prototype.hideOpenCloseIcons = function(hide) {
        this.suppressOpenCloseIcons = hide;
        if (hide) {
          this.toggleGroupExpand(true);
        }
        return this;
      };
      AgGroupComponent2.prototype.refreshDisabledStyles = function() {
        this.addOrRemoveCssClass("ag-disabled", !this.enabled);
        if (this.suppressEnabledCheckbox && !this.enabled) {
          this.eTitleBar.classList.add("ag-disabled-group-title-bar");
          this.eTitleBar.removeAttribute("tabindex");
        } else {
          this.eTitleBar.classList.remove("ag-disabled-group-title-bar");
          this.eTitleBar.setAttribute("tabindex", "0");
        }
        this.eContainer.classList.toggle("ag-disabled-group-container", !this.enabled);
      };
      AgGroupComponent2.EVENT_EXPANDED = "expanded";
      AgGroupComponent2.EVENT_COLLAPSED = "collapsed";
      __decorate$Z([
        RefSelector("eTitleBar")
      ], AgGroupComponent2.prototype, "eTitleBar", void 0);
      __decorate$Z([
        RefSelector("eGroupOpenedIcon")
      ], AgGroupComponent2.prototype, "eGroupOpenedIcon", void 0);
      __decorate$Z([
        RefSelector("eGroupClosedIcon")
      ], AgGroupComponent2.prototype, "eGroupClosedIcon", void 0);
      __decorate$Z([
        RefSelector("eToolbar")
      ], AgGroupComponent2.prototype, "eToolbar", void 0);
      __decorate$Z([
        RefSelector("cbGroupEnabled")
      ], AgGroupComponent2.prototype, "cbGroupEnabled", void 0);
      __decorate$Z([
        RefSelector("eTitle")
      ], AgGroupComponent2.prototype, "eTitle", void 0);
      __decorate$Z([
        RefSelector("eContainer")
      ], AgGroupComponent2.prototype, "eContainer", void 0);
      __decorate$Z([
        PostConstruct
      ], AgGroupComponent2.prototype, "postConstruct", null);
      return AgGroupComponent2;
    }(Component);
    __extends$X = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$5 = function() {
      __assign$5 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$5.apply(this, arguments);
    };
    __decorate$Y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgMenuList = /** @class */
    function(_super) {
      __extends$X(AgMenuList2, _super);
      function AgMenuList2(level) {
        if (level === void 0) {
          level = 1;
        }
        var _this = _super.call(
          this,
          /* html */
          '<div class="ag-menu-list" role="tree"></div>'
        ) || this;
        _this.level = level;
        _this.menuItems = [];
        return _this;
      }
      AgMenuList2.prototype.postConstruct = function() {
        var _this = this;
        this.initialiseTabGuard({
          onTabKeyDown: function(e) {
            return _this.onTabKeyDown(e);
          },
          handleKeyDown: function(e) {
            return _this.handleKeyDown(e);
          }
        });
      };
      AgMenuList2.prototype.onTabKeyDown = function(e) {
        var parent = this.getParentComponent();
        var parentGui = parent && parent.getGui();
        var isManaged = parentGui && parentGui.classList.contains("ag-focus-managed");
        if (!isManaged) {
          e.preventDefault();
        }
        if (e.shiftKey) {
          this.closeIfIsChild(e);
        }
      };
      AgMenuList2.prototype.handleKeyDown = function(e) {
        switch (e.key) {
          case KeyCode.UP:
          case KeyCode.RIGHT:
          case KeyCode.DOWN:
          case KeyCode.LEFT:
            e.preventDefault();
            this.handleNavKey(e.key);
            break;
          case KeyCode.ESCAPE:
            var topMenu = this.findTopMenu();
            if (topMenu) {
              this.focusService.focusInto(topMenu.getGui());
            }
            break;
        }
      };
      AgMenuList2.prototype.clearActiveItem = function() {
        if (this.activeMenuItem) {
          this.activeMenuItem.deactivate();
          this.activeMenuItem = null;
        }
      };
      AgMenuList2.prototype.addMenuItems = function(menuItems) {
        var _this = this;
        if (menuItems == null) {
          return;
        }
        menuItems.forEach(function(menuItemOrString) {
          if (menuItemOrString === "separator") {
            _this.addSeparator();
          } else if (typeof menuItemOrString === "string") {
            console.warn("AG Grid: unrecognised menu item " + menuItemOrString);
          } else {
            _this.addItem(menuItemOrString);
          }
        });
      };
      AgMenuList2.prototype.addItem = function(menuItemDef) {
        var _this = this;
        var menuItem = this.createManagedBean(new AgMenuItemComponent(__assign$5(__assign$5({}, menuItemDef), { isAnotherSubMenuOpen: function() {
          return _this.menuItems.some(function(m) {
            return m.isSubMenuOpen();
          });
        } })));
        menuItem.setParentComponent(this);
        setAriaLevel(menuItem.getGui(), this.level);
        this.menuItems.push(menuItem);
        this.appendChild(menuItem.getGui());
        this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_SELECTED, function(event) {
          _this.dispatchEvent(event);
        });
        this.addManagedListener(menuItem, AgMenuItemComponent.EVENT_MENU_ITEM_ACTIVATED, function(event) {
          if (_this.activeMenuItem && _this.activeMenuItem !== event.menuItem) {
            _this.activeMenuItem.deactivate();
          }
          _this.activeMenuItem = event.menuItem;
        });
      };
      AgMenuList2.prototype.activateFirstItem = function() {
        var item = this.menuItems.filter(function(currentItem) {
          return !currentItem.isDisabled();
        })[0];
        if (!item) {
          return;
        }
        item.activate();
      };
      AgMenuList2.prototype.addSeparator = function() {
        var separatorHtml = (
          /* html */
          '\n            <div class="ag-menu-separator" aria-hidden="true">\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n                <div class="ag-menu-separator-part"></div>\n            </div>'
        );
        this.appendChild(loadTemplate(separatorHtml));
      };
      AgMenuList2.prototype.findTopMenu = function() {
        var parent = this.getParentComponent();
        if (!parent && this instanceof AgMenuList2) {
          return this;
        }
        while (true) {
          var nextParent = parent && parent.getParentComponent && parent.getParentComponent();
          if (!nextParent || !(nextParent instanceof AgMenuList2 || nextParent instanceof AgMenuItemComponent)) {
            break;
          }
          parent = nextParent;
        }
        return parent instanceof AgMenuList2 ? parent : void 0;
      };
      AgMenuList2.prototype.handleNavKey = function(key) {
        switch (key) {
          case KeyCode.UP:
          case KeyCode.DOWN:
            var nextItem = this.findNextItem(key === KeyCode.UP);
            if (nextItem && nextItem !== this.activeMenuItem) {
              nextItem.activate();
            }
            return;
        }
        var left = this.gridOptionsService.is("enableRtl") ? KeyCode.RIGHT : KeyCode.LEFT;
        if (key === left) {
          this.closeIfIsChild();
        } else {
          this.openChild();
        }
      };
      AgMenuList2.prototype.closeIfIsChild = function(e) {
        var parentItem = this.getParentComponent();
        if (parentItem && parentItem instanceof AgMenuItemComponent) {
          if (e) {
            e.preventDefault();
          }
          parentItem.closeSubMenu();
          parentItem.getGui().focus();
        }
      };
      AgMenuList2.prototype.openChild = function() {
        if (this.activeMenuItem) {
          this.activeMenuItem.openSubMenu(true);
        }
      };
      AgMenuList2.prototype.findNextItem = function(up) {
        var items = this.menuItems.filter(function(item2) {
          return !item2.isDisabled();
        });
        if (!items.length) {
          return;
        }
        if (!this.activeMenuItem) {
          return up ? last(items) : items[0];
        }
        if (up) {
          items.reverse();
        }
        var nextItem;
        var foundCurrent = false;
        for (var i = 0; i < items.length; i++) {
          var item = items[i];
          if (!foundCurrent) {
            if (item === this.activeMenuItem) {
              foundCurrent = true;
            }
            continue;
          }
          nextItem = item;
          break;
        }
        return nextItem || this.activeMenuItem;
      };
      AgMenuList2.prototype.destroy = function() {
        this.clearActiveItem();
        _super.prototype.destroy.call(this);
      };
      __decorate$Y([
        Autowired("focusService")
      ], AgMenuList2.prototype, "focusService", void 0);
      __decorate$Y([
        PostConstruct
      ], AgMenuList2.prototype, "postConstruct", null);
      return AgMenuList2;
    }(TabGuardComp);
    __extends$W = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$X = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgMenuPanel = /** @class */
    function(_super) {
      __extends$W(AgMenuPanel2, _super);
      function AgMenuPanel2(wrappedComponent) {
        var _this = _super.call(this) || this;
        _this.wrappedComponent = wrappedComponent;
        _this.setTemplateFromElement(wrappedComponent.getGui());
        return _this;
      }
      AgMenuPanel2.prototype.postConstruct = function() {
        var _this = this;
        this.initialiseTabGuard({
          onTabKeyDown: function(e) {
            return _this.onTabKeyDown(e);
          },
          handleKeyDown: function(e) {
            return _this.handleKeyDown(e);
          }
        });
      };
      AgMenuPanel2.prototype.handleKeyDown = function(e) {
        if (e.key === KeyCode.ESCAPE) {
          this.closePanel();
        }
      };
      AgMenuPanel2.prototype.onTabKeyDown = function(e) {
        if (e.defaultPrevented) {
          return;
        }
        this.closePanel();
        e.preventDefault();
      };
      AgMenuPanel2.prototype.closePanel = function() {
        var menuItem = this.parentComponent;
        menuItem.closeSubMenu();
        setTimeout(function() {
          return menuItem.getGui().focus();
        }, 0);
      };
      __decorate$X([
        PostConstruct
      ], AgMenuPanel2.prototype, "postConstruct", null);
      return AgMenuPanel2;
    }(TabGuardComp);
    __extends$V = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$W = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgMenuItemComponent = /** @class */
    function(_super) {
      __extends$V(AgMenuItemComponent2, _super);
      function AgMenuItemComponent2(params) {
        var _this = _super.call(this) || this;
        _this.params = params;
        _this.isActive = false;
        _this.subMenuIsOpen = false;
        _this.setTemplate(
          /* html */
          '<div class="' + _this.getClassName() + '" tabindex="-1" role="treeitem"></div>'
        );
        return _this;
      }
      AgMenuItemComponent2.prototype.init = function() {
        var _this = this;
        this.addIcon();
        this.addName();
        this.addShortcut();
        this.addSubMenu();
        this.addTooltip();
        var eGui = this.getGui();
        if (this.params.disabled) {
          this.addCssClass(this.getClassName("disabled"));
          setAriaDisabled(eGui, true);
        } else {
          this.addGuiEventListener("click", function(e) {
            return _this.onItemSelected(e);
          });
          this.addGuiEventListener("keydown", function(e) {
            if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {
              e.preventDefault();
              _this.onItemSelected(e);
            }
          });
          this.addGuiEventListener("mousedown", function(e) {
            e.stopPropagation();
            e.preventDefault();
          });
          this.addGuiEventListener("mouseenter", function() {
            return _this.onMouseEnter();
          });
          this.addGuiEventListener("mouseleave", function() {
            return _this.onMouseLeave();
          });
        }
        if (this.params.cssClasses) {
          this.params.cssClasses.forEach(function(it) {
            return _this.addCssClass(it);
          });
        }
      };
      AgMenuItemComponent2.prototype.isDisabled = function() {
        return !!this.params.disabled;
      };
      AgMenuItemComponent2.prototype.openSubMenu = function(activateFirstItem) {
        var _this = this;
        if (activateFirstItem === void 0) {
          activateFirstItem = false;
        }
        this.closeSubMenu();
        if (!this.params.subMenu) {
          return;
        }
        var ePopup = loadTemplate(
          /* html */
          '<div class="ag-menu" role="presentation"></div>'
        );
        var destroySubMenu;
        if (this.params.subMenu instanceof Array) {
          var currentLevel = getAriaLevel(this.getGui());
          var nextLevel = isNaN(currentLevel) ? 1 : currentLevel + 1;
          var childMenu_1 = this.createBean(new AgMenuList(nextLevel));
          childMenu_1.setParentComponent(this);
          childMenu_1.addMenuItems(this.params.subMenu);
          ePopup.appendChild(childMenu_1.getGui());
          this.addManagedListener(childMenu_1, AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED, function(e) {
            return _this.dispatchEvent(e);
          });
          childMenu_1.addGuiEventListener("mouseenter", function() {
            return _this.cancelDeactivate();
          });
          destroySubMenu = function() {
            return _this.destroyBean(childMenu_1);
          };
          if (activateFirstItem) {
            setTimeout(function() {
              return childMenu_1.activateFirstItem();
            }, 0);
          }
        } else {
          var subMenu_1 = this.params.subMenu;
          var menuPanel = this.createBean(new AgMenuPanel(subMenu_1));
          menuPanel.setParentComponent(this);
          var subMenuGui_1 = menuPanel.getGui();
          var mouseEvent_1 = "mouseenter";
          var mouseEnterListener_1 = function() {
            return _this.cancelDeactivate();
          };
          subMenuGui_1.addEventListener(mouseEvent_1, mouseEnterListener_1);
          destroySubMenu = function() {
            return subMenuGui_1.removeEventListener(mouseEvent_1, mouseEnterListener_1);
          };
          ePopup.appendChild(subMenuGui_1);
          if (subMenu_1.afterGuiAttached) {
            setTimeout(function() {
              return subMenu_1.afterGuiAttached();
            }, 0);
          }
        }
        var eGui = this.getGui();
        var positionCallback = this.popupService.positionPopupForMenu.bind(this.popupService, { eventSource: eGui, ePopup });
        var translate = this.localeService.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          modal: true,
          eChild: ePopup,
          positionCallback,
          anchorToElement: eGui,
          ariaLabel: translate("ariaLabelSubMenu", "SubMenu")
        });
        this.subMenuIsOpen = true;
        setAriaExpanded(eGui, true);
        this.hideSubMenu = function() {
          if (addPopupRes) {
            addPopupRes.hideFunc();
          }
          _this.subMenuIsOpen = false;
          setAriaExpanded(eGui, false);
          destroySubMenu();
        };
      };
      AgMenuItemComponent2.prototype.closeSubMenu = function() {
        if (!this.hideSubMenu) {
          return;
        }
        this.hideSubMenu();
        this.hideSubMenu = null;
        setAriaExpanded(this.getGui(), false);
      };
      AgMenuItemComponent2.prototype.isSubMenuOpen = function() {
        return this.subMenuIsOpen;
      };
      AgMenuItemComponent2.prototype.activate = function(openSubMenu) {
        var _this = this;
        this.cancelActivate();
        if (this.params.disabled) {
          return;
        }
        this.isActive = true;
        this.addCssClass(this.getClassName("active"));
        this.getGui().focus();
        if (openSubMenu && this.params.subMenu) {
          window.setTimeout(function() {
            if (_this.isAlive() && _this.isActive) {
              _this.openSubMenu();
            }
          }, 300);
        }
        this.onItemActivated();
      };
      AgMenuItemComponent2.prototype.deactivate = function() {
        this.cancelDeactivate();
        this.removeCssClass(this.getClassName("active"));
        this.isActive = false;
        if (this.subMenuIsOpen) {
          this.hideSubMenu();
        }
      };
      AgMenuItemComponent2.prototype.addIcon = function() {
        if (!this.params.checked && !this.params.icon && this.params.isCompact) {
          return;
        }
        var icon = loadTemplate(
          /* html */
          '<span ref="eIcon" class="' + this.getClassName("part") + " " + this.getClassName("icon") + '" role="presentation"></span>'
        );
        if (this.params.checked) {
          icon.appendChild(createIconNoSpan("check", this.gridOptionsService));
        } else if (this.params.icon) {
          if (isNodeOrElement(this.params.icon)) {
            icon.appendChild(this.params.icon);
          } else if (typeof this.params.icon === "string") {
            icon.innerHTML = this.params.icon;
          } else {
            console.warn("AG Grid: menu item icon must be DOM node or string");
          }
        }
        this.getGui().appendChild(icon);
      };
      AgMenuItemComponent2.prototype.addName = function() {
        if (!this.params.name && this.params.isCompact) {
          return;
        }
        var name = loadTemplate(
          /* html */
          '<span ref="eName" class="' + this.getClassName("part") + " " + this.getClassName("text") + '">' + (this.params.name || "") + "</span>"
        );
        this.getGui().appendChild(name);
      };
      AgMenuItemComponent2.prototype.addTooltip = function() {
        if (!this.params.tooltip) {
          return;
        }
        this.tooltip = this.params.tooltip;
        if (this.gridOptionsService.is("enableBrowserTooltips")) {
          this.getGui().setAttribute("title", this.tooltip);
        } else {
          this.createManagedBean(new CustomTooltipFeature(this));
        }
      };
      AgMenuItemComponent2.prototype.getTooltipParams = function() {
        return {
          location: "menu",
          value: this.tooltip
        };
      };
      AgMenuItemComponent2.prototype.addShortcut = function() {
        if (!this.params.shortcut && this.params.isCompact) {
          return;
        }
        var shortcut = loadTemplate(
          /* html */
          '<span ref="eShortcut" class="' + this.getClassName("part") + " " + this.getClassName("shortcut") + '">' + (this.params.shortcut || "") + "</span>"
        );
        this.getGui().appendChild(shortcut);
      };
      AgMenuItemComponent2.prototype.addSubMenu = function() {
        if (!this.params.subMenu && this.params.isCompact) {
          return;
        }
        var pointer = loadTemplate(
          /* html */
          '<span ref="ePopupPointer" class="' + this.getClassName("part") + " " + this.getClassName("popup-pointer") + '"></span>'
        );
        var eGui = this.getGui();
        if (this.params.subMenu) {
          var iconName = this.gridOptionsService.is("enableRtl") ? "smallLeft" : "smallRight";
          setAriaExpanded(eGui, false);
          pointer.appendChild(createIconNoSpan(iconName, this.gridOptionsService));
        }
        eGui.appendChild(pointer);
      };
      AgMenuItemComponent2.prototype.onItemSelected = function(event) {
        if (this.params.action) {
          this.params.action();
        } else {
          this.openSubMenu(event && event.type === "keydown");
        }
        if (this.params.subMenu && !this.params.action) {
          return;
        }
        var e = {
          type: AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED,
          action: this.params.action,
          checked: this.params.checked,
          cssClasses: this.params.cssClasses,
          disabled: this.params.disabled,
          icon: this.params.icon,
          name: this.params.name,
          shortcut: this.params.shortcut,
          subMenu: this.params.subMenu,
          tooltip: this.params.tooltip,
          event
        };
        this.dispatchEvent(e);
      };
      AgMenuItemComponent2.prototype.onItemActivated = function() {
        var event = {
          type: AgMenuItemComponent2.EVENT_MENU_ITEM_ACTIVATED,
          menuItem: this
        };
        this.dispatchEvent(event);
      };
      AgMenuItemComponent2.prototype.cancelActivate = function() {
        if (this.activateTimeoutId) {
          window.clearTimeout(this.activateTimeoutId);
          this.activateTimeoutId = 0;
        }
      };
      AgMenuItemComponent2.prototype.cancelDeactivate = function() {
        if (this.deactivateTimeoutId) {
          window.clearTimeout(this.deactivateTimeoutId);
          this.deactivateTimeoutId = 0;
        }
      };
      AgMenuItemComponent2.prototype.onMouseEnter = function() {
        var _this = this;
        this.cancelDeactivate();
        if (this.params.isAnotherSubMenuOpen()) {
          this.activateTimeoutId = window.setTimeout(function() {
            return _this.activate(true);
          }, AgMenuItemComponent2.ACTIVATION_DELAY);
        } else {
          this.activate(true);
        }
      };
      AgMenuItemComponent2.prototype.onMouseLeave = function() {
        var _this = this;
        this.cancelActivate();
        if (this.isSubMenuOpen()) {
          this.deactivateTimeoutId = window.setTimeout(function() {
            return _this.deactivate();
          }, AgMenuItemComponent2.ACTIVATION_DELAY);
        } else {
          this.deactivate();
        }
      };
      AgMenuItemComponent2.prototype.getClassName = function(suffix) {
        var prefix = this.params.isCompact ? "ag-compact-menu-option" : "ag-menu-option";
        return suffix ? prefix + "-" + suffix : prefix;
      };
      AgMenuItemComponent2.EVENT_MENU_ITEM_SELECTED = "menuItemSelected";
      AgMenuItemComponent2.EVENT_MENU_ITEM_ACTIVATED = "menuItemActivated";
      AgMenuItemComponent2.ACTIVATION_DELAY = 80;
      __decorate$W([
        Autowired("popupService")
      ], AgMenuItemComponent2.prototype, "popupService", void 0);
      __decorate$W([
        PostConstruct
      ], AgMenuItemComponent2.prototype, "init", null);
      return AgMenuItemComponent2;
    }(Component);
    __extends$U = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$V = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgPanel = /** @class */
    function(_super) {
      __extends$U(AgPanel2, _super);
      function AgPanel2(config) {
        var _this = _super.call(this, AgPanel2.getTemplate(config)) || this;
        _this.closable = true;
        _this.config = config;
        return _this;
      }
      AgPanel2.getTemplate = function(config) {
        var cssIdentifier = config && config.cssIdentifier || "default";
        return (
          /* html */
          '<div class="ag-panel ag-' + cssIdentifier + '-panel" tabindex="-1">\n            <div ref="eTitleBar" class="ag-panel-title-bar ag-' + cssIdentifier + '-panel-title-bar ag-unselectable">\n                <span ref="eTitle" class="ag-panel-title-bar-title ag-' + cssIdentifier + '-panel-title-bar-title"></span>\n                <div ref="eTitleBarButtons" class="ag-panel-title-bar-buttons ag-' + cssIdentifier + '-panel-title-bar-buttons"></div>\n            </div>\n            <div ref="eContentWrapper" class="ag-panel-content-wrapper ag-' + cssIdentifier + '-panel-content-wrapper"></div>\n        </div>'
        );
      };
      AgPanel2.prototype.postConstruct = function() {
        var _this = this;
        var _a = this.config, component = _a.component, closable = _a.closable, hideTitleBar = _a.hideTitleBar, title = _a.title, _b = _a.minWidth, minWidth = _b === void 0 ? 250 : _b, width = _a.width, _c = _a.minHeight, minHeight = _c === void 0 ? 250 : _c, height = _a.height, centered = _a.centered, popup = _a.popup, x = _a.x, y = _a.y;
        this.positionableFeature = new PositionableFeature(this.getGui(), {
          minWidth,
          width,
          minHeight,
          height,
          centered,
          x,
          y,
          popup,
          calculateTopBuffer: function() {
            return _this.positionableFeature.getHeight() - _this.getBodyHeight();
          }
        });
        this.createManagedBean(this.positionableFeature);
        var eGui = this.getGui();
        if (component) {
          this.setBodyComponent(component);
        }
        if (!hideTitleBar) {
          if (title) {
            this.setTitle(title);
          }
          this.setClosable(closable != null ? closable : this.closable);
        } else {
          setDisplayed(this.eTitleBar, false);
        }
        this.addManagedListener(this.eTitleBar, "mousedown", function(e) {
          var eDocument = _this.gridOptionsService.getDocument();
          if (eGui.contains(e.relatedTarget) || eGui.contains(eDocument.activeElement) || _this.eTitleBarButtons.contains(e.target)) {
            e.preventDefault();
            return;
          }
          var focusEl = _this.eContentWrapper.querySelector("button, [href], input, select, textarea, [tabindex]");
          if (focusEl) {
            focusEl.focus();
          }
        });
        if (popup && this.positionableFeature.isPositioned()) {
          return;
        }
        if (this.renderComponent) {
          this.renderComponent();
        }
        this.positionableFeature.initialisePosition();
        this.eContentWrapper.style.height = "0";
      };
      AgPanel2.prototype.renderComponent = function() {
        var _this = this;
        var eGui = this.getGui();
        eGui.focus();
        this.close = function() {
          eGui.parentElement.removeChild(eGui);
          _this.destroy();
        };
      };
      AgPanel2.prototype.getHeight = function() {
        return this.positionableFeature.getHeight();
      };
      AgPanel2.prototype.setHeight = function(height) {
        this.positionableFeature.setHeight(height);
      };
      AgPanel2.prototype.getWidth = function() {
        return this.positionableFeature.getWidth();
      };
      AgPanel2.prototype.setWidth = function(width) {
        this.positionableFeature.setWidth(width);
      };
      AgPanel2.prototype.setClosable = function(closable) {
        if (closable !== this.closable) {
          this.closable = closable;
        }
        if (closable) {
          var closeButtonComp = this.closeButtonComp = new Component(AgPanel2.CLOSE_BTN_TEMPLATE);
          this.getContext().createBean(closeButtonComp);
          var eGui = closeButtonComp.getGui();
          var child = createIconNoSpan("close", this.gridOptionsService);
          child.classList.add("ag-panel-title-bar-button-icon");
          eGui.appendChild(child);
          this.addTitleBarButton(closeButtonComp);
          closeButtonComp.addManagedListener(eGui, "click", this.onBtClose.bind(this));
        } else if (this.closeButtonComp) {
          var eGui = this.closeButtonComp.getGui();
          eGui.parentElement.removeChild(eGui);
          this.closeButtonComp = this.destroyBean(this.closeButtonComp);
        }
      };
      AgPanel2.prototype.setBodyComponent = function(bodyComponent) {
        bodyComponent.setParentComponent(this);
        this.eContentWrapper.appendChild(bodyComponent.getGui());
      };
      AgPanel2.prototype.addTitleBarButton = function(button, position) {
        var eTitleBarButtons = this.eTitleBarButtons;
        var buttons = eTitleBarButtons.children;
        var len = buttons.length;
        if (position == null) {
          position = len;
        }
        position = Math.max(0, Math.min(position, len));
        button.addCssClass("ag-panel-title-bar-button");
        var eGui = button.getGui();
        if (position === 0) {
          eTitleBarButtons.insertAdjacentElement("afterbegin", eGui);
        } else if (position === len) {
          eTitleBarButtons.insertAdjacentElement("beforeend", eGui);
        } else {
          buttons[position - 1].insertAdjacentElement("afterend", eGui);
        }
        button.setParentComponent(this);
      };
      AgPanel2.prototype.getBodyHeight = function() {
        return getInnerHeight(this.eContentWrapper);
      };
      AgPanel2.prototype.getBodyWidth = function() {
        return getInnerWidth(this.eContentWrapper);
      };
      AgPanel2.prototype.setTitle = function(title) {
        this.eTitle.innerText = title;
      };
      AgPanel2.prototype.onBtClose = function() {
        this.close();
      };
      AgPanel2.prototype.destroy = function() {
        if (this.closeButtonComp) {
          this.closeButtonComp = this.destroyBean(this.closeButtonComp);
        }
        var eGui = this.getGui();
        if (eGui && eGui.offsetParent) {
          this.close();
        }
        _super.prototype.destroy.call(this);
      };
      AgPanel2.CLOSE_BTN_TEMPLATE = '<div class="ag-button"></div>';
      __decorate$V([
        RefSelector("eContentWrapper")
      ], AgPanel2.prototype, "eContentWrapper", void 0);
      __decorate$V([
        RefSelector("eTitleBar")
      ], AgPanel2.prototype, "eTitleBar", void 0);
      __decorate$V([
        RefSelector("eTitleBarButtons")
      ], AgPanel2.prototype, "eTitleBarButtons", void 0);
      __decorate$V([
        RefSelector("eTitle")
      ], AgPanel2.prototype, "eTitle", void 0);
      __decorate$V([
        PostConstruct
      ], AgPanel2.prototype, "postConstruct", null);
      return AgPanel2;
    }(Component);
    __extends$T = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$4 = function() {
      __assign$4 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$4.apply(this, arguments);
    };
    __decorate$U = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgDialog = /** @class */
    function(_super) {
      __extends$T(AgDialog2, _super);
      function AgDialog2(config) {
        var _this = _super.call(this, __assign$4(__assign$4({}, config), { popup: true })) || this;
        _this.isMaximizable = false;
        _this.isMaximized = false;
        _this.maximizeListeners = [];
        _this.resizeListenerDestroy = null;
        _this.lastPosition = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
        return _this;
      }
      AgDialog2.prototype.postConstruct = function() {
        var _this = this;
        var eGui = this.getGui();
        var _a = this.config, movable = _a.movable, resizable = _a.resizable, maximizable = _a.maximizable;
        this.addCssClass("ag-dialog");
        _super.prototype.postConstruct.call(this);
        this.addManagedListener(eGui, "focusin", function(e) {
          if (eGui.contains(e.relatedTarget)) {
            return;
          }
          _this.popupService.bringPopupToFront(eGui);
        });
        if (movable) {
          this.setMovable(movable);
        }
        if (maximizable) {
          this.setMaximizable(maximizable);
        }
        if (resizable) {
          this.setResizable(resizable);
        }
      };
      AgDialog2.prototype.renderComponent = function() {
        var eGui = this.getGui();
        var _a = this.config, alwaysOnTop = _a.alwaysOnTop, modal = _a.modal, title = _a.title, afterGuiAttached = _a.afterGuiAttached;
        var translate = this.localeService.getLocaleTextFunc();
        var addPopupRes = this.popupService.addPopup({
          modal,
          eChild: eGui,
          closeOnEsc: true,
          closedCallback: this.destroy.bind(this),
          alwaysOnTop,
          ariaLabel: title || translate("ariaLabelDialog", "Dialog"),
          afterGuiAttached
        });
        if (addPopupRes) {
          this.close = addPopupRes.hideFunc;
        }
      };
      AgDialog2.prototype.toggleMaximize = function() {
        var position = this.positionableFeature.getPosition();
        if (this.isMaximized) {
          var _a = this.lastPosition, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
          this.setWidth(width);
          this.setHeight(height);
          this.positionableFeature.offsetElement(x, y);
        } else {
          this.lastPosition.width = this.getWidth();
          this.lastPosition.height = this.getHeight();
          this.lastPosition.x = position.x;
          this.lastPosition.y = position.y;
          this.positionableFeature.offsetElement(0, 0);
          this.setHeight("100%");
          this.setWidth("100%");
        }
        this.isMaximized = !this.isMaximized;
        this.refreshMaximizeIcon();
      };
      AgDialog2.prototype.refreshMaximizeIcon = function() {
        setDisplayed(this.maximizeIcon, !this.isMaximized);
        setDisplayed(this.minimizeIcon, this.isMaximized);
      };
      AgDialog2.prototype.clearMaximizebleListeners = function() {
        if (this.maximizeListeners.length) {
          this.maximizeListeners.forEach(function(destroyListener) {
            return destroyListener();
          });
          this.maximizeListeners.length = 0;
        }
        if (this.resizeListenerDestroy) {
          this.resizeListenerDestroy();
          this.resizeListenerDestroy = null;
        }
      };
      AgDialog2.prototype.destroy = function() {
        this.maximizeButtonComp = this.destroyBean(this.maximizeButtonComp);
        this.clearMaximizebleListeners();
        _super.prototype.destroy.call(this);
      };
      AgDialog2.prototype.setResizable = function(resizable) {
        this.positionableFeature.setResizable(resizable);
      };
      AgDialog2.prototype.setMovable = function(movable) {
        this.positionableFeature.setMovable(movable, this.eTitleBar);
      };
      AgDialog2.prototype.setMaximizable = function(maximizable) {
        var _this = this;
        if (!maximizable) {
          this.clearMaximizebleListeners();
          if (this.maximizeButtonComp) {
            this.destroyBean(this.maximizeButtonComp);
            this.maximizeButtonComp = this.maximizeIcon = this.minimizeIcon = void 0;
          }
          return;
        }
        var eTitleBar = this.eTitleBar;
        if (!eTitleBar || maximizable === this.isMaximizable) {
          return;
        }
        var maximizeButtonComp = this.buildMaximizeAndMinimizeElements();
        this.refreshMaximizeIcon();
        maximizeButtonComp.addManagedListener(maximizeButtonComp.getGui(), "click", this.toggleMaximize.bind(this));
        this.addTitleBarButton(maximizeButtonComp, 0);
        this.maximizeListeners.push(this.addManagedListener(eTitleBar, "dblclick", this.toggleMaximize.bind(this)));
        this.resizeListenerDestroy = this.addManagedListener(this, "resize", function() {
          _this.isMaximized = false;
          _this.refreshMaximizeIcon();
        });
      };
      AgDialog2.prototype.buildMaximizeAndMinimizeElements = function() {
        var maximizeButtonComp = this.maximizeButtonComp = this.createBean(new Component(
          /* html */
          '<div class="ag-dialog-button"></span>'
        ));
        var eGui = maximizeButtonComp.getGui();
        this.maximizeIcon = createIconNoSpan("maximize", this.gridOptionsService);
        eGui.appendChild(this.maximizeIcon);
        this.maximizeIcon.classList.add("ag-panel-title-bar-button-icon");
        this.minimizeIcon = createIconNoSpan("minimize", this.gridOptionsService);
        eGui.appendChild(this.minimizeIcon);
        this.minimizeIcon.classList.add("ag-panel-title-bar-button-icon");
        return maximizeButtonComp;
      };
      __decorate$U([
        Autowired("popupService")
      ], AgDialog2.prototype, "popupService", void 0);
      return AgDialog2;
    }(AgPanel);
    __extends$S = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$3 = function() {
      __assign$3 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$3.apply(this, arguments);
    };
    __decorate$T = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$b = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$9 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    (function(DIRECTION2) {
      DIRECTION2[DIRECTION2["vertical"] = 0] = "vertical";
      DIRECTION2[DIRECTION2["horizontal"] = 1] = "horizontal";
    })(DIRECTION || (DIRECTION = {}));
    instanceIdSeq = 0;
    PopupService = /** @class */
    function(_super) {
      __extends$S(PopupService2, _super);
      function PopupService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.popupList = [];
        return _this;
      }
      PopupService_1 = PopupService2;
      PopupService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.gridCtrl = p.gridCtrl;
          _this.addManagedListener(_this.gridCtrl, Events.EVENT_KEYBOARD_FOCUS, function() {
            _this.popupList.forEach(function(popup) {
              return popup.element.classList.add(FocusService.AG_KEYBOARD_FOCUS);
            });
          });
          _this.addManagedListener(_this.gridCtrl, Events.EVENT_MOUSE_FOCUS, function() {
            _this.popupList.forEach(function(popup) {
              return popup.element.classList.remove(FocusService.AG_KEYBOARD_FOCUS);
            });
          });
        });
      };
      PopupService2.prototype.getPopupParent = function() {
        var ePopupParent = this.gridOptionsService.get("popupParent");
        if (ePopupParent) {
          return ePopupParent;
        }
        return this.gridCtrl.getGui();
      };
      PopupService2.prototype.positionPopupForMenu = function(params) {
        var eventSource = params.eventSource, ePopup = params.ePopup;
        var popupIdx = this.getPopupIndex(ePopup);
        if (popupIdx !== -1) {
          var popup = this.popupList[popupIdx];
          popup.alignedToElement = eventSource;
        }
        var sourceRect = eventSource.getBoundingClientRect();
        var parentRect = this.getParentRect();
        var y = this.keepXYWithinBounds(ePopup, sourceRect.top - parentRect.top, DIRECTION.vertical);
        var minWidth = ePopup.clientWidth > 0 ? ePopup.clientWidth : 200;
        ePopup.style.minWidth = minWidth + "px";
        var widthOfParent = parentRect.right - parentRect.left;
        var maxX = widthOfParent - minWidth;
        var x;
        if (this.gridOptionsService.is("enableRtl")) {
          x = xLeftPosition();
          if (x < 0) {
            x = xRightPosition();
            this.setAlignedStyles(ePopup, "left");
          }
          if (x > maxX) {
            x = 0;
            this.setAlignedStyles(ePopup, "right");
          }
        } else {
          x = xRightPosition();
          if (x > maxX) {
            x = xLeftPosition();
            this.setAlignedStyles(ePopup, "right");
          }
          if (x < 0) {
            x = 0;
            this.setAlignedStyles(ePopup, "left");
          }
        }
        ePopup.style.left = x + "px";
        ePopup.style.top = y + "px";
        function xRightPosition() {
          return sourceRect.right - parentRect.left - 2;
        }
        function xLeftPosition() {
          return sourceRect.left - parentRect.left - minWidth;
        }
      };
      PopupService2.prototype.positionPopupUnderMouseEvent = function(params) {
        var _this = this;
        var ePopup = params.ePopup, nudgeX = params.nudgeX, nudgeY = params.nudgeY, skipObserver = params.skipObserver;
        this.positionPopup({
          ePopup,
          nudgeX,
          nudgeY,
          keepWithinBounds: true,
          skipObserver,
          updatePosition: function() {
            return _this.calculatePointerAlign(params.mouseEvent);
          },
          postProcessCallback: function() {
            return _this.callPostProcessPopup(params.type, params.ePopup, null, params.mouseEvent, params.column, params.rowNode);
          }
        });
      };
      PopupService2.prototype.calculatePointerAlign = function(e) {
        var parentRect = this.getParentRect();
        return {
          x: e.clientX - parentRect.left,
          y: e.clientY - parentRect.top
        };
      };
      PopupService2.prototype.positionPopupByComponent = function(params) {
        var _this = this;
        var ePopup = params.ePopup, nudgeX = params.nudgeX, nudgeY = params.nudgeY, keepWithinBounds = params.keepWithinBounds, eventSource = params.eventSource, _a = params.alignSide, alignSide = _a === void 0 ? "left" : _a, _b = params.position, position = _b === void 0 ? "over" : _b, column = params.column, rowNode = params.rowNode, type = params.type;
        var sourceRect = eventSource.getBoundingClientRect();
        var parentRect = this.getParentRect();
        var popupIdx = this.getPopupIndex(ePopup);
        if (popupIdx !== -1) {
          var popup = this.popupList[popupIdx];
          popup.alignedToElement = eventSource;
        }
        var updatePosition = function() {
          var x = sourceRect.left - parentRect.left;
          if (alignSide === "right") {
            x -= ePopup.offsetWidth - sourceRect.width;
          }
          var y;
          if (position === "over") {
            y = sourceRect.top - parentRect.top;
            _this.setAlignedStyles(ePopup, "over");
          } else {
            _this.setAlignedStyles(ePopup, "under");
            var alignSide_1 = _this.shouldRenderUnderOrAbove(ePopup, sourceRect, parentRect, params.nudgeY || 0);
            if (alignSide_1 === "under") {
              y = sourceRect.top - parentRect.top + sourceRect.height;
            } else {
              y = sourceRect.top - ePopup.offsetHeight - (nudgeY || 0) * 2 - parentRect.top;
            }
          }
          return { x, y };
        };
        this.positionPopup({
          ePopup,
          nudgeX,
          nudgeY,
          keepWithinBounds,
          updatePosition,
          postProcessCallback: function() {
            return _this.callPostProcessPopup(type, ePopup, eventSource, null, column, rowNode);
          }
        });
      };
      PopupService2.prototype.shouldRenderUnderOrAbove = function(ePopup, targetCompRect, parentRect, nudgeY) {
        var spaceAvailableUnder = parentRect.bottom - targetCompRect.bottom;
        var spaceAvailableAbove = targetCompRect.top - parentRect.top;
        var spaceRequired = ePopup.offsetHeight + nudgeY;
        if (spaceAvailableUnder > spaceRequired) {
          return "under";
        }
        if (spaceAvailableAbove > spaceRequired || spaceAvailableAbove > spaceAvailableUnder) {
          return "above";
        }
        return "under";
      };
      PopupService2.prototype.setAlignedStyles = function(ePopup, positioned) {
        var popupIdx = this.getPopupIndex(ePopup);
        if (popupIdx === -1) {
          return;
        }
        var popup = this.popupList[popupIdx];
        var alignedToElement = popup.alignedToElement;
        if (!alignedToElement) {
          return;
        }
        var positions = ["right", "left", "over", "above", "under"];
        positions.forEach(function(position) {
          alignedToElement.classList.remove("ag-has-popup-positioned-" + position);
          ePopup.classList.remove("ag-popup-positioned-" + position);
        });
        if (!positioned) {
          return;
        }
        alignedToElement.classList.add("ag-has-popup-positioned-" + positioned);
        ePopup.classList.add("ag-popup-positioned-" + positioned);
      };
      PopupService2.prototype.callPostProcessPopup = function(type, ePopup, eventSource, mouseEvent, column, rowNode) {
        var callback = this.gridOptionsService.getCallback("postProcessPopup");
        if (callback) {
          var params = {
            column,
            rowNode,
            ePopup,
            type,
            eventSource,
            mouseEvent
          };
          callback(params);
        }
      };
      PopupService2.prototype.positionPopup = function(params) {
        var _this = this;
        var ePopup = params.ePopup, keepWithinBounds = params.keepWithinBounds, nudgeX = params.nudgeX, nudgeY = params.nudgeY, skipObserver = params.skipObserver, updatePosition = params.updatePosition;
        var lastSize = { width: 0, height: 0 };
        var updatePopupPosition = function(fromResizeObserver) {
          if (fromResizeObserver === void 0) {
            fromResizeObserver = false;
          }
          var _a = updatePosition(), x = _a.x, y = _a.y;
          if (fromResizeObserver && ePopup.clientWidth === lastSize.width && ePopup.clientHeight === lastSize.height) {
            return;
          }
          lastSize.width = ePopup.clientWidth;
          lastSize.height = ePopup.clientHeight;
          if (nudgeX) {
            x += nudgeX;
          }
          if (nudgeY) {
            y += nudgeY;
          }
          if (keepWithinBounds) {
            x = _this.keepXYWithinBounds(ePopup, x, DIRECTION.horizontal);
            y = _this.keepXYWithinBounds(ePopup, y, DIRECTION.vertical);
          }
          ePopup.style.left = x + "px";
          ePopup.style.top = y + "px";
          if (params.postProcessCallback) {
            params.postProcessCallback();
          }
        };
        updatePopupPosition();
        if (!skipObserver) {
          var resizeObserverDestroyFunc_1 = this.resizeObserverService.observeResize(ePopup, function() {
            return updatePopupPosition(true);
          });
          setTimeout(function() {
            return resizeObserverDestroyFunc_1();
          }, PopupService_1.WAIT_FOR_POPUP_CONTENT_RESIZE);
        }
      };
      PopupService2.prototype.getActivePopups = function() {
        return this.popupList.map(function(popup) {
          return popup.element;
        });
      };
      PopupService2.prototype.getPopupList = function() {
        return this.popupList;
      };
      PopupService2.prototype.getParentRect = function() {
        var eDocument = this.gridOptionsService.getDocument();
        var popupParent = this.getPopupParent();
        if (popupParent === eDocument.body) {
          popupParent = eDocument.documentElement;
        } else if (getComputedStyle(popupParent).position === "static") {
          popupParent = popupParent.offsetParent;
        }
        return getElementRectWithOffset(popupParent);
      };
      PopupService2.prototype.keepXYWithinBounds = function(ePopup, position, direction) {
        var isVertical = direction === DIRECTION.vertical;
        var sizeProperty = isVertical ? "clientHeight" : "clientWidth";
        var anchorProperty = isVertical ? "top" : "left";
        var offsetProperty = isVertical ? "offsetHeight" : "offsetWidth";
        var scrollPositionProperty = isVertical ? "scrollTop" : "scrollLeft";
        var eDocument = this.gridOptionsService.getDocument();
        var docElement = eDocument.documentElement;
        var popupParent = this.getPopupParent();
        var parentRect = popupParent.getBoundingClientRect();
        var documentRect = eDocument.documentElement.getBoundingClientRect();
        var isBody = popupParent === eDocument.body;
        var offsetSize = ePopup[offsetProperty];
        var getSize = isVertical ? getAbsoluteHeight : getAbsoluteWidth;
        var sizeOfParent = isBody ? getSize(docElement) + docElement[scrollPositionProperty] : popupParent[sizeProperty];
        if (isBody) {
          sizeOfParent -= Math.abs(documentRect[anchorProperty] - parentRect[anchorProperty]);
        }
        var max = sizeOfParent - offsetSize;
        return Math.min(Math.max(position, 0), Math.abs(max));
      };
      PopupService2.prototype.addPopup = function(params) {
        var eDocument = this.gridOptionsService.getDocument();
        var eChild = params.eChild, ariaLabel = params.ariaLabel, alwaysOnTop = params.alwaysOnTop, positionCallback = params.positionCallback, anchorToElement = params.anchorToElement;
        if (!eDocument) {
          console.warn("AG Grid: could not find the document, document is empty");
          return { hideFunc: function() {
          } };
        }
        var pos = this.getPopupIndex(eChild);
        if (pos !== -1) {
          var popup = this.popupList[pos];
          return { hideFunc: popup.hideFunc };
        }
        this.initialisePopupPosition(eChild);
        var wrapperEl = this.createPopupWrapper(eChild, ariaLabel, !!alwaysOnTop);
        var removeListeners = this.addEventListenersToPopup(__assign$3(__assign$3({}, params), { wrapperEl }));
        if (positionCallback) {
          positionCallback();
        }
        this.addPopupToPopupList(eChild, wrapperEl, removeListeners, anchorToElement);
        return {
          hideFunc: removeListeners
        };
      };
      PopupService2.prototype.initialisePopupPosition = function(element) {
        var ePopupParent = this.getPopupParent();
        var ePopupParentRect = ePopupParent.getBoundingClientRect();
        if (!exists(element.style.top)) {
          element.style.top = ePopupParentRect.top * -1 + "px";
        }
        if (!exists(element.style.left)) {
          element.style.left = ePopupParentRect.left * -1 + "px";
        }
      };
      PopupService2.prototype.createPopupWrapper = function(element, ariaLabel, alwaysOnTop) {
        var _a;
        var ePopupParent = this.getPopupParent();
        var eWrapper = document.createElement("div");
        var allThemes = this.environment.getTheme().allThemes;
        if (allThemes.length) {
          (_a = eWrapper.classList).add.apply(_a, __spreadArray$9([], __read$b(allThemes)));
        }
        eWrapper.classList.add("ag-popup");
        element.classList.add(this.gridOptionsService.is("enableRtl") ? "ag-rtl" : "ag-ltr", "ag-popup-child");
        if (!element.hasAttribute("role")) {
          setAriaRole(element, "dialog");
        }
        setAriaLabel(element, ariaLabel);
        if (this.focusService.isKeyboardMode()) {
          element.classList.add(FocusService.AG_KEYBOARD_FOCUS);
        }
        eWrapper.appendChild(element);
        ePopupParent.appendChild(eWrapper);
        if (alwaysOnTop) {
          this.setAlwaysOnTop(element, true);
        } else {
          this.bringPopupToFront(element);
        }
        return eWrapper;
      };
      PopupService2.prototype.addEventListenersToPopup = function(params) {
        var _this = this;
        var eDocument = this.gridOptionsService.getDocument();
        var ePopupParent = this.getPopupParent();
        var wrapperEl = params.wrapperEl, popupEl = params.eChild;
        params.click;
        var closedCallback = params.closedCallback, afterGuiAttached = params.afterGuiAttached, closeOnEsc = params.closeOnEsc, modal = params.modal;
        var popupHidden = false;
        var hidePopupOnKeyboardEvent = function(event) {
          if (!wrapperEl.contains(eDocument.activeElement)) {
            return;
          }
          var key = event.key;
          if (key === KeyCode.ESCAPE && !isStopPropagationForAgGrid(event)) {
            removeListeners({ keyboardEvent: event });
          }
        };
        var hidePopupOnMouseEvent = function(event) {
          return removeListeners({ mouseEvent: event });
        };
        var hidePopupOnTouchEvent = function(event) {
          return removeListeners({ touchEvent: event });
        };
        var removeListeners = function(popupParams) {
          if (popupParams === void 0) {
            popupParams = {};
          }
          var mouseEvent = popupParams.mouseEvent, touchEvent = popupParams.touchEvent, keyboardEvent = popupParams.keyboardEvent;
          if (
            // we don't hide popup if the event was on the child, or any
            // children of this child
            _this.isEventFromCurrentPopup({ mouseEvent, touchEvent }, popupEl) || // this method should only be called once. the client can have different
            // paths, each one wanting to close, so this method may be called multiple times.
            popupHidden
          ) {
            return;
          }
          popupHidden = true;
          ePopupParent.removeChild(wrapperEl);
          eDocument.removeEventListener("keydown", hidePopupOnKeyboardEvent);
          eDocument.removeEventListener("mousedown", hidePopupOnMouseEvent);
          eDocument.removeEventListener("touchstart", hidePopupOnTouchEvent);
          eDocument.removeEventListener("contextmenu", hidePopupOnMouseEvent);
          _this.eventService.removeEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
          if (closedCallback) {
            closedCallback(mouseEvent || touchEvent || keyboardEvent);
          }
          _this.removePopupFromPopupList(popupEl);
        };
        if (afterGuiAttached) {
          afterGuiAttached({ hidePopup: removeListeners });
        }
        window.setTimeout(function() {
          if (closeOnEsc) {
            eDocument.addEventListener("keydown", hidePopupOnKeyboardEvent);
          }
          if (modal) {
            eDocument.addEventListener("mousedown", hidePopupOnMouseEvent);
            _this.eventService.addEventListener(Events.EVENT_DRAG_STARTED, hidePopupOnMouseEvent);
            eDocument.addEventListener("touchstart", hidePopupOnTouchEvent);
            eDocument.addEventListener("contextmenu", hidePopupOnMouseEvent);
          }
        }, 0);
        return removeListeners;
      };
      PopupService2.prototype.addPopupToPopupList = function(element, wrapperEl, removeListeners, anchorToElement) {
        this.popupList.push({
          element,
          wrapper: wrapperEl,
          hideFunc: removeListeners,
          instanceId: instanceIdSeq++,
          isAnchored: !!anchorToElement
        });
        if (anchorToElement) {
          this.setPopupPositionRelatedToElement(element, anchorToElement);
        }
      };
      PopupService2.prototype.getPopupIndex = function(el) {
        return this.popupList.findIndex(function(p) {
          return p.element === el;
        });
      };
      PopupService2.prototype.setPopupPositionRelatedToElement = function(popupEl, relativeElement) {
        var popupIndex = this.getPopupIndex(popupEl);
        if (popupIndex === -1) {
          return;
        }
        var popup = this.popupList[popupIndex];
        if (popup.stopAnchoringPromise) {
          popup.stopAnchoringPromise.then(function(destroyFunc) {
            return destroyFunc && destroyFunc();
          });
        }
        popup.stopAnchoringPromise = void 0;
        popup.isAnchored = false;
        if (!relativeElement) {
          return;
        }
        var destroyPositionTracker = this.keepPopupPositionedRelativeTo({
          element: relativeElement,
          ePopup: popupEl,
          hidePopup: popup.hideFunc
        });
        popup.stopAnchoringPromise = destroyPositionTracker;
        popup.isAnchored = true;
        return destroyPositionTracker;
      };
      PopupService2.prototype.removePopupFromPopupList = function(element) {
        this.setAlignedStyles(element, null);
        this.setPopupPositionRelatedToElement(element, null);
        this.popupList = this.popupList.filter(function(p) {
          return p.element !== element;
        });
      };
      PopupService2.prototype.keepPopupPositionedRelativeTo = function(params) {
        var _this = this;
        var eParent = this.getPopupParent();
        var parentRect = eParent.getBoundingClientRect();
        var element = params.element, ePopup = params.ePopup;
        var sourceRect = element.getBoundingClientRect();
        var initialDiffTop = parentRect.top - sourceRect.top;
        var initialDiffLeft = parentRect.left - sourceRect.left;
        var lastDiffTop = initialDiffTop;
        var lastDiffLeft = initialDiffLeft;
        var topPx = ePopup.style.top;
        var top = parseInt(topPx.substring(0, topPx.length - 1), 10);
        var leftPx = ePopup.style.left;
        var left = parseInt(leftPx.substring(0, leftPx.length - 1), 10);
        return new AgPromise(function(resolve) {
          _this.getFrameworkOverrides().setInterval(function() {
            var pRect = eParent.getBoundingClientRect();
            var sRect = element.getBoundingClientRect();
            var elementNotInDom = sRect.top == 0 && sRect.left == 0 && sRect.height == 0 && sRect.width == 0;
            if (elementNotInDom) {
              params.hidePopup();
              return;
            }
            var currentDiffTop = pRect.top - sRect.top;
            if (currentDiffTop != lastDiffTop) {
              var newTop = _this.keepXYWithinBounds(ePopup, top + initialDiffTop - currentDiffTop, DIRECTION.vertical);
              ePopup.style.top = newTop + "px";
            }
            lastDiffTop = currentDiffTop;
            var currentDiffLeft = pRect.left - sRect.left;
            if (currentDiffLeft != lastDiffLeft) {
              var newLeft = _this.keepXYWithinBounds(ePopup, left + initialDiffLeft - currentDiffLeft, DIRECTION.horizontal);
              ePopup.style.left = newLeft + "px";
            }
            lastDiffLeft = currentDiffLeft;
          }, 200).then(function(intervalId) {
            var result = function() {
              if (intervalId != null) {
                window.clearInterval(intervalId);
              }
            };
            resolve(result);
          });
        });
      };
      PopupService2.prototype.hasAnchoredPopup = function() {
        return this.popupList.some(function(popup) {
          return popup.isAnchored;
        });
      };
      PopupService2.prototype.isEventFromCurrentPopup = function(params, target) {
        var mouseEvent = params.mouseEvent, touchEvent = params.touchEvent;
        var event = mouseEvent ? mouseEvent : touchEvent;
        if (!event) {
          return false;
        }
        var indexOfThisChild = this.getPopupIndex(target);
        if (indexOfThisChild === -1) {
          return false;
        }
        for (var i = indexOfThisChild; i < this.popupList.length; i++) {
          var popup = this.popupList[i];
          if (isElementInEventPath(popup.element, event)) {
            return true;
          }
        }
        return this.isElementWithinCustomPopup(event.target);
      };
      PopupService2.prototype.isElementWithinCustomPopup = function(el) {
        var eDocument = this.gridOptionsService.getDocument();
        while (el && el !== eDocument.body) {
          if (el.classList.contains("ag-custom-component-popup") || el.parentElement === null) {
            return true;
          }
          el = el.parentElement;
        }
        return false;
      };
      PopupService2.prototype.getWrapper = function(ePopup) {
        while (!ePopup.classList.contains("ag-popup") && ePopup.parentElement) {
          ePopup = ePopup.parentElement;
        }
        return ePopup.classList.contains("ag-popup") ? ePopup : null;
      };
      PopupService2.prototype.setAlwaysOnTop = function(ePopup, alwaysOnTop) {
        var eWrapper = this.getWrapper(ePopup);
        if (!eWrapper) {
          return;
        }
        eWrapper.classList.toggle("ag-always-on-top", !!alwaysOnTop);
        if (alwaysOnTop) {
          this.bringPopupToFront(eWrapper);
        }
      };
      PopupService2.prototype.bringPopupToFront = function(ePopup) {
        var parent = this.getPopupParent();
        var popupList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup"));
        var popupLen = popupList.length;
        var alwaysOnTopList = Array.prototype.slice.call(parent.querySelectorAll(".ag-popup.ag-always-on-top"));
        var onTopLength = alwaysOnTopList.length;
        var eWrapper = this.getWrapper(ePopup);
        if (!eWrapper || popupLen <= 1 || !parent.contains(ePopup)) {
          return;
        }
        var pos = popupList.indexOf(eWrapper);
        var innerEls = eWrapper.querySelectorAll("div");
        var innerElsScrollMap = [];
        innerEls.forEach(function(el) {
          if (el.scrollTop !== 0) {
            innerElsScrollMap.push([el, el.scrollTop]);
          }
        });
        if (onTopLength) {
          var isPopupAlwaysOnTop = eWrapper.classList.contains("ag-always-on-top");
          if (isPopupAlwaysOnTop) {
            if (pos !== popupLen - 1) {
              last(alwaysOnTopList).insertAdjacentElement("afterend", eWrapper);
            }
          } else if (pos !== popupLen - onTopLength - 1) {
            alwaysOnTopList[0].insertAdjacentElement("beforebegin", eWrapper);
          }
        } else if (pos !== popupLen - 1) {
          last(popupList).insertAdjacentElement("afterend", eWrapper);
        }
        while (innerElsScrollMap.length) {
          var currentEl = innerElsScrollMap.pop();
          currentEl[0].scrollTop = currentEl[1];
        }
        var params = {
          type: "popupToFront",
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          eWrapper
        };
        this.eventService.dispatchEvent(params);
      };
      var PopupService_1;
      PopupService2.WAIT_FOR_POPUP_CONTENT_RESIZE = 200;
      __decorate$T([
        Autowired("focusService")
      ], PopupService2.prototype, "focusService", void 0);
      __decorate$T([
        Autowired("ctrlsService")
      ], PopupService2.prototype, "ctrlsService", void 0);
      __decorate$T([
        Autowired("resizeObserverService")
      ], PopupService2.prototype, "resizeObserverService", void 0);
      __decorate$T([
        PostConstruct
      ], PopupService2.prototype, "postConstruct", null);
      PopupService2 = PopupService_1 = __decorate$T([
        Bean("popupService")
      ], PopupService2);
      return PopupService2;
    }(BeanStub);
    __extends$R = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    AgAutocompleteRow = /** @class */
    function(_super) {
      __extends$R(AgAutocompleteRow2, _super);
      function AgAutocompleteRow2() {
        var _this = _super.call(
          this,
          /* html */
          '\n        <div class="ag-autocomplete-row" role="presentation">\n            <div class="ag-autocomplete-row-label"></div>\n        </div>'
        ) || this;
        _this.hasHighlighting = false;
        return _this;
      }
      AgAutocompleteRow2.prototype.setState = function(value, selected) {
        this.value = value;
        this.render();
        this.updateSelected(selected);
      };
      AgAutocompleteRow2.prototype.updateSelected = function(selected) {
        this.addOrRemoveCssClass("ag-autocomplete-row-selected", selected);
      };
      AgAutocompleteRow2.prototype.setSearchString = function(searchString) {
        var _a;
        var keepHighlighting = false;
        if (exists(searchString)) {
          var index = (_a = this.value) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase().indexOf(searchString.toLocaleLowerCase());
          if (index >= 0) {
            keepHighlighting = true;
            this.hasHighlighting = true;
            var highlightEndIndex = index + searchString.length;
            var startPart = escapeString(this.value.slice(0, index));
            var highlightedPart = escapeString(this.value.slice(index, highlightEndIndex));
            var endPart = escapeString(this.value.slice(highlightEndIndex));
            this.getGui().lastElementChild.innerHTML = startPart + "<b>" + highlightedPart + "</b>" + endPart;
          }
        }
        if (!keepHighlighting && this.hasHighlighting) {
          this.hasHighlighting = false;
          this.render();
        }
      };
      AgAutocompleteRow2.prototype.render = function() {
        var _a;
        this.getGui().lastElementChild.innerHTML = (_a = escapeString(this.value)) !== null && _a !== void 0 ? _a : "&nbsp;";
      };
      return AgAutocompleteRow2;
    }(Component);
    __extends$Q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$S = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgAutocompleteList = /** @class */
    function(_super) {
      __extends$Q(AgAutocompleteList2, _super);
      function AgAutocompleteList2(params) {
        var _this = _super.call(this, AgAutocompleteList2.TEMPLATE) || this;
        _this.params = params;
        _this.searchString = "";
        return _this;
      }
      AgAutocompleteList2.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
      };
      AgAutocompleteList2.prototype.init = function() {
        var _this = this;
        this.autocompleteEntries = this.params.autocompleteEntries;
        this.virtualList = this.createManagedBean(new VirtualList({ cssIdentifier: "autocomplete" }));
        this.virtualList.setComponentCreator(this.createRowComponent.bind(this));
        this.eList.appendChild(this.virtualList.getGui());
        this.virtualList.setModel({
          getRowCount: function() {
            return _this.autocompleteEntries.length;
          },
          getRow: function(index) {
            return _this.autocompleteEntries[index];
          }
        });
        var virtualListGui = this.virtualList.getGui();
        this.addManagedListener(virtualListGui, "click", function() {
          return _this.params.onConfirmed();
        });
        this.addManagedListener(virtualListGui, "mousemove", this.onMouseMove.bind(this));
        this.addManagedListener(virtualListGui, "mousedown", function(e) {
          return e.preventDefault();
        });
        this.setSelectedValue(0);
      };
      AgAutocompleteList2.prototype.onNavigationKeyDown = function(event, key) {
        event.preventDefault();
        var oldIndex = this.autocompleteEntries.indexOf(this.selectedValue);
        var newIndex = key === KeyCode.UP ? oldIndex - 1 : oldIndex + 1;
        this.checkSetSelectedValue(newIndex);
      };
      AgAutocompleteList2.prototype.setSearch = function(searchString) {
        this.searchString = searchString;
        if (exists(searchString)) {
          this.runSearch();
        } else {
          this.autocompleteEntries = this.params.autocompleteEntries;
          this.virtualList.refresh();
          this.checkSetSelectedValue(0);
        }
        this.updateSearchInList();
      };
      AgAutocompleteList2.prototype.runContainsSearch = function(searchString, searchStrings) {
        var topMatch;
        var topMatchStartsWithSearchString = false;
        var lowerCaseSearchString = searchString.toLocaleLowerCase();
        var allMatches = searchStrings.filter(function(string) {
          var lowerCaseString = string.toLocaleLowerCase();
          var index = lowerCaseString.indexOf(lowerCaseSearchString);
          var startsWithSearchString = index === 0;
          var isMatch = index >= 0;
          if (isMatch && (!topMatch || !topMatchStartsWithSearchString && startsWithSearchString || topMatchStartsWithSearchString === startsWithSearchString && string.length < topMatch.length)) {
            topMatch = string;
            topMatchStartsWithSearchString = startsWithSearchString;
          }
          return isMatch;
        });
        if (!topMatch && allMatches.length) {
          topMatch = allMatches[0];
        }
        return { topMatch, allMatches };
      };
      AgAutocompleteList2.prototype.runSearch = function() {
        var _a, _b;
        var autocompleteEntries = this.params.autocompleteEntries;
        var searchStrings = autocompleteEntries.map(function(v) {
          var _a2;
          return (_a2 = v.displayValue) !== null && _a2 !== void 0 ? _a2 : v.key;
        });
        var matchingStrings;
        var topSuggestion;
        if (this.params.useFuzzySearch) {
          matchingStrings = fuzzySuggestions(this.searchString, searchStrings, true).values;
          topSuggestion = matchingStrings.length ? matchingStrings[0] : void 0;
        } else {
          var containsMatches = this.runContainsSearch(this.searchString, searchStrings);
          matchingStrings = containsMatches.allMatches;
          topSuggestion = containsMatches.topMatch;
        }
        var filteredEntries = autocompleteEntries.filter(function(_a2) {
          var key = _a2.key, displayValue = _a2.displayValue;
          return matchingStrings.includes(displayValue !== null && displayValue !== void 0 ? displayValue : key);
        });
        if (!filteredEntries.length && this.selectedValue && ((_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.forceLastSelection) === null || _b === void 0 ? void 0 : _b.call(_a, this.selectedValue, this.searchString))) {
          filteredEntries = [this.selectedValue];
        }
        this.autocompleteEntries = filteredEntries;
        this.virtualList.refresh();
        if (!topSuggestion) {
          return;
        }
        var topSuggestionIndex = matchingStrings.indexOf(topSuggestion);
        this.checkSetSelectedValue(topSuggestionIndex);
      };
      AgAutocompleteList2.prototype.updateSearchInList = function() {
        var _this = this;
        this.virtualList.forEachRenderedRow(function(row) {
          return row.setSearchString(_this.searchString);
        });
      };
      AgAutocompleteList2.prototype.checkSetSelectedValue = function(index) {
        if (index >= 0 && index < this.autocompleteEntries.length) {
          this.setSelectedValue(index);
        }
      };
      AgAutocompleteList2.prototype.setSelectedValue = function(index) {
        var value = this.autocompleteEntries[index];
        if (this.selectedValue === value) {
          return;
        }
        this.selectedValue = value;
        this.virtualList.ensureIndexVisible(index);
        this.virtualList.forEachRenderedRow(function(cmp, idx) {
          cmp.updateSelected(index === idx);
        });
      };
      AgAutocompleteList2.prototype.createRowComponent = function(value) {
        var _a;
        var row = new AgAutocompleteRow();
        this.getContext().createBean(row);
        row.setState((_a = value.displayValue) !== null && _a !== void 0 ? _a : value.key, value === this.selectedValue);
        return row;
      };
      AgAutocompleteList2.prototype.onMouseMove = function(mouseEvent) {
        var rect = this.virtualList.getGui().getBoundingClientRect();
        var scrollTop = this.virtualList.getScrollTop();
        var mouseY = mouseEvent.clientY - rect.top + scrollTop;
        var row = Math.floor(mouseY / this.virtualList.getRowHeight());
        this.checkSetSelectedValue(row);
      };
      AgAutocompleteList2.prototype.afterGuiAttached = function() {
        this.virtualList.refresh();
      };
      AgAutocompleteList2.prototype.getSelectedValue = function() {
        var _a;
        if (!this.autocompleteEntries.length) {
          return null;
        }
        return (_a = this.selectedValue) !== null && _a !== void 0 ? _a : null;
      };
      AgAutocompleteList2.TEMPLATE = '<div class="ag-autocomplete-list-popup">\n            <div ref="eList" class="ag-autocomplete-list"></div>\n        <div>';
      __decorate$S([
        RefSelector("eList")
      ], AgAutocompleteList2.prototype, "eList", void 0);
      __decorate$S([
        PostConstruct
      ], AgAutocompleteList2.prototype, "init", null);
      return AgAutocompleteList2;
    }(PopupComponent);
    __extends$P = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$R = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgAutocomplete = /** @class */
    function(_super) {
      __extends$P(AgAutocomplete2, _super);
      function AgAutocomplete2() {
        var _this = _super.call(
          this,
          /* html */
          '\n            <div class="ag-autocomplete" role="presentation">\n                <ag-input-text-field ref="eAutocompleteInput"></ag-input-text-field>\n            </div>'
        ) || this;
        _this.isListOpen = false;
        _this.lastPosition = 0;
        _this.valid = true;
        return _this;
      }
      AgAutocomplete2.prototype.postConstruct = function() {
        var _this = this;
        this.eAutocompleteInput.onValueChange(function(value) {
          return _this.onValueChanged(value);
        });
        this.eAutocompleteInput.getInputElement().setAttribute("autocomplete", "off");
        this.addGuiEventListener("keydown", this.onKeyDown.bind(this));
        this.addGuiEventListener("click", this.updatePositionAndList.bind(this));
        this.addDestroyFunc(function() {
          _this.destroyBean(_this.autocompleteList);
        });
        this.addGuiEventListener("focusout", function() {
          return _this.onFocusOut();
        });
      };
      AgAutocomplete2.prototype.onValueChanged = function(value) {
        var parsedValue = makeNull(value);
        this.updateValue(parsedValue);
        this.updateAutocompleteList(parsedValue);
      };
      AgAutocomplete2.prototype.updateValue = function(value) {
        this.updateLastPosition();
        this.dispatchEvent({
          type: AgAutocomplete2.EVENT_VALUE_CHANGED,
          value
        });
        this.validate(value);
      };
      AgAutocomplete2.prototype.updateAutocompleteList = function(value) {
        var _a, _b, _c, _d;
        var autocompleteListParams = (_b = (_a = this.listGenerator) === null || _a === void 0 ? void 0 : _a.call(this, value, this.lastPosition)) !== null && _b !== void 0 ? _b : { enabled: false };
        if (!autocompleteListParams.type || autocompleteListParams.type !== ((_c = this.autocompleteListParams) === null || _c === void 0 ? void 0 : _c.type)) {
          if (this.isListOpen) {
            this.closeList();
          }
        }
        this.autocompleteListParams = autocompleteListParams;
        if ((_d = this.autocompleteListParams) === null || _d === void 0 ? void 0 : _d.enabled) {
          if (!this.isListOpen) {
            this.openList();
          }
          var searchString = this.autocompleteListParams.searchString;
          this.autocompleteList.setSearch(searchString !== null && searchString !== void 0 ? searchString : "");
        } else {
          if (this.isListOpen) {
            this.closeList();
          }
        }
      };
      AgAutocomplete2.prototype.onKeyDown = function(event) {
        var _this = this;
        var key = event.key;
        this.updateLastPosition();
        switch (key) {
          case KeyCode.ENTER:
            this.onEnterKeyDown(event);
            break;
          case KeyCode.TAB:
            this.onTabKeyDown(event);
            break;
          case KeyCode.DOWN:
          case KeyCode.UP:
            this.onUpDownKeyDown(event, key);
            break;
          case KeyCode.LEFT:
          case KeyCode.RIGHT:
          case KeyCode.PAGE_HOME:
          case KeyCode.PAGE_END:
            setTimeout(function() {
              _this.updatePositionAndList();
            });
            break;
          case KeyCode.ESCAPE:
            this.onEscapeKeyDown(event);
            break;
          case KeyCode.SPACE:
            if (event.ctrlKey && !this.isListOpen) {
              event.preventDefault();
              this.forceOpenList();
            }
            break;
        }
      };
      AgAutocomplete2.prototype.confirmSelection = function() {
        var _a;
        var selectedValue = (_a = this.autocompleteList) === null || _a === void 0 ? void 0 : _a.getSelectedValue();
        if (selectedValue) {
          this.closeList();
          this.dispatchEvent({
            type: AgAutocomplete2.EVENT_OPTION_SELECTED,
            value: this.getValue(),
            position: this.lastPosition,
            updateEntry: selectedValue,
            autocompleteType: this.autocompleteListParams.type
          });
        }
      };
      AgAutocomplete2.prototype.onTabKeyDown = function(event) {
        if (this.isListOpen) {
          event.preventDefault();
          event.stopPropagation();
          this.confirmSelection();
        }
      };
      AgAutocomplete2.prototype.onEnterKeyDown = function(event) {
        event.preventDefault();
        if (this.isListOpen) {
          this.confirmSelection();
        } else {
          this.onCompleted();
        }
      };
      AgAutocomplete2.prototype.onUpDownKeyDown = function(event, key) {
        var _a;
        event.preventDefault();
        if (!this.isListOpen) {
          this.forceOpenList();
        } else {
          (_a = this.autocompleteList) === null || _a === void 0 ? void 0 : _a.onNavigationKeyDown(event, key);
        }
      };
      AgAutocomplete2.prototype.onEscapeKeyDown = function(event) {
        if (this.isListOpen) {
          event.preventDefault();
          event.stopPropagation();
          this.closeList();
          this.setCaret(this.lastPosition, true);
        }
      };
      AgAutocomplete2.prototype.onFocusOut = function() {
        if (this.isListOpen) {
          this.closeList();
        }
      };
      AgAutocomplete2.prototype.updatePositionAndList = function() {
        var _a;
        this.updateLastPosition();
        this.updateAutocompleteList((_a = this.eAutocompleteInput.getValue()) !== null && _a !== void 0 ? _a : null);
      };
      AgAutocomplete2.prototype.setCaret = function(position, setFocus) {
        var eDocument = this.gridOptionsService.getDocument();
        if (setFocus && eDocument.activeElement === eDocument.body) {
          this.eAutocompleteInput.getFocusableElement().focus();
        }
        this.eAutocompleteInput.getInputElement().setSelectionRange(position, position);
      };
      AgAutocomplete2.prototype.forceOpenList = function() {
        this.onValueChanged(this.eAutocompleteInput.getValue());
      };
      AgAutocomplete2.prototype.updateLastPosition = function() {
        var _a;
        this.lastPosition = (_a = this.eAutocompleteInput.getInputElement().selectionStart) !== null && _a !== void 0 ? _a : 0;
      };
      AgAutocomplete2.prototype.validate = function(value) {
        var _a;
        if (!this.validator) {
          return;
        }
        this.validationMessage = this.validator(value);
        this.eAutocompleteInput.getInputElement().setCustomValidity((_a = this.validationMessage) !== null && _a !== void 0 ? _a : "");
        this.valid = !this.validationMessage;
        this.dispatchEvent({
          type: AgAutocomplete2.EVENT_VALID_CHANGED,
          isValid: this.valid,
          validationMessage: this.validationMessage
        });
      };
      AgAutocomplete2.prototype.openList = function() {
        var _this = this;
        this.isListOpen = true;
        this.autocompleteList = this.createBean(new AgAutocompleteList({
          autocompleteEntries: this.autocompleteListParams.entries,
          onConfirmed: function() {
            return _this.confirmSelection();
          },
          forceLastSelection: this.forceLastSelection
        }));
        var ePopupGui = this.autocompleteList.getGui();
        var positionParams = {
          ePopup: ePopupGui,
          type: "autocomplete",
          eventSource: this.getGui(),
          position: "under",
          alignSide: this.gridOptionsService.is("enableRtl") ? "right" : "left",
          keepWithinBounds: true
        };
        var addPopupRes = this.popupService.addPopup({
          eChild: ePopupGui,
          anchorToElement: this.getGui(),
          positionCallback: function() {
            return _this.popupService.positionPopupByComponent(positionParams);
          },
          ariaLabel: this.listAriaLabel
        });
        this.hidePopup = addPopupRes.hideFunc;
        this.autocompleteList.afterGuiAttached();
      };
      AgAutocomplete2.prototype.closeList = function() {
        this.isListOpen = false;
        this.hidePopup();
        this.destroyBean(this.autocompleteList);
        this.autocompleteList = null;
      };
      AgAutocomplete2.prototype.onCompleted = function() {
        if (this.isListOpen) {
          this.closeList();
        }
        this.dispatchEvent({
          type: AgAutocomplete2.EVENT_VALUE_CONFIRMED,
          value: this.getValue(),
          isValid: this.isValid()
        });
      };
      AgAutocomplete2.prototype.getValue = function() {
        return makeNull(this.eAutocompleteInput.getValue());
      };
      AgAutocomplete2.prototype.setInputPlaceholder = function(placeholder) {
        this.eAutocompleteInput.setInputPlaceholder(placeholder);
        return this;
      };
      AgAutocomplete2.prototype.setInputAriaLabel = function(label) {
        this.eAutocompleteInput.setInputAriaLabel(label);
        return this;
      };
      AgAutocomplete2.prototype.setListAriaLabel = function(label) {
        this.listAriaLabel = label;
        return this;
      };
      AgAutocomplete2.prototype.setListGenerator = function(listGenerator) {
        this.listGenerator = listGenerator;
        return this;
      };
      AgAutocomplete2.prototype.setValidator = function(validator) {
        this.validator = validator;
        return this;
      };
      AgAutocomplete2.prototype.isValid = function() {
        return this.valid;
      };
      AgAutocomplete2.prototype.setValue = function(params) {
        var value = params.value, position = params.position, silent = params.silent, updateListOnlyIfOpen = params.updateListOnlyIfOpen, restoreFocus = params.restoreFocus;
        this.eAutocompleteInput.setValue(value, true);
        this.setCaret(position !== null && position !== void 0 ? position : this.lastPosition, restoreFocus);
        if (!silent) {
          this.updateValue(value);
        }
        if (!updateListOnlyIfOpen || this.isListOpen) {
          this.updateAutocompleteList(value);
        }
      };
      AgAutocomplete2.prototype.setForceLastSelection = function(forceLastSelection) {
        this.forceLastSelection = forceLastSelection;
        return this;
      };
      AgAutocomplete2.prototype.setInputDisabled = function(disabled) {
        this.eAutocompleteInput.setDisabled(disabled);
        return this;
      };
      AgAutocomplete2.EVENT_VALUE_CHANGED = "eventValueChanged";
      AgAutocomplete2.EVENT_VALUE_CONFIRMED = "eventValueConfirmed";
      AgAutocomplete2.EVENT_OPTION_SELECTED = "eventOptionSelected";
      AgAutocomplete2.EVENT_VALID_CHANGED = "eventValidChanged";
      __decorate$R([
        Autowired("popupService")
      ], AgAutocomplete2.prototype, "popupService", void 0);
      __decorate$R([
        RefSelector("eAutocompleteInput")
      ], AgAutocomplete2.prototype, "eAutocompleteInput", void 0);
      __decorate$R([
        PostConstruct
      ], AgAutocomplete2.prototype, "postConstruct", null);
      return AgAutocomplete2;
    }(Component);
    OUTSIDE_ANGULAR_EVENTS = ["mouseover", "mouseout", "mouseenter", "mouseleave", "mousemove"];
    PASSIVE_EVENTS = ["touchstart", "touchend", "touchmove", "touchcancel"];
    VanillaFrameworkOverrides = /** @class */
    function() {
      function VanillaFrameworkOverrides2() {
        this.renderingEngine = "vanilla";
        this.isOutsideAngular = function(eventType) {
          return includes(OUTSIDE_ANGULAR_EVENTS, eventType);
        };
      }
      VanillaFrameworkOverrides2.prototype.setTimeout = function(action, timeout) {
        window.setTimeout(action, timeout);
      };
      VanillaFrameworkOverrides2.prototype.setInterval = function(action, timeout) {
        return new AgPromise(function(resolve) {
          resolve(window.setInterval(action, timeout));
        });
      };
      VanillaFrameworkOverrides2.prototype.addEventListener = function(element, type, listener, useCapture) {
        var isPassive = includes(PASSIVE_EVENTS, type);
        element.addEventListener(type, listener, { capture: !!useCapture, passive: isPassive });
      };
      VanillaFrameworkOverrides2.prototype.dispatchEvent = function(eventType, listener, global2) {
        listener();
      };
      VanillaFrameworkOverrides2.prototype.frameworkComponent = function(name) {
        return null;
      };
      VanillaFrameworkOverrides2.prototype.isFrameworkComponent = function(comp) {
        return false;
      };
      return VanillaFrameworkOverrides2;
    }();
    __extends$O = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$Q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$a = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$8 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    CellNavigationService = /** @class */
    function(_super) {
      __extends$O(CellNavigationService2, _super);
      function CellNavigationService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CellNavigationService2.prototype.getNextCellToFocus = function(key, focusedCell, ctrlPressed) {
        if (ctrlPressed === void 0) {
          ctrlPressed = false;
        }
        if (ctrlPressed) {
          return this.getNextCellToFocusWithCtrlPressed(key, focusedCell);
        }
        return this.getNextCellToFocusWithoutCtrlPressed(key, focusedCell);
      };
      CellNavigationService2.prototype.getNextCellToFocusWithCtrlPressed = function(key, focusedCell) {
        var upKey = key === KeyCode.UP;
        var downKey = key === KeyCode.DOWN;
        var leftKey = key === KeyCode.LEFT;
        var column;
        var rowIndex;
        if (upKey || downKey) {
          rowIndex = upKey ? this.paginationProxy.getPageFirstRow() : this.paginationProxy.getPageLastRow();
          column = focusedCell.column;
        } else {
          var allColumns = this.columnModel.getAllDisplayedColumns();
          var isRtl = this.gridOptionsService.is("enableRtl");
          rowIndex = focusedCell.rowIndex;
          column = leftKey !== isRtl ? allColumns[0] : last(allColumns);
        }
        return {
          rowIndex,
          rowPinned: null,
          column
        };
      };
      CellNavigationService2.prototype.getNextCellToFocusWithoutCtrlPressed = function(key, focusedCell) {
        var pointer = focusedCell;
        var finished = false;
        while (!finished) {
          switch (key) {
            case KeyCode.UP:
              pointer = this.getCellAbove(pointer);
              break;
            case KeyCode.DOWN:
              pointer = this.getCellBelow(pointer);
              break;
            case KeyCode.RIGHT:
              if (this.gridOptionsService.is("enableRtl")) {
                pointer = this.getCellToLeft(pointer);
              } else {
                pointer = this.getCellToRight(pointer);
              }
              break;
            case KeyCode.LEFT:
              if (this.gridOptionsService.is("enableRtl")) {
                pointer = this.getCellToRight(pointer);
              } else {
                pointer = this.getCellToLeft(pointer);
              }
              break;
            default:
              pointer = null;
              console.warn("AG Grid: unknown key for navigation " + key);
              break;
          }
          if (pointer) {
            finished = this.isCellGoodToFocusOn(pointer);
          } else {
            finished = true;
          }
        }
        return pointer;
      };
      CellNavigationService2.prototype.isCellGoodToFocusOn = function(gridCell) {
        var column = gridCell.column;
        var rowNode;
        switch (gridCell.rowPinned) {
          case "top":
            rowNode = this.pinnedRowModel.getPinnedTopRow(gridCell.rowIndex);
            break;
          case "bottom":
            rowNode = this.pinnedRowModel.getPinnedBottomRow(gridCell.rowIndex);
            break;
          default:
            rowNode = this.rowModel.getRow(gridCell.rowIndex);
            break;
        }
        if (!rowNode) {
          return false;
        }
        var suppressNavigable = column.isSuppressNavigable(rowNode);
        return !suppressNavigable;
      };
      CellNavigationService2.prototype.getCellToLeft = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var colToLeft = this.columnModel.getDisplayedColBefore(lastCell.column);
        if (!colToLeft) {
          return null;
        }
        return {
          rowIndex: lastCell.rowIndex,
          column: colToLeft,
          rowPinned: lastCell.rowPinned
        };
      };
      CellNavigationService2.prototype.getCellToRight = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var colToRight = this.columnModel.getDisplayedColAfter(lastCell.column);
        if (!colToRight) {
          return null;
        }
        return {
          rowIndex: lastCell.rowIndex,
          column: colToRight,
          rowPinned: lastCell.rowPinned
        };
      };
      CellNavigationService2.prototype.getRowBelow = function(rowPosition) {
        var index = rowPosition.rowIndex;
        var pinned = rowPosition.rowPinned;
        if (this.isLastRowInContainer(rowPosition)) {
          switch (pinned) {
            case "bottom":
              return null;
            case "top":
              if (this.rowModel.isRowsToRender()) {
                return { rowIndex: this.paginationProxy.getPageFirstRow(), rowPinned: null };
              }
              if (this.pinnedRowModel.isRowsToRender("bottom")) {
                return { rowIndex: 0, rowPinned: "bottom" };
              }
              return null;
            default:
              if (this.pinnedRowModel.isRowsToRender("bottom")) {
                return { rowIndex: 0, rowPinned: "bottom" };
              }
              return null;
          }
        }
        var rowNode = this.rowModel.getRow(rowPosition.rowIndex);
        var nextStickyPosition = this.getNextStickyPosition(rowNode);
        if (nextStickyPosition) {
          return nextStickyPosition;
        }
        return { rowIndex: index + 1, rowPinned: pinned };
      };
      CellNavigationService2.prototype.getNextStickyPosition = function(rowNode, up) {
        if (!this.gridOptionsService.isGroupRowsSticky() || !rowNode || !rowNode.sticky) {
          return;
        }
        var stickyRowCtrls = __spreadArray$8([], __read$a(this.rowRenderer.getStickyTopRowCtrls())).sort(function(a, b) {
          return a.getRowNode().rowIndex - b.getRowNode().rowIndex;
        });
        var diff = up ? -1 : 1;
        var idx = stickyRowCtrls.findIndex(function(ctrl) {
          return ctrl.getRowNode().rowIndex === rowNode.rowIndex;
        });
        var nextCtrl = stickyRowCtrls[idx + diff];
        if (nextCtrl) {
          return { rowIndex: nextCtrl.getRowNode().rowIndex, rowPinned: null };
        }
      };
      CellNavigationService2.prototype.getCellBelow = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var rowBelow = this.getRowBelow(lastCell);
        if (rowBelow) {
          return {
            rowIndex: rowBelow.rowIndex,
            column: lastCell.column,
            rowPinned: rowBelow.rowPinned
          };
        }
        return null;
      };
      CellNavigationService2.prototype.isLastRowInContainer = function(rowPosition) {
        var pinned = rowPosition.rowPinned;
        var index = rowPosition.rowIndex;
        if (pinned === "top") {
          var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
          return lastTopIndex <= index;
        }
        if (pinned === "bottom") {
          var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
          return lastBottomIndex <= index;
        }
        var lastBodyIndex = this.paginationProxy.getPageLastRow();
        return lastBodyIndex <= index;
      };
      CellNavigationService2.prototype.getRowAbove = function(rowPosition) {
        var index = rowPosition.rowIndex;
        var pinned = rowPosition.rowPinned;
        var isFirstRow = pinned ? index === 0 : index === this.paginationProxy.getPageFirstRow();
        if (isFirstRow) {
          if (pinned === "top") {
            return null;
          }
          if (!pinned) {
            if (this.pinnedRowModel.isRowsToRender("top")) {
              return this.getLastFloatingTopRow();
            }
            return null;
          }
          if (this.rowModel.isRowsToRender()) {
            return this.getLastBodyCell();
          }
          if (this.pinnedRowModel.isRowsToRender("top")) {
            return this.getLastFloatingTopRow();
          }
          return null;
        }
        var rowNode = this.rowModel.getRow(rowPosition.rowIndex);
        var nextStickyPosition = this.getNextStickyPosition(rowNode, true);
        if (nextStickyPosition) {
          return nextStickyPosition;
        }
        return { rowIndex: index - 1, rowPinned: pinned };
      };
      CellNavigationService2.prototype.getCellAbove = function(lastCell) {
        if (!lastCell) {
          return null;
        }
        var rowAbove = this.getRowAbove({ rowIndex: lastCell.rowIndex, rowPinned: lastCell.rowPinned });
        if (rowAbove) {
          return {
            rowIndex: rowAbove.rowIndex,
            column: lastCell.column,
            rowPinned: rowAbove.rowPinned
          };
        }
        return null;
      };
      CellNavigationService2.prototype.getLastBodyCell = function() {
        var lastBodyRow = this.paginationProxy.getPageLastRow();
        return { rowIndex: lastBodyRow, rowPinned: null };
      };
      CellNavigationService2.prototype.getLastFloatingTopRow = function() {
        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
        return { rowIndex: lastFloatingRow, rowPinned: "top" };
      };
      CellNavigationService2.prototype.getNextTabbedCell = function(gridCell, backwards) {
        if (backwards) {
          return this.getNextTabbedCellBackwards(gridCell);
        }
        return this.getNextTabbedCellForwards(gridCell);
      };
      CellNavigationService2.prototype.getNextTabbedCellForwards = function(gridCell) {
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var newRowIndex = gridCell.rowIndex;
        var newFloating = gridCell.rowPinned;
        var newColumn = this.columnModel.getDisplayedColAfter(gridCell.column);
        if (!newColumn) {
          newColumn = displayedColumns[0];
          var rowBelow = this.getRowBelow(gridCell);
          if (missing(rowBelow)) {
            return null;
          }
          if (!rowBelow.rowPinned && !this.paginationProxy.isRowInPage(rowBelow)) {
            return null;
          }
          newRowIndex = rowBelow ? rowBelow.rowIndex : null;
          newFloating = rowBelow ? rowBelow.rowPinned : null;
        }
        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
      };
      CellNavigationService2.prototype.getNextTabbedCellBackwards = function(gridCell) {
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var newRowIndex = gridCell.rowIndex;
        var newFloating = gridCell.rowPinned;
        var newColumn = this.columnModel.getDisplayedColBefore(gridCell.column);
        if (!newColumn) {
          newColumn = last(displayedColumns);
          var rowAbove = this.getRowAbove({ rowIndex: gridCell.rowIndex, rowPinned: gridCell.rowPinned });
          if (missing(rowAbove)) {
            return null;
          }
          if (!rowAbove.rowPinned && !this.paginationProxy.isRowInPage(rowAbove)) {
            return null;
          }
          newRowIndex = rowAbove ? rowAbove.rowIndex : null;
          newFloating = rowAbove ? rowAbove.rowPinned : null;
        }
        return { rowIndex: newRowIndex, column: newColumn, rowPinned: newFloating };
      };
      __decorate$Q([
        Autowired("columnModel")
      ], CellNavigationService2.prototype, "columnModel", void 0);
      __decorate$Q([
        Autowired("rowModel")
      ], CellNavigationService2.prototype, "rowModel", void 0);
      __decorate$Q([
        Autowired("rowRenderer")
      ], CellNavigationService2.prototype, "rowRenderer", void 0);
      __decorate$Q([
        Autowired("pinnedRowModel")
      ], CellNavigationService2.prototype, "pinnedRowModel", void 0);
      __decorate$Q([
        Autowired("paginationProxy")
      ], CellNavigationService2.prototype, "paginationProxy", void 0);
      CellNavigationService2 = __decorate$Q([
        Bean("cellNavigationService")
      ], CellNavigationService2);
      return CellNavigationService2;
    }(BeanStub);
    __extends$N = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$P = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$6 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    AlignedGridsService = /** @class */
    function(_super) {
      __extends$N(AlignedGridsService2, _super);
      function AlignedGridsService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.consuming = false;
        return _this;
      }
      AlignedGridsService2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("AlignedGridsService");
      };
      AlignedGridsService2.prototype.init = function() {
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
      };
      AlignedGridsService2.prototype.fireEvent = function(callback) {
        if (this.consuming) {
          return;
        }
        var otherGrids = this.gridOptionsService.get("alignedGrids");
        if (otherGrids) {
          otherGrids.forEach(function(otherGridOptions) {
            if (otherGridOptions.api) {
              var alignedGridService = otherGridOptions.api.__getAlignedGridService();
              callback(alignedGridService);
            }
          });
        }
      };
      AlignedGridsService2.prototype.onEvent = function(callback) {
        this.consuming = true;
        callback();
        this.consuming = false;
      };
      AlignedGridsService2.prototype.fireColumnEvent = function(event) {
        this.fireEvent(function(alignedGridsService) {
          alignedGridsService.onColumnEvent(event);
        });
      };
      AlignedGridsService2.prototype.fireScrollEvent = function(event) {
        if (event.direction !== "horizontal") {
          return;
        }
        this.fireEvent(function(alignedGridsService) {
          alignedGridsService.onScrollEvent(event);
        });
      };
      AlignedGridsService2.prototype.onScrollEvent = function(event) {
        var _this = this;
        this.onEvent(function() {
          var gridBodyCon = _this.ctrlsService.getGridBodyCtrl();
          gridBodyCon.getScrollFeature().setHorizontalScrollPosition(event.left, true);
        });
      };
      AlignedGridsService2.prototype.getMasterColumns = function(event) {
        var result = [];
        if (event.columns) {
          event.columns.forEach(function(column) {
            result.push(column);
          });
        } else if (event.column) {
          result.push(event.column);
        }
        return result;
      };
      AlignedGridsService2.prototype.getColumnIds = function(event) {
        var result = [];
        if (event.columns) {
          event.columns.forEach(function(column) {
            result.push(column.getColId());
          });
        } else if (event.column) {
          result.push(event.column.getColId());
        }
        return result;
      };
      AlignedGridsService2.prototype.onColumnEvent = function(event) {
        var _this = this;
        this.onEvent(function() {
          switch (event.type) {
            case Events.EVENT_COLUMN_MOVED:
            case Events.EVENT_COLUMN_VISIBLE:
            case Events.EVENT_COLUMN_PINNED:
            case Events.EVENT_COLUMN_RESIZED:
              var colEvent = event;
              _this.processColumnEvent(colEvent);
              break;
            case Events.EVENT_COLUMN_GROUP_OPENED:
              var groupOpenedEvent = event;
              _this.processGroupOpenedEvent(groupOpenedEvent);
              break;
            case Events.EVENT_COLUMN_PIVOT_CHANGED:
              console.warn("AG Grid: pivoting is not supported with aligned grids. You can only use one of these features at a time in a grid.");
              break;
          }
        });
      };
      AlignedGridsService2.prototype.processGroupOpenedEvent = function(groupOpenedEvent) {
        var masterColumnGroup = groupOpenedEvent.columnGroup;
        var otherColumnGroup = null;
        if (masterColumnGroup) {
          var groupId = masterColumnGroup.getGroupId();
          otherColumnGroup = this.columnModel.getProvidedColumnGroup(groupId);
        }
        if (masterColumnGroup && !otherColumnGroup) {
          return;
        }
        this.logger.log("onColumnEvent-> processing " + groupOpenedEvent + " expanded = " + masterColumnGroup.isExpanded());
        this.columnModel.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded(), "alignedGridChanged");
      };
      AlignedGridsService2.prototype.processColumnEvent = function(colEvent) {
        var _this = this;
        var _a;
        var masterColumn = colEvent.column;
        var otherColumn = null;
        if (masterColumn) {
          otherColumn = this.columnModel.getPrimaryColumn(masterColumn.getColId());
        }
        if (masterColumn && !otherColumn) {
          return;
        }
        var masterColumns = this.getMasterColumns(colEvent);
        switch (colEvent.type) {
          case Events.EVENT_COLUMN_MOVED:
            {
              var movedEvent = colEvent;
              var srcColState = colEvent.columnApi.getColumnState();
              var destColState = srcColState.map(function(s) {
                return { colId: s.colId };
              });
              this.columnModel.applyColumnState({ state: destColState, applyOrder: true }, "alignedGridChanged");
              this.logger.log("onColumnEvent-> processing " + colEvent.type + " toIndex = " + movedEvent.toIndex);
            }
            break;
          case Events.EVENT_COLUMN_VISIBLE:
            {
              var visibleEvent = colEvent;
              var srcColState = colEvent.columnApi.getColumnState();
              var destColState = srcColState.map(function(s) {
                return { colId: s.colId, hide: s.hide };
              });
              this.columnModel.applyColumnState({ state: destColState }, "alignedGridChanged");
              this.logger.log("onColumnEvent-> processing " + colEvent.type + " visible = " + visibleEvent.visible);
            }
            break;
          case Events.EVENT_COLUMN_PINNED:
            {
              var pinnedEvent = colEvent;
              var srcColState = colEvent.columnApi.getColumnState();
              var destColState = srcColState.map(function(s) {
                return { colId: s.colId, pinned: s.pinned };
              });
              this.columnModel.applyColumnState({ state: destColState }, "alignedGridChanged");
              this.logger.log("onColumnEvent-> processing " + colEvent.type + " pinned = " + pinnedEvent.pinned);
            }
            break;
          case Events.EVENT_COLUMN_RESIZED:
            var resizedEvent = colEvent;
            var columnWidths_1 = {};
            masterColumns.forEach(function(column) {
              _this.logger.log("onColumnEvent-> processing " + colEvent.type + " actualWidth = " + column.getActualWidth());
              columnWidths_1[column.getId()] = { key: column.getColId(), newWidth: column.getActualWidth() };
            });
            (_a = resizedEvent.flexColumns) === null || _a === void 0 ? void 0 : _a.forEach(function(col) {
              if (columnWidths_1[col.getId()]) {
                delete columnWidths_1[col.getId()];
              }
            });
            this.columnModel.setColumnWidths(Object.values(columnWidths_1), false, resizedEvent.finished, "alignedGridChanged");
            break;
        }
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var isVerticalScrollShowing2 = gridBodyCon.isVerticalScrollShowing();
        var alignedGrids = this.gridOptionsService.get("alignedGrids");
        if (alignedGrids) {
          alignedGrids.forEach(function(grid) {
            if (grid.api) {
              grid.api.setAlwaysShowVerticalScroll(isVerticalScrollShowing2);
            }
          });
        }
      };
      __decorate$P([
        Autowired("columnModel")
      ], AlignedGridsService2.prototype, "columnModel", void 0);
      __decorate$P([
        Autowired("ctrlsService")
      ], AlignedGridsService2.prototype, "ctrlsService", void 0);
      __decorate$P([
        __param$6(0, Qualifier("loggerFactory"))
      ], AlignedGridsService2.prototype, "setBeans", null);
      __decorate$P([
        PostConstruct
      ], AlignedGridsService2.prototype, "init", null);
      AlignedGridsService2 = __decorate$P([
        Bean("alignedGridsService")
      ], AlignedGridsService2);
      return AlignedGridsService2;
    }(BeanStub);
    __extends$M = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$O = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$5 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __read$9 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    SelectionService = /** @class */
    function(_super) {
      __extends$M(SelectionService2, _super);
      function SelectionService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SelectionService2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("selectionService");
        this.reset();
      };
      SelectionService2.prototype.init = function() {
        var _this = this;
        this.groupSelectsChildren = this.gridOptionsService.is("groupSelectsChildren");
        this.addManagedPropertyListener("groupSelectsChildren", function(propChange) {
          return _this.groupSelectsChildren = propChange.currentValue;
        });
        this.rowSelection = this.gridOptionsService.get("rowSelection");
        this.addManagedPropertyListener("rowSelection", function(propChange) {
          return _this.rowSelection = propChange.currentValue;
        });
        this.addManagedListener(this.eventService, Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
      };
      SelectionService2.prototype.isMultiselect = function() {
        return this.rowSelection === "multiple";
      };
      SelectionService2.prototype.setNodesSelected = function(params) {
        var _a;
        if (params.nodes.length === 0)
          return 0;
        var newValue = params.newValue, clearSelection = params.clearSelection, suppressFinishActions = params.suppressFinishActions, rangeSelect = params.rangeSelect;
        params.event;
        var _b = params.source, source = _b === void 0 ? "api" : _b;
        if (params.nodes.length > 1 && !this.isMultiselect()) {
          console.warn("AG Grid: cannot multi select while rowSelection='single'");
          return 0;
        }
        var groupSelectsFiltered = this.groupSelectsChildren && params.groupSelectsFiltered === true;
        var nodes = params.nodes.map(function(node2) {
          return node2.footer ? node2.sibling : node2;
        });
        if (rangeSelect) {
          if (params.nodes.length > 1) {
            console.warn("AG Grid: cannot range select while selecting multiple rows");
            return 0;
          }
          var lastSelectedNode = this.getLastSelectedNode();
          if (lastSelectedNode) {
            var node = nodes[0];
            var newRowClicked = lastSelectedNode !== node;
            if (newRowClicked && this.isMultiselect()) {
              var nodesChanged = this.selectRange(node, lastSelectedNode, params.newValue, source);
              this.setLastSelectedNode(node);
              return nodesChanged;
            }
          }
        }
        var updatedCount = 0;
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          var skipThisNode = groupSelectsFiltered && node.group;
          if (!skipThisNode) {
            var thisNodeWasSelected = node.selectThisNode(newValue, params.event, source);
            if (thisNodeWasSelected) {
              updatedCount++;
            }
          }
          if (this.groupSelectsChildren && ((_a = node.childrenAfterGroup) === null || _a === void 0 ? void 0 : _a.length)) {
            updatedCount += this.selectChildren(node, newValue, groupSelectsFiltered, source);
          }
        }
        if (!suppressFinishActions) {
          var clearOtherNodes = newValue && (clearSelection || !this.isMultiselect());
          if (clearOtherNodes) {
            updatedCount += this.clearOtherNodes(nodes[0], source);
          }
          if (updatedCount > 0) {
            this.updateGroupsFromChildrenSelections(source);
            var event_1 = {
              type: Events.EVENT_SELECTION_CHANGED,
              source
            };
            this.eventService.dispatchEvent(event_1);
          }
          if (newValue) {
            this.setLastSelectedNode(nodes[nodes.length - 1]);
          }
        }
        return updatedCount;
      };
      SelectionService2.prototype.selectRange = function(fromNode, toNode, value, source) {
        var _this = this;
        if (value === void 0) {
          value = true;
        }
        var nodesToSelect = this.rowModel.getNodesInRangeForSelection(fromNode, toNode);
        var updatedCount = 0;
        nodesToSelect.forEach(function(rowNode) {
          if (rowNode.group && _this.groupSelectsChildren || value === false && fromNode === rowNode) {
            return;
          }
          var nodeWasSelected = rowNode.selectThisNode(value, void 0, source);
          if (nodeWasSelected) {
            updatedCount++;
          }
        });
        this.updateGroupsFromChildrenSelections(source);
        var event = {
          type: Events.EVENT_SELECTION_CHANGED,
          source
        };
        this.eventService.dispatchEvent(event);
        return updatedCount;
      };
      SelectionService2.prototype.selectChildren = function(node, newValue, groupSelectsFiltered, source) {
        var children = groupSelectsFiltered ? node.childrenAfterAggFilter : node.childrenAfterGroup;
        if (_.missing(children)) {
          return 0;
        }
        return this.setNodesSelected({
          newValue,
          clearSelection: false,
          suppressFinishActions: true,
          groupSelectsFiltered,
          source,
          nodes: children
        });
      };
      SelectionService2.prototype.setLastSelectedNode = function(rowNode) {
        this.lastSelectedNode = rowNode;
      };
      SelectionService2.prototype.getLastSelectedNode = function() {
        return this.lastSelectedNode;
      };
      SelectionService2.prototype.getSelectedNodes = function() {
        var selectedNodes = [];
        iterateObject(this.selectedNodes, function(key, rowNode) {
          if (rowNode) {
            selectedNodes.push(rowNode);
          }
        });
        return selectedNodes;
      };
      SelectionService2.prototype.getSelectedRows = function() {
        var selectedRows = [];
        iterateObject(this.selectedNodes, function(key, rowNode) {
          if (rowNode && rowNode.data) {
            selectedRows.push(rowNode.data);
          }
        });
        return selectedRows;
      };
      SelectionService2.prototype.getSelectionCount = function() {
        return Object.values(this.selectedNodes).length;
      };
      SelectionService2.prototype.filterFromSelection = function(predicate) {
        var newSelectedNodes = {};
        Object.entries(this.selectedNodes).forEach(function(_a) {
          var _b = __read$9(_a, 2), key = _b[0], node = _b[1];
          var passesPredicate = node && predicate(node);
          if (passesPredicate) {
            newSelectedNodes[key] = node;
          }
        });
        this.selectedNodes = newSelectedNodes;
      };
      SelectionService2.prototype.updateGroupsFromChildrenSelections = function(source, changedPath) {
        if (!this.groupSelectsChildren) {
          return false;
        }
        if (this.rowModel.getType() !== "clientSide") {
          return false;
        }
        var clientSideRowModel = this.rowModel;
        var rootNode = clientSideRowModel.getRootNode();
        if (!changedPath) {
          changedPath = new ChangedPath(true, rootNode);
          changedPath.setInactive();
        }
        var selectionChanged = false;
        changedPath.forEachChangedNodeDepthFirst(function(rowNode) {
          if (rowNode !== rootNode) {
            var selected = rowNode.calculateSelectedFromChildren();
            selectionChanged = rowNode.selectThisNode(selected === null ? false : selected, void 0, source) || selectionChanged;
          }
        });
        return selectionChanged;
      };
      SelectionService2.prototype.clearOtherNodes = function(rowNodeToKeepSelected, source) {
        var _this = this;
        var groupsToRefresh = {};
        var updatedCount = 0;
        iterateObject(this.selectedNodes, function(key, otherRowNode) {
          if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
            var rowNode = _this.selectedNodes[otherRowNode.id];
            updatedCount += rowNode.setSelectedParams({
              newValue: false,
              clearSelection: false,
              suppressFinishActions: true,
              source
            });
            if (_this.groupSelectsChildren && otherRowNode.parent) {
              groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
            }
          }
        });
        iterateObject(groupsToRefresh, function(key, group) {
          var selected = group.calculateSelectedFromChildren();
          group.selectThisNode(selected === null ? false : selected, void 0, source);
        });
        return updatedCount;
      };
      SelectionService2.prototype.onRowSelected = function(event) {
        var rowNode = event.node;
        if (this.groupSelectsChildren && rowNode.group) {
          return;
        }
        if (rowNode.isSelected()) {
          this.selectedNodes[rowNode.id] = rowNode;
        } else {
          delete this.selectedNodes[rowNode.id];
        }
      };
      SelectionService2.prototype.syncInRowNode = function(rowNode, oldNode) {
        this.syncInOldRowNode(rowNode, oldNode);
        this.syncInNewRowNode(rowNode);
      };
      SelectionService2.prototype.syncInOldRowNode = function(rowNode, oldNode) {
        var oldNodeHasDifferentId = exists(oldNode) && rowNode.id !== oldNode.id;
        if (oldNodeHasDifferentId && oldNode) {
          var id = oldNode.id;
          var oldNodeSelected = this.selectedNodes[id] == rowNode;
          if (oldNodeSelected) {
            this.selectedNodes[oldNode.id] = oldNode;
          }
        }
      };
      SelectionService2.prototype.syncInNewRowNode = function(rowNode) {
        if (exists(this.selectedNodes[rowNode.id])) {
          rowNode.setSelectedInitialValue(true);
          this.selectedNodes[rowNode.id] = rowNode;
        } else {
          rowNode.setSelectedInitialValue(false);
        }
      };
      SelectionService2.prototype.reset = function() {
        this.logger.log("reset");
        this.selectedNodes = {};
        this.lastSelectedNode = null;
      };
      SelectionService2.prototype.getBestCostNodeSelection = function() {
        if (this.rowModel.getType() !== "clientSide") {
          return;
        }
        var clientSideRowModel = this.rowModel;
        var topLevelNodes = clientSideRowModel.getTopLevelNodes();
        if (topLevelNodes === null) {
          return;
        }
        var result = [];
        function traverse(nodes) {
          for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            if (node.isSelected()) {
              result.push(node);
            } else {
              var maybeGroup = node;
              if (maybeGroup.group && maybeGroup.children) {
                traverse(maybeGroup.children);
              }
            }
          }
        }
        traverse(topLevelNodes);
        return result;
      };
      SelectionService2.prototype.isEmpty = function() {
        var count = 0;
        iterateObject(this.selectedNodes, function(nodeId, rowNode) {
          if (rowNode) {
            count++;
          }
        });
        return count === 0;
      };
      SelectionService2.prototype.deselectAllRowNodes = function(params) {
        var callback = function(rowNode) {
          return rowNode.selectThisNode(false, void 0, source);
        };
        var rowModelClientSide = this.rowModel.getType() === "clientSide";
        var source = params.source, justFiltered = params.justFiltered, justCurrentPage = params.justCurrentPage;
        if (justCurrentPage || justFiltered) {
          if (!rowModelClientSide) {
            console.error("AG Grid: selecting just filtered only works when gridOptions.rowModelType='clientSide'");
            return;
          }
          this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);
        } else {
          iterateObject(this.selectedNodes, function(id, rowNode) {
            if (rowNode) {
              callback(rowNode);
            }
          });
          this.reset();
        }
        if (rowModelClientSide && this.groupSelectsChildren) {
          this.updateGroupsFromChildrenSelections(source);
        }
        var event = {
          type: Events.EVENT_SELECTION_CHANGED,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      SelectionService2.prototype.getSelectAllState = function(justFiltered, justCurrentPage) {
        var _this = this;
        var selectedCount = 0;
        var notSelectedCount = 0;
        var callback = function(node) {
          if (_this.groupSelectsChildren && node.group) {
            return;
          }
          if (node.isSelected()) {
            selectedCount++;
          } else if (!node.selectable)
            ;
          else {
            notSelectedCount++;
          }
        };
        this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);
        if (selectedCount === 0 && notSelectedCount === 0) {
          return false;
        }
        if (selectedCount > 0 && notSelectedCount > 0) {
          return null;
        }
        return selectedCount > 0;
      };
      SelectionService2.prototype.getNodesToSelect = function(justFiltered, justCurrentPage) {
        var _this = this;
        if (justFiltered === void 0) {
          justFiltered = false;
        }
        if (justCurrentPage === void 0) {
          justCurrentPage = false;
        }
        if (this.rowModel.getType() !== "clientSide") {
          throw new Error("selectAll only available when rowModelType='clientSide', ie not " + this.rowModel.getType());
        }
        var nodes = [];
        if (justCurrentPage) {
          this.paginationProxy.forEachNodeOnPage(function(node) {
            if (!node.group) {
              nodes.push(node);
              return;
            }
            if (!node.expanded) {
              var recursivelyAddChildren_1 = function(child) {
                var _a;
                nodes.push(child);
                if ((_a = child.childrenAfterFilter) === null || _a === void 0 ? void 0 : _a.length) {
                  child.childrenAfterFilter.forEach(recursivelyAddChildren_1);
                }
              };
              recursivelyAddChildren_1(node);
              return;
            }
            if (!_this.groupSelectsChildren) {
              nodes.push(node);
            }
          });
          return nodes;
        }
        var clientSideRowModel = this.rowModel;
        if (justFiltered) {
          clientSideRowModel.forEachNodeAfterFilter(function(node) {
            nodes.push(node);
          });
          return nodes;
        }
        clientSideRowModel.forEachNode(function(node) {
          nodes.push(node);
        });
        return nodes;
      };
      SelectionService2.prototype.selectAllRowNodes = function(params) {
        if (this.rowModel.getType() !== "clientSide") {
          throw new Error("selectAll only available when rowModelType='clientSide', ie not " + this.rowModel.getType());
        }
        var source = params.source, justFiltered = params.justFiltered, justCurrentPage = params.justCurrentPage;
        var callback = function(rowNode) {
          return rowNode.selectThisNode(true, void 0, source);
        };
        this.getNodesToSelect(justFiltered, justCurrentPage).forEach(callback);
        if (this.rowModel.getType() === "clientSide" && this.groupSelectsChildren) {
          this.updateGroupsFromChildrenSelections(source);
        }
        var event = {
          type: Events.EVENT_SELECTION_CHANGED,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      SelectionService2.prototype.getServerSideSelectionState = function() {
        return null;
      };
      SelectionService2.prototype.setServerSideSelectionState = function(state) {
      };
      __decorate$O([
        Autowired("rowModel")
      ], SelectionService2.prototype, "rowModel", void 0);
      __decorate$O([
        Autowired("paginationProxy")
      ], SelectionService2.prototype, "paginationProxy", void 0);
      __decorate$O([
        __param$5(0, Qualifier("loggerFactory"))
      ], SelectionService2.prototype, "setBeans", null);
      __decorate$O([
        PostConstruct
      ], SelectionService2.prototype, "init", null);
      SelectionService2 = __decorate$O([
        Bean("selectionService")
      ], SelectionService2);
      return SelectionService2;
    }(BeanStub);
    __decorate$N = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnApi = /** @class */
    function() {
      function ColumnApi2() {
      }
      ColumnApi2.prototype.sizeColumnsToFit = function(gridWidth) {
        if (typeof gridWidth === "undefined") {
          console.error("AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)");
        }
        this.columnModel.sizeColumnsToFit(gridWidth, "api");
      };
      ColumnApi2.prototype.setColumnGroupOpened = function(group, newValue) {
        this.columnModel.setColumnGroupOpened(group, newValue, "api");
      };
      ColumnApi2.prototype.getColumnGroup = function(name, instanceId) {
        return this.columnModel.getColumnGroup(name, instanceId);
      };
      ColumnApi2.prototype.getProvidedColumnGroup = function(name) {
        return this.columnModel.getProvidedColumnGroup(name);
      };
      ColumnApi2.prototype.getDisplayNameForColumn = function(column, location) {
        return this.columnModel.getDisplayNameForColumn(column, location) || "";
      };
      ColumnApi2.prototype.getDisplayNameForColumnGroup = function(columnGroup, location) {
        return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || "";
      };
      ColumnApi2.prototype.getColumn = function(key) {
        return this.columnModel.getPrimaryColumn(key);
      };
      ColumnApi2.prototype.getColumns = function() {
        return this.columnModel.getAllPrimaryColumns();
      };
      ColumnApi2.prototype.applyColumnState = function(params) {
        return this.columnModel.applyColumnState(params, "api");
      };
      ColumnApi2.prototype.getColumnState = function() {
        return this.columnModel.getColumnState();
      };
      ColumnApi2.prototype.resetColumnState = function() {
        this.columnModel.resetColumnState("api");
      };
      ColumnApi2.prototype.getColumnGroupState = function() {
        return this.columnModel.getColumnGroupState();
      };
      ColumnApi2.prototype.setColumnGroupState = function(stateItems) {
        this.columnModel.setColumnGroupState(stateItems, "api");
      };
      ColumnApi2.prototype.resetColumnGroupState = function() {
        this.columnModel.resetColumnGroupState("api");
      };
      ColumnApi2.prototype.isPinning = function() {
        return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight();
      };
      ColumnApi2.prototype.isPinningLeft = function() {
        return this.columnModel.isPinningLeft();
      };
      ColumnApi2.prototype.isPinningRight = function() {
        return this.columnModel.isPinningRight();
      };
      ColumnApi2.prototype.getDisplayedColAfter = function(col) {
        return this.columnModel.getDisplayedColAfter(col);
      };
      ColumnApi2.prototype.getDisplayedColBefore = function(col) {
        return this.columnModel.getDisplayedColBefore(col);
      };
      ColumnApi2.prototype.setColumnVisible = function(key, visible) {
        this.columnModel.setColumnVisible(key, visible, "api");
      };
      ColumnApi2.prototype.setColumnsVisible = function(keys2, visible) {
        this.columnModel.setColumnsVisible(keys2, visible, "api");
      };
      ColumnApi2.prototype.setColumnPinned = function(key, pinned) {
        this.columnModel.setColumnPinned(key, pinned, "api");
      };
      ColumnApi2.prototype.setColumnsPinned = function(keys2, pinned) {
        this.columnModel.setColumnsPinned(keys2, pinned, "api");
      };
      ColumnApi2.prototype.getAllGridColumns = function() {
        return this.columnModel.getAllGridColumns();
      };
      ColumnApi2.prototype.getDisplayedLeftColumns = function() {
        return this.columnModel.getDisplayedLeftColumns();
      };
      ColumnApi2.prototype.getDisplayedCenterColumns = function() {
        return this.columnModel.getDisplayedCenterColumns();
      };
      ColumnApi2.prototype.getDisplayedRightColumns = function() {
        return this.columnModel.getDisplayedRightColumns();
      };
      ColumnApi2.prototype.getAllDisplayedColumns = function() {
        return this.columnModel.getAllDisplayedColumns();
      };
      ColumnApi2.prototype.getAllDisplayedVirtualColumns = function() {
        return this.columnModel.getViewportColumns();
      };
      ColumnApi2.prototype.moveColumn = function(key, toIndex) {
        this.columnModel.moveColumn(key, toIndex, "api");
      };
      ColumnApi2.prototype.moveColumnByIndex = function(fromIndex, toIndex) {
        this.columnModel.moveColumnByIndex(fromIndex, toIndex, "api");
      };
      ColumnApi2.prototype.moveColumns = function(columnsToMoveKeys, toIndex) {
        this.columnModel.moveColumns(columnsToMoveKeys, toIndex, "api");
      };
      ColumnApi2.prototype.moveRowGroupColumn = function(fromIndex, toIndex) {
        this.columnModel.moveRowGroupColumn(fromIndex, toIndex);
      };
      ColumnApi2.prototype.setColumnAggFunc = function(key, aggFunc) {
        this.columnModel.setColumnAggFunc(key, aggFunc);
      };
      ColumnApi2.prototype.setColumnWidth = function(key, newWidth, finished, source) {
        if (finished === void 0) {
          finished = true;
        }
        this.columnModel.setColumnWidths([{ key, newWidth }], false, finished, source);
      };
      ColumnApi2.prototype.setColumnWidths = function(columnWidths, finished, source) {
        if (finished === void 0) {
          finished = true;
        }
        this.columnModel.setColumnWidths(columnWidths, false, finished, source);
      };
      ColumnApi2.prototype.setPivotMode = function(pivotMode) {
        this.columnModel.setPivotMode(pivotMode);
      };
      ColumnApi2.prototype.isPivotMode = function() {
        return this.columnModel.isPivotMode();
      };
      ColumnApi2.prototype.getPivotResultColumn = function(pivotKeys, valueColKey) {
        return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey);
      };
      ColumnApi2.prototype.setValueColumns = function(colKeys) {
        this.columnModel.setValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getValueColumns = function() {
        return this.columnModel.getValueColumns();
      };
      ColumnApi2.prototype.removeValueColumn = function(colKey) {
        this.columnModel.removeValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.removeValueColumns = function(colKeys) {
        this.columnModel.removeValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addValueColumn = function(colKey) {
        this.columnModel.addValueColumn(colKey, "api");
      };
      ColumnApi2.prototype.addValueColumns = function(colKeys) {
        this.columnModel.addValueColumns(colKeys, "api");
      };
      ColumnApi2.prototype.setRowGroupColumns = function(colKeys) {
        this.columnModel.setRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.removeRowGroupColumn = function(colKey) {
        this.columnModel.removeRowGroupColumn(colKey, "api");
      };
      ColumnApi2.prototype.removeRowGroupColumns = function(colKeys) {
        this.columnModel.removeRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addRowGroupColumn = function(colKey) {
        this.columnModel.addRowGroupColumn(colKey, "api");
      };
      ColumnApi2.prototype.addRowGroupColumns = function(colKeys) {
        this.columnModel.addRowGroupColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getRowGroupColumns = function() {
        return this.columnModel.getRowGroupColumns();
      };
      ColumnApi2.prototype.setPivotColumns = function(colKeys) {
        this.columnModel.setPivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.removePivotColumn = function(colKey) {
        this.columnModel.removePivotColumn(colKey, "api");
      };
      ColumnApi2.prototype.removePivotColumns = function(colKeys) {
        this.columnModel.removePivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.addPivotColumn = function(colKey) {
        this.columnModel.addPivotColumn(colKey, "api");
      };
      ColumnApi2.prototype.addPivotColumns = function(colKeys) {
        this.columnModel.addPivotColumns(colKeys, "api");
      };
      ColumnApi2.prototype.getPivotColumns = function() {
        return this.columnModel.getPivotColumns();
      };
      ColumnApi2.prototype.getLeftDisplayedColumnGroups = function() {
        return this.columnModel.getDisplayedTreeLeft();
      };
      ColumnApi2.prototype.getCenterDisplayedColumnGroups = function() {
        return this.columnModel.getDisplayedTreeCentre();
      };
      ColumnApi2.prototype.getRightDisplayedColumnGroups = function() {
        return this.columnModel.getDisplayedTreeRight();
      };
      ColumnApi2.prototype.getAllDisplayedColumnGroups = function() {
        return this.columnModel.getAllDisplayedTrees();
      };
      ColumnApi2.prototype.autoSizeColumn = function(key, skipHeader) {
        return this.columnModel.autoSizeColumn(key, skipHeader, "api");
      };
      ColumnApi2.prototype.autoSizeColumns = function(keys2, skipHeader) {
        this.columnModel.autoSizeColumns({ columns: keys2, skipHeader });
      };
      ColumnApi2.prototype.autoSizeAllColumns = function(skipHeader) {
        this.columnModel.autoSizeAllColumns(skipHeader, "api");
      };
      ColumnApi2.prototype.setPivotResultColumns = function(colDefs) {
        this.columnModel.setSecondaryColumns(colDefs, "api");
      };
      ColumnApi2.prototype.getPivotResultColumns = function() {
        return this.columnModel.getSecondaryColumns();
      };
      ColumnApi2.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function() {
        setTimeout(_.removeAllReferences.bind(window, this, "Column API"), 100);
      };
      ColumnApi2.prototype.getAllColumns = function() {
        logDeprecation("28.0", "getAllColumns", "getColumns");
        return this.getColumns();
      };
      ColumnApi2.prototype.getPrimaryColumns = function() {
        logDeprecation("28.0", "getPrimaryColumns", "getColumns");
        return this.getColumns();
      };
      ColumnApi2.prototype.getSecondaryColumns = function() {
        logDeprecation("28.0", "getSecondaryColumns", "getPivotResultColumns");
        return this.getPivotResultColumns();
      };
      ColumnApi2.prototype.setSecondaryColumns = function(colDefs) {
        logDeprecation("28.0", "setSecondaryColumns", "setPivotResultColumns");
        this.setPivotResultColumns(colDefs);
      };
      ColumnApi2.prototype.getSecondaryPivotColumn = function(pivotKeys, valueColKey) {
        logDeprecation("28.0", "getSecondaryPivotColumn", "getPivotResultColumn");
        return this.getPivotResultColumn(pivotKeys, valueColKey);
      };
      __decorate$N([
        Autowired("columnModel")
      ], ColumnApi2.prototype, "columnModel", void 0);
      __decorate$N([
        PreDestroy
      ], ColumnApi2.prototype, "cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid", null);
      ColumnApi2 = __decorate$N([
        Bean("columnApi")
      ], ColumnApi2);
      return ColumnApi2;
    }();
    __extends$L = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$M = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ValueService = /** @class */
    function(_super) {
      __extends$L(ValueService2, _super);
      function ValueService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.initialised = false;
        _this.isSsrm = false;
        return _this;
      }
      ValueService2.prototype.init = function() {
        var _this = this;
        this.isSsrm = this.gridOptionsService.isRowModelType("serverSide");
        this.cellExpressions = this.gridOptionsService.is("enableCellExpressions");
        this.isTreeData = this.gridOptionsService.is("treeData");
        this.initialised = true;
        this.eventService.addEventListener(Events.EVENT_CELL_VALUE_CHANGED, function(event) {
          return _this.callColumnCellValueChangedHandler(event);
        }, this.gridOptionsService.useAsyncEvents());
        this.addManagedPropertyListener("treeData", function(propChange) {
          return _this.isTreeData = propChange.currentValue;
        });
      };
      ValueService2.prototype.getValue = function(column, rowNode, forFilter, ignoreAggData) {
        if (forFilter === void 0) {
          forFilter = false;
        }
        if (ignoreAggData === void 0) {
          ignoreAggData = false;
        }
        if (!this.initialised) {
          this.init();
        }
        if (!rowNode) {
          return;
        }
        var colDef = column.getColDef();
        var field = colDef.field;
        var colId = column.getColId();
        var data = rowNode.data;
        var result;
        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== void 0;
        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== void 0;
        var ignoreSsrmAggData = this.isSsrm && ignoreAggData && !!column.getColDef().aggFunc;
        var ssrmFooterGroupCol = this.isSsrm && rowNode.footer && rowNode.field && (column.getColDef().showRowGroup === true || column.getColDef().showRowGroup === rowNode.field);
        if (forFilter && colDef.filterValueGetter) {
          result = this.executeFilterValueGetter(colDef.filterValueGetter, data, column, rowNode);
        } else if (this.isTreeData && aggDataExists) {
          result = rowNode.aggData[colId];
        } else if (this.isTreeData && colDef.valueGetter) {
          result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
        } else if (this.isTreeData && (field && data)) {
          result = getValueUsingField(data, field, column.isFieldContainsDots());
        } else if (groupDataExists) {
          result = rowNode.groupData[colId];
        } else if (aggDataExists) {
          result = rowNode.aggData[colId];
        } else if (colDef.valueGetter) {
          result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
        } else if (ssrmFooterGroupCol) {
          result = getValueUsingField(data, rowNode.field, column.isFieldContainsDots());
        } else if (field && data && !ignoreSsrmAggData) {
          result = getValueUsingField(data, field, column.isFieldContainsDots());
        }
        if (this.cellExpressions && typeof result === "string" && result.indexOf("=") === 0) {
          var cellValueGetter = result.substring(1);
          result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
        }
        if (result == null) {
          var openedGroup = this.getOpenedGroup(rowNode, column);
          if (openedGroup != null) {
            return openedGroup;
          }
        }
        return result;
      };
      ValueService2.prototype.getOpenedGroup = function(rowNode, column) {
        if (!this.gridOptionsService.is("showOpenedGroup")) {
          return;
        }
        var colDef = column.getColDef();
        if (!colDef.showRowGroup) {
          return;
        }
        var showRowGroup = column.getColDef().showRowGroup;
        var pointer = rowNode.parent;
        while (pointer != null) {
          if (pointer.rowGroupColumn && (showRowGroup === true || showRowGroup === pointer.rowGroupColumn.getColId())) {
            return pointer.key;
          }
          pointer = pointer.parent;
        }
        return void 0;
      };
      ValueService2.prototype.setValue = function(rowNode, colKey, newValue, eventSource) {
        var column = this.columnModel.getPrimaryColumn(colKey);
        if (!rowNode || !column) {
          return false;
        }
        if (missing(rowNode.data)) {
          rowNode.data = {};
        }
        var _a = column.getColDef(), field = _a.field, valueSetter = _a.valueSetter;
        if (missing(field) && missing(valueSetter)) {
          console.warn("AG Grid: you need either field or valueSetter set on colDef for editing to work");
          return false;
        }
        if (!this.dataTypeService.checkType(column, newValue)) {
          console.warn("AG Grid: Data type of the new value does not match the cell data type of the column");
          return false;
        }
        var params = {
          node: rowNode,
          data: rowNode.data,
          oldValue: this.getValue(column, rowNode),
          newValue,
          colDef: column.getColDef(),
          column,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context
        };
        params.newValue = newValue;
        var valueWasDifferent;
        if (exists(valueSetter)) {
          if (typeof valueSetter === "function") {
            valueWasDifferent = valueSetter(params);
          } else {
            valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
          }
        } else {
          valueWasDifferent = this.setValueUsingField(rowNode.data, field, newValue, column.isFieldContainsDots());
        }
        if (valueWasDifferent === void 0) {
          valueWasDifferent = true;
        }
        if (!valueWasDifferent) {
          return false;
        }
        rowNode.resetQuickFilterAggregateText();
        this.valueCache.onDataChanged();
        params.newValue = this.getValue(column, rowNode);
        var event = {
          type: Events.EVENT_CELL_VALUE_CHANGED,
          event: null,
          rowIndex: rowNode.rowIndex,
          rowPinned: rowNode.rowPinned,
          column: params.column,
          api: params.api,
          columnApi: params.columnApi,
          colDef: params.colDef,
          context: params.context,
          data: rowNode.data,
          node: rowNode,
          oldValue: params.oldValue,
          newValue: params.newValue,
          value: params.newValue,
          source: eventSource
        };
        this.eventService.dispatchEvent(event);
        return true;
      };
      ValueService2.prototype.callColumnCellValueChangedHandler = function(event) {
        var onCellValueChanged = event.colDef.onCellValueChanged;
        if (typeof onCellValueChanged === "function") {
          onCellValueChanged({
            node: event.node,
            data: event.data,
            oldValue: event.oldValue,
            newValue: event.newValue,
            colDef: event.colDef,
            column: event.column,
            api: event.api,
            columnApi: event.columnApi,
            context: event.context
          });
        }
      };
      ValueService2.prototype.setValueUsingField = function(data, field, newValue, isFieldContainsDots) {
        if (!field) {
          return false;
        }
        var valuesAreSame = false;
        if (!isFieldContainsDots) {
          valuesAreSame = data[field] === newValue;
          if (!valuesAreSame) {
            data[field] = newValue;
          }
        } else {
          var fieldPieces = field.split(".");
          var currentObject = data;
          while (fieldPieces.length > 0 && currentObject) {
            var fieldPiece = fieldPieces.shift();
            if (fieldPieces.length === 0) {
              valuesAreSame = currentObject[fieldPiece] === newValue;
              if (!valuesAreSame) {
                currentObject[fieldPiece] = newValue;
              }
            } else {
              currentObject = currentObject[fieldPiece];
            }
          }
        }
        return !valuesAreSame;
      };
      ValueService2.prototype.executeFilterValueGetter = function(valueGetter, data, column, rowNode) {
        var params = {
          data,
          node: rowNode,
          column,
          colDef: column.getColDef(),
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context,
          getValue: this.getValueCallback.bind(this, rowNode)
        };
        if (typeof valueGetter === "function") {
          return valueGetter(params);
        }
        return this.expressionService.evaluate(valueGetter, params);
      };
      ValueService2.prototype.executeValueGetter = function(valueGetter, data, column, rowNode) {
        var colId = column.getColId();
        var valueFromCache = this.valueCache.getValue(rowNode, colId);
        if (valueFromCache !== void 0) {
          return valueFromCache;
        }
        var params = {
          data,
          node: rowNode,
          column,
          colDef: column.getColDef(),
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context,
          getValue: this.getValueCallback.bind(this, rowNode)
        };
        var result;
        if (typeof valueGetter === "function") {
          result = valueGetter(params);
        } else {
          result = this.expressionService.evaluate(valueGetter, params);
        }
        this.valueCache.setValue(rowNode, colId, result);
        return result;
      };
      ValueService2.prototype.getValueCallback = function(node, field) {
        var otherColumn = this.columnModel.getPrimaryColumn(field);
        if (otherColumn) {
          return this.getValue(otherColumn, node);
        }
        return null;
      };
      ValueService2.prototype.getKeyForNode = function(col, rowNode) {
        var value = this.getValue(col, rowNode);
        var keyCreator = col.getColDef().keyCreator;
        var result = value;
        if (keyCreator) {
          var keyParams = {
            value,
            colDef: col.getColDef(),
            column: col,
            node: rowNode,
            data: rowNode.data,
            api: this.gridOptionsService.api,
            columnApi: this.gridOptionsService.columnApi,
            context: this.gridOptionsService.context
          };
          result = keyCreator(keyParams);
        }
        if (typeof result === "string" || result == null) {
          return result;
        }
        result = String(result);
        if (result === "[object Object]") {
          doOnce(function() {
            console.warn("AG Grid: a column you are grouping or pivoting by has objects as values. If you want to group by complex objects then either a) use a colDef.keyCreator (se AG Grid docs) or b) to toString() on the object to return a key");
          }, "getKeyForNode - warn about [object,object]");
        }
        return result;
      };
      __decorate$M([
        Autowired("expressionService")
      ], ValueService2.prototype, "expressionService", void 0);
      __decorate$M([
        Autowired("columnModel")
      ], ValueService2.prototype, "columnModel", void 0);
      __decorate$M([
        Autowired("valueCache")
      ], ValueService2.prototype, "valueCache", void 0);
      __decorate$M([
        Autowired("dataTypeService")
      ], ValueService2.prototype, "dataTypeService", void 0);
      __decorate$M([
        PostConstruct
      ], ValueService2.prototype, "init", null);
      ValueService2 = __decorate$M([
        Bean("valueService")
      ], ValueService2);
      return ValueService2;
    }(BeanStub);
    __extends$K = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$L = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$4 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    ExpressionService = /** @class */
    function(_super) {
      __extends$K(ExpressionService2, _super);
      function ExpressionService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.expressionToFunctionCache = {};
        return _this;
      }
      ExpressionService2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("ExpressionService");
      };
      ExpressionService2.prototype.evaluate = function(expression, params) {
        if (typeof expression === "string") {
          return this.evaluateExpression(expression, params);
        } else {
          console.error("AG Grid: value should be either a string or a function", expression);
        }
      };
      ExpressionService2.prototype.evaluateExpression = function(expression, params) {
        try {
          var javaScriptFunction = this.createExpressionFunction(expression);
          var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
          return result;
        } catch (e) {
          console.log("Processing of the expression failed");
          console.log("Expression = " + expression);
          console.log("Params =", params);
          console.log("Exception = " + e);
          return null;
        }
      };
      ExpressionService2.prototype.createExpressionFunction = function(expression) {
        if (this.expressionToFunctionCache[expression]) {
          return this.expressionToFunctionCache[expression];
        }
        var functionBody = this.createFunctionBody(expression);
        var theFunction = new Function("x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup", functionBody);
        this.expressionToFunctionCache[expression] = theFunction;
        return theFunction;
      };
      ExpressionService2.prototype.createFunctionBody = function(expression) {
        if (expression.indexOf("return") >= 0) {
          return expression;
        } else {
          return "return " + expression + ";";
        }
      };
      __decorate$L([
        __param$4(0, Qualifier("loggerFactory"))
      ], ExpressionService2.prototype, "setBeans", null);
      ExpressionService2 = __decorate$L([
        Bean("expressionService")
      ], ExpressionService2);
      return ExpressionService2;
    }(BeanStub);
    __extends$J = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$K = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    TemplateService = /** @class */
    function(_super) {
      __extends$J(TemplateService2, _super);
      function TemplateService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.templateCache = {};
        _this.waitingCallbacks = {};
        return _this;
      }
      TemplateService2.prototype.getTemplate = function(url, callback) {
        var templateFromCache = this.templateCache[url];
        if (templateFromCache) {
          return templateFromCache;
        }
        var callbackList = this.waitingCallbacks[url];
        var that = this;
        if (!callbackList) {
          callbackList = [];
          this.waitingCallbacks[url] = callbackList;
          var client = new XMLHttpRequest();
          client.onload = function() {
            that.handleHttpResult(this, url);
          };
          client.open("GET", url);
          client.send();
        }
        if (callback) {
          callbackList.push(callback);
        }
        return null;
      };
      TemplateService2.prototype.handleHttpResult = function(httpResult, url) {
        if (httpResult.status !== 200 || httpResult.response === null) {
          console.warn("AG Grid: Unable to get template error " + httpResult.status + " - " + url);
          return;
        }
        this.templateCache[url] = httpResult.response || httpResult.responseText;
        var callbacks = this.waitingCallbacks[url];
        for (var i = 0; i < callbacks.length; i++) {
          var callback = callbacks[i];
          callback();
        }
      };
      TemplateService2 = __decorate$K([
        Bean("templateService")
      ], TemplateService2);
      return TemplateService2;
    }(BeanStub);
    __extends$I = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$J = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$3 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    LoggerFactory = /** @class */
    function(_super) {
      __extends$I(LoggerFactory2, _super);
      function LoggerFactory2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      LoggerFactory2.prototype.setBeans = function(gridOptionsService) {
        this.logging = gridOptionsService.is("debug");
      };
      LoggerFactory2.prototype.create = function(name) {
        return new Logger(name, this.isLogging.bind(this));
      };
      LoggerFactory2.prototype.isLogging = function() {
        return this.logging;
      };
      __decorate$J([
        __param$3(0, Qualifier("gridOptionsService"))
      ], LoggerFactory2.prototype, "setBeans", null);
      LoggerFactory2 = __decorate$J([
        Bean("loggerFactory")
      ], LoggerFactory2);
      return LoggerFactory2;
    }(BeanStub);
    Logger = /** @class */
    function() {
      function Logger2(name, isLoggingFunc) {
        this.name = name;
        this.isLoggingFunc = isLoggingFunc;
      }
      Logger2.prototype.isLogging = function() {
        return this.isLoggingFunc();
      };
      Logger2.prototype.log = function(message) {
        if (this.isLoggingFunc()) {
          console.log("AG Grid." + this.name + ": " + message);
        }
      };
      return Logger2;
    }();
    __extends$H = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$I = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridCtrl = /** @class */
    function(_super) {
      __extends$H(GridCtrl2, _super);
      function GridCtrl2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GridCtrl2.prototype.setComp = function(view, eGridDiv, eGui) {
        var _this = this;
        this.view = view;
        this.eGridHostDiv = eGridDiv;
        this.eGui = eGui;
        this.eGui.setAttribute("grid-id", this.context.getGridId());
        this.dragAndDropService.addDropTarget({
          getContainer: function() {
            return _this.eGui;
          },
          isInterestedIn: function(type) {
            return type === DragSourceType.HeaderCell || type === DragSourceType.ToolPanel;
          },
          getIconName: function() {
            return DragAndDropService.ICON_NOT_ALLOWED;
          }
        });
        this.mouseEventService.stampTopLevelGridCompWithGridInstance(eGridDiv);
        this.createManagedBean(new LayoutFeature(this.view));
        this.addRtlSupport();
        this.addManagedListener(this, Events.EVENT_KEYBOARD_FOCUS, function() {
          _this.view.addOrRemoveKeyboardFocusClass(true);
        });
        this.addManagedListener(this, Events.EVENT_MOUSE_FOCUS, function() {
          _this.view.addOrRemoveKeyboardFocusClass(false);
        });
        var unsubscribeFromResize = this.resizeObserverService.observeResize(this.eGridHostDiv, this.onGridSizeChanged.bind(this));
        this.addDestroyFunc(function() {
          return unsubscribeFromResize();
        });
        this.ctrlsService.registerGridCtrl(this);
      };
      GridCtrl2.prototype.isDetailGrid = function() {
        var _a;
        var el = this.focusService.findTabbableParent(this.getGui());
        return ((_a = el === null || el === void 0 ? void 0 : el.getAttribute("row-id")) === null || _a === void 0 ? void 0 : _a.startsWith("detail")) || false;
      };
      GridCtrl2.prototype.showDropZones = function() {
        return ModuleRegistry.__isRegistered(ModuleNames.RowGroupingModule, this.context.getGridId());
      };
      GridCtrl2.prototype.showSideBar = function() {
        return ModuleRegistry.__isRegistered(ModuleNames.SideBarModule, this.context.getGridId());
      };
      GridCtrl2.prototype.showStatusBar = function() {
        return ModuleRegistry.__isRegistered(ModuleNames.StatusBarModule, this.context.getGridId());
      };
      GridCtrl2.prototype.showWatermark = function() {
        return ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, this.context.getGridId());
      };
      GridCtrl2.prototype.onGridSizeChanged = function() {
        var event = {
          type: Events.EVENT_GRID_SIZE_CHANGED,
          clientWidth: this.eGridHostDiv.clientWidth,
          clientHeight: this.eGridHostDiv.clientHeight
        };
        this.eventService.dispatchEvent(event);
      };
      GridCtrl2.prototype.addRtlSupport = function() {
        var cssClass = this.gridOptionsService.is("enableRtl") ? "ag-rtl" : "ag-ltr";
        this.view.setRtlClass(cssClass);
      };
      GridCtrl2.prototype.destroyGridUi = function() {
        this.view.destroyGridUi();
      };
      GridCtrl2.prototype.getGui = function() {
        return this.eGui;
      };
      GridCtrl2.prototype.setResizeCursor = function(on) {
        this.view.setCursor(on ? "ew-resize" : null);
      };
      GridCtrl2.prototype.disableUserSelect = function(on) {
        this.view.setUserSelect(on ? "none" : null);
      };
      GridCtrl2.prototype.focusNextInnerContainer = function(backwards) {
        var eDocument = this.gridOptionsService.getDocument();
        var focusableContainers = this.view.getFocusableContainers();
        var idxWithFocus = focusableContainers.findIndex(function(container) {
          return container.contains(eDocument.activeElement);
        });
        var nextIdx = idxWithFocus + (backwards ? -1 : 1);
        if (nextIdx <= 0 || nextIdx >= focusableContainers.length) {
          return false;
        }
        return this.focusService.focusInto(focusableContainers[nextIdx]);
      };
      GridCtrl2.prototype.focusInnerElement = function(fromBottom) {
        var focusableContainers = this.view.getFocusableContainers();
        var allColumns = this.columnModel.getAllDisplayedColumns();
        if (fromBottom) {
          if (focusableContainers.length > 1) {
            return this.focusService.focusInto(last(focusableContainers), true);
          }
          var lastColumn = last(allColumns);
          if (this.focusService.focusGridView(lastColumn, true)) {
            return true;
          }
        }
        if (this.gridOptionsService.getNum("headerHeight") === 0) {
          return this.focusService.focusGridView(allColumns[0]);
        }
        return this.focusService.focusFirstHeader();
      };
      GridCtrl2.prototype.forceFocusOutOfContainer = function(up) {
        if (up === void 0) {
          up = false;
        }
        this.view.forceFocusOutOfContainer(up);
      };
      __decorate$I([
        Autowired("focusService")
      ], GridCtrl2.prototype, "focusService", void 0);
      __decorate$I([
        Autowired("resizeObserverService")
      ], GridCtrl2.prototype, "resizeObserverService", void 0);
      __decorate$I([
        Autowired("columnModel")
      ], GridCtrl2.prototype, "columnModel", void 0);
      __decorate$I([
        Autowired("ctrlsService")
      ], GridCtrl2.prototype, "ctrlsService", void 0);
      __decorate$I([
        Autowired("mouseEventService")
      ], GridCtrl2.prototype, "mouseEventService", void 0);
      __decorate$I([
        Autowired("dragAndDropService")
      ], GridCtrl2.prototype, "dragAndDropService", void 0);
      return GridCtrl2;
    }(BeanStub);
    __extends$G = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$H = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    GridComp = /** @class */
    function(_super) {
      __extends$G(GridComp2, _super);
      function GridComp2(eGridDiv) {
        var _this = _super.call(this) || this;
        _this.eGridDiv = eGridDiv;
        return _this;
      }
      GridComp2.prototype.postConstruct = function() {
        var _this = this;
        this.logger = this.loggerFactory.create("GridComp");
        var compProxy = {
          destroyGridUi: function() {
            return _this.destroyBean(_this);
          },
          setRtlClass: function(cssClass) {
            return _this.addCssClass(cssClass);
          },
          addOrRemoveKeyboardFocusClass: function(addOrRemove) {
            return _this.addOrRemoveCssClass(FocusService.AG_KEYBOARD_FOCUS, addOrRemove);
          },
          forceFocusOutOfContainer: this.forceFocusOutOfContainer.bind(this),
          updateLayoutClasses: this.updateLayoutClasses.bind(this),
          getFocusableContainers: this.getFocusableContainers.bind(this),
          setUserSelect: function(value) {
            _this.getGui().style.userSelect = value != null ? value : "";
            _this.getGui().style.webkitUserSelect = value != null ? value : "";
          },
          setCursor: function(value) {
            _this.getGui().style.cursor = value != null ? value : "";
          }
        };
        this.ctrl = this.createManagedBean(new GridCtrl());
        var template = this.createTemplate();
        this.setTemplate(template);
        this.ctrl.setComp(compProxy, this.eGridDiv, this.getGui());
        this.insertGridIntoDom();
        this.initialiseTabGuard({
          // we want to override the default behaviour to do nothing for onTabKeyDown
          onTabKeyDown: function() {
            return void 0;
          },
          focusInnerElement: function(fromBottom) {
            return _this.ctrl.focusInnerElement(fromBottom);
          }
        });
      };
      GridComp2.prototype.insertGridIntoDom = function() {
        var _this = this;
        var eGui = this.getGui();
        this.eGridDiv.appendChild(eGui);
        this.addDestroyFunc(function() {
          _this.eGridDiv.removeChild(eGui);
          _this.logger.log("Grid removed from DOM");
        });
      };
      GridComp2.prototype.updateLayoutClasses = function(cssClass, params) {
        var eRootWrapperBodyClassList = this.eRootWrapperBody.classList;
        eRootWrapperBodyClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
        eRootWrapperBodyClassList.toggle(LayoutCssClasses.NORMAL, params.normal);
        eRootWrapperBodyClassList.toggle(LayoutCssClasses.PRINT, params.print);
        this.addOrRemoveCssClass(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
        this.addOrRemoveCssClass(LayoutCssClasses.NORMAL, params.normal);
        this.addOrRemoveCssClass(LayoutCssClasses.PRINT, params.print);
      };
      GridComp2.prototype.createTemplate = function() {
        var dropZones = this.ctrl.showDropZones() ? "<ag-grid-header-drop-zones></ag-grid-header-drop-zones>" : "";
        var sideBar = this.ctrl.showSideBar() ? '<ag-side-bar ref="sideBar"></ag-side-bar>' : "";
        var statusBar = this.ctrl.showStatusBar() ? '<ag-status-bar ref="statusBar"></ag-status-bar>' : "";
        var watermark = this.ctrl.showWatermark() ? "<ag-watermark></ag-watermark>" : "";
        var template = (
          /* html */
          '<div class="ag-root-wrapper" role="presentation">\n                ' + dropZones + '\n                <div class="ag-root-wrapper-body" ref="rootWrapperBody" role="presentation">\n                    <ag-grid-body ref="gridBody"></ag-grid-body>\n                    ' + sideBar + "\n                </div>\n                " + statusBar + "\n                <ag-pagination></ag-pagination>\n                " + watermark + "\n            </div>"
        );
        return template;
      };
      GridComp2.prototype.getFocusableElement = function() {
        return this.eRootWrapperBody;
      };
      GridComp2.prototype.getFocusableContainers = function() {
        var focusableContainers = [
          this.gridBodyComp.getGui()
        ];
        if (this.sideBarComp) {
          focusableContainers.push(this.sideBarComp.getGui());
        }
        return focusableContainers.filter(function(el) {
          return isVisible(el);
        });
      };
      __decorate$H([
        Autowired("loggerFactory")
      ], GridComp2.prototype, "loggerFactory", void 0);
      __decorate$H([
        RefSelector("gridBody")
      ], GridComp2.prototype, "gridBodyComp", void 0);
      __decorate$H([
        RefSelector("sideBar")
      ], GridComp2.prototype, "sideBarComp", void 0);
      __decorate$H([
        RefSelector("rootWrapperBody")
      ], GridComp2.prototype, "eRootWrapperBody", void 0);
      __decorate$H([
        PostConstruct
      ], GridComp2.prototype, "postConstruct", null);
      return GridComp2;
    }(TabGuardComp);
    __extends$F = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$G = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$8 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$7 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    SortController = /** @class */
    function(_super) {
      __extends$F(SortController2, _super);
      function SortController2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SortController_1 = SortController2;
      SortController2.prototype.progressSort = function(column, multiSort, source) {
        var nextDirection = this.getNextSortDirection(column);
        this.setSortForColumn(column, nextDirection, multiSort, source);
      };
      SortController2.prototype.setSortForColumn = function(column, sort, multiSort, source) {
        if (sort !== "asc" && sort !== "desc") {
          sort = null;
        }
        var isColumnsSortingCoupledToGroup = this.gridOptionsService.isColumnsSortingCoupledToGroup();
        var columnsToUpdate = [column];
        if (isColumnsSortingCoupledToGroup) {
          if (column.getColDef().showRowGroup) {
            var rowGroupColumns = this.columnModel.getSourceColumnsForGroupColumn(column);
            var sortableRowGroupColumns = rowGroupColumns === null || rowGroupColumns === void 0 ? void 0 : rowGroupColumns.filter(function(col) {
              return col.getColDef().sortable;
            });
            if (sortableRowGroupColumns) {
              columnsToUpdate = __spreadArray$7([column], __read$8(sortableRowGroupColumns));
            }
          }
        }
        columnsToUpdate.forEach(function(col) {
          return col.setSort(sort, source);
        });
        var doingMultiSort = (multiSort || this.gridOptionsService.is("alwaysMultiSort")) && !this.gridOptionsService.is("suppressMultiSort");
        if (!doingMultiSort) {
          this.clearSortBarTheseColumns(columnsToUpdate, source);
        }
        this.updateSortIndex(column);
        this.dispatchSortChangedEvents(source);
      };
      SortController2.prototype.updateSortIndex = function(lastColToChange) {
        var isCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();
        var groupParent = this.columnModel.getGroupDisplayColumnForGroup(lastColToChange.getId());
        var lastSortIndexCol = isCoupled ? groupParent || lastColToChange : lastColToChange;
        var allSortedCols = this.getColumnsWithSortingOrdered();
        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(function(col) {
          return col.setSortIndex(null);
        });
        var allSortedColsWithoutChanges = allSortedCols.filter(function(col) {
          return col !== lastSortIndexCol;
        });
        var sortedColsWithIndices = !!lastSortIndexCol.getSort() ? __spreadArray$7(__spreadArray$7([], __read$8(allSortedColsWithoutChanges)), [lastSortIndexCol]) : allSortedColsWithoutChanges;
        sortedColsWithIndices.forEach(function(col, idx) {
          return col.setSortIndex(idx);
        });
      };
      SortController2.prototype.onSortChanged = function(source) {
        this.dispatchSortChangedEvents(source);
      };
      SortController2.prototype.isSortActive = function() {
        var allCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns();
        var sortedCols = allCols.filter(function(column) {
          return !!column.getSort();
        });
        return sortedCols && sortedCols.length > 0;
      };
      SortController2.prototype.dispatchSortChangedEvents = function(source) {
        var event = {
          type: Events.EVENT_SORT_CHANGED,
          source
        };
        this.eventService.dispatchEvent(event);
      };
      SortController2.prototype.clearSortBarTheseColumns = function(columnsToSkip, source) {
        this.columnModel.getPrimaryAndSecondaryAndAutoColumns().forEach(function(columnToClear) {
          if (!columnsToSkip.includes(columnToClear)) {
            columnToClear.setSort(void 0, source);
          }
        });
      };
      SortController2.prototype.getNextSortDirection = function(column) {
        var sortingOrder;
        if (column.getColDef().sortingOrder) {
          sortingOrder = column.getColDef().sortingOrder;
        } else if (this.gridOptionsService.get("sortingOrder")) {
          sortingOrder = this.gridOptionsService.get("sortingOrder");
        } else {
          sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
        }
        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
          console.warn("AG Grid: sortingOrder must be an array with at least one element, currently it's " + sortingOrder);
          return null;
        }
        var currentIndex = sortingOrder.indexOf(column.getSort());
        var notInArray = currentIndex < 0;
        var lastItemInArray = currentIndex == sortingOrder.length - 1;
        var result;
        if (notInArray || lastItemInArray) {
          result = sortingOrder[0];
        } else {
          result = sortingOrder[currentIndex + 1];
        }
        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
          console.warn("AG Grid: invalid sort type " + result);
          return null;
        }
        return result;
      };
      SortController2.prototype.getIndexedSortMap = function() {
        var _this = this;
        var allSortedCols = this.columnModel.getPrimaryAndSecondaryAndAutoColumns().filter(function(col) {
          return !!col.getSort();
        });
        if (this.columnModel.isPivotMode()) {
          var isSortingLinked_1 = this.gridOptionsService.isColumnsSortingCoupledToGroup();
          allSortedCols = allSortedCols.filter(function(col) {
            var isAggregated = !!col.getAggFunc();
            var isSecondary = !col.isPrimary();
            var isGroup = isSortingLinked_1 ? _this.columnModel.getGroupDisplayColumnForGroup(col.getId()) : col.getColDef().showRowGroup;
            return isAggregated || isSecondary || isGroup;
          });
        }
        var sortedRowGroupCols = this.columnModel.getRowGroupColumns().filter(function(col) {
          return !!col.getSort();
        });
        var isSortLinked = this.gridOptionsService.isColumnsSortingCoupledToGroup() && !!sortedRowGroupCols.length;
        if (isSortLinked) {
          allSortedCols = __spreadArray$7([], __read$8(new Set(
            // if linked sorting, replace all columns with the display group column for index purposes, and ensure uniqueness
            allSortedCols.map(function(col) {
              var _a;
              return (_a = _this.columnModel.getGroupDisplayColumnForGroup(col.getId())) !== null && _a !== void 0 ? _a : col;
            })
          )));
        }
        var allColsIndexes = {};
        allSortedCols.forEach(function(col, index) {
          return allColsIndexes[col.getId()] = index;
        });
        allSortedCols.sort(function(a, b) {
          var iA = a.getSortIndex();
          var iB = b.getSortIndex();
          if (iA != null && iB != null) {
            return iA - iB;
          } else if (iA == null && iB == null) {
            var posA = allColsIndexes[a.getId()];
            var posB = allColsIndexes[b.getId()];
            return posA > posB ? 1 : -1;
          } else if (iB == null) {
            return -1;
          } else {
            return 1;
          }
        });
        var indexMap = /* @__PURE__ */ new Map();
        allSortedCols.forEach(function(col, idx) {
          return indexMap.set(col, idx);
        });
        if (isSortLinked) {
          sortedRowGroupCols.forEach(function(col) {
            var groupDisplayCol = _this.columnModel.getGroupDisplayColumnForGroup(col.getId());
            indexMap.set(col, indexMap.get(groupDisplayCol));
          });
        }
        return indexMap;
      };
      SortController2.prototype.getColumnsWithSortingOrdered = function() {
        return __spreadArray$7([], __read$8(this.getIndexedSortMap().entries())).sort(function(_a, _b) {
          var _c = __read$8(_a, 2);
          _c[0];
          var idx1 = _c[1];
          var _d = __read$8(_b, 2);
          _d[0];
          var idx2 = _d[1];
          return idx1 - idx2;
        }).map(function(_a) {
          var _b = __read$8(_a, 1), col = _b[0];
          return col;
        });
      };
      SortController2.prototype.getSortModel = function() {
        return this.getColumnsWithSortingOrdered().filter(function(column) {
          return column.getSort();
        }).map(function(column) {
          return {
            sort: column.getSort(),
            colId: column.getId()
          };
        });
      };
      SortController2.prototype.getSortOptions = function() {
        return this.getColumnsWithSortingOrdered().filter(function(column) {
          return column.getSort();
        }).map(function(column) {
          return {
            sort: column.getSort(),
            column
          };
        });
      };
      SortController2.prototype.canColumnDisplayMixedSort = function(column) {
        var isColumnSortCouplingActive = this.gridOptionsService.isColumnsSortingCoupledToGroup();
        var isGroupDisplayColumn = !!column.getColDef().showRowGroup;
        return isColumnSortCouplingActive && isGroupDisplayColumn;
      };
      SortController2.prototype.getDisplaySortForColumn = function(column) {
        var linkedColumns = this.columnModel.getSourceColumnsForGroupColumn(column);
        if (!this.canColumnDisplayMixedSort(column) || !(linkedColumns === null || linkedColumns === void 0 ? void 0 : linkedColumns.length)) {
          return column.getSort();
        }
        var columnHasUniqueData = column.getColDef().field != null || !!column.getColDef().valueGetter;
        var sortableColumns = columnHasUniqueData ? __spreadArray$7([column], __read$8(linkedColumns)) : linkedColumns;
        var firstSort = sortableColumns[0].getSort();
        var allMatch = sortableColumns.every(function(col) {
          return col.getSort() == firstSort;
        });
        if (!allMatch) {
          return "mixed";
        }
        return firstSort;
      };
      SortController2.prototype.getDisplaySortIndexForColumn = function(column) {
        return this.getIndexedSortMap().get(column);
      };
      var SortController_1;
      SortController2.DEFAULT_SORTING_ORDER = ["asc", "desc", null];
      __decorate$G([
        Autowired("columnModel")
      ], SortController2.prototype, "columnModel", void 0);
      SortController2 = SortController_1 = __decorate$G([
        Bean("sortController")
      ], SortController2);
      return SortController2;
    }(BeanStub);
    __extends$E = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$F = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnHoverService = /** @class */
    function(_super) {
      __extends$E(ColumnHoverService2, _super);
      function ColumnHoverService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ColumnHoverService2.prototype.setMouseOver = function(columns) {
        this.selectedColumns = columns;
        var event = {
          type: Events.EVENT_COLUMN_HOVER_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnHoverService2.prototype.clearMouseOver = function() {
        this.selectedColumns = null;
        var event = {
          type: Events.EVENT_COLUMN_HOVER_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      ColumnHoverService2.prototype.isHovered = function(column) {
        return !!this.selectedColumns && this.selectedColumns.indexOf(column) >= 0;
      };
      ColumnHoverService2 = __decorate$F([
        Bean("columnHoverService")
      ], ColumnHoverService2);
      return ColumnHoverService2;
    }(BeanStub);
    __extends$D = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$E = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnAnimationService = /** @class */
    function(_super) {
      __extends$D(ColumnAnimationService2, _super);
      function ColumnAnimationService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.executeNextFuncs = [];
        _this.executeLaterFuncs = [];
        _this.active = false;
        _this.animationThreadCount = 0;
        return _this;
      }
      ColumnAnimationService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          return _this.gridBodyCtrl = p.gridBodyCtrl;
        });
      };
      ColumnAnimationService2.prototype.isActive = function() {
        return this.active;
      };
      ColumnAnimationService2.prototype.start = function() {
        if (this.active) {
          return;
        }
        if (this.gridOptionsService.is("suppressColumnMoveAnimation")) {
          return;
        }
        if (this.gridOptionsService.is("enableRtl")) {
          return;
        }
        this.ensureAnimationCssClassPresent();
        this.active = true;
      };
      ColumnAnimationService2.prototype.finish = function() {
        if (!this.active) {
          return;
        }
        this.flush();
        this.active = false;
      };
      ColumnAnimationService2.prototype.executeNextVMTurn = function(func) {
        if (this.active) {
          this.executeNextFuncs.push(func);
        } else {
          func();
        }
      };
      ColumnAnimationService2.prototype.executeLaterVMTurn = function(func) {
        if (this.active) {
          this.executeLaterFuncs.push(func);
        } else {
          func();
        }
      };
      ColumnAnimationService2.prototype.ensureAnimationCssClassPresent = function() {
        var _this = this;
        this.animationThreadCount++;
        var animationThreadCountCopy = this.animationThreadCount;
        this.gridBodyCtrl.setColumnMovingCss(true);
        this.executeLaterFuncs.push(function() {
          if (_this.animationThreadCount === animationThreadCountCopy) {
            _this.gridBodyCtrl.setColumnMovingCss(false);
          }
        });
      };
      ColumnAnimationService2.prototype.flush = function() {
        var nowFuncs = this.executeNextFuncs;
        this.executeNextFuncs = [];
        var waitFuncs = this.executeLaterFuncs;
        this.executeLaterFuncs = [];
        if (nowFuncs.length === 0 && waitFuncs.length === 0) {
          return;
        }
        window.setTimeout(function() {
          return nowFuncs.forEach(function(func) {
            return func();
          });
        }, 0);
        window.setTimeout(function() {
          return waitFuncs.forEach(function(func) {
            return func();
          });
        }, 300);
      };
      __decorate$E([
        Autowired("ctrlsService")
      ], ColumnAnimationService2.prototype, "ctrlsService", void 0);
      __decorate$E([
        PostConstruct
      ], ColumnAnimationService2.prototype, "postConstruct", null);
      ColumnAnimationService2 = __decorate$E([
        Bean("columnAnimationService")
      ], ColumnAnimationService2);
      return ColumnAnimationService2;
    }(BeanStub);
    __extends$C = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$D = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PaginationAutoPageSizeService = /** @class */
    function(_super) {
      __extends$C(PaginationAutoPageSizeService2, _super);
      function PaginationAutoPageSizeService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PaginationAutoPageSizeService2.prototype.postConstruct = function() {
        var _this = this;
        this.ctrlsService.whenReady(function(p) {
          _this.centerRowContainerCon = p.centerRowContainerCtrl;
          _this.addManagedListener(_this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, _this.checkPageSize.bind(_this));
          _this.addManagedListener(_this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, _this.checkPageSize.bind(_this));
          _this.checkPageSize();
        });
      };
      PaginationAutoPageSizeService2.prototype.notActive = function() {
        return !this.gridOptionsService.is("paginationAutoPageSize") || this.centerRowContainerCon == null;
      };
      PaginationAutoPageSizeService2.prototype.checkPageSize = function() {
        var _this = this;
        if (this.notActive()) {
          return;
        }
        var bodyHeight = this.centerRowContainerCon.getViewportSizeFeature().getBodyHeight();
        if (bodyHeight > 0) {
          var update_1 = function() {
            var rowHeight = _this.gridOptionsService.getRowHeightAsNumber();
            var newPageSize = Math.floor(bodyHeight / rowHeight);
            _this.gridOptionsService.set("paginationPageSize", newPageSize);
          };
          if (!this.isBodyRendered) {
            update_1();
            this.isBodyRendered = true;
          } else {
            debounce(function() {
              return update_1();
            }, 50)();
          }
        } else {
          this.isBodyRendered = false;
        }
      };
      __decorate$D([
        Autowired("ctrlsService")
      ], PaginationAutoPageSizeService2.prototype, "ctrlsService", void 0);
      __decorate$D([
        PostConstruct
      ], PaginationAutoPageSizeService2.prototype, "postConstruct", null);
      PaginationAutoPageSizeService2 = __decorate$D([
        Bean("paginationAutoPageSizeService")
      ], PaginationAutoPageSizeService2);
      return PaginationAutoPageSizeService2;
    }(BeanStub);
    __extends$B = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$C = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ValueCache = /** @class */
    function(_super) {
      __extends$B(ValueCache2, _super);
      function ValueCache2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cacheVersion = 0;
        return _this;
      }
      ValueCache2.prototype.init = function() {
        this.active = this.gridOptionsService.is("valueCache");
        this.neverExpires = this.gridOptionsService.is("valueCacheNeverExpires");
      };
      ValueCache2.prototype.onDataChanged = function() {
        if (this.neverExpires) {
          return;
        }
        this.expire();
      };
      ValueCache2.prototype.expire = function() {
        this.cacheVersion++;
      };
      ValueCache2.prototype.setValue = function(rowNode, colId, value) {
        if (this.active) {
          if (rowNode.__cacheVersion !== this.cacheVersion) {
            rowNode.__cacheVersion = this.cacheVersion;
            rowNode.__cacheData = {};
          }
          rowNode.__cacheData[colId] = value;
        }
      };
      ValueCache2.prototype.getValue = function(rowNode, colId) {
        if (!this.active || rowNode.__cacheVersion !== this.cacheVersion) {
          return void 0;
        }
        return rowNode.__cacheData[colId];
      };
      __decorate$C([
        PostConstruct
      ], ValueCache2.prototype, "init", null);
      ValueCache2 = __decorate$C([
        Bean("valueCache")
      ], ValueCache2);
      return ValueCache2;
    }(BeanStub);
    __extends$A = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$B = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SOURCE_PASTE = "paste";
    ChangeDetectionService = /** @class */
    function(_super) {
      __extends$A(ChangeDetectionService2, _super);
      function ChangeDetectionService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ChangeDetectionService2.prototype.init = function() {
        if (this.rowModel.getType() === "clientSide") {
          this.clientSideRowModel = this.rowModel;
        }
        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
      };
      ChangeDetectionService2.prototype.onCellValueChanged = function(event) {
        if (event.source === SOURCE_PASTE) {
          return;
        }
        this.doChangeDetection(event.node, event.column);
      };
      ChangeDetectionService2.prototype.doChangeDetection = function(rowNode, column) {
        if (this.gridOptionsService.is("suppressChangeDetection")) {
          return;
        }
        var nodesToRefresh = [rowNode];
        if (this.clientSideRowModel && !rowNode.isRowPinned()) {
          var onlyChangedColumns = this.gridOptionsService.is("aggregateOnlyChangedColumns");
          var changedPath = new ChangedPath(onlyChangedColumns, this.clientSideRowModel.getRootNode());
          changedPath.addParentNode(rowNode.parent, [column]);
          this.clientSideRowModel.doAggregate(changedPath);
          changedPath.forEachChangedNodeDepthFirst(function(rowNode2) {
            nodesToRefresh.push(rowNode2);
          });
        }
        this.rowRenderer.refreshCells({ rowNodes: nodesToRefresh });
      };
      __decorate$B([
        Autowired("rowModel")
      ], ChangeDetectionService2.prototype, "rowModel", void 0);
      __decorate$B([
        Autowired("rowRenderer")
      ], ChangeDetectionService2.prototype, "rowRenderer", void 0);
      __decorate$B([
        PostConstruct
      ], ChangeDetectionService2.prototype, "init", null);
      ChangeDetectionService2 = __decorate$B([
        Bean("changeDetectionService")
      ], ChangeDetectionService2);
      return ChangeDetectionService2;
    }(BeanStub);
    __extends$z = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$A = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AgComponentUtils = /** @class */
    function(_super) {
      __extends$z(AgComponentUtils2, _super);
      function AgComponentUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      AgComponentUtils2.prototype.adaptFunction = function(propertyName, jsCompFunc) {
        var metadata = this.componentMetadataProvider.retrieve(propertyName);
        if (metadata && metadata.functionAdapter) {
          return metadata.functionAdapter(jsCompFunc);
        }
        return null;
      };
      AgComponentUtils2.prototype.adaptCellRendererFunction = function(callback) {
        var Adapter = (
          /** @class */
          function() {
            function Adapter2() {
            }
            Adapter2.prototype.refresh = function(params) {
              return false;
            };
            Adapter2.prototype.getGui = function() {
              return this.eGui;
            };
            Adapter2.prototype.init = function(params) {
              var callbackResult = callback(params);
              var type = typeof callbackResult;
              if (type === "string" || type === "number" || type === "boolean") {
                this.eGui = loadTemplate("<span>" + callbackResult + "</span>");
                return;
              }
              if (callbackResult == null) {
                this.eGui = loadTemplate("<span></span>");
                return;
              }
              this.eGui = callbackResult;
            };
            return Adapter2;
          }()
        );
        return Adapter;
      };
      AgComponentUtils2.prototype.doesImplementIComponent = function(candidate) {
        if (!candidate) {
          return false;
        }
        return candidate.prototype && "getGui" in candidate.prototype;
      };
      __decorate$A([
        Autowired("componentMetadataProvider")
      ], AgComponentUtils2.prototype, "componentMetadataProvider", void 0);
      AgComponentUtils2 = __decorate$A([
        Bean("agComponentUtils")
      ], AgComponentUtils2);
      return AgComponentUtils2;
    }(BeanStub);
    __extends$y = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$z = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ComponentMetadataProvider = /** @class */
    function(_super) {
      __extends$y(ComponentMetadataProvider2, _super);
      function ComponentMetadataProvider2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ComponentMetadataProvider2.prototype.postConstruct = function() {
        this.componentMetaData = {
          dateComponent: {
            mandatoryMethodList: ["getDate", "setDate"],
            optionalMethodList: ["afterGuiAttached", "setInputPlaceholder", "setInputAriaLabel"]
          },
          detailCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          headerComponent: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh"]
          },
          headerGroupComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          loadingCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          loadingOverlayComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          noRowsOverlayComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          floatingFilterComponent: {
            mandatoryMethodList: ["onParentModelChanged"],
            optionalMethodList: ["afterGuiAttached"]
          },
          floatingFilterWrapperComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          },
          cellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          cellEditor: {
            mandatoryMethodList: ["getValue"],
            optionalMethodList: ["isPopup", "isCancelBeforeStart", "isCancelAfterEnd", "getPopupPosition", "focusIn", "focusOut", "afterGuiAttached"]
          },
          innerRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          fullWidthCellRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          groupRowRenderer: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"],
            functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
          },
          filter: {
            mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
            optionalMethodList: ["afterGuiAttached", "afterGuiDetached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged", "onAnyFilterChanged"]
          },
          filterComponent: {
            mandatoryMethodList: ["isFilterActive", "doesFilterPass", "getModel", "setModel"],
            optionalMethodList: ["afterGuiAttached", "afterGuiDetached", "onNewRowsLoaded", "getModelAsString", "onFloatingFilterChanged", "onAnyFilterChanged"]
          },
          statusPanel: {
            mandatoryMethodList: [],
            optionalMethodList: ["afterGuiAttached"]
          },
          toolPanel: {
            mandatoryMethodList: [],
            optionalMethodList: ["refresh", "afterGuiAttached"]
          },
          tooltipComponent: {
            mandatoryMethodList: [],
            optionalMethodList: []
          }
        };
      };
      ComponentMetadataProvider2.prototype.retrieve = function(name) {
        return this.componentMetaData[name];
      };
      __decorate$z([
        Autowired("agComponentUtils")
      ], ComponentMetadataProvider2.prototype, "agComponentUtils", void 0);
      __decorate$z([
        PostConstruct
      ], ComponentMetadataProvider2.prototype, "postConstruct", null);
      ComponentMetadataProvider2 = __decorate$z([
        Bean("componentMetadataProvider")
      ], ComponentMetadataProvider2);
      return ComponentMetadataProvider2;
    }(BeanStub);
    __extends$x = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$y = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$7 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$6 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    DEFAULT_ROW_HEIGHT = 25;
    MIN_COL_WIDTH = 10;
    MAT_GRID_SIZE = 8;
    BASE_GRID_SIZE = 4;
    BALHAM_GRID_SIZE = 4;
    ALPINE_GRID_SIZE = 6;
    HARD_CODED_SIZES = {
      // this item is required for custom themes
      "ag-theme-custom": {
        headerHeight: 25,
        headerCellMinWidth: 24,
        listItemHeight: BASE_GRID_SIZE * 5,
        rowHeight: 25,
        chartMenuPanelWidth: 220
      },
      "ag-theme-material": {
        headerHeight: MAT_GRID_SIZE * 7,
        headerCellMinWidth: 48,
        listItemHeight: MAT_GRID_SIZE * 4,
        rowHeight: MAT_GRID_SIZE * 6,
        chartMenuPanelWidth: 240
      },
      "ag-theme-balham": {
        headerHeight: BALHAM_GRID_SIZE * 8,
        headerCellMinWidth: 24,
        listItemHeight: BALHAM_GRID_SIZE * 6,
        rowHeight: BALHAM_GRID_SIZE * 7,
        chartMenuPanelWidth: 220
      },
      "ag-theme-alpine": {
        headerHeight: ALPINE_GRID_SIZE * 8,
        headerCellMinWidth: 36,
        listItemHeight: ALPINE_GRID_SIZE * 4,
        rowHeight: ALPINE_GRID_SIZE * 7,
        chartMenuPanelWidth: 240
      }
    };
    SASS_PROPERTY_BUILDER = {
      headerHeight: ["ag-header-row"],
      headerCellMinWidth: ["ag-header-cell"],
      listItemHeight: ["ag-virtual-list-item"],
      rowHeight: ["ag-row"],
      chartMenuPanelWidth: ["ag-chart-docked-container"]
    };
    Environment = /** @class */
    function(_super) {
      __extends$x(Environment2, _super);
      function Environment2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.calculatedSizes = {};
        return _this;
      }
      Environment2.prototype.postConstruct = function() {
        var _this = this;
        var _a;
        var el = (_a = this.getTheme().el) !== null && _a !== void 0 ? _a : this.eGridDiv;
        this.mutationObserver = new MutationObserver(function() {
          _this.calculatedSizes = {};
          _this.fireGridStylesChangedEvent();
        });
        this.mutationObserver.observe(el || this.eGridDiv, {
          attributes: true,
          attributeFilter: ["class"]
        });
      };
      Environment2.prototype.fireGridStylesChangedEvent = function() {
        var event = {
          type: Events.EVENT_GRID_STYLES_CHANGED
        };
        this.eventService.dispatchEvent(event);
      };
      Environment2.prototype.getSassVariable = function(key) {
        var _a = this.getTheme(), themeFamily = _a.themeFamily, el = _a.el;
        if (!themeFamily || themeFamily.indexOf("ag-theme") !== 0) {
          return;
        }
        if (!this.calculatedSizes) {
          this.calculatedSizes = {};
        }
        if (!this.calculatedSizes[themeFamily]) {
          this.calculatedSizes[themeFamily] = {};
        }
        var size = this.calculatedSizes[themeFamily][key];
        if (size != null) {
          return size;
        }
        this.calculatedSizes[themeFamily][key] = this.calculateValueForSassProperty(key, themeFamily, el);
        return this.calculatedSizes[themeFamily][key];
      };
      Environment2.prototype.calculateValueForSassProperty = function(property, theme, themeElement) {
        var _a;
        var useTheme = "ag-theme-" + (theme.match("material") ? "material" : theme.match("balham") ? "balham" : theme.match("alpine") ? "alpine" : "custom");
        var defaultValue = HARD_CODED_SIZES[useTheme][property];
        var eDocument = this.gridOptionsService.getDocument();
        if (!themeElement) {
          themeElement = this.eGridDiv;
        }
        if (!SASS_PROPERTY_BUILDER[property]) {
          return defaultValue;
        }
        var classList = SASS_PROPERTY_BUILDER[property];
        var div = eDocument.createElement("div");
        var classesFromThemeElement = Array.from(themeElement.classList);
        (_a = div.classList).add.apply(_a, __spreadArray$6([theme], __read$7(classesFromThemeElement)));
        div.style.position = "absolute";
        var el = classList.reduce(function(prevEl, currentClass) {
          var currentDiv = eDocument.createElement("div");
          currentDiv.style.position = "static";
          currentDiv.classList.add(currentClass);
          prevEl.appendChild(currentDiv);
          return currentDiv;
        }, div);
        var calculatedValue = 0;
        if (eDocument.body) {
          eDocument.body.appendChild(div);
          var sizeName = property.toLowerCase().indexOf("height") !== -1 ? "height" : "width";
          calculatedValue = parseInt(window.getComputedStyle(el)[sizeName], 10);
          eDocument.body.removeChild(div);
        }
        return calculatedValue || defaultValue;
      };
      Environment2.prototype.isThemeDark = function() {
        var theme = this.getTheme().theme;
        return !!theme && theme.indexOf("dark") >= 0;
      };
      Environment2.prototype.chartMenuPanelWidth = function() {
        return this.getSassVariable("chartMenuPanelWidth");
      };
      Environment2.prototype.getTheme = function() {
        var reg = /\bag-(material|(?:theme-([\w\-]*)))\b/g;
        var el = this.eGridDiv;
        var themeMatch = null;
        var allThemes = [];
        while (el) {
          themeMatch = reg.exec(el.className);
          if (!themeMatch) {
            el = el.parentElement || void 0;
          } else {
            var matched = el.className.match(reg);
            if (matched) {
              allThemes = matched;
            }
            break;
          }
        }
        if (!themeMatch) {
          return { allThemes };
        }
        var theme = themeMatch[0];
        return { theme, el, themeFamily: theme.replace(/-dark$/, ""), allThemes };
      };
      Environment2.prototype.getFromTheme = function(defaultValue, sassVariableName) {
        var _a;
        return (_a = this.getSassVariable(sassVariableName)) !== null && _a !== void 0 ? _a : defaultValue;
      };
      Environment2.prototype.getDefaultRowHeight = function() {
        return this.getFromTheme(DEFAULT_ROW_HEIGHT, "rowHeight");
      };
      Environment2.prototype.getListItemHeight = function() {
        return this.getFromTheme(20, "listItemHeight");
      };
      Environment2.prototype.refreshRowHeightVariable = function() {
        var oldRowHeight = this.eGridDiv.style.getPropertyValue("--ag-line-height").trim();
        var height = this.gridOptionsService.getNum("rowHeight");
        if (height == null || isNaN(height) || !isFinite(height)) {
          return -1;
        }
        var newRowHeight = height + "px";
        if (oldRowHeight != newRowHeight) {
          this.eGridDiv.style.setProperty("--ag-line-height", newRowHeight);
          return height;
        }
        return oldRowHeight != "" ? parseFloat(oldRowHeight) : -1;
      };
      Environment2.prototype.getMinColWidth = function() {
        var measuredMin = this.getFromTheme(null, "headerCellMinWidth");
        return exists(measuredMin) ? Math.max(measuredMin, MIN_COL_WIDTH) : MIN_COL_WIDTH;
      };
      Environment2.prototype.destroy = function() {
        this.calculatedSizes = null;
        if (this.mutationObserver) {
          this.mutationObserver.disconnect();
        }
        _super.prototype.destroy.call(this);
      };
      __decorate$y([
        Autowired("eGridDiv")
      ], Environment2.prototype, "eGridDiv", void 0);
      __decorate$y([
        PostConstruct
      ], Environment2.prototype, "postConstruct", null);
      Environment2 = __decorate$y([
        Bean("environment")
      ], Environment2);
      return Environment2;
    }(BeanStub);
    __extends$w = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$x = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$2 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    RowContainerHeightService = /** @class */
    function(_super) {
      __extends$w(RowContainerHeightService2, _super);
      function RowContainerHeightService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scrollY = 0;
        _this.uiBodyHeight = 0;
        return _this;
      }
      RowContainerHeightService2.prototype.agWire = function(loggerFactory) {
        this.logger = loggerFactory.create("RowContainerHeightService");
      };
      RowContainerHeightService2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_BODY_HEIGHT_CHANGED, this.updateOffset.bind(this));
        this.maxDivHeight = getMaxDivHeight();
        this.logger.log("maxDivHeight = " + this.maxDivHeight);
      };
      RowContainerHeightService2.prototype.isStretching = function() {
        return this.stretching;
      };
      RowContainerHeightService2.prototype.getDivStretchOffset = function() {
        return this.divStretchOffset;
      };
      RowContainerHeightService2.prototype.updateOffset = function() {
        if (!this.stretching) {
          return;
        }
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var newScrollY = gridBodyCon.getScrollFeature().getVScrollPosition().top;
        var newBodyHeight = this.getUiBodyHeight();
        var atLeastOneChanged = newScrollY !== this.scrollY || newBodyHeight !== this.uiBodyHeight;
        if (atLeastOneChanged) {
          this.scrollY = newScrollY;
          this.uiBodyHeight = newBodyHeight;
          this.calculateOffset();
        }
      };
      RowContainerHeightService2.prototype.calculateOffset = function() {
        this.setUiContainerHeight(this.maxDivHeight);
        this.pixelsToShave = this.modelHeight - this.uiContainerHeight;
        this.maxScrollY = this.uiContainerHeight - this.uiBodyHeight;
        var scrollPercent = this.scrollY / this.maxScrollY;
        var divStretchOffset = scrollPercent * this.pixelsToShave;
        this.logger.log("Div Stretch Offset = " + divStretchOffset + " (" + this.pixelsToShave + " * " + scrollPercent + ")");
        this.setDivStretchOffset(divStretchOffset);
      };
      RowContainerHeightService2.prototype.setUiContainerHeight = function(height) {
        if (height !== this.uiContainerHeight) {
          this.uiContainerHeight = height;
          this.eventService.dispatchEvent({ type: Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED });
        }
      };
      RowContainerHeightService2.prototype.clearOffset = function() {
        this.setUiContainerHeight(this.modelHeight);
        this.pixelsToShave = 0;
        this.setDivStretchOffset(0);
      };
      RowContainerHeightService2.prototype.setDivStretchOffset = function(newOffset) {
        var newOffsetFloor = typeof newOffset === "number" ? Math.floor(newOffset) : null;
        if (this.divStretchOffset === newOffsetFloor) {
          return;
        }
        this.divStretchOffset = newOffsetFloor;
        this.eventService.dispatchEvent({ type: Events.EVENT_HEIGHT_SCALE_CHANGED });
      };
      RowContainerHeightService2.prototype.setModelHeight = function(modelHeight) {
        this.modelHeight = modelHeight;
        this.stretching = modelHeight != null && this.maxDivHeight > 0 && modelHeight > this.maxDivHeight;
        if (this.stretching) {
          this.calculateOffset();
        } else {
          this.clearOffset();
        }
      };
      RowContainerHeightService2.prototype.getUiContainerHeight = function() {
        return this.uiContainerHeight;
      };
      RowContainerHeightService2.prototype.getRealPixelPosition = function(modelPixel) {
        return modelPixel - this.divStretchOffset;
      };
      RowContainerHeightService2.prototype.getUiBodyHeight = function() {
        var gridBodyCon = this.ctrlsService.getGridBodyCtrl();
        var pos = gridBodyCon.getScrollFeature().getVScrollPosition();
        return pos.bottom - pos.top;
      };
      RowContainerHeightService2.prototype.getScrollPositionForPixel = function(rowTop) {
        if (this.pixelsToShave <= 0) {
          return rowTop;
        }
        var modelMaxScroll = this.modelHeight - this.getUiBodyHeight();
        var scrollPercent = rowTop / modelMaxScroll;
        var scrollPixel = this.maxScrollY * scrollPercent;
        return scrollPixel;
      };
      __decorate$x([
        Autowired("ctrlsService")
      ], RowContainerHeightService2.prototype, "ctrlsService", void 0);
      __decorate$x([
        __param$2(0, Qualifier("loggerFactory"))
      ], RowContainerHeightService2.prototype, "agWire", null);
      __decorate$x([
        PostConstruct
      ], RowContainerHeightService2.prototype, "postConstruct", null);
      RowContainerHeightService2 = __decorate$x([
        Bean("rowContainerHeightService")
      ], RowContainerHeightService2);
      return RowContainerHeightService2;
    }(BeanStub);
    __extends$v = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$w = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SelectableService = /** @class */
    function(_super) {
      __extends$v(SelectableService2, _super);
      function SelectableService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SelectableService2.prototype.init = function() {
        this.groupSelectsChildren = this.gridOptionsService.is("groupSelectsChildren");
        this.isRowSelectableFunc = this.gridOptionsService.get("isRowSelectable");
      };
      SelectableService2.prototype.updateSelectableAfterGrouping = function(rowNode) {
        if (this.isRowSelectableFunc) {
          var nextChildrenFunc = function(node) {
            return node.childrenAfterGroup;
          };
          this.recurseDown(rowNode.childrenAfterGroup, nextChildrenFunc);
        }
      };
      SelectableService2.prototype.recurseDown = function(children, nextChildrenFunc) {
        var _this = this;
        if (!children) {
          return;
        }
        children.forEach(function(child) {
          if (!child.group) {
            return;
          }
          if (child.hasChildren()) {
            _this.recurseDown(nextChildrenFunc(child), nextChildrenFunc);
          }
          var rowSelectable;
          if (_this.groupSelectsChildren) {
            var firstSelectable = (nextChildrenFunc(child) || []).find(function(rowNode) {
              return rowNode.selectable === true;
            });
            rowSelectable = exists(firstSelectable);
          } else {
            rowSelectable = _this.isRowSelectableFunc ? _this.isRowSelectableFunc(child) : false;
          }
          child.setRowSelectable(rowSelectable);
        });
      };
      __decorate$w([
        PostConstruct
      ], SelectableService2.prototype, "init", null);
      SelectableService2 = __decorate$w([
        Bean("selectableService")
      ], SelectableService2);
      return SelectableService2;
    }(BeanStub);
    __extends$u = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$v = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PaginationComp = /** @class */
    function(_super) {
      __extends$u(PaginationComp2, _super);
      function PaginationComp2() {
        var _this = _super.call(this) || this;
        _this.previousAndFirstButtonsDisabled = false;
        _this.nextButtonDisabled = false;
        _this.lastButtonDisabled = false;
        _this.areListenersSetup = false;
        return _this;
      }
      PaginationComp2.prototype.postConstruct = function() {
        var isRtl = this.gridOptionsService.is("enableRtl");
        this.setTemplate(this.getTemplate());
        var _a = this, btFirst = _a.btFirst, btPrevious = _a.btPrevious, btNext = _a.btNext, btLast = _a.btLast;
        this.activateTabIndex([btFirst, btPrevious, btNext, btLast]);
        btFirst.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "last" : "first", this.gridOptionsService));
        btPrevious.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "next" : "previous", this.gridOptionsService));
        btNext.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "previous" : "next", this.gridOptionsService));
        btLast.insertAdjacentElement("afterbegin", createIconNoSpan(isRtl ? "first" : "last", this.gridOptionsService));
        this.addManagedPropertyListener("pagination", this.onPaginationChanged.bind(this));
        this.addManagedPropertyListener("suppressPaginationPanel", this.onPaginationChanged.bind(this));
        this.onPaginationChanged();
      };
      PaginationComp2.prototype.onPaginationChanged = function() {
        var isPaging = this.gridOptionsService.is("pagination");
        var paginationPanelEnabled = isPaging && !this.gridOptionsService.is("suppressPaginationPanel");
        this.setDisplayed(paginationPanelEnabled);
        if (!paginationPanelEnabled) {
          return;
        }
        this.setupListeners();
        this.enableOrDisableButtons();
        this.updateRowLabels();
        this.setCurrentPageLabel();
        this.setTotalLabels();
      };
      PaginationComp2.prototype.setupListeners = function() {
        var _this = this;
        if (!this.areListenersSetup) {
          this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
          [
            { el: this.btFirst, fn: this.onBtFirst.bind(this) },
            { el: this.btPrevious, fn: this.onBtPrevious.bind(this) },
            { el: this.btNext, fn: this.onBtNext.bind(this) },
            { el: this.btLast, fn: this.onBtLast.bind(this) }
          ].forEach(function(item) {
            var el = item.el, fn = item.fn;
            _this.addManagedListener(el, "click", fn);
            _this.addManagedListener(el, "keydown", function(e) {
              if (e.key === KeyCode.ENTER || e.key === KeyCode.SPACE) {
                e.preventDefault();
                fn();
              }
            });
          });
          this.areListenersSetup = true;
        }
      };
      PaginationComp2.prototype.onBtFirst = function() {
        if (!this.previousAndFirstButtonsDisabled) {
          this.paginationProxy.goToFirstPage();
        }
      };
      PaginationComp2.prototype.setCurrentPageLabel = function() {
        var pagesExist = this.paginationProxy.getTotalPages() > 0;
        var currentPage = this.paginationProxy.getCurrentPage();
        var toDisplay = pagesExist ? currentPage + 1 : 0;
        this.lbCurrent.innerHTML = this.formatNumber(toDisplay);
      };
      PaginationComp2.prototype.formatNumber = function(value) {
        var userFunc = this.gridOptionsService.getCallback("paginationNumberFormatter");
        if (userFunc) {
          var params = { value };
          return userFunc(params);
        }
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        var thousandSeparator = localeTextFunc("thousandSeparator", ",");
        var decimalSeparator = localeTextFunc("decimalSeparator", ".");
        return formatNumberCommas(value, thousandSeparator, decimalSeparator);
      };
      PaginationComp2.prototype.getTemplate = function() {
        var localeTextFunc = this.localeService.getLocaleTextFunc();
        var strPage = localeTextFunc("page", "Page");
        var strTo = localeTextFunc("to", "to");
        var strOf = localeTextFunc("of", "of");
        var strFirst = localeTextFunc("firstPage", "First Page");
        var strPrevious = localeTextFunc("previousPage", "Previous Page");
        var strNext = localeTextFunc("nextPage", "Next Page");
        var strLast = localeTextFunc("lastPage", "Last Page");
        var compId = this.getCompId();
        return (
          /* html */
          '<div class="ag-paging-panel ag-unselectable" id="ag-' + compId + '">\n                <span class="ag-paging-row-summary-panel" role="status">\n                    <span id="ag-' + compId + '-first-row" ref="lbFirstRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-' + compId + '-to">' + strTo + '</span>\n                    <span id="ag-' + compId + '-last-row" ref="lbLastRowOnPage" class="ag-paging-row-summary-panel-number"></span>\n                    <span id="ag-' + compId + '-of">' + strOf + '</span>\n                    <span id="ag-' + compId + '-row-count" ref="lbRecordCount" class="ag-paging-row-summary-panel-number"></span>\n                </span>\n                <span class="ag-paging-page-summary-panel" role="presentation">\n                    <div ref="btFirst" class="ag-button ag-paging-button" role="button" aria-label="' + strFirst + '"></div>\n                    <div ref="btPrevious" class="ag-button ag-paging-button" role="button" aria-label="' + strPrevious + '"></div>\n                    <span class="ag-paging-description" role="status">\n                        <span id="ag-' + compId + '-start-page">' + strPage + '</span>\n                        <span id="ag-' + compId + '-start-page-number" ref="lbCurrent" class="ag-paging-number"></span>\n                        <span id="ag-' + compId + '-of-page">' + strOf + '</span>\n                        <span id="ag-' + compId + '-of-page-number" ref="lbTotal" class="ag-paging-number"></span>\n                    </span>\n                    <div ref="btNext" class="ag-button ag-paging-button" role="button" aria-label="' + strNext + '"></div>\n                    <div ref="btLast" class="ag-button ag-paging-button" role="button" aria-label="' + strLast + '"></div>\n                </span>\n            </div>'
        );
      };
      PaginationComp2.prototype.onBtNext = function() {
        if (!this.nextButtonDisabled) {
          this.paginationProxy.goToNextPage();
        }
      };
      PaginationComp2.prototype.onBtPrevious = function() {
        if (!this.previousAndFirstButtonsDisabled) {
          this.paginationProxy.goToPreviousPage();
        }
      };
      PaginationComp2.prototype.onBtLast = function() {
        if (!this.lastButtonDisabled) {
          this.paginationProxy.goToLastPage();
        }
      };
      PaginationComp2.prototype.enableOrDisableButtons = function() {
        var currentPage = this.paginationProxy.getCurrentPage();
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        this.previousAndFirstButtonsDisabled = currentPage === 0;
        this.toggleButtonDisabled(this.btFirst, this.previousAndFirstButtonsDisabled);
        this.toggleButtonDisabled(this.btPrevious, this.previousAndFirstButtonsDisabled);
        var zeroPagesToDisplay = this.isZeroPagesToDisplay();
        var onLastPage = maxRowFound && currentPage === totalPages - 1;
        this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
        this.lastButtonDisabled = !maxRowFound || zeroPagesToDisplay || currentPage === totalPages - 1;
        this.toggleButtonDisabled(this.btNext, this.nextButtonDisabled);
        this.toggleButtonDisabled(this.btLast, this.lastButtonDisabled);
      };
      PaginationComp2.prototype.toggleButtonDisabled = function(button, disabled) {
        setAriaDisabled(button, disabled);
        button.classList.toggle("ag-disabled", disabled);
      };
      PaginationComp2.prototype.updateRowLabels = function() {
        var currentPage = this.paginationProxy.getCurrentPage();
        var pageSize = this.paginationProxy.getPageSize();
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var rowCount = this.paginationProxy.isLastPageFound() ? this.paginationProxy.getMasterRowCount() : null;
        var startRow;
        var endRow;
        if (this.isZeroPagesToDisplay()) {
          startRow = endRow = 0;
        } else {
          startRow = pageSize * currentPage + 1;
          endRow = startRow + pageSize - 1;
          if (maxRowFound && endRow > rowCount) {
            endRow = rowCount;
          }
        }
        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
        if (this.rowNodeBlockLoader.isLoading()) {
          var translate = this.localeService.getLocaleTextFunc();
          this.lbLastRowOnPage.innerHTML = translate("pageLastRowUnknown", "?");
        } else {
          this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
        }
      };
      PaginationComp2.prototype.isZeroPagesToDisplay = function() {
        var maxRowFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        return maxRowFound && totalPages === 0;
      };
      PaginationComp2.prototype.setTotalLabels = function() {
        var lastPageFound = this.paginationProxy.isLastPageFound();
        var totalPages = this.paginationProxy.getTotalPages();
        var rowCount = lastPageFound ? this.paginationProxy.getMasterRowCount() : null;
        if (rowCount === 1) {
          var firstRow = this.paginationProxy.getRow(0);
          var hiddenGroupRow = firstRow && firstRow.group && !(firstRow.groupData || firstRow.aggData);
          if (hiddenGroupRow) {
            this.setTotalLabelsToZero();
            return;
          }
        }
        if (lastPageFound) {
          this.lbTotal.innerHTML = this.formatNumber(totalPages);
          this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
        } else {
          var moreText = this.localeService.getLocaleTextFunc()("more", "more");
          this.lbTotal.innerHTML = moreText;
          this.lbRecordCount.innerHTML = moreText;
        }
      };
      PaginationComp2.prototype.setTotalLabelsToZero = function() {
        this.lbFirstRowOnPage.innerHTML = this.formatNumber(0);
        this.lbCurrent.innerHTML = this.formatNumber(0);
        this.lbLastRowOnPage.innerHTML = this.formatNumber(0);
        this.lbTotal.innerHTML = this.formatNumber(0);
        this.lbRecordCount.innerHTML = this.formatNumber(0);
      };
      __decorate$v([
        Autowired("paginationProxy")
      ], PaginationComp2.prototype, "paginationProxy", void 0);
      __decorate$v([
        Autowired("rowNodeBlockLoader")
      ], PaginationComp2.prototype, "rowNodeBlockLoader", void 0);
      __decorate$v([
        RefSelector("btFirst")
      ], PaginationComp2.prototype, "btFirst", void 0);
      __decorate$v([
        RefSelector("btPrevious")
      ], PaginationComp2.prototype, "btPrevious", void 0);
      __decorate$v([
        RefSelector("btNext")
      ], PaginationComp2.prototype, "btNext", void 0);
      __decorate$v([
        RefSelector("btLast")
      ], PaginationComp2.prototype, "btLast", void 0);
      __decorate$v([
        RefSelector("lbRecordCount")
      ], PaginationComp2.prototype, "lbRecordCount", void 0);
      __decorate$v([
        RefSelector("lbFirstRowOnPage")
      ], PaginationComp2.prototype, "lbFirstRowOnPage", void 0);
      __decorate$v([
        RefSelector("lbLastRowOnPage")
      ], PaginationComp2.prototype, "lbLastRowOnPage", void 0);
      __decorate$v([
        RefSelector("lbCurrent")
      ], PaginationComp2.prototype, "lbCurrent", void 0);
      __decorate$v([
        RefSelector("lbTotal")
      ], PaginationComp2.prototype, "lbTotal", void 0);
      __decorate$v([
        PostConstruct
      ], PaginationComp2.prototype, "postConstruct", null);
      return PaginationComp2;
    }(Component);
    __extends$t = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$u = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(LoadingType2) {
      LoadingType2[LoadingType2["Loading"] = 0] = "Loading";
      LoadingType2[LoadingType2["NoRows"] = 1] = "NoRows";
    })(LoadingType || (LoadingType = {}));
    OverlayWrapperComponent = /** @class */
    function(_super) {
      __extends$t(OverlayWrapperComponent2, _super);
      function OverlayWrapperComponent2() {
        var _this = _super.call(this, OverlayWrapperComponent2.TEMPLATE) || this;
        _this.inProgress = false;
        _this.destroyRequested = false;
        _this.manuallyDisplayed = false;
        return _this;
      }
      OverlayWrapperComponent2.prototype.updateLayoutClasses = function(cssClass, params) {
        var overlayWrapperClassList = this.eOverlayWrapper.classList;
        overlayWrapperClassList.toggle(LayoutCssClasses.AUTO_HEIGHT, params.autoHeight);
        overlayWrapperClassList.toggle(LayoutCssClasses.NORMAL, params.normal);
        overlayWrapperClassList.toggle(LayoutCssClasses.PRINT, params.print);
      };
      OverlayWrapperComponent2.prototype.postConstruct = function() {
        this.createManagedBean(new LayoutFeature(this));
        this.setDisplayed(false, { skipAriaHidden: true });
        this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATED, this.onRowDataUpdated.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
        if (this.gridOptionsService.isRowModelType("clientSide") && !this.gridOptionsService.get("rowData")) {
          this.showLoadingOverlay();
        }
        this.gridApi.registerOverlayWrapperComp(this);
      };
      OverlayWrapperComponent2.prototype.setWrapperTypeClass = function(loadingType) {
        var overlayWrapperClassList = this.eOverlayWrapper.classList;
        overlayWrapperClassList.toggle("ag-overlay-loading-wrapper", loadingType === LoadingType.Loading);
        overlayWrapperClassList.toggle("ag-overlay-no-rows-wrapper", loadingType === LoadingType.NoRows);
      };
      OverlayWrapperComponent2.prototype.showLoadingOverlay = function() {
        if (this.gridOptionsService.is("suppressLoadingOverlay")) {
          return;
        }
        var params = {};
        var compDetails = this.userComponentFactory.getLoadingOverlayCompDetails(params);
        var promise = compDetails.newAgStackInstance();
        this.showOverlay(promise, LoadingType.Loading);
      };
      OverlayWrapperComponent2.prototype.showNoRowsOverlay = function() {
        if (this.gridOptionsService.is("suppressNoRowsOverlay")) {
          return;
        }
        var params = {};
        var compDetails = this.userComponentFactory.getNoRowsOverlayCompDetails(params);
        var promise = compDetails.newAgStackInstance();
        this.showOverlay(promise, LoadingType.NoRows);
      };
      OverlayWrapperComponent2.prototype.showOverlay = function(workItem, type) {
        var _this = this;
        if (this.inProgress) {
          return;
        }
        this.setWrapperTypeClass(type);
        this.destroyActiveOverlay();
        this.inProgress = true;
        if (workItem) {
          workItem.then(function(comp) {
            _this.inProgress = false;
            _this.eOverlayWrapper.appendChild(comp.getGui());
            _this.activeOverlay = comp;
            if (_this.destroyRequested) {
              _this.destroyRequested = false;
              _this.destroyActiveOverlay();
            }
          });
        }
        this.manuallyDisplayed = this.columnModel.isReady() && !this.paginationProxy.isEmpty();
        this.setDisplayed(true, { skipAriaHidden: true });
      };
      OverlayWrapperComponent2.prototype.destroyActiveOverlay = function() {
        if (this.inProgress) {
          this.destroyRequested = true;
          return;
        }
        if (!this.activeOverlay) {
          return;
        }
        this.activeOverlay = this.getContext().destroyBean(this.activeOverlay);
        clearElement(this.eOverlayWrapper);
      };
      OverlayWrapperComponent2.prototype.hideOverlay = function() {
        this.manuallyDisplayed = false;
        this.destroyActiveOverlay();
        this.setDisplayed(false, { skipAriaHidden: true });
      };
      OverlayWrapperComponent2.prototype.destroy = function() {
        this.destroyActiveOverlay();
        _super.prototype.destroy.call(this);
      };
      OverlayWrapperComponent2.prototype.showOrHideOverlay = function() {
        var isEmpty = this.paginationProxy.isEmpty();
        var isSuppressNoRowsOverlay = this.gridOptionsService.is("suppressNoRowsOverlay");
        if (isEmpty && !isSuppressNoRowsOverlay) {
          this.showNoRowsOverlay();
        } else {
          this.hideOverlay();
        }
      };
      OverlayWrapperComponent2.prototype.onRowDataUpdated = function() {
        this.showOrHideOverlay();
      };
      OverlayWrapperComponent2.prototype.onNewColumnsLoaded = function() {
        if (this.columnModel.isReady() && !this.paginationProxy.isEmpty() && !this.manuallyDisplayed) {
          this.hideOverlay();
        }
      };
      OverlayWrapperComponent2.TEMPLATE = '\n        <div class="ag-overlay" aria-hidden="true">\n            <div class="ag-overlay-panel">\n                <div class="ag-overlay-wrapper" ref="eOverlayWrapper"></div>\n            </div>\n        </div>';
      __decorate$u([
        Autowired("userComponentFactory")
      ], OverlayWrapperComponent2.prototype, "userComponentFactory", void 0);
      __decorate$u([
        Autowired("paginationProxy")
      ], OverlayWrapperComponent2.prototype, "paginationProxy", void 0);
      __decorate$u([
        Autowired("gridApi")
      ], OverlayWrapperComponent2.prototype, "gridApi", void 0);
      __decorate$u([
        Autowired("columnModel")
      ], OverlayWrapperComponent2.prototype, "columnModel", void 0);
      __decorate$u([
        RefSelector("eOverlayWrapper")
      ], OverlayWrapperComponent2.prototype, "eOverlayWrapper", void 0);
      __decorate$u([
        PostConstruct
      ], OverlayWrapperComponent2.prototype, "postConstruct", null);
      return OverlayWrapperComponent2;
    }(Component);
    __extends$s = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$t = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowPositionUtils = /** @class */
    function(_super) {
      __extends$s(RowPositionUtils2, _super);
      function RowPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      RowPositionUtils2.prototype.getFirstRow = function() {
        var rowIndex = 0;
        var rowPinned;
        if (this.pinnedRowModel.getPinnedTopRowCount()) {
          rowPinned = "top";
        } else if (this.rowModel.getRowCount()) {
          rowPinned = null;
          rowIndex = this.paginationProxy.getPageFirstRow();
        } else if (this.pinnedRowModel.getPinnedBottomRowCount()) {
          rowPinned = "bottom";
        }
        return rowPinned === void 0 ? null : { rowIndex, rowPinned };
      };
      RowPositionUtils2.prototype.getLastRow = function() {
        var rowIndex;
        var rowPinned = null;
        var pinnedBottomCount = this.pinnedRowModel.getPinnedBottomRowCount();
        var pinnedTopCount = this.pinnedRowModel.getPinnedTopRowCount();
        if (pinnedBottomCount) {
          rowPinned = "bottom";
          rowIndex = pinnedBottomCount - 1;
        } else if (this.rowModel.getRowCount()) {
          rowPinned = null;
          rowIndex = this.paginationProxy.getPageLastRow();
        } else if (pinnedTopCount) {
          rowPinned = "top";
          rowIndex = pinnedTopCount - 1;
        }
        return rowIndex === void 0 ? null : { rowIndex, rowPinned };
      };
      RowPositionUtils2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case "top":
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case "bottom":
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      RowPositionUtils2.prototype.sameRow = function(rowA, rowB) {
        if (!rowA && !rowB) {
          return true;
        }
        if (rowA && !rowB || !rowA && rowB) {
          return false;
        }
        return rowA.rowIndex === rowB.rowIndex && rowA.rowPinned == rowB.rowPinned;
      };
      RowPositionUtils2.prototype.before = function(rowA, rowB) {
        switch (rowA.rowPinned) {
          case "top":
            if (rowB.rowPinned !== "top") {
              return true;
            }
            break;
          case "bottom":
            if (rowB.rowPinned !== "bottom") {
              return false;
            }
            break;
          default:
            if (exists(rowB.rowPinned)) {
              return rowB.rowPinned !== "top";
            }
            break;
        }
        return rowA.rowIndex < rowB.rowIndex;
      };
      RowPositionUtils2.prototype.rowMax = function(rows) {
        var _this = this;
        var max;
        rows.forEach(function(row) {
          if (max === void 0 || _this.before(max, row)) {
            max = row;
          }
        });
        return max;
      };
      RowPositionUtils2.prototype.rowMin = function(rows) {
        var _this = this;
        var min;
        rows.forEach(function(row) {
          if (min === void 0 || _this.before(row, min)) {
            min = row;
          }
        });
        return min;
      };
      __decorate$t([
        Autowired("rowModel")
      ], RowPositionUtils2.prototype, "rowModel", void 0);
      __decorate$t([
        Autowired("pinnedRowModel")
      ], RowPositionUtils2.prototype, "pinnedRowModel", void 0);
      __decorate$t([
        Autowired("paginationProxy")
      ], RowPositionUtils2.prototype, "paginationProxy", void 0);
      RowPositionUtils2 = __decorate$t([
        Bean("rowPositionUtils")
      ], RowPositionUtils2);
      return RowPositionUtils2;
    }(BeanStub);
    __extends$r = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$s = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CellPositionUtils = /** @class */
    function(_super) {
      __extends$r(CellPositionUtils2, _super);
      function CellPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CellPositionUtils2.prototype.createId = function(cellPosition) {
        var rowIndex = cellPosition.rowIndex, rowPinned = cellPosition.rowPinned, column = cellPosition.column;
        return this.createIdFromValues({ rowIndex, column, rowPinned });
      };
      CellPositionUtils2.prototype.createIdFromValues = function(cellPosition) {
        var rowIndex = cellPosition.rowIndex, rowPinned = cellPosition.rowPinned, column = cellPosition.column;
        return rowIndex + "." + (rowPinned == null ? "null" : rowPinned) + "." + column.getId();
      };
      CellPositionUtils2.prototype.equals = function(cellA, cellB) {
        var colsMatch = cellA.column === cellB.column;
        var floatingMatch = cellA.rowPinned === cellB.rowPinned;
        var indexMatch = cellA.rowIndex === cellB.rowIndex;
        return colsMatch && floatingMatch && indexMatch;
      };
      CellPositionUtils2 = __decorate$s([
        Bean("cellPositionUtils")
      ], CellPositionUtils2);
      return CellPositionUtils2;
    }(BeanStub);
    __extends$q = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    UndoRedoAction = /** @class */
    function() {
      function UndoRedoAction2(cellValueChanges) {
        this.cellValueChanges = cellValueChanges;
      }
      return UndoRedoAction2;
    }();
    RangeUndoRedoAction = /** @class */
    function(_super) {
      __extends$q(RangeUndoRedoAction2, _super);
      function RangeUndoRedoAction2(cellValueChanges, initialRange, finalRange, ranges) {
        var _this = _super.call(this, cellValueChanges) || this;
        _this.initialRange = initialRange;
        _this.finalRange = finalRange;
        _this.ranges = ranges;
        return _this;
      }
      return RangeUndoRedoAction2;
    }(UndoRedoAction);
    UndoRedoStack = /** @class */
    function() {
      function UndoRedoStack2(maxStackSize) {
        this.actionStack = [];
        this.maxStackSize = maxStackSize ? maxStackSize : UndoRedoStack2.DEFAULT_STACK_SIZE;
        this.actionStack = new Array(this.maxStackSize);
      }
      UndoRedoStack2.prototype.pop = function() {
        return this.actionStack.pop();
      };
      UndoRedoStack2.prototype.push = function(item) {
        var shouldAddActions = item.cellValueChanges && item.cellValueChanges.length > 0;
        if (!shouldAddActions) {
          return;
        }
        if (this.actionStack.length === this.maxStackSize) {
          this.actionStack.shift();
        }
        this.actionStack.push(item);
      };
      UndoRedoStack2.prototype.clear = function() {
        this.actionStack = [];
      };
      UndoRedoStack2.prototype.getCurrentStackSize = function() {
        return this.actionStack.length;
      };
      UndoRedoStack2.DEFAULT_STACK_SIZE = 10;
      return UndoRedoStack2;
    }();
    __extends$p = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign$2 = function() {
      __assign$2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$2.apply(this, arguments);
    };
    __decorate$r = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$6 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$5 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    UndoRedoService = /** @class */
    function(_super) {
      __extends$p(UndoRedoService2, _super);
      function UndoRedoService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cellValueChanges = [];
        _this.activeCellEdit = null;
        _this.activeRowEdit = null;
        _this.isPasting = false;
        _this.isRangeInAction = false;
        _this.onCellValueChanged = function(event) {
          var eventCell = { column: event.column, rowIndex: event.rowIndex, rowPinned: event.rowPinned };
          var isCellEditing = _this.activeCellEdit !== null && _this.cellPositionUtils.equals(_this.activeCellEdit, eventCell);
          var isRowEditing = _this.activeRowEdit !== null && _this.rowPositionUtils.sameRow(_this.activeRowEdit, eventCell);
          var shouldCaptureAction = isCellEditing || isRowEditing || _this.isPasting || _this.isRangeInAction;
          if (!shouldCaptureAction) {
            return;
          }
          var rowPinned = event.rowPinned, rowIndex = event.rowIndex, column = event.column, oldValue = event.oldValue, value = event.value;
          var cellValueChange = {
            rowPinned,
            rowIndex,
            columnId: column.getColId(),
            newValue: value,
            oldValue
          };
          _this.cellValueChanges.push(cellValueChange);
        };
        _this.clearStacks = function() {
          _this.undoStack.clear();
          _this.redoStack.clear();
        };
        return _this;
      }
      UndoRedoService2.prototype.init = function() {
        var _this = this;
        if (!this.gridOptionsService.is("undoRedoCellEditing")) {
          return;
        }
        var undoRedoLimit = this.gridOptionsService.getNum("undoRedoCellEditingLimit");
        if (undoRedoLimit <= 0) {
          return;
        }
        this.undoStack = new UndoRedoStack(undoRedoLimit);
        this.redoStack = new UndoRedoStack(undoRedoLimit);
        this.addRowEditingListeners();
        this.addCellEditingListeners();
        this.addPasteListeners();
        this.addFillListeners();
        this.addCellKeyListeners();
        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged);
        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, function(e) {
          if (!e.keepUndoRedoStack) {
            _this.clearStacks();
          }
        });
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_GROUP_OPENED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.clearStacks);
        this.addManagedListener(this.eventService, Events.EVENT_ROW_DRAG_END, this.clearStacks);
        this.ctrlsService.whenReady(function() {
          _this.gridBodyCtrl = _this.ctrlsService.getGridBodyCtrl();
        });
      };
      UndoRedoService2.prototype.getCurrentUndoStackSize = function() {
        return this.undoStack ? this.undoStack.getCurrentStackSize() : 0;
      };
      UndoRedoService2.prototype.getCurrentRedoStackSize = function() {
        return this.redoStack ? this.redoStack.getCurrentStackSize() : 0;
      };
      UndoRedoService2.prototype.undo = function(source) {
        var startEvent = {
          type: Events.EVENT_UNDO_STARTED,
          source
        };
        this.eventService.dispatchEvent(startEvent);
        var operationPerformed = this.undoRedo(this.undoStack, this.redoStack, "initialRange", "oldValue", "undo");
        var endEvent = {
          type: Events.EVENT_UNDO_ENDED,
          source,
          operationPerformed
        };
        this.eventService.dispatchEvent(endEvent);
      };
      UndoRedoService2.prototype.redo = function(source) {
        var startEvent = {
          type: Events.EVENT_REDO_STARTED,
          source
        };
        this.eventService.dispatchEvent(startEvent);
        var operationPerformed = this.undoRedo(this.redoStack, this.undoStack, "finalRange", "newValue", "redo");
        var endEvent = {
          type: Events.EVENT_REDO_ENDED,
          source,
          operationPerformed
        };
        this.eventService.dispatchEvent(endEvent);
      };
      UndoRedoService2.prototype.undoRedo = function(undoRedoStack, opposingUndoRedoStack, rangeProperty, cellValueChangeProperty, source) {
        if (!undoRedoStack) {
          return false;
        }
        var undoRedoAction = undoRedoStack.pop();
        if (!undoRedoAction || !undoRedoAction.cellValueChanges) {
          return false;
        }
        this.processAction(undoRedoAction, function(cellValueChange) {
          return cellValueChange[cellValueChangeProperty];
        }, source);
        if (undoRedoAction instanceof RangeUndoRedoAction) {
          this.processRange(undoRedoAction.ranges || [undoRedoAction[rangeProperty]]);
        } else {
          this.processCell(undoRedoAction.cellValueChanges);
        }
        opposingUndoRedoStack.push(undoRedoAction);
        return true;
      };
      UndoRedoService2.prototype.processAction = function(action, valueExtractor, source) {
        var _this = this;
        action.cellValueChanges.forEach(function(cellValueChange) {
          var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned, columnId = cellValueChange.columnId;
          var rowPosition = { rowIndex, rowPinned };
          var currentRow = _this.getRowNode(rowPosition);
          if (!currentRow.displayed) {
            return;
          }
          currentRow.setDataValue(columnId, valueExtractor(cellValueChange), source);
        });
      };
      UndoRedoService2.prototype.processRange = function(ranges) {
        var _this = this;
        var lastFocusedCell;
        this.rangeService.removeAllCellRanges(true);
        ranges.forEach(function(range, idx) {
          if (!range) {
            return;
          }
          var startRow = range.startRow;
          var endRow = range.endRow;
          if (idx === ranges.length - 1) {
            lastFocusedCell = {
              rowPinned: startRow.rowPinned,
              rowIndex: startRow.rowIndex,
              columnId: range.startColumn.getColId()
            };
            _this.setLastFocusedCell(lastFocusedCell);
          }
          var cellRangeParams = {
            rowStartIndex: startRow.rowIndex,
            rowStartPinned: startRow.rowPinned,
            rowEndIndex: endRow.rowIndex,
            rowEndPinned: endRow.rowPinned,
            columnStart: range.startColumn,
            columns: range.columns
          };
          _this.rangeService.addCellRange(cellRangeParams);
        });
      };
      UndoRedoService2.prototype.processCell = function(cellValueChanges) {
        var cellValueChange = cellValueChanges[0];
        var rowIndex = cellValueChange.rowIndex, rowPinned = cellValueChange.rowPinned;
        var rowPosition = { rowIndex, rowPinned };
        var row = this.getRowNode(rowPosition);
        var lastFocusedCell = {
          rowPinned: cellValueChange.rowPinned,
          rowIndex: row.rowIndex,
          columnId: cellValueChange.columnId
        };
        this.setLastFocusedCell(lastFocusedCell, !!this.rangeService);
      };
      UndoRedoService2.prototype.setLastFocusedCell = function(lastFocusedCell, setRangeToCell) {
        var rowIndex = lastFocusedCell.rowIndex, columnId = lastFocusedCell.columnId, rowPinned = lastFocusedCell.rowPinned;
        var scrollFeature = this.gridBodyCtrl.getScrollFeature();
        var column = this.columnModel.getGridColumn(columnId);
        if (!column) {
          return;
        }
        scrollFeature.ensureIndexVisible(rowIndex);
        scrollFeature.ensureColumnVisible(column);
        var cellPosition = { rowIndex, column, rowPinned };
        this.focusService.setFocusedCell(__assign$2(__assign$2({}, cellPosition), { forceBrowserFocus: true }));
        if (setRangeToCell) {
          this.rangeService.setRangeToCell(cellPosition);
        }
      };
      UndoRedoService2.prototype.addRowEditingListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STARTED, function(e) {
          _this.activeRowEdit = { rowIndex: e.rowIndex, rowPinned: e.rowPinned };
        });
        this.addManagedListener(this.eventService, Events.EVENT_ROW_EDITING_STOPPED, function() {
          var action = new UndoRedoAction(_this.cellValueChanges);
          _this.pushActionsToUndoStack(action);
          _this.activeRowEdit = null;
        });
      };
      UndoRedoService2.prototype.addCellEditingListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STARTED, function(e) {
          _this.activeCellEdit = { column: e.column, rowIndex: e.rowIndex, rowPinned: e.rowPinned };
        });
        this.addManagedListener(this.eventService, Events.EVENT_CELL_EDITING_STOPPED, function(e) {
          _this.activeCellEdit = null;
          var shouldPushAction = e.valueChanged && !_this.activeRowEdit && !_this.isPasting && !_this.isRangeInAction;
          if (shouldPushAction) {
            var action = new UndoRedoAction(_this.cellValueChanges);
            _this.pushActionsToUndoStack(action);
          }
        });
      };
      UndoRedoService2.prototype.addPasteListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_PASTE_START, function() {
          _this.isPasting = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_PASTE_END, function() {
          var action = new UndoRedoAction(_this.cellValueChanges);
          _this.pushActionsToUndoStack(action);
          _this.isPasting = false;
        });
      };
      UndoRedoService2.prototype.addFillListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_FILL_START, function() {
          _this.isRangeInAction = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_FILL_END, function(event) {
          var action = new RangeUndoRedoAction(_this.cellValueChanges, event.initialRange, event.finalRange);
          _this.pushActionsToUndoStack(action);
          _this.isRangeInAction = false;
        });
      };
      UndoRedoService2.prototype.addCellKeyListeners = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_START, function() {
          _this.isRangeInAction = true;
        });
        this.addManagedListener(this.eventService, Events.EVENT_KEY_SHORTCUT_CHANGED_CELL_END, function() {
          var action;
          if (_this.rangeService && _this.gridOptionsService.is("enableRangeSelection")) {
            action = new RangeUndoRedoAction(_this.cellValueChanges, void 0, void 0, __spreadArray$5([], __read$6(_this.rangeService.getCellRanges())));
          } else {
            action = new UndoRedoAction(_this.cellValueChanges);
          }
          _this.pushActionsToUndoStack(action);
          _this.isRangeInAction = false;
        });
      };
      UndoRedoService2.prototype.pushActionsToUndoStack = function(action) {
        this.undoStack.push(action);
        this.cellValueChanges = [];
        this.redoStack.clear();
      };
      UndoRedoService2.prototype.getRowNode = function(gridRow) {
        switch (gridRow.rowPinned) {
          case "top":
            return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
          case "bottom":
            return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
          default:
            return this.rowModel.getRow(gridRow.rowIndex);
        }
      };
      __decorate$r([
        Autowired("focusService")
      ], UndoRedoService2.prototype, "focusService", void 0);
      __decorate$r([
        Autowired("ctrlsService")
      ], UndoRedoService2.prototype, "ctrlsService", void 0);
      __decorate$r([
        Autowired("rowModel")
      ], UndoRedoService2.prototype, "rowModel", void 0);
      __decorate$r([
        Autowired("pinnedRowModel")
      ], UndoRedoService2.prototype, "pinnedRowModel", void 0);
      __decorate$r([
        Autowired("cellPositionUtils")
      ], UndoRedoService2.prototype, "cellPositionUtils", void 0);
      __decorate$r([
        Autowired("rowPositionUtils")
      ], UndoRedoService2.prototype, "rowPositionUtils", void 0);
      __decorate$r([
        Autowired("columnModel")
      ], UndoRedoService2.prototype, "columnModel", void 0);
      __decorate$r([
        Optional("rangeService")
      ], UndoRedoService2.prototype, "rangeService", void 0);
      __decorate$r([
        PostConstruct
      ], UndoRedoService2.prototype, "init", null);
      UndoRedoService2 = __decorate$r([
        Bean("undoRedoService")
      ], UndoRedoService2);
      return UndoRedoService2;
    }(BeanStub);
    __extends$o = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$q = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    HeaderPositionUtils = /** @class */
    function(_super) {
      __extends$o(HeaderPositionUtils2, _super);
      function HeaderPositionUtils2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      HeaderPositionUtils2.prototype.findHeader = function(focusedHeader, direction) {
        var nextColumn;
        var getGroupMethod;
        var getColMethod;
        if (focusedHeader.column instanceof ColumnGroup) {
          getGroupMethod = "getDisplayedGroup" + direction;
          nextColumn = this.columnModel[getGroupMethod](focusedHeader.column);
        } else {
          getColMethod = "getDisplayedCol" + direction;
          nextColumn = this.columnModel[getColMethod](focusedHeader.column);
        }
        if (!nextColumn) {
          return;
        }
        var headerRowIndex = focusedHeader.headerRowIndex;
        var currentRowType = this.getHeaderRowType(headerRowIndex);
        if (currentRowType === HeaderRowType.COLUMN_GROUP) {
          var columnGroup = nextColumn;
          if (columnGroup.isPadding() && this.isAnyChildSpanningHeaderHeight(columnGroup)) {
            var _a = this.getColumnVisibleChild(columnGroup, headerRowIndex, direction), nextFocusColumn = _a.nextFocusColumn, nextRow = _a.nextRow;
            if (nextFocusColumn) {
              nextColumn = nextFocusColumn;
              headerRowIndex = nextRow;
            }
          }
        }
        return {
          column: nextColumn,
          headerRowIndex
        };
      };
      HeaderPositionUtils2.prototype.isAnyChildSpanningHeaderHeight = function(columnGroup) {
        if (!columnGroup) {
          return false;
        }
        return columnGroup.getLeafColumns().some(function(col) {
          return col.isSpanHeaderHeight();
        });
      };
      HeaderPositionUtils2.prototype.getColumnVisibleParent = function(currentColumn, currentIndex) {
        var currentRowType = this.getHeaderRowType(currentIndex);
        var isFloatingFilter = currentRowType === HeaderRowType.FLOATING_FILTER;
        var isColumn = currentRowType === HeaderRowType.COLUMN;
        var nextFocusColumn = isFloatingFilter ? currentColumn : currentColumn.getParent();
        var nextRow = currentIndex - 1;
        if (isColumn && this.isAnyChildSpanningHeaderHeight(currentColumn.getParent())) {
          while (nextFocusColumn && nextFocusColumn.isPadding()) {
            nextFocusColumn = nextFocusColumn.getParent();
            nextRow--;
          }
          if (nextRow < 0) {
            nextFocusColumn = currentColumn;
            nextRow = currentIndex;
          }
        }
        return { nextFocusColumn, nextRow };
      };
      HeaderPositionUtils2.prototype.getColumnVisibleChild = function(column, currentIndex, direction) {
        if (direction === void 0) {
          direction = "After";
        }
        var currentRowType = this.getHeaderRowType(currentIndex);
        var nextFocusColumn = column;
        var nextRow = currentIndex + 1;
        if (currentRowType === HeaderRowType.COLUMN_GROUP) {
          var leafColumns = column.getLeafColumns();
          var leafChild = direction === "After" ? leafColumns[0] : last(leafColumns);
          if (this.isAnyChildSpanningHeaderHeight(leafChild.getParent())) {
            nextFocusColumn = leafChild;
            var currentColumn = leafChild.getParent();
            while (currentColumn && currentColumn !== column) {
              currentColumn = currentColumn.getParent();
              nextRow++;
            }
          } else {
            nextFocusColumn = column.getDisplayedChildren()[0];
          }
        }
        return { nextFocusColumn, nextRow };
      };
      HeaderPositionUtils2.prototype.getHeaderRowType = function(rowIndex) {
        var centerHeaderContainer = this.ctrlsService.getHeaderRowContainerCtrl();
        if (centerHeaderContainer) {
          return centerHeaderContainer.getRowType(rowIndex);
        }
      };
      HeaderPositionUtils2.prototype.findColAtEdgeForHeaderRow = function(level, position) {
        var displayedColumns = this.columnModel.getAllDisplayedColumns();
        var column = displayedColumns[position === "start" ? 0 : displayedColumns.length - 1];
        if (!column) {
          return;
        }
        var childContainer = this.ctrlsService.getHeaderRowContainerCtrl(column.getPinned());
        var type = childContainer.getRowType(level);
        if (type == HeaderRowType.COLUMN_GROUP) {
          var columnGroup = this.columnModel.getColumnGroupAtLevel(column, level);
          return {
            headerRowIndex: level,
            column: columnGroup
          };
        }
        return {
          // if type==null, means the header level didn't exist
          headerRowIndex: type == null ? -1 : level,
          column
        };
      };
      __decorate$q([
        Autowired("columnModel")
      ], HeaderPositionUtils2.prototype, "columnModel", void 0);
      __decorate$q([
        Autowired("ctrlsService")
      ], HeaderPositionUtils2.prototype, "ctrlsService", void 0);
      HeaderPositionUtils2 = __decorate$q([
        Bean("headerPositionUtils")
      ], HeaderPositionUtils2);
      return HeaderPositionUtils2;
    }(BeanStub);
    __decorate$p = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ColumnDefFactory = /** @class */
    function() {
      function ColumnDefFactory2() {
      }
      ColumnDefFactory2.prototype.buildColumnDefs = function(cols, rowGroupColumns, pivotColumns) {
        var _this = this;
        var res = [];
        var colGroupDefs = {};
        cols.forEach(function(col) {
          var colDef = _this.createDefFromColumn(col, rowGroupColumns, pivotColumns);
          var addToResult = true;
          var childDef = colDef;
          var pointer = col.getOriginalParent();
          var lastPointer = null;
          while (pointer) {
            var parentDef = null;
            if (pointer.isPadding()) {
              pointer = pointer.getOriginalParent();
              continue;
            }
            var existingParentDef = colGroupDefs[pointer.getGroupId()];
            if (existingParentDef) {
              existingParentDef.children.push(childDef);
              addToResult = false;
              break;
            }
            parentDef = _this.createDefFromGroup(pointer);
            if (parentDef) {
              parentDef.children = [childDef];
              colGroupDefs[parentDef.groupId] = parentDef;
              childDef = parentDef;
              pointer = pointer.getOriginalParent();
            }
            if (pointer != null && lastPointer === pointer) {
              addToResult = false;
              break;
            }
            lastPointer = pointer;
          }
          if (addToResult) {
            res.push(childDef);
          }
        });
        return res;
      };
      ColumnDefFactory2.prototype.createDefFromGroup = function(group) {
        var defCloned = deepCloneDefinition(group.getColGroupDef(), ["children"]);
        if (defCloned) {
          defCloned.groupId = group.getGroupId();
        }
        return defCloned;
      };
      ColumnDefFactory2.prototype.createDefFromColumn = function(col, rowGroupColumns, pivotColumns) {
        var colDefCloned = deepCloneDefinition(col.getColDef());
        colDefCloned.colId = col.getColId();
        colDefCloned.width = col.getActualWidth();
        colDefCloned.rowGroup = col.isRowGroupActive();
        colDefCloned.rowGroupIndex = col.isRowGroupActive() ? rowGroupColumns.indexOf(col) : null;
        colDefCloned.pivot = col.isPivotActive();
        colDefCloned.pivotIndex = col.isPivotActive() ? pivotColumns.indexOf(col) : null;
        colDefCloned.aggFunc = col.isValueActive() ? col.getAggFunc() : null;
        colDefCloned.hide = col.isVisible() ? void 0 : true;
        colDefCloned.pinned = col.isPinned() ? col.getPinned() : null;
        colDefCloned.sort = col.getSort() ? col.getSort() : null;
        colDefCloned.sortIndex = col.getSortIndex() != null ? col.getSortIndex() : null;
        return colDefCloned;
      };
      ColumnDefFactory2 = __decorate$p([
        Bean("columnDefFactory")
      ], ColumnDefFactory2);
      return ColumnDefFactory2;
    }();
    __decorate$o = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowCssClassCalculator = /** @class */
    function() {
      function RowCssClassCalculator2() {
      }
      RowCssClassCalculator2.prototype.getInitialRowClasses = function(params) {
        var classes = [];
        if (exists(params.extraCssClass)) {
          classes.push(params.extraCssClass);
        }
        classes.push("ag-row");
        classes.push(params.rowFocused ? "ag-row-focus" : "ag-row-no-focus");
        if (params.fadeRowIn) {
          classes.push("ag-opacity-zero");
        }
        classes.push(params.rowIsEven ? "ag-row-even" : "ag-row-odd");
        if (params.rowNode.isRowPinned()) {
          classes.push("ag-row-pinned");
        }
        if (params.rowNode.isSelected()) {
          classes.push("ag-row-selected");
        }
        if (params.rowNode.footer) {
          classes.push("ag-row-footer");
        }
        classes.push("ag-row-level-" + params.rowLevel);
        if (params.rowNode.stub) {
          classes.push("ag-row-loading");
        }
        if (params.fullWidthRow) {
          classes.push("ag-full-width-row");
        }
        if (params.expandable) {
          classes.push("ag-row-group");
          classes.push(params.rowNode.expanded ? "ag-row-group-expanded" : "ag-row-group-contracted");
        }
        if (params.rowNode.dragging) {
          classes.push("ag-row-dragging");
        }
        pushAll(classes, this.processClassesFromGridOptions(params.rowNode));
        pushAll(classes, this.preProcessRowClassRules(params.rowNode));
        classes.push(params.printLayout ? "ag-row-position-relative" : "ag-row-position-absolute");
        if (params.firstRowOnPage) {
          classes.push("ag-row-first");
        }
        if (params.lastRowOnPage) {
          classes.push("ag-row-last");
        }
        if (params.fullWidthRow) {
          if (params.pinned === "left") {
            classes.push("ag-cell-last-left-pinned");
          }
          if (params.pinned === "right") {
            classes.push("ag-cell-first-right-pinned");
          }
        }
        return classes;
      };
      RowCssClassCalculator2.prototype.processClassesFromGridOptions = function(rowNode) {
        var res = [];
        var process2 = function(rowCls) {
          if (typeof rowCls === "string") {
            res.push(rowCls);
          } else if (Array.isArray(rowCls)) {
            rowCls.forEach(function(e) {
              return res.push(e);
            });
          }
        };
        var rowClass = this.gridOptionsService.get("rowClass");
        if (rowClass) {
          if (typeof rowClass === "function") {
            console.warn("AG Grid: rowClass should not be a function, please use getRowClass instead");
            return [];
          }
          process2(rowClass);
        }
        var rowClassFunc = this.gridOptionsService.getCallback("getRowClass");
        if (rowClassFunc) {
          var params = {
            data: rowNode.data,
            node: rowNode,
            rowIndex: rowNode.rowIndex
          };
          var rowClassFuncResult = rowClassFunc(params);
          process2(rowClassFuncResult);
        }
        return res;
      };
      RowCssClassCalculator2.prototype.preProcessRowClassRules = function(rowNode) {
        var res = [];
        this.processRowClassRules(rowNode, function(className) {
          res.push(className);
        }, function(className) {
        });
        return res;
      };
      RowCssClassCalculator2.prototype.processRowClassRules = function(rowNode, onApplicableClass, onNotApplicableClass) {
        var rowClassParams = {
          data: rowNode.data,
          node: rowNode,
          rowIndex: rowNode.rowIndex,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context
        };
        this.stylingService.processClassRules(this.gridOptionsService.get("rowClassRules"), rowClassParams, onApplicableClass, onNotApplicableClass);
      };
      RowCssClassCalculator2.prototype.calculateRowLevel = function(rowNode) {
        if (rowNode.group) {
          return rowNode.level;
        }
        return rowNode.parent ? rowNode.parent.level + 1 : 0;
      };
      __decorate$o([
        Autowired("stylingService")
      ], RowCssClassCalculator2.prototype, "stylingService", void 0);
      __decorate$o([
        Autowired("gridOptionsService")
      ], RowCssClassCalculator2.prototype, "gridOptionsService", void 0);
      RowCssClassCalculator2 = __decorate$o([
        Bean("rowCssClassCalculator")
      ], RowCssClassCalculator2);
      return RowCssClassCalculator2;
    }();
    __extends$n = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$n = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowNodeSorter = /** @class */
    function(_super) {
      __extends$n(RowNodeSorter2, _super);
      function RowNodeSorter2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      RowNodeSorter2.prototype.init = function() {
        var _this = this;
        this.isAccentedSort = this.gridOptionsService.is("accentedSort");
        this.primaryColumnsSortGroups = this.gridOptionsService.isColumnsSortingCoupledToGroup();
        this.addManagedPropertyListener("accentedSort", function(propChange) {
          return _this.isAccentedSort = propChange.currentValue;
        });
        this.addManagedPropertyListener("autoGroupColumnDef", function() {
          return _this.primaryColumnsSortGroups = _this.gridOptionsService.isColumnsSortingCoupledToGroup();
        });
      };
      RowNodeSorter2.prototype.doFullSort = function(rowNodes, sortOptions) {
        var mapper = function(rowNode, pos) {
          return { currentPos: pos, rowNode };
        };
        var sortedRowNodes = rowNodes.map(mapper);
        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
        return sortedRowNodes.map(function(item) {
          return item.rowNode;
        });
      };
      RowNodeSorter2.prototype.compareRowNodes = function(sortOptions, sortedNodeA, sortedNodeB) {
        var nodeA = sortedNodeA.rowNode;
        var nodeB = sortedNodeB.rowNode;
        for (var i = 0, len = sortOptions.length; i < len; i++) {
          var sortOption = sortOptions[i];
          var isDescending = sortOption.sort === "desc";
          var valueA = this.getValue(nodeA, sortOption.column);
          var valueB = this.getValue(nodeB, sortOption.column);
          var comparatorResult = void 0;
          var providedComparator = this.getComparator(sortOption, nodeA);
          if (providedComparator) {
            comparatorResult = providedComparator(valueA, valueB, nodeA, nodeB, isDescending);
          } else {
            comparatorResult = _.defaultComparator(valueA, valueB, this.isAccentedSort);
          }
          var validResult = !isNaN(comparatorResult);
          if (validResult && comparatorResult !== 0) {
            return sortOption.sort === "asc" ? comparatorResult : comparatorResult * -1;
          }
        }
        return sortedNodeA.currentPos - sortedNodeB.currentPos;
      };
      RowNodeSorter2.prototype.getComparator = function(sortOption, rowNode) {
        var column = sortOption.column;
        var comparatorOnCol = column.getColDef().comparator;
        if (comparatorOnCol != null) {
          return comparatorOnCol;
        }
        if (!column.getColDef().showRowGroup) {
          return;
        }
        var groupLeafField = !rowNode.group && column.getColDef().field;
        if (!groupLeafField) {
          return;
        }
        var primaryColumn = this.columnModel.getPrimaryColumn(groupLeafField);
        if (!primaryColumn) {
          return;
        }
        return primaryColumn.getColDef().comparator;
      };
      RowNodeSorter2.prototype.getValue = function(node, column) {
        var _a, _b;
        if (!this.primaryColumnsSortGroups) {
          return this.valueService.getValue(column, node, false, false);
        }
        var isNodeGroupedAtLevel = node.rowGroupColumn === column;
        if (isNodeGroupedAtLevel) {
          var isGroupRows = this.gridOptionsService.isGroupUseEntireRow(this.columnModel.isPivotActive());
          if (isGroupRows) {
            var keyCreator = column.getColDef().keyCreator;
            if (keyCreator) {
              return node.key;
            }
            var leafChild = (_a = node.allLeafChildren) === null || _a === void 0 ? void 0 : _a[0];
            if (leafChild) {
              return this.valueService.getValue(column, leafChild, false, false);
            }
            return void 0;
          }
          var displayCol = this.columnModel.getGroupDisplayColumnForGroup(column.getId());
          if (!displayCol) {
            return void 0;
          }
          return (_b = node.groupData) === null || _b === void 0 ? void 0 : _b[displayCol.getId()];
        }
        if (node.group && column.getColDef().showRowGroup) {
          return void 0;
        }
        return this.valueService.getValue(column, node, false, false);
      };
      __decorate$n([
        Autowired("valueService")
      ], RowNodeSorter2.prototype, "valueService", void 0);
      __decorate$n([
        Autowired("columnModel")
      ], RowNodeSorter2.prototype, "columnModel", void 0);
      __decorate$n([
        PostConstruct
      ], RowNodeSorter2.prototype, "init", null);
      RowNodeSorter2 = __decorate$n([
        Bean("rowNodeSorter")
      ], RowNodeSorter2);
      return RowNodeSorter2;
    }(BeanStub);
    __extends$m = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$m = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CtrlsService = /** @class */
    function(_super) {
      __extends$m(CtrlsService2, _super);
      function CtrlsService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ready = false;
        _this.readyCallbacks = [];
        return _this;
      }
      CtrlsService_1 = CtrlsService2;
      CtrlsService2.prototype.checkReady = function() {
        this.ready = this.gridCtrl != null && this.gridBodyCtrl != null && this.centerRowContainerCtrl != null && this.leftRowContainerCtrl != null && this.rightRowContainerCtrl != null && this.bottomCenterRowContainerCtrl != null && this.bottomLeftRowContainerCtrl != null && this.bottomRightRowContainerCtrl != null && this.topCenterRowContainerCtrl != null && this.topLeftRowContainerCtrl != null && this.topRightRowContainerCtrl != null && this.stickyTopCenterRowContainerCtrl != null && this.stickyTopLeftRowContainerCtrl != null && this.stickyTopRightRowContainerCtrl != null && this.centerHeaderRowContainerCtrl != null && this.leftHeaderRowContainerCtrl != null && this.rightHeaderRowContainerCtrl != null && this.fakeHScrollComp != null && this.fakeVScrollComp != null && this.gridHeaderCtrl != null;
        if (this.ready) {
          var p_1 = this.createReadyParams();
          this.readyCallbacks.forEach(function(c) {
            return c(p_1);
          });
          this.readyCallbacks.length = 0;
        }
      };
      CtrlsService2.prototype.whenReady = function(callback) {
        if (this.ready) {
          callback(this.createReadyParams());
        } else {
          this.readyCallbacks.push(callback);
        }
      };
      CtrlsService2.prototype.createReadyParams = function() {
        return {
          centerRowContainerCtrl: this.centerRowContainerCtrl,
          leftRowContainerCtrl: this.leftRowContainerCtrl,
          rightRowContainerCtrl: this.rightRowContainerCtrl,
          bottomCenterRowContainerCtrl: this.bottomCenterRowContainerCtrl,
          bottomLeftRowContainerCtrl: this.bottomLeftRowContainerCtrl,
          bottomRightRowContainerCtrl: this.bottomRightRowContainerCtrl,
          topCenterRowContainerCtrl: this.topCenterRowContainerCtrl,
          topLeftRowContainerCtrl: this.topLeftRowContainerCtrl,
          topRightRowContainerCtrl: this.topRightRowContainerCtrl,
          stickyTopCenterRowContainerCtrl: this.stickyTopCenterRowContainerCtrl,
          stickyTopLeftRowContainerCtrl: this.stickyTopLeftRowContainerCtrl,
          stickyTopRightRowContainerCtrl: this.stickyTopRightRowContainerCtrl,
          centerHeaderRowContainerCtrl: this.centerHeaderRowContainerCtrl,
          leftHeaderRowContainerCtrl: this.leftHeaderRowContainerCtrl,
          rightHeaderRowContainerCtrl: this.rightHeaderRowContainerCtrl,
          fakeHScrollComp: this.fakeHScrollComp,
          fakeVScrollComp: this.fakeVScrollComp,
          gridBodyCtrl: this.gridBodyCtrl,
          gridCtrl: this.gridCtrl,
          gridHeaderCtrl: this.gridHeaderCtrl
        };
      };
      CtrlsService2.prototype.registerFakeHScrollComp = function(comp) {
        this.fakeHScrollComp = comp;
        this.checkReady();
      };
      CtrlsService2.prototype.registerFakeVScrollComp = function(comp) {
        this.fakeVScrollComp = comp;
        this.checkReady();
      };
      CtrlsService2.prototype.registerGridHeaderCtrl = function(gridHeaderCtrl) {
        this.gridHeaderCtrl = gridHeaderCtrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerCenterRowContainerCtrl = function(ctrl) {
        this.centerRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerLeftRowContainerCtrl = function(ctrl) {
        this.leftRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerRightRowContainerCtrl = function(ctrl) {
        this.rightRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerTopCenterRowContainerCtrl = function(ctrl) {
        this.topCenterRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerTopLeftRowContainerCon = function(ctrl) {
        this.topLeftRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerTopRightRowContainerCtrl = function(ctrl) {
        this.topRightRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerStickyTopCenterRowContainerCtrl = function(ctrl) {
        this.stickyTopCenterRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerStickyTopLeftRowContainerCon = function(ctrl) {
        this.stickyTopLeftRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerStickyTopRightRowContainerCtrl = function(ctrl) {
        this.stickyTopRightRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerBottomCenterRowContainerCtrl = function(ctrl) {
        this.bottomCenterRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerBottomLeftRowContainerCtrl = function(ctrl) {
        this.bottomLeftRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerBottomRightRowContainerCtrl = function(ctrl) {
        this.bottomRightRowContainerCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerHeaderContainer = function(ctrl, pinned) {
        switch (pinned) {
          case "left":
            this.leftHeaderRowContainerCtrl = ctrl;
            break;
          case "right":
            this.rightHeaderRowContainerCtrl = ctrl;
            break;
          default:
            this.centerHeaderRowContainerCtrl = ctrl;
            break;
        }
        this.checkReady();
      };
      CtrlsService2.prototype.registerGridBodyCtrl = function(ctrl) {
        this.gridBodyCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.registerGridCtrl = function(ctrl) {
        this.gridCtrl = ctrl;
        this.checkReady();
      };
      CtrlsService2.prototype.getFakeHScrollComp = function() {
        return this.fakeHScrollComp;
      };
      CtrlsService2.prototype.getFakeVScrollComp = function() {
        return this.fakeVScrollComp;
      };
      CtrlsService2.prototype.getGridHeaderCtrl = function() {
        return this.gridHeaderCtrl;
      };
      CtrlsService2.prototype.getGridCtrl = function() {
        return this.gridCtrl;
      };
      CtrlsService2.prototype.getCenterRowContainerCtrl = function() {
        return this.centerRowContainerCtrl;
      };
      CtrlsService2.prototype.getTopCenterRowContainerCtrl = function() {
        return this.topCenterRowContainerCtrl;
      };
      CtrlsService2.prototype.getBottomCenterRowContainerCtrl = function() {
        return this.bottomCenterRowContainerCtrl;
      };
      CtrlsService2.prototype.getStickyTopCenterRowContainerCtrl = function() {
        return this.stickyTopCenterRowContainerCtrl;
      };
      CtrlsService2.prototype.getGridBodyCtrl = function() {
        return this.gridBodyCtrl;
      };
      CtrlsService2.prototype.getHeaderRowContainerCtrls = function() {
        return [this.leftHeaderRowContainerCtrl, this.rightHeaderRowContainerCtrl, this.centerHeaderRowContainerCtrl];
      };
      CtrlsService2.prototype.getHeaderRowContainerCtrl = function(pinned) {
        switch (pinned) {
          case "left":
            return this.leftHeaderRowContainerCtrl;
          case "right":
            return this.rightHeaderRowContainerCtrl;
          default:
            return this.centerHeaderRowContainerCtrl;
        }
      };
      var CtrlsService_1;
      CtrlsService2.NAME = "ctrlsService";
      CtrlsService2 = CtrlsService_1 = __decorate$m([
        Bean(CtrlsService_1.NAME)
      ], CtrlsService2);
      return CtrlsService2;
    }(BeanStub);
    __extends$l = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$l = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CtrlsFactory = /** @class */
    function(_super) {
      __extends$l(CtrlsFactory2, _super);
      function CtrlsFactory2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.registry = {};
        return _this;
      }
      CtrlsFactory2.prototype.register = function(meta) {
        this.registry[meta.controllerName] = meta.controllerClass;
      };
      CtrlsFactory2.prototype.getInstance = function(name) {
        var ControllerClass = this.registry[name];
        if (ControllerClass == null) {
          return void 0;
        }
        return new ControllerClass();
      };
      CtrlsFactory2 = __decorate$l([
        Bean("ctrlsFactory")
      ], CtrlsFactory2);
      return CtrlsFactory2;
    }(BeanStub);
    __extends$k = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$k = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    AbstractFakeScrollComp = /** @class */
    function(_super) {
      __extends$k(AbstractFakeScrollComp2, _super);
      function AbstractFakeScrollComp2(template, direction) {
        var _this = _super.call(this, template) || this;
        _this.direction = direction;
        _this.hideTimeout = null;
        return _this;
      }
      AbstractFakeScrollComp2.prototype.postConstruct = function() {
        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
        this.onScrollVisibilityChanged();
        this.addOrRemoveCssClass("ag-apple-scrollbar", isMacOsUserAgent() || isIOSUserAgent());
      };
      AbstractFakeScrollComp2.prototype.initialiseInvisibleScrollbar = function() {
        if (this.invisibleScrollbar !== void 0) {
          return;
        }
        this.invisibleScrollbar = isInvisibleScrollbar();
        if (this.invisibleScrollbar) {
          this.hideAndShowInvisibleScrollAsNeeded();
          this.addActiveListenerToggles();
        }
      };
      AbstractFakeScrollComp2.prototype.addActiveListenerToggles = function() {
        var _this = this;
        var activateEvents = ["mouseenter", "mousedown", "touchstart"];
        var deactivateEvents = ["mouseleave", "touchend"];
        var eGui = this.getGui();
        activateEvents.forEach(function(eventName) {
          return _this.addManagedListener(eGui, eventName, function() {
            return _this.addOrRemoveCssClass("ag-scrollbar-active", true);
          });
        });
        deactivateEvents.forEach(function(eventName) {
          return _this.addManagedListener(eGui, eventName, function() {
            return _this.addOrRemoveCssClass("ag-scrollbar-active", false);
          });
        });
      };
      AbstractFakeScrollComp2.prototype.onScrollVisibilityChanged = function() {
        var _this = this;
        if (this.invisibleScrollbar === void 0) {
          this.initialiseInvisibleScrollbar();
        }
        this.animationFrameService.requestAnimationFrame(function() {
          return _this.setScrollVisible();
        });
      };
      AbstractFakeScrollComp2.prototype.hideAndShowInvisibleScrollAsNeeded = function() {
        var _this = this;
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL, function(params) {
          if (params.direction === _this.direction) {
            if (_this.hideTimeout !== null) {
              window.clearTimeout(_this.hideTimeout);
              _this.hideTimeout = null;
            }
            _this.addOrRemoveCssClass("ag-scrollbar-scrolling", true);
          }
        });
        this.addManagedListener(this.eventService, Events.EVENT_BODY_SCROLL_END, function() {
          _this.hideTimeout = window.setTimeout(function() {
            _this.addOrRemoveCssClass("ag-scrollbar-scrolling", false);
            _this.hideTimeout = null;
          }, 400);
        });
      };
      AbstractFakeScrollComp2.prototype.attemptSettingScrollPosition = function(value) {
        var _this = this;
        var viewport = this.getViewport();
        waitUntil(function() {
          return isVisible(viewport);
        }, function() {
          return _this.setScrollPosition(value);
        }, 100);
      };
      AbstractFakeScrollComp2.prototype.getViewport = function() {
        return this.eViewport;
      };
      AbstractFakeScrollComp2.prototype.getContainer = function() {
        return this.eContainer;
      };
      AbstractFakeScrollComp2.prototype.onScrollCallback = function(fn) {
        this.addManagedListener(this.getViewport(), "scroll", fn);
      };
      __decorate$k([
        RefSelector("eViewport")
      ], AbstractFakeScrollComp2.prototype, "eViewport", void 0);
      __decorate$k([
        RefSelector("eContainer")
      ], AbstractFakeScrollComp2.prototype, "eContainer", void 0);
      __decorate$k([
        Autowired("scrollVisibleService")
      ], AbstractFakeScrollComp2.prototype, "scrollVisibleService", void 0);
      __decorate$k([
        Autowired("ctrlsService")
      ], AbstractFakeScrollComp2.prototype, "ctrlsService", void 0);
      __decorate$k([
        Autowired("animationFrameService")
      ], AbstractFakeScrollComp2.prototype, "animationFrameService", void 0);
      return AbstractFakeScrollComp2;
    }(Component);
    __extends$j = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$j = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FakeHScrollComp = /** @class */
    function(_super) {
      __extends$j(FakeHScrollComp2, _super);
      function FakeHScrollComp2() {
        return _super.call(this, FakeHScrollComp2.TEMPLATE, "horizontal") || this;
      }
      FakeHScrollComp2.prototype.postConstruct = function() {
        var _this = this;
        _super.prototype.postConstruct.call(this);
        var spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);
        this.addManagedListener(this.eventService, Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
        this.addManagedPropertyListener("domLayout", spacerWidthsListener);
        this.ctrlsService.registerFakeHScrollComp(this);
        this.createManagedBean(new CenterWidthFeature(function(width) {
          return _this.eContainer.style.width = width + "px";
        }));
      };
      FakeHScrollComp2.prototype.initialiseInvisibleScrollbar = function() {
        if (this.invisibleScrollbar !== void 0) {
          return;
        }
        this.enableRtl = this.gridOptionsService.is("enableRtl");
        _super.prototype.initialiseInvisibleScrollbar.call(this);
        if (this.invisibleScrollbar) {
          this.refreshCompBottom();
        }
      };
      FakeHScrollComp2.prototype.onPinnedRowDataChanged = function() {
        this.refreshCompBottom();
      };
      FakeHScrollComp2.prototype.refreshCompBottom = function() {
        if (!this.invisibleScrollbar) {
          return;
        }
        var bottomPinnedHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();
        this.getGui().style.bottom = bottomPinnedHeight + "px";
      };
      FakeHScrollComp2.prototype.onScrollVisibilityChanged = function() {
        _super.prototype.onScrollVisibilityChanged.call(this);
        this.setFakeHScrollSpacerWidths();
      };
      FakeHScrollComp2.prototype.setFakeHScrollSpacerWidths = function() {
        var vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();
        var rightSpacing = this.columnModel.getDisplayedColumnsRightWidth();
        var scrollOnRight = !this.enableRtl && vScrollShowing;
        var scrollbarWidth = this.gridOptionsService.getScrollbarWidth();
        if (scrollOnRight) {
          rightSpacing += scrollbarWidth;
        }
        setFixedWidth(this.eRightSpacer, rightSpacing);
        this.eRightSpacer.classList.toggle("ag-scroller-corner", rightSpacing <= scrollbarWidth);
        var leftSpacing = this.columnModel.getDisplayedColumnsLeftWidth();
        var scrollOnLeft = this.enableRtl && vScrollShowing;
        if (scrollOnLeft) {
          leftSpacing += scrollbarWidth;
        }
        setFixedWidth(this.eLeftSpacer, leftSpacing);
        this.eLeftSpacer.classList.toggle("ag-scroller-corner", leftSpacing <= scrollbarWidth);
      };
      FakeHScrollComp2.prototype.setScrollVisible = function() {
        var hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();
        var invisibleScrollbar2 = this.invisibleScrollbar;
        var isSuppressHorizontalScroll = this.gridOptionsService.is("suppressHorizontalScroll");
        var scrollbarWidth = hScrollShowing ? this.gridOptionsService.getScrollbarWidth() || 0 : 0;
        var adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar2 ? 16 : scrollbarWidth;
        var scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;
        this.addOrRemoveCssClass("ag-scrollbar-invisible", invisibleScrollbar2);
        setFixedHeight(this.getGui(), scrollContainerSize);
        setFixedHeight(this.eViewport, scrollContainerSize);
        setFixedHeight(this.eContainer, scrollContainerSize);
        this.setDisplayed(hScrollShowing, { skipAriaHidden: true });
      };
      FakeHScrollComp2.prototype.getScrollPosition = function() {
        return getScrollLeft(this.getViewport(), this.enableRtl);
      };
      FakeHScrollComp2.prototype.setScrollPosition = function(value) {
        if (!isVisible(this.getViewport())) {
          this.attemptSettingScrollPosition(value);
        }
        setScrollLeft(this.getViewport(), value, this.enableRtl);
      };
      FakeHScrollComp2.TEMPLATE = '<div class="ag-body-horizontal-scroll" aria-hidden="true">\n            <div class="ag-horizontal-left-spacer" ref="eLeftSpacer"></div>\n            <div class="ag-body-horizontal-scroll-viewport" ref="eViewport">\n                <div class="ag-body-horizontal-scroll-container" ref="eContainer"></div>\n            </div>\n            <div class="ag-horizontal-right-spacer" ref="eRightSpacer"></div>\n        </div>';
      __decorate$j([
        RefSelector("eLeftSpacer")
      ], FakeHScrollComp2.prototype, "eLeftSpacer", void 0);
      __decorate$j([
        RefSelector("eRightSpacer")
      ], FakeHScrollComp2.prototype, "eRightSpacer", void 0);
      __decorate$j([
        Autowired("columnModel")
      ], FakeHScrollComp2.prototype, "columnModel", void 0);
      __decorate$j([
        Autowired("pinnedRowModel")
      ], FakeHScrollComp2.prototype, "pinnedRowModel", void 0);
      __decorate$j([
        PostConstruct
      ], FakeHScrollComp2.prototype, "postConstruct", null);
      return FakeHScrollComp2;
    }(AbstractFakeScrollComp);
    __extends$i = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$i = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    PinnedWidthService = /** @class */
    function(_super) {
      __extends$i(PinnedWidthService2, _super);
      function PinnedWidthService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PinnedWidthService2.prototype.postConstruct = function() {
        var listener = this.checkContainerWidths.bind(this);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, listener);
        this.addManagedPropertyListener("domLayout", listener);
      };
      PinnedWidthService2.prototype.checkContainerWidths = function() {
        var printLayout = this.gridOptionsService.isDomLayout("print");
        var newLeftWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsLeftWidth();
        var newRightWidth = printLayout ? 0 : this.columnModel.getDisplayedColumnsRightWidth();
        if (newLeftWidth != this.leftWidth) {
          this.leftWidth = newLeftWidth;
          this.eventService.dispatchEvent({ type: Events.EVENT_LEFT_PINNED_WIDTH_CHANGED });
        }
        if (newRightWidth != this.rightWidth) {
          this.rightWidth = newRightWidth;
          this.eventService.dispatchEvent({ type: Events.EVENT_RIGHT_PINNED_WIDTH_CHANGED });
        }
      };
      PinnedWidthService2.prototype.getPinnedRightWidth = function() {
        return this.rightWidth;
      };
      PinnedWidthService2.prototype.getPinnedLeftWidth = function() {
        return this.leftWidth;
      };
      __decorate$i([
        Autowired("columnModel")
      ], PinnedWidthService2.prototype, "columnModel", void 0);
      __decorate$i([
        PostConstruct
      ], PinnedWidthService2.prototype, "postConstruct", null);
      PinnedWidthService2 = __decorate$i([
        Bean("pinnedWidthService")
      ], PinnedWidthService2);
      return PinnedWidthService2;
    }(BeanStub);
    __extends$h = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$h = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    RowNodeEventThrottle = /** @class */
    function(_super) {
      __extends$h(RowNodeEventThrottle2, _super);
      function RowNodeEventThrottle2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.events = [];
        return _this;
      }
      RowNodeEventThrottle2.prototype.postConstruct = function() {
        if (this.rowModel.getType() == "clientSide") {
          this.clientSideRowModel = this.rowModel;
        }
      };
      RowNodeEventThrottle2.prototype.dispatchExpanded = function(event) {
        var _this = this;
        if (this.clientSideRowModel == null) {
          this.eventService.dispatchEvent(event);
          return;
        }
        this.events.push(event);
        var func = function() {
          if (_this.clientSideRowModel) {
            _this.clientSideRowModel.onRowGroupOpened();
          }
          _this.events.forEach(function(e) {
            return _this.eventService.dispatchEvent(e);
          });
          _this.events = [];
        };
        if (this.dispatchExpandedDebounced == null) {
          this.dispatchExpandedDebounced = this.animationFrameService.debounce(func);
        }
        this.dispatchExpandedDebounced();
      };
      __decorate$h([
        Autowired("animationFrameService")
      ], RowNodeEventThrottle2.prototype, "animationFrameService", void 0);
      __decorate$h([
        Autowired("rowModel")
      ], RowNodeEventThrottle2.prototype, "rowModel", void 0);
      __decorate$h([
        PostConstruct
      ], RowNodeEventThrottle2.prototype, "postConstruct", null);
      RowNodeEventThrottle2 = __decorate$h([
        Bean("rowNodeEventThrottle")
      ], RowNodeEventThrottle2);
      return RowNodeEventThrottle2;
    }(BeanStub);
    __assign$1 = function() {
      __assign$1 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign$1.apply(this, arguments);
    };
    __decorate$g = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param$1 = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __read$5 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$4 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    GridOptionsService = /** @class */
    function() {
      function GridOptionsService2() {
        var _this = this;
        this.destroyed = false;
        this.domDataKey = "__AG_" + Math.random().toString();
        this.propertyEventService = new EventService();
        this.globalEventHandlerFactory = function(restrictToSyncOnly) {
          return function(eventName, event) {
            if (_this.destroyed) {
              return;
            }
            var alwaysSync = GridOptionsService_1.alwaysSyncGlobalEvents.has(eventName);
            if (alwaysSync && !restrictToSyncOnly || !alwaysSync && restrictToSyncOnly) {
              return;
            }
            var callbackMethodName = ComponentUtil.getCallbackForEvent(eventName);
            if (typeof _this.gridOptions[callbackMethodName] === "function") {
              _this.gridOptions[callbackMethodName](event);
            }
          };
        };
      }
      GridOptionsService_1 = GridOptionsService2;
      Object.defineProperty(GridOptionsService2.prototype, "context", {
        // This is quicker then having code call gridOptionsService.get('context')
        get: function() {
          return this.gridOptions["context"];
        },
        enumerable: false,
        configurable: true
      });
      GridOptionsService2.prototype.agWire = function(gridApi, columnApi) {
        this.gridOptions.api = gridApi;
        this.gridOptions.columnApi = columnApi;
        this.api = gridApi;
        this.columnApi = columnApi;
      };
      GridOptionsService2.prototype.init = function() {
        this.gridOptionLookup = new Set(__spreadArray$4(__spreadArray$4([], __read$5(ComponentUtil.ALL_PROPERTIES)), __read$5(ComponentUtil.EVENT_CALLBACKS)));
        var async = !this.is("suppressAsyncEvents");
        this.eventService.addGlobalListener(this.globalEventHandlerFactory().bind(this), async);
        this.eventService.addGlobalListener(this.globalEventHandlerFactory(true).bind(this), false);
        this.getScrollbarWidth();
      };
      GridOptionsService2.prototype.destroy = function() {
        this.gridOptions.api = null;
        this.gridOptions.columnApi = null;
        this.destroyed = true;
      };
      GridOptionsService2.prototype.is = function(property) {
        return isTrue(this.gridOptions[property]);
      };
      GridOptionsService2.prototype.get = function(property) {
        return this.gridOptions[property];
      };
      GridOptionsService2.prototype.getNum = function(property) {
        return toNumber(this.gridOptions[property]);
      };
      GridOptionsService2.prototype.getCallback = function(property) {
        return this.mergeGridCommonParams(this.gridOptions[property]);
      };
      GridOptionsService2.prototype.exists = function(property) {
        return exists(this.gridOptions[property]);
      };
      GridOptionsService2.prototype.mergeGridCommonParams = function(callback) {
        var _this = this;
        if (callback) {
          var wrapped = function(callbackParams) {
            var mergedParams = callbackParams;
            mergedParams.api = _this.api;
            mergedParams.columnApi = _this.columnApi;
            mergedParams.context = _this.context;
            return callback(mergedParams);
          };
          return wrapped;
        }
        return callback;
      };
      GridOptionsService2.prototype.__setPropertyOnly = function(key, newValue) {
        var previousValue = this.gridOptions[key];
        if (this.gridOptionLookup.has(key)) {
          this.gridOptions[key] = newValue;
        }
        return previousValue !== newValue;
      };
      GridOptionsService2.prototype.set = function(key, newValue, force, eventParams, changeSet) {
        if (force === void 0) {
          force = false;
        }
        if (eventParams === void 0) {
          eventParams = {};
        }
        if (changeSet === void 0) {
          changeSet = void 0;
        }
        if (this.gridOptionLookup.has(key)) {
          var previousValue = this.gridOptions[key];
          if (force || previousValue !== newValue) {
            this.gridOptions[key] = newValue;
            var event_1 = __assign$1({ type: key, currentValue: newValue, previousValue, changeSet }, eventParams);
            this.propertyEventService.dispatchEvent(event_1);
          }
        }
      };
      GridOptionsService2.prototype.addEventListener = function(key, listener) {
        this.propertyEventService.addEventListener(key, listener);
      };
      GridOptionsService2.prototype.removeEventListener = function(key, listener) {
        this.propertyEventService.removeEventListener(key, listener);
      };
      GridOptionsService2.prototype.getGridId = function() {
        return this.api.getGridId();
      };
      GridOptionsService2.prototype.getScrollbarWidth = function() {
        if (this.scrollbarWidth == null) {
          var useGridOptions = typeof this.gridOptions.scrollbarWidth === "number" && this.gridOptions.scrollbarWidth >= 0;
          var scrollbarWidth = useGridOptions ? this.gridOptions.scrollbarWidth : getScrollbarWidth();
          if (scrollbarWidth != null) {
            this.scrollbarWidth = scrollbarWidth;
            this.eventService.dispatchEvent({
              type: Events.EVENT_SCROLLBAR_WIDTH_CHANGED
            });
          }
        }
        return this.scrollbarWidth;
      };
      GridOptionsService2.prototype.isRowModelType = function(rowModelType) {
        return this.gridOptions.rowModelType === rowModelType || rowModelType === "clientSide" && missing(this.gridOptions.rowModelType);
      };
      GridOptionsService2.prototype.isDomLayout = function(domLayout) {
        var _a;
        var gridLayout = (_a = this.gridOptions.domLayout) !== null && _a !== void 0 ? _a : "normal";
        return gridLayout === domLayout;
      };
      GridOptionsService2.prototype.isRowSelection = function() {
        return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple";
      };
      GridOptionsService2.prototype.useAsyncEvents = function() {
        return !this.is("suppressAsyncEvents");
      };
      GridOptionsService2.prototype.isGetRowHeightFunction = function() {
        return typeof this.gridOptions.getRowHeight === "function";
      };
      GridOptionsService2.prototype.getRowHeightForNode = function(rowNode, allowEstimate, defaultRowHeight) {
        if (allowEstimate === void 0) {
          allowEstimate = false;
        }
        if (defaultRowHeight == null) {
          defaultRowHeight = this.environment.getDefaultRowHeight();
        }
        if (this.isGetRowHeightFunction()) {
          if (allowEstimate) {
            return { height: defaultRowHeight, estimated: true };
          }
          var params = {
            node: rowNode,
            data: rowNode.data
          };
          var height = this.getCallback("getRowHeight")(params);
          if (this.isNumeric(height)) {
            if (height === 0) {
              doOnce(function() {
                return console.warn("AG Grid: The return of `getRowHeight` cannot be zero. If the intention is to hide rows, use a filter instead.");
              }, "invalidRowHeight");
            }
            return { height: Math.max(1, height), estimated: false };
          }
        }
        if (rowNode.detail && this.is("masterDetail")) {
          return this.getMasterDetailRowHeight();
        }
        var rowHeight = this.gridOptions.rowHeight && this.isNumeric(this.gridOptions.rowHeight) ? this.gridOptions.rowHeight : defaultRowHeight;
        return { height: rowHeight, estimated: false };
      };
      GridOptionsService2.prototype.getMasterDetailRowHeight = function() {
        if (this.is("detailRowAutoHeight")) {
          return { height: 1, estimated: false };
        }
        if (this.isNumeric(this.gridOptions.detailRowHeight)) {
          return { height: this.gridOptions.detailRowHeight, estimated: false };
        }
        return { height: 300, estimated: false };
      };
      GridOptionsService2.prototype.getRowHeightAsNumber = function() {
        if (!this.gridOptions.rowHeight || missing(this.gridOptions.rowHeight)) {
          return this.environment.getDefaultRowHeight();
        }
        var rowHeight = this.environment.refreshRowHeightVariable();
        if (rowHeight !== -1) {
          return rowHeight;
        }
        console.warn("AG Grid row height must be a number if not using standard row model");
        return this.environment.getDefaultRowHeight();
      };
      GridOptionsService2.prototype.isNumeric = function(value) {
        return !isNaN(value) && typeof value === "number" && isFinite(value);
      };
      GridOptionsService2.prototype.getDomDataKey = function() {
        return this.domDataKey;
      };
      GridOptionsService2.prototype.getDomData = function(element, key) {
        var domData = element[this.getDomDataKey()];
        return domData ? domData[key] : void 0;
      };
      GridOptionsService2.prototype.setDomData = function(element, key, value) {
        var domDataKey = this.getDomDataKey();
        var domData = element[domDataKey];
        if (missing(domData)) {
          domData = {};
          element[domDataKey] = domData;
        }
        domData[key] = value;
      };
      GridOptionsService2.prototype.getDocument = function() {
        var result = null;
        if (this.gridOptions.getDocument && exists(this.gridOptions.getDocument)) {
          result = this.gridOptions.getDocument();
        } else if (this.eGridDiv) {
          result = this.eGridDiv.ownerDocument;
        }
        if (result && exists(result)) {
          return result;
        }
        return document;
      };
      GridOptionsService2.prototype.getWindow = function() {
        var eDocument = this.getDocument();
        return eDocument.defaultView || window;
      };
      GridOptionsService2.prototype.getRootNode = function() {
        return this.eGridDiv.getRootNode();
      };
      GridOptionsService2.prototype.getAsyncTransactionWaitMillis = function() {
        return exists(this.gridOptions.asyncTransactionWaitMillis) ? this.gridOptions.asyncTransactionWaitMillis : 50;
      };
      GridOptionsService2.prototype.isAnimateRows = function() {
        if (this.is("ensureDomOrder")) {
          return false;
        }
        return this.is("animateRows");
      };
      GridOptionsService2.prototype.isGroupRowsSticky = function() {
        if (this.is("suppressGroupRowsSticky") || this.is("paginateChildRows") || this.is("groupHideOpenParents")) {
          return false;
        }
        return true;
      };
      GridOptionsService2.prototype.isColumnsSortingCoupledToGroup = function() {
        var autoGroupColumnDef = this.gridOptions.autoGroupColumnDef;
        var isClientSideRowModel = this.isRowModelType("clientSide");
        return isClientSideRowModel && !(autoGroupColumnDef === null || autoGroupColumnDef === void 0 ? void 0 : autoGroupColumnDef.comparator) && !this.is("treeData");
      };
      GridOptionsService2.prototype.getGroupAggFiltering = function() {
        var userValue = this.gridOptions.groupAggFiltering;
        if (typeof userValue === "function") {
          return this.getCallback("groupAggFiltering");
        }
        if (isTrue(userValue)) {
          return function() {
            return true;
          };
        }
        return void 0;
      };
      GridOptionsService2.prototype.isGroupIncludeFooterTrueOrCallback = function() {
        var userValue = this.gridOptions.groupIncludeFooter;
        return isTrue(userValue) || typeof userValue === "function";
      };
      GridOptionsService2.prototype.getGroupIncludeFooter = function() {
        var userValue = this.gridOptions.groupIncludeFooter;
        if (typeof userValue === "function") {
          return this.getCallback("groupIncludeFooter");
        }
        if (isTrue(userValue)) {
          return function() {
            return true;
          };
        }
        return function() {
          return false;
        };
      };
      GridOptionsService2.prototype.isGroupMultiAutoColumn = function() {
        if (this.gridOptions.groupDisplayType) {
          return matchesGroupDisplayType("multipleColumns", this.gridOptions.groupDisplayType);
        }
        return this.is("groupHideOpenParents");
      };
      GridOptionsService2.prototype.isGroupUseEntireRow = function(pivotMode) {
        if (pivotMode) {
          return false;
        }
        return this.gridOptions.groupDisplayType ? matchesGroupDisplayType("groupRows", this.gridOptions.groupDisplayType) : false;
      };
      var GridOptionsService_1;
      GridOptionsService2.alwaysSyncGlobalEvents = /* @__PURE__ */ new Set([Events.EVENT_GRID_PRE_DESTROYED]);
      __decorate$g([
        Autowired("gridOptions")
      ], GridOptionsService2.prototype, "gridOptions", void 0);
      __decorate$g([
        Autowired("eventService")
      ], GridOptionsService2.prototype, "eventService", void 0);
      __decorate$g([
        Autowired("environment")
      ], GridOptionsService2.prototype, "environment", void 0);
      __decorate$g([
        Autowired("eGridDiv")
      ], GridOptionsService2.prototype, "eGridDiv", void 0);
      __decorate$g([
        __param$1(0, Qualifier("gridApi")),
        __param$1(1, Qualifier("columnApi"))
      ], GridOptionsService2.prototype, "agWire", null);
      __decorate$g([
        PostConstruct
      ], GridOptionsService2.prototype, "init", null);
      __decorate$g([
        PreDestroy
      ], GridOptionsService2.prototype, "destroy", null);
      GridOptionsService2 = GridOptionsService_1 = __decorate$g([
        Bean("gridOptionsService")
      ], GridOptionsService2);
      return GridOptionsService2;
    }();
    __extends$g = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$f = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    LocaleService = /** @class */
    function(_super) {
      __extends$g(LocaleService2, _super);
      function LocaleService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      LocaleService2.prototype.getLocaleTextFunc = function() {
        var getLocaleText = this.gridOptionsService.getCallback("getLocaleText");
        if (getLocaleText) {
          return function(key, defaultValue, variableValues) {
            var params = {
              key,
              defaultValue,
              variableValues
            };
            return getLocaleText(params);
          };
        }
        var localeText = this.gridOptionsService.get("localeText");
        return function(key, defaultValue, variableValues) {
          var localisedText = localeText && localeText[key];
          if (localisedText && variableValues && variableValues.length) {
            var found = 0;
            while (true) {
              if (found >= variableValues.length) {
                break;
              }
              var idx = localisedText.indexOf("${variable}");
              if (idx === -1) {
                break;
              }
              localisedText = localisedText.replace("${variable}", variableValues[found++]);
            }
          }
          return localisedText !== null && localisedText !== void 0 ? localisedText : defaultValue;
        };
      };
      LocaleService2 = __decorate$f([
        Bean("localeService")
      ], LocaleService2);
      return LocaleService2;
    }(BeanStub);
    __extends$f = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$e = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FakeVScrollComp = /** @class */
    function(_super) {
      __extends$f(FakeVScrollComp2, _super);
      function FakeVScrollComp2() {
        return _super.call(this, FakeVScrollComp2.TEMPLATE, "vertical") || this;
      }
      FakeVScrollComp2.prototype.postConstruct = function() {
        _super.prototype.postConstruct.call(this);
        this.createManagedBean(new SetHeightFeature(this.eContainer));
        this.ctrlsService.registerFakeVScrollComp(this);
        this.addManagedListener(this.eventService, Events.EVENT_ROW_CONTAINER_HEIGHT_CHANGED, this.onRowContainerHeightChanged.bind(this));
      };
      FakeVScrollComp2.prototype.setScrollVisible = function() {
        var vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();
        var invisibleScrollbar2 = this.invisibleScrollbar;
        var scrollbarWidth = vScrollShowing ? this.gridOptionsService.getScrollbarWidth() || 0 : 0;
        var adjustedScrollbarWidth = scrollbarWidth === 0 && invisibleScrollbar2 ? 16 : scrollbarWidth;
        this.addOrRemoveCssClass("ag-scrollbar-invisible", invisibleScrollbar2);
        setFixedWidth(this.getGui(), adjustedScrollbarWidth);
        setFixedWidth(this.eViewport, adjustedScrollbarWidth);
        setFixedWidth(this.eContainer, adjustedScrollbarWidth);
        this.setDisplayed(vScrollShowing, { skipAriaHidden: true });
      };
      FakeVScrollComp2.prototype.onRowContainerHeightChanged = function() {
        var gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();
        var gridBodyViewportEl = gridBodyCtrl.getBodyViewportElement();
        if (this.eViewport.scrollTop != gridBodyViewportEl.scrollTop) {
          this.eViewport.scrollTop = gridBodyViewportEl.scrollTop;
        }
      };
      FakeVScrollComp2.prototype.getScrollPosition = function() {
        return this.getViewport().scrollTop;
      };
      FakeVScrollComp2.prototype.setScrollPosition = function(value) {
        if (!isVisible(this.getViewport())) {
          this.attemptSettingScrollPosition(value);
        }
        this.getViewport().scrollTop = value;
      };
      FakeVScrollComp2.TEMPLATE = '<div class="ag-body-vertical-scroll" aria-hidden="true">\n            <div class="ag-body-vertical-scroll-viewport" ref="eViewport">\n                <div class="ag-body-vertical-scroll-container" ref="eContainer"></div>\n            </div>\n        </div>';
      __decorate$e([
        PostConstruct
      ], FakeVScrollComp2.prototype, "postConstruct", null);
      return FakeVScrollComp2;
    }(AbstractFakeScrollComp);
    __extends$e = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __assign = function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __decorate$d = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$4 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$3 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    MONTH_LOCALE_TEXT = {
      january: "January",
      february: "February",
      march: "March",
      april: "April",
      may: "May",
      june: "June",
      july: "July",
      august: "August",
      september: "September",
      october: "October",
      november: "November",
      december: "December"
    };
    MONTH_KEYS = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
    DataTypeService = /** @class */
    function(_super) {
      __extends$e(DataTypeService2, _super);
      function DataTypeService2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dataTypeDefinitions = {};
        _this.isWaitingForRowData = false;
        _this.isColumnTypeOverrideInDataTypeDefinitions = false;
        _this.columnStateUpdatesPendingInference = {};
        _this.columnStateUpdateListenerDestroyFuncs = [];
        return _this;
      }
      DataTypeService2.prototype.init = function() {
        var _this = this;
        this.groupHideOpenParents = this.gridOptionsService.is("groupHideOpenParents");
        this.addManagedPropertyListener("groupHideOpenParents", function() {
          _this.groupHideOpenParents = _this.gridOptionsService.is("groupHideOpenParents");
        });
        this.processDataTypeDefinitions();
        this.addManagedPropertyListener("dataTypeDefinitions", function() {
          _this.processDataTypeDefinitions();
          _this.columnModel.recreateColumnDefs("gridOptionsChanged");
        });
      };
      DataTypeService2.prototype.processDataTypeDefinitions = function() {
        var _this = this;
        var _a;
        var defaultDataTypes = this.getDefaultDataTypes();
        this.dataTypeDefinitions = {};
        Object.entries(defaultDataTypes).forEach(function(_a2) {
          var _b = __read$4(_a2, 2), cellDataType = _b[0], dataTypeDefinition = _b[1];
          _this.dataTypeDefinitions[cellDataType] = __assign(__assign({}, dataTypeDefinition), { groupSafeValueFormatter: _this.createGroupSafeValueFormatter(dataTypeDefinition) });
        });
        var dataTypeDefinitions = (_a = this.gridOptionsService.get("dataTypeDefinitions")) !== null && _a !== void 0 ? _a : {};
        this.dataTypeMatchers = {};
        Object.entries(dataTypeDefinitions).forEach(function(_a2) {
          var _b = __read$4(_a2, 2), cellDataType = _b[0], dataTypeDefinition = _b[1];
          var mergedDataTypeDefinition = _this.processDataTypeDefinition(dataTypeDefinition, dataTypeDefinitions, [cellDataType], defaultDataTypes);
          if (mergedDataTypeDefinition) {
            _this.dataTypeDefinitions[cellDataType] = mergedDataTypeDefinition;
            if (dataTypeDefinition.dataTypeMatcher) {
              _this.dataTypeMatchers[cellDataType] = dataTypeDefinition.dataTypeMatcher;
            }
          }
        });
        this.checkObjectValueHandlers(defaultDataTypes);
        ["dateString", "text", "number", "boolean", "date"].forEach(function(cellDataType) {
          var overriddenDataTypeMatcher = _this.dataTypeMatchers[cellDataType];
          if (overriddenDataTypeMatcher) {
            delete _this.dataTypeMatchers[cellDataType];
          }
          _this.dataTypeMatchers[cellDataType] = overriddenDataTypeMatcher !== null && overriddenDataTypeMatcher !== void 0 ? overriddenDataTypeMatcher : defaultDataTypes[cellDataType].dataTypeMatcher;
        });
      };
      DataTypeService2.prototype.mergeDataTypeDefinitions = function(parentDataTypeDefinition, childDataTypeDefinition) {
        var mergedDataTypeDefinition = __assign(__assign({}, parentDataTypeDefinition), childDataTypeDefinition);
        if (parentDataTypeDefinition.columnTypes && childDataTypeDefinition.columnTypes && childDataTypeDefinition.appendColumnTypes) {
          mergedDataTypeDefinition.columnTypes = __spreadArray$3(__spreadArray$3([], __read$4(this.convertColumnTypes(parentDataTypeDefinition.columnTypes))), __read$4(this.convertColumnTypes(childDataTypeDefinition.columnTypes)));
        }
        return mergedDataTypeDefinition;
      };
      DataTypeService2.prototype.processDataTypeDefinition = function(dataTypeDefinition, dataTypeDefinitions, alreadyProcessedDataTypes, defaultDataTypes) {
        var mergedDataTypeDefinition;
        var extendsCellDataType = dataTypeDefinition.extendsDataType;
        if (dataTypeDefinition.columnTypes) {
          this.isColumnTypeOverrideInDataTypeDefinitions = true;
        }
        if (dataTypeDefinition.extendsDataType === dataTypeDefinition.baseDataType) {
          var baseDataTypeDefinition = defaultDataTypes[extendsCellDataType];
          if (!this.validateDataTypeDefinition(dataTypeDefinition, baseDataTypeDefinition, extendsCellDataType)) {
            return void 0;
          }
          mergedDataTypeDefinition = this.mergeDataTypeDefinitions(baseDataTypeDefinition, dataTypeDefinition);
        } else {
          if (alreadyProcessedDataTypes.includes(extendsCellDataType)) {
            doOnce(function() {
              return console.warn('AG Grid: Data type definition hierarchies (via the "extendsDataType" property) cannot contain circular references.');
            }, "dataTypeExtendsCircularRef");
            return void 0;
          }
          var extendedDataTypeDefinition = dataTypeDefinitions[extendsCellDataType];
          if (!this.validateDataTypeDefinition(dataTypeDefinition, extendedDataTypeDefinition, extendsCellDataType)) {
            return void 0;
          }
          var mergedExtendedDataTypeDefinition = this.processDataTypeDefinition(extendedDataTypeDefinition, dataTypeDefinitions, __spreadArray$3(__spreadArray$3([], __read$4(alreadyProcessedDataTypes)), [extendsCellDataType]), defaultDataTypes);
          if (!mergedExtendedDataTypeDefinition) {
            return void 0;
          }
          mergedDataTypeDefinition = this.mergeDataTypeDefinitions(mergedExtendedDataTypeDefinition, dataTypeDefinition);
        }
        return __assign(__assign({}, mergedDataTypeDefinition), { groupSafeValueFormatter: this.createGroupSafeValueFormatter(mergedDataTypeDefinition) });
      };
      DataTypeService2.prototype.validateDataTypeDefinition = function(dataTypeDefinition, parentDataTypeDefinition, parentCellDataType) {
        if (!parentDataTypeDefinition) {
          doOnce(function() {
            return console.warn("AG Grid: The data type definition " + parentCellDataType + " does not exist.");
          }, "dataTypeDefMissing" + parentCellDataType);
          return false;
        }
        if (parentDataTypeDefinition.baseDataType !== dataTypeDefinition.baseDataType) {
          doOnce(function() {
            return console.warn('AG Grid: The "baseDataType" property of a data type definition must match that of its parent.');
          }, "dataTypeBaseTypesMatch");
          return false;
        }
        return true;
      };
      DataTypeService2.prototype.createGroupSafeValueFormatter = function(dataTypeDefinition) {
        var _this = this;
        if (!dataTypeDefinition.valueFormatter) {
          return void 0;
        }
        return function(params) {
          var _a, _b;
          if ((_a = params.node) === null || _a === void 0 ? void 0 : _a.group) {
            var aggFunc = params.column.getAggFunc();
            if (aggFunc) {
              if (aggFunc === "first" || aggFunc === "last") {
                return dataTypeDefinition.valueFormatter(params);
              }
              if (dataTypeDefinition.baseDataType === "number" && aggFunc !== "count") {
                if (typeof params.value === "number") {
                  return dataTypeDefinition.valueFormatter(params);
                }
                if (typeof params.value === "object") {
                  if (!params.value) {
                    return void 0;
                  }
                  if ("toNumber" in params.value) {
                    return dataTypeDefinition.valueFormatter(__assign(__assign({}, params), { value: params.value.toNumber() }));
                  }
                  if ("value" in params.value) {
                    return dataTypeDefinition.valueFormatter(__assign(__assign({}, params), { value: params.value.value }));
                  }
                }
              }
            }
            return void 0;
          } else if (_this.groupHideOpenParents && params.column.isRowGroupActive()) {
            if (typeof params.value !== "string" || ((_b = dataTypeDefinition.dataTypeMatcher) === null || _b === void 0 ? void 0 : _b.call(dataTypeDefinition, params.value))) {
              return dataTypeDefinition.valueFormatter(params);
            }
            return void 0;
          }
          return dataTypeDefinition.valueFormatter(params);
        };
      };
      DataTypeService2.prototype.updateColDefAndGetDataTypeDefinitionColumnType = function(colDef, userColDef, colId) {
        var cellDataType = userColDef.cellDataType;
        var field = userColDef.field;
        if (cellDataType === void 0) {
          cellDataType = colDef.cellDataType;
        }
        if (cellDataType == null || cellDataType === true) {
          cellDataType = this.canInferCellDataType(colDef, userColDef) ? this.inferCellDataType(field, colId) : false;
        }
        if (!cellDataType) {
          colDef.cellDataType = false;
          return void 0;
        }
        var dataTypeDefinition = this.dataTypeDefinitions[cellDataType];
        if (!dataTypeDefinition) {
          doOnce(function() {
            return console.warn('AG Grid: Missing data type definition - "' + cellDataType + '"');
          }, "dataTypeMissing" + cellDataType);
          return void 0;
        }
        colDef.cellDataType = cellDataType;
        if (dataTypeDefinition.groupSafeValueFormatter) {
          colDef.valueFormatter = dataTypeDefinition.groupSafeValueFormatter;
        }
        if (dataTypeDefinition.valueParser) {
          colDef.valueParser = dataTypeDefinition.valueParser;
        }
        if (!dataTypeDefinition.suppressDefaultProperties) {
          this.setColDefPropertiesForBaseDataType(colDef, dataTypeDefinition, colId);
        }
        return dataTypeDefinition.columnTypes;
      };
      DataTypeService2.prototype.updateColDefAndGetColumnType = function(colDef, userColDef, colId) {
        var _a, _b;
        var dataTypeDefinitionColumnType = this.updateColDefAndGetDataTypeDefinitionColumnType(colDef, userColDef, colId);
        var columnTypes = (_b = (_a = userColDef.type) !== null && _a !== void 0 ? _a : dataTypeDefinitionColumnType) !== null && _b !== void 0 ? _b : colDef.type;
        colDef.type = columnTypes;
        return columnTypes ? this.convertColumnTypes(columnTypes) : void 0;
      };
      DataTypeService2.prototype.addColumnListeners = function(column) {
        if (!this.isWaitingForRowData) {
          return;
        }
        var columnStateUpdates = this.columnStateUpdatesPendingInference[column.getColId()];
        if (!columnStateUpdates) {
          return;
        }
        var columnListener = function(event) {
          columnStateUpdates.add(event.key);
        };
        column.addEventListener(Column.EVENT_STATE_UPDATED, columnListener);
        this.columnStateUpdateListenerDestroyFuncs.push(function() {
          return column.removeEventListener(Column.EVENT_STATE_UPDATED, columnListener);
        });
      };
      DataTypeService2.prototype.canInferCellDataType = function(colDef, userColDef) {
        var _this = this;
        var _a;
        if (this.rowModel.getType() !== "clientSide") {
          return false;
        }
        var propsToCheckForInference = { cellRenderer: true, valueGetter: true, valueParser: true, refData: true };
        if (this.doColDefPropsPreventInference(userColDef, propsToCheckForInference)) {
          return false;
        }
        var columnTypes = userColDef.type === null ? colDef.type : userColDef.type;
        if (columnTypes) {
          var columnTypeDefs_1 = (_a = this.gridOptionsService.get("columnTypes")) !== null && _a !== void 0 ? _a : {};
          var hasPropsPreventingInference = this.convertColumnTypes(columnTypes).some(function(columnType) {
            var columnTypeDef = columnTypeDefs_1[columnType.trim()];
            return columnTypeDef && _this.doColDefPropsPreventInference(columnTypeDef, propsToCheckForInference);
          });
          if (hasPropsPreventingInference) {
            return false;
          }
        }
        return !this.doColDefPropsPreventInference(colDef, propsToCheckForInference);
      };
      DataTypeService2.prototype.doColDefPropsPreventInference = function(colDef, propsToCheckForInference) {
        var _this = this;
        return [
          ["cellRenderer", "agSparklineCellRenderer"],
          ["valueGetter", void 0],
          ["valueParser", void 0],
          ["refData", void 0]
        ].some(function(_a) {
          var _b = __read$4(_a, 2), prop = _b[0], comparisonValue = _b[1];
          return _this.doesColDefPropPreventInference(colDef, propsToCheckForInference, prop, comparisonValue);
        });
      };
      DataTypeService2.prototype.doesColDefPropPreventInference = function(colDef, checkProps, prop, comparisonValue) {
        if (!checkProps[prop]) {
          return false;
        }
        var value = colDef[prop];
        if (value === null) {
          checkProps[prop] = false;
          return false;
        } else {
          return comparisonValue === void 0 ? !!value : value === comparisonValue;
        }
      };
      DataTypeService2.prototype.inferCellDataType = function(field, colId) {
        var _a;
        if (!field) {
          return void 0;
        }
        var value;
        var initialData = this.getInitialData();
        if (initialData) {
          var fieldContainsDots = field.indexOf(".") >= 0 && !this.gridOptionsService.is("suppressFieldDotNotation");
          value = getValueUsingField(initialData, field, fieldContainsDots);
        } else {
          this.initWaitForRowData(colId);
        }
        if (value == null) {
          return void 0;
        }
        var _b = __read$4((_a = Object.entries(this.dataTypeMatchers).find(function(_a2) {
          var _b2 = __read$4(_a2, 2);
          _b2[0];
          var dataTypeMatcher = _b2[1];
          return dataTypeMatcher(value);
        })) !== null && _a !== void 0 ? _a : ["object"], 1), cellDataType = _b[0];
        return cellDataType;
      };
      DataTypeService2.prototype.getInitialData = function() {
        var rowData = this.gridOptionsService.get("rowData");
        if (rowData === null || rowData === void 0 ? void 0 : rowData.length) {
          return rowData[0];
        } else if (this.initialData) {
          return this.initialData;
        } else {
          var rowNodes = this.rowModel.getRootNode().allLeafChildren;
          if (rowNodes === null || rowNodes === void 0 ? void 0 : rowNodes.length) {
            return rowNodes[0].data;
          }
        }
        return null;
      };
      DataTypeService2.prototype.initWaitForRowData = function(colId) {
        var _this = this;
        this.columnStateUpdatesPendingInference[colId] = /* @__PURE__ */ new Set();
        if (this.isWaitingForRowData) {
          return;
        }
        this.isWaitingForRowData = true;
        var columnTypeOverridesExist = this.isColumnTypeOverrideInDataTypeDefinitions;
        if (columnTypeOverridesExist) {
          this.columnModel.queueResizeOperations();
        }
        var destroyFunc = this.addManagedListener(this.eventService, Events.EVENT_ROW_DATA_UPDATE_STARTED, function(event) {
          var firstRowData = event.firstRowData;
          if (!firstRowData) {
            return;
          }
          destroyFunc === null || destroyFunc === void 0 ? void 0 : destroyFunc();
          _this.isWaitingForRowData = false;
          _this.processColumnsPendingInference(firstRowData, columnTypeOverridesExist);
          _this.columnStateUpdatesPendingInference = {};
          if (columnTypeOverridesExist) {
            _this.columnModel.processResizeOperations();
          }
          var dataTypesInferredEvent = {
            type: Events.EVENT_DATA_TYPES_INFERRED
          };
          _this.eventService.dispatchEvent(dataTypesInferredEvent);
        });
      };
      DataTypeService2.prototype.isPendingInference = function() {
        return this.isWaitingForRowData;
      };
      DataTypeService2.prototype.processColumnsPendingInference = function(firstRowData, columnTypeOverridesExist) {
        var _this = this;
        this.initialData = firstRowData;
        var state = [];
        this.columnStateUpdateListenerDestroyFuncs.forEach(function(destroyFunc) {
          return destroyFunc();
        });
        this.columnStateUpdateListenerDestroyFuncs = [];
        var newRowGroupColumnStateWithoutIndex = {};
        var newPivotColumnStateWithoutIndex = {};
        Object.entries(this.columnStateUpdatesPendingInference).forEach(function(_a) {
          var _b = __read$4(_a, 2), colId = _b[0], columnStateUpdates = _b[1];
          var column = _this.columnModel.getGridColumn(colId);
          if (!column) {
            return;
          }
          var oldColDef = column.getColDef();
          if (!_this.columnModel.resetColumnDefIntoColumn(column)) {
            return;
          }
          var newColDef = column.getColDef();
          if (columnTypeOverridesExist && newColDef.type && newColDef.type !== oldColDef.type) {
            var updatedColumnState = _this.getUpdatedColumnState(column, columnStateUpdates);
            if (updatedColumnState.rowGroup && updatedColumnState.rowGroupIndex == null) {
              newRowGroupColumnStateWithoutIndex[colId] = updatedColumnState;
            }
            if (updatedColumnState.pivot && updatedColumnState.pivotIndex == null) {
              newPivotColumnStateWithoutIndex[colId] = updatedColumnState;
            }
            state.push(updatedColumnState);
          }
        });
        if (columnTypeOverridesExist) {
          state.push.apply(state, __spreadArray$3([], __read$4(this.columnModel.generateColumnStateForRowGroupAndPivotIndexes(newRowGroupColumnStateWithoutIndex, newPivotColumnStateWithoutIndex))));
        }
        if (state.length) {
          this.columnModel.applyColumnState({ state }, "cellDataTypeInferred");
        }
        this.initialData = null;
      };
      DataTypeService2.prototype.getUpdatedColumnState = function(column, columnStateUpdates) {
        var columnState = this.columnModel.getColumnStateFromColDef(column);
        columnStateUpdates.forEach(function(key) {
          delete columnState[key];
          if (key === "rowGroup") {
            delete columnState.rowGroupIndex;
          } else if (key === "pivot") {
            delete columnState.pivotIndex;
          }
        });
        return columnState;
      };
      DataTypeService2.prototype.checkObjectValueHandlers = function(defaultDataTypes) {
        var resolvedObjectDataTypeDefinition = this.dataTypeDefinitions.object;
        var defaultObjectDataTypeDefinition = defaultDataTypes.object;
        this.hasObjectValueParser = resolvedObjectDataTypeDefinition.valueParser !== defaultObjectDataTypeDefinition.valueParser;
        this.hasObjectValueFormatter = resolvedObjectDataTypeDefinition.valueFormatter !== defaultObjectDataTypeDefinition.valueFormatter;
      };
      DataTypeService2.prototype.convertColumnTypes = function(type) {
        var typeKeys = [];
        if (type instanceof Array) {
          var invalidArray = type.some(function(a) {
            return typeof a !== "string";
          });
          if (invalidArray) {
            console.warn("AG Grid: if colDef.type is supplied an array it should be of type 'string[]'");
          } else {
            typeKeys = type;
          }
        } else if (typeof type === "string") {
          typeKeys = type.split(",");
        } else {
          console.warn("AG Grid: colDef.type should be of type 'string' | 'string[]'");
        }
        return typeKeys;
      };
      DataTypeService2.prototype.getDateStringTypeDefinition = function() {
        return this.dataTypeDefinitions.dateString;
      };
      DataTypeService2.prototype.getDateParserFunction = function() {
        return this.getDateStringTypeDefinition().dateParser;
      };
      DataTypeService2.prototype.getDateFormatterFunction = function() {
        return this.getDateStringTypeDefinition().dateFormatter;
      };
      DataTypeService2.prototype.getDataTypeDefinition = function(column) {
        var colDef = column.getColDef();
        if (!colDef.cellDataType) {
          return void 0;
        }
        return this.dataTypeDefinitions[colDef.cellDataType];
      };
      DataTypeService2.prototype.getBaseDataType = function(column) {
        var _a;
        return (_a = this.getDataTypeDefinition(column)) === null || _a === void 0 ? void 0 : _a.baseDataType;
      };
      DataTypeService2.prototype.checkType = function(column, value) {
        var _a;
        if (value == null) {
          return true;
        }
        var dataTypeMatcher = (_a = this.getDataTypeDefinition(column)) === null || _a === void 0 ? void 0 : _a.dataTypeMatcher;
        if (!dataTypeMatcher) {
          return true;
        }
        return dataTypeMatcher(value);
      };
      DataTypeService2.prototype.validateColDef = function(colDef) {
        if (colDef.cellDataType === "object") {
          if (colDef.valueFormatter === this.dataTypeDefinitions.object.groupSafeValueFormatter && !this.hasObjectValueFormatter) {
            doOnce(function() {
              return console.warn('AG Grid: Cell data type is "object" but no value formatter has been provided. Please either provide an object data type definition with a value formatter, or set "colDef.valueFormatter"');
            }, "dataTypeObjectValueFormatter");
          }
          if (colDef.editable && colDef.valueParser === this.dataTypeDefinitions.object.valueParser && !this.hasObjectValueParser) {
            doOnce(function() {
              return console.warn('AG Grid: Cell data type is "object" but no value parser has been provided. Please either provide an object data type definition with a value parser, or set "colDef.valueParser"');
            }, "dataTypeObjectValueParser");
          }
        }
      };
      DataTypeService2.prototype.setColDefPropertiesForBaseDataType = function(colDef, dataTypeDefinition, colId) {
        var _this = this;
        var formatValue = function(column, node, value) {
          var valueFormatter = column.getColDef().valueFormatter;
          if (valueFormatter === dataTypeDefinition.groupSafeValueFormatter) {
            valueFormatter = dataTypeDefinition.valueFormatter;
          }
          return _this.valueFormatterService.formatValue(column, node, value, valueFormatter);
        };
        var usingSetFilter = ModuleRegistry.__isRegistered(ModuleNames.SetFilterModule, this.context.getGridId());
        var translate = this.localeService.getLocaleTextFunc();
        var mergeFilterParams = function(params) {
          var filterParams = colDef.filterParams;
          colDef.filterParams = typeof filterParams === "object" ? __assign(__assign({}, filterParams), params) : params;
        };
        colDef.useValueFormatterForExport = true;
        colDef.useValueParserForImport = true;
        switch (dataTypeDefinition.baseDataType) {
          case "number": {
            colDef.cellEditor = "agNumberCellEditor";
            if (usingSetFilter) {
              mergeFilterParams({
                comparator: function(a, b) {
                  var valA = a == null ? 0 : parseInt(a);
                  var valB = b == null ? 0 : parseInt(b);
                  if (valA === valB)
                    return 0;
                  return valA > valB ? 1 : -1;
                }
              });
            }
            break;
          }
          case "boolean": {
            colDef.cellEditor = "agCheckboxCellEditor";
            colDef.cellRenderer = "agCheckboxCellRenderer";
            colDef.suppressKeyboardEvent = function(params) {
              return !!params.colDef.editable && params.event.key === KeyCode.SPACE;
            };
            if (usingSetFilter) {
              mergeFilterParams({
                valueFormatter: function(params) {
                  if (!exists(params.value)) {
                    return translate("blanks", "(Blanks)");
                  }
                  return translate(String(params.value), params.value ? "True" : "False");
                }
              });
            } else {
              mergeFilterParams({
                maxNumConditions: 1,
                filterOptions: [
                  "empty",
                  {
                    displayKey: "true",
                    displayName: "True",
                    predicate: function(_filterValues, cellValue) {
                      return cellValue;
                    },
                    numberOfInputs: 0
                  },
                  {
                    displayKey: "false",
                    displayName: "False",
                    predicate: function(_filterValues, cellValue) {
                      return cellValue === false;
                    },
                    numberOfInputs: 0
                  }
                ]
              });
            }
            break;
          }
          case "date": {
            colDef.cellEditor = "agDateCellEditor";
            colDef.keyCreator = function(params) {
              return formatValue(params.column, params.node, params.value);
            };
            if (usingSetFilter) {
              mergeFilterParams({
                valueFormatter: function(params) {
                  var valueFormatted = formatValue(params.column, params.node, params.value);
                  return exists(valueFormatted) ? valueFormatted : translate("blanks", "(Blanks)");
                },
                treeList: true,
                treeListFormatter: function(pathKey, level) {
                  if (level === 1 && pathKey != null) {
                    var monthKey = MONTH_KEYS[Number(pathKey) - 1];
                    return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);
                  }
                  return pathKey !== null && pathKey !== void 0 ? pathKey : translate("blanks", "(Blanks)");
                }
              });
            }
            break;
          }
          case "dateString": {
            colDef.cellEditor = "agDateStringCellEditor";
            colDef.keyCreator = function(params) {
              return formatValue(params.column, params.node, params.value);
            };
            var convertToDate_1 = this.getDateParserFunction();
            if (usingSetFilter) {
              mergeFilterParams({
                valueFormatter: function(params) {
                  var valueFormatted = formatValue(params.column, params.node, params.value);
                  return exists(valueFormatted) ? valueFormatted : translate("blanks", "(Blanks)");
                },
                treeList: true,
                treeListPathGetter: function(value) {
                  var date = convertToDate_1(value !== null && value !== void 0 ? value : void 0);
                  return date ? [String(date.getFullYear()), String(date.getMonth() + 1), String(date.getDate())] : null;
                },
                treeListFormatter: function(pathKey, level) {
                  if (level === 1 && pathKey != null) {
                    var monthKey = MONTH_KEYS[Number(pathKey) - 1];
                    return translate(monthKey, MONTH_LOCALE_TEXT[monthKey]);
                  }
                  return pathKey !== null && pathKey !== void 0 ? pathKey : translate("blanks", "(Blanks)");
                }
              });
            } else {
              mergeFilterParams({
                comparator: function(filterDate, cellValue) {
                  var cellAsDate = convertToDate_1(cellValue);
                  if (cellValue == null || cellAsDate < filterDate) {
                    return -1;
                  }
                  if (cellAsDate > filterDate) {
                    return 1;
                  }
                  return 0;
                }
              });
            }
            break;
          }
          case "object": {
            colDef.cellEditorParams = {
              useFormatter: true
            };
            colDef.comparator = function(a, b) {
              var column = _this.columnModel.getPrimaryColumn(colId);
              var colDef2 = column === null || column === void 0 ? void 0 : column.getColDef();
              if (!column || !colDef2) {
                return 0;
              }
              var valA = a == null ? "" : formatValue(column, null, a);
              var valB = b == null ? "" : formatValue(column, null, b);
              if (valA === valB)
                return 0;
              return valA > valB ? 1 : -1;
            };
            colDef.keyCreator = function(params) {
              return formatValue(params.column, params.node, params.value);
            };
            if (usingSetFilter) {
              mergeFilterParams({
                valueFormatter: function(params) {
                  var valueFormatted = formatValue(params.column, params.node, params.value);
                  return exists(valueFormatted) ? valueFormatted : translate("blanks", "(Blanks)");
                }
              });
            } else {
              colDef.filterValueGetter = function(params) {
                return formatValue(params.column, params.node, _this.valueService.getValue(params.column, params.node));
              };
            }
            break;
          }
        }
      };
      DataTypeService2.prototype.getDefaultDataTypes = function() {
        var defaultDateFormatMatcher = function(value) {
          return !!value.match("^\\d{4}-\\d{2}-\\d{2}$");
        };
        var translate = this.localeService.getLocaleTextFunc();
        return {
          number: {
            baseDataType: "number",
            valueParser: function(params) {
              return params.newValue === "" ? null : Number(params.newValue);
            },
            valueFormatter: function(params) {
              if (params.value == null) {
                return "";
              }
              if (typeof params.value !== "number" || isNaN(params.value)) {
                return translate("invalidNumber", "Invalid Number");
              }
              return String(params.value);
            },
            dataTypeMatcher: function(value) {
              return typeof value === "number";
            }
          },
          text: {
            baseDataType: "text",
            valueParser: function(params) {
              return params.newValue === "" ? null : toStringOrNull(params.newValue);
            },
            dataTypeMatcher: function(value) {
              return typeof value === "string";
            }
          },
          boolean: {
            baseDataType: "boolean",
            valueParser: function(params) {
              return params.newValue === "" ? null : String(params.newValue).toLowerCase() === "true";
            },
            valueFormatter: function(params) {
              return params.value == null ? "" : String(params.value);
            },
            dataTypeMatcher: function(value) {
              return typeof value === "boolean";
            }
          },
          date: {
            baseDataType: "date",
            valueParser: function(params) {
              return parseDateTimeFromString(params.newValue == null ? null : String(params.newValue));
            },
            valueFormatter: function(params) {
              var _a;
              if (params.value == null) {
                return "";
              }
              if (!(params.value instanceof Date) || isNaN(params.value.getTime())) {
                return translate("invalidDate", "Invalid Date");
              }
              return (_a = serialiseDate(params.value, false)) !== null && _a !== void 0 ? _a : "";
            },
            dataTypeMatcher: function(value) {
              return value instanceof Date;
            }
          },
          dateString: {
            baseDataType: "dateString",
            dateParser: function(value) {
              var _a;
              return (_a = parseDateTimeFromString(value)) !== null && _a !== void 0 ? _a : void 0;
            },
            dateFormatter: function(value) {
              var _a;
              return (_a = serialiseDate(value !== null && value !== void 0 ? value : null, false)) !== null && _a !== void 0 ? _a : void 0;
            },
            valueParser: function(params) {
              return defaultDateFormatMatcher(String(params.newValue)) ? params.newValue : null;
            },
            valueFormatter: function(params) {
              return defaultDateFormatMatcher(String(params.value)) ? params.value : "";
            },
            dataTypeMatcher: function(value) {
              return typeof value === "string" && defaultDateFormatMatcher(value);
            }
          },
          object: {
            baseDataType: "object",
            valueParser: function() {
              return null;
            },
            valueFormatter: function(params) {
              var _a;
              return (_a = toStringOrNull(params.value)) !== null && _a !== void 0 ? _a : "";
            }
          }
        };
      };
      __decorate$d([
        Autowired("rowModel")
      ], DataTypeService2.prototype, "rowModel", void 0);
      __decorate$d([
        Autowired("columnModel")
      ], DataTypeService2.prototype, "columnModel", void 0);
      __decorate$d([
        Autowired("columnUtils")
      ], DataTypeService2.prototype, "columnUtils", void 0);
      __decorate$d([
        Autowired("valueService")
      ], DataTypeService2.prototype, "valueService", void 0);
      __decorate$d([
        Autowired("valueFormatterService")
      ], DataTypeService2.prototype, "valueFormatterService", void 0);
      __decorate$d([
        PostConstruct
      ], DataTypeService2.prototype, "init", null);
      DataTypeService2 = __decorate$d([
        Bean("dataTypeService")
      ], DataTypeService2);
      return DataTypeService2;
    }(BeanStub);
    __extends$d = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$c = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    ValueParserService = /** @class */
    function(_super) {
      __extends$d(ValueParserService2, _super);
      function ValueParserService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ValueParserService2.prototype.parseValue = function(column, rowNode, newValue, oldValue) {
        var colDef = column.getColDef();
        var params = {
          node: rowNode,
          data: rowNode === null || rowNode === void 0 ? void 0 : rowNode.data,
          oldValue,
          newValue,
          colDef,
          column,
          api: this.gridOptionsService.api,
          columnApi: this.gridOptionsService.columnApi,
          context: this.gridOptionsService.context
        };
        var valueParser = colDef.valueParser;
        if (exists(valueParser)) {
          if (typeof valueParser === "function") {
            return valueParser(params);
          }
          return this.expressionService.evaluate(valueParser, params);
        }
        return newValue;
      };
      __decorate$c([
        Autowired("expressionService")
      ], ValueParserService2.prototype, "expressionService", void 0);
      ValueParserService2 = __decorate$c([
        Bean("valueParserService")
      ], ValueParserService2);
      return ValueParserService2;
    }(BeanStub);
    __read$3 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$2 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Grid = /** @class */
    function() {
      function Grid2(eGridDiv, gridOptions, params) {
        if (!gridOptions) {
          console.error("AG Grid: no gridOptions provided to the grid");
          return;
        }
        this.gridOptions = gridOptions;
        new GridCoreCreator().create(eGridDiv, gridOptions, function(context) {
          var gridComp = new GridComp(eGridDiv);
          context.createBean(gridComp);
        }, void 0, params);
      }
      Grid2.prototype.destroy = function() {
        if (this.gridOptions && this.gridOptions.api) {
          this.gridOptions.api.destroy();
        }
      };
      return Grid2;
    }();
    nextGridId = 1;
    GridCoreCreator = /** @class */
    function() {
      function GridCoreCreator2() {
      }
      GridCoreCreator2.prototype.create = function(eGridDiv, gridOptions, createUi, acceptChanges, params) {
        var _this = this;
        var _a;
        var debug = !!gridOptions.debug;
        var gridId = (_a = gridOptions.gridId) !== null && _a !== void 0 ? _a : String(nextGridId++);
        var registeredModules = this.getRegisteredModules(params, gridId);
        var beanClasses = this.createBeansList(gridOptions.rowModelType, registeredModules, gridId);
        var providedBeanInstances = this.createProvidedBeans(eGridDiv, gridOptions, params);
        if (!beanClasses) {
          return;
        }
        var contextParams = {
          providedBeanInstances,
          beanClasses,
          debug,
          gridId
        };
        var logger = new Logger("AG Grid", function() {
          return gridOptions.debug;
        });
        var contextLogger = new Logger("Context", function() {
          return contextParams.debug;
        });
        var context = new Context(contextParams, contextLogger);
        var beans = context.getBean("beans");
        this.registerModuleUserComponents(beans, registeredModules);
        this.registerStackComponents(beans, registeredModules);
        this.registerControllers(beans, registeredModules);
        createUi(context);
        beans.ctrlsService.whenReady(function() {
          _this.setColumnsAndData(beans);
          _this.dispatchGridReadyEvent(beans);
          var isEnterprise = ModuleRegistry.__isRegistered(ModuleNames.EnterpriseCoreModule, gridId);
          logger.log("initialised successfully, enterprise = " + isEnterprise);
        });
        if (acceptChanges) {
          acceptChanges(context);
        }
      };
      GridCoreCreator2.prototype.registerControllers = function(beans, registeredModules) {
        registeredModules.forEach(function(module) {
          if (module.controllers) {
            module.controllers.forEach(function(meta) {
              return beans.ctrlsFactory.register(meta);
            });
          }
        });
      };
      GridCoreCreator2.prototype.registerStackComponents = function(beans, registeredModules) {
        var agStackComponents = this.createAgStackComponentsList(registeredModules);
        beans.agStackComponentsRegistry.setupComponents(agStackComponents);
      };
      GridCoreCreator2.prototype.getRegisteredModules = function(params, gridId) {
        var passedViaConstructor = params ? params.modules : null;
        var registered = ModuleRegistry.__getRegisteredModules(gridId);
        var allModules = [];
        var mapNames = {};
        var addModule = function(moduleBased, mod, gridId2) {
          var addIndividualModule = function(currentModule) {
            if (!mapNames[currentModule.moduleName]) {
              mapNames[currentModule.moduleName] = true;
              allModules.push(currentModule);
              ModuleRegistry.__register(currentModule, moduleBased, gridId2);
            }
          };
          addIndividualModule(mod);
          if (mod.dependantModules) {
            mod.dependantModules.forEach(function(m) {
              return addModule(moduleBased, m, gridId2);
            });
          }
        };
        if (passedViaConstructor) {
          passedViaConstructor.forEach(function(m) {
            return addModule(true, m, gridId);
          });
        }
        if (registered) {
          registered.forEach(function(m) {
            return addModule(!ModuleRegistry.__isPackageBased(), m, void 0);
          });
        }
        return allModules;
      };
      GridCoreCreator2.prototype.registerModuleUserComponents = function(beans, registeredModules) {
        var moduleUserComps = this.extractModuleEntity(registeredModules, function(module) {
          return module.userComponents ? module.userComponents : [];
        });
        moduleUserComps.forEach(function(compMeta) {
          beans.userComponentRegistry.registerDefaultComponent(compMeta.componentName, compMeta.componentClass);
        });
      };
      GridCoreCreator2.prototype.createProvidedBeans = function(eGridDiv, gridOptions, params) {
        var frameworkOverrides = params ? params.frameworkOverrides : null;
        if (missing(frameworkOverrides)) {
          frameworkOverrides = new VanillaFrameworkOverrides();
        }
        var seed = {
          gridOptions,
          eGridDiv,
          globalEventListener: params ? params.globalEventListener : null,
          globalSyncEventListener: params ? params.globalSyncEventListener : null,
          frameworkOverrides
        };
        if (params && params.providedBeanInstances) {
          Object.assign(seed, params.providedBeanInstances);
        }
        return seed;
      };
      GridCoreCreator2.prototype.createAgStackComponentsList = function(registeredModules) {
        var components = [
          { componentName: "AgCheckbox", componentClass: AgCheckbox },
          { componentName: "AgRadioButton", componentClass: AgRadioButton },
          { componentName: "AgToggleButton", componentClass: AgToggleButton },
          { componentName: "AgInputTextField", componentClass: AgInputTextField },
          { componentName: "AgInputTextArea", componentClass: AgInputTextArea },
          { componentName: "AgInputNumberField", componentClass: AgInputNumberField },
          { componentName: "AgInputDateField", componentClass: AgInputDateField },
          { componentName: "AgInputRange", componentClass: AgInputRange },
          { componentName: "AgRichSelect", componentClass: AgRichSelect },
          { componentName: "AgSelect", componentClass: AgSelect },
          { componentName: "AgSlider", componentClass: AgSlider },
          { componentName: "AgGridBody", componentClass: GridBodyComp },
          { componentName: "AgHeaderRoot", componentClass: GridHeaderComp },
          { componentName: "AgSortIndicator", componentClass: SortIndicatorComp },
          { componentName: "AgPagination", componentClass: PaginationComp },
          { componentName: "AgOverlayWrapper", componentClass: OverlayWrapperComponent },
          { componentName: "AgGroupComponent", componentClass: AgGroupComponent },
          { componentName: "AgPanel", componentClass: AgPanel },
          { componentName: "AgDialog", componentClass: AgDialog },
          { componentName: "AgRowContainer", componentClass: RowContainerComp },
          { componentName: "AgFakeHorizontalScroll", componentClass: FakeHScrollComp },
          { componentName: "AgFakeVerticalScroll", componentClass: FakeVScrollComp },
          { componentName: "AgAutocomplete", componentClass: AgAutocomplete }
        ];
        var moduleAgStackComps = this.extractModuleEntity(registeredModules, function(module) {
          return module.agStackComponents ? module.agStackComponents : [];
        });
        components = components.concat(moduleAgStackComps);
        return components;
      };
      GridCoreCreator2.prototype.createBeansList = function(rowModelType, registeredModules, gridId) {
        if (rowModelType === void 0) {
          rowModelType = "clientSide";
        }
        var rowModelModules = registeredModules.filter(function(module) {
          return !module.rowModel || module.rowModel === rowModelType;
        });
        var rowModelModuleNames = {
          clientSide: ModuleNames.ClientSideRowModelModule,
          infinite: ModuleNames.InfiniteRowModelModule,
          serverSide: ModuleNames.ServerSideRowModelModule,
          viewport: ModuleNames.ViewportRowModelModule
        };
        if (!rowModelModuleNames[rowModelType]) {
          console.error("AG Grid: could not find row model for rowModelType = " + rowModelType);
          return;
        }
        if (!ModuleRegistry.__assertRegistered(rowModelModuleNames[rowModelType], "rowModelType = '" + rowModelType + "'", gridId)) {
          return;
        }
        var beans = [
          Beans,
          RowPositionUtils,
          CellPositionUtils,
          HeaderPositionUtils,
          PaginationAutoPageSizeService,
          GridApi,
          UserComponentRegistry,
          AgComponentUtils,
          ComponentMetadataProvider,
          ResizeObserverService,
          UserComponentFactory,
          RowContainerHeightService,
          HorizontalResizeService,
          LocaleService,
          GridOptionsValidator,
          PinnedRowModel,
          DragService,
          DisplayedGroupCreator,
          EventService,
          GridOptionsService,
          PopupService,
          SelectionService,
          FilterManager,
          ColumnModel,
          HeaderNavigationService,
          PaginationProxy,
          RowRenderer,
          ExpressionService,
          ColumnFactory,
          TemplateService,
          AlignedGridsService,
          NavigationService,
          ValueCache,
          ValueService,
          LoggerFactory,
          ColumnUtils,
          AutoWidthCalculator,
          StandardMenuFactory,
          DragAndDropService,
          ColumnApi,
          FocusService,
          MouseEventService,
          Environment,
          CellNavigationService,
          ValueFormatterService,
          StylingService,
          ScrollVisibleService,
          SortController,
          ColumnHoverService,
          ColumnAnimationService,
          SelectableService,
          AutoGroupColService,
          ChangeDetectionService,
          AnimationFrameService,
          UndoRedoService,
          AgStackComponentsRegistry,
          ColumnDefFactory,
          RowCssClassCalculator,
          RowNodeBlockLoader,
          RowNodeSorter,
          CtrlsService,
          PinnedWidthService,
          RowNodeEventThrottle,
          CtrlsFactory,
          DataTypeService,
          ValueParserService,
          QuickFilterService
        ];
        var moduleBeans = this.extractModuleEntity(rowModelModules, function(module) {
          return module.beans ? module.beans : [];
        });
        beans.push.apply(beans, __spreadArray$2([], __read$3(moduleBeans)));
        var beansNoDuplicates = [];
        beans.forEach(function(bean) {
          if (beansNoDuplicates.indexOf(bean) < 0) {
            beansNoDuplicates.push(bean);
          }
        });
        return beansNoDuplicates;
      };
      GridCoreCreator2.prototype.extractModuleEntity = function(moduleEntities, extractor) {
        return [].concat.apply([], __spreadArray$2([], __read$3(moduleEntities.map(extractor))));
      };
      GridCoreCreator2.prototype.setColumnsAndData = function(beans) {
        var columnDefs = beans.gridOptionsService.get("columnDefs");
        beans.columnModel.setColumnDefs(columnDefs || [], "gridInitializing");
        beans.rowModel.start();
      };
      GridCoreCreator2.prototype.dispatchGridReadyEvent = function(beans) {
        var readyEvent = {
          type: Events.EVENT_GRID_READY
        };
        beans.eventService.dispatchEvent(readyEvent);
      };
      return GridCoreCreator2;
    }();
    BaseComponentWrapper = /** @class */
    function() {
      function BaseComponentWrapper2() {
      }
      BaseComponentWrapper2.prototype.wrap = function(OriginalConstructor, mandatoryMethodList, optionalMethodList, componentType) {
        var _this = this;
        if (optionalMethodList === void 0) {
          optionalMethodList = [];
        }
        var wrapper = this.createWrapper(OriginalConstructor, componentType);
        mandatoryMethodList.forEach(function(methodName) {
          _this.createMethod(wrapper, methodName, true);
        });
        optionalMethodList.forEach(function(methodName) {
          _this.createMethod(wrapper, methodName, false);
        });
        return wrapper;
      };
      BaseComponentWrapper2.prototype.unwrap = function(comp) {
        return comp;
      };
      BaseComponentWrapper2.prototype.createMethod = function(wrapper, methodName, mandatory) {
        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
      };
      BaseComponentWrapper2.prototype.createMethodProxy = function(wrapper, methodName, mandatory) {
        return function() {
          if (wrapper.hasMethod(methodName)) {
            return wrapper.callMethod(methodName, arguments);
          }
          if (mandatory) {
            console.warn("AG Grid: Framework component is missing the method " + methodName + "()");
          }
          return null;
        };
      };
      return BaseComponentWrapper2;
    }();
    DEFAULT_CHART_GROUPS = {
      columnGroup: [
        "column",
        "stackedColumn",
        "normalizedColumn"
      ],
      barGroup: [
        "bar",
        "stackedBar",
        "normalizedBar"
      ],
      pieGroup: [
        "pie",
        "doughnut"
      ],
      lineGroup: [
        "line"
      ],
      scatterGroup: [
        "scatter",
        "bubble"
      ],
      areaGroup: [
        "area",
        "stackedArea",
        "normalizedArea"
      ],
      histogramGroup: [
        "histogram"
      ],
      combinationGroup: [
        "columnLineCombo",
        "areaColumnCombo",
        "customCombo"
      ]
    };
    CHART_TOOL_PANEL_ALLOW_LIST = [
      "chartSettings",
      "chartData",
      "chartFormat"
    ];
    CHART_TOOLBAR_ALLOW_LIST = [
      "chartUnlink",
      "chartLink",
      "chartDownload"
    ];
    CHART_TOOL_PANEL_MENU_OPTIONS = {
      settings: "chartSettings",
      data: "chartData",
      format: "chartFormat"
    };
    __FORCE_MODULE_DETECTION = 0;
    (function(BarColumnLabelPlacement2) {
      BarColumnLabelPlacement2["InsideBase"] = "insideBase";
      BarColumnLabelPlacement2["InsideEnd"] = "insideEnd";
      BarColumnLabelPlacement2["Center"] = "center";
      BarColumnLabelPlacement2["OutsideEnd"] = "outsideEnd";
    })(BarColumnLabelPlacement || (BarColumnLabelPlacement = {}));
    globalObj = typeof global === "undefined" ? {} : global;
    globalObj.HTMLElement = typeof HTMLElement === "undefined" ? {} : HTMLElement;
    globalObj.HTMLButtonElement = typeof HTMLButtonElement === "undefined" ? {} : HTMLButtonElement;
    globalObj.HTMLSelectElement = typeof HTMLSelectElement === "undefined" ? {} : HTMLSelectElement;
    globalObj.HTMLInputElement = typeof HTMLInputElement === "undefined" ? {} : HTMLInputElement;
    globalObj.Node = typeof Node === "undefined" ? {} : Node;
    globalObj.MouseEvent = typeof MouseEvent === "undefined" ? {} : MouseEvent;
    __read$2 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray$1 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    ClientSideNodeManager = /** @class */
    function() {
      function ClientSideNodeManager2(rootNode, gridOptionsService, eventService, columnModel, selectionService, beans) {
        this.nextId = 0;
        this.allNodesMap = {};
        this.rootNode = rootNode;
        this.gridOptionsService = gridOptionsService;
        this.eventService = eventService;
        this.columnModel = columnModel;
        this.beans = beans;
        this.selectionService = selectionService;
        this.rootNode.group = true;
        this.rootNode.level = -1;
        this.rootNode.id = ClientSideNodeManager2.ROOT_NODE_ID;
        this.rootNode.allLeafChildren = [];
        this.rootNode.childrenAfterGroup = [];
        this.rootNode.childrenAfterSort = [];
        this.rootNode.childrenAfterAggFilter = [];
        this.rootNode.childrenAfterFilter = [];
        this.postConstruct();
      }
      ClientSideNodeManager2.prototype.postConstruct = function() {
        this.suppressParentsInRowNodes = this.gridOptionsService.is("suppressParentsInRowNodes");
        this.isRowMasterFunc = this.gridOptionsService.get("isRowMaster");
        this.doingMasterDetail = this.gridOptionsService.is("masterDetail");
      };
      ClientSideNodeManager2.prototype.getCopyOfNodesMap = function() {
        return _.cloneObject(this.allNodesMap);
      };
      ClientSideNodeManager2.prototype.getRowNode = function(id) {
        return this.allNodesMap[id];
      };
      ClientSideNodeManager2.prototype.setRowData = function(rowData) {
        var _this = this;
        if (typeof rowData === "string") {
          console.warn("AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first");
          return;
        }
        this.dispatchRowDataUpdateStartedEvent(rowData);
        var rootNode = this.rootNode;
        var sibling = this.rootNode.sibling;
        rootNode.childrenAfterFilter = null;
        rootNode.childrenAfterGroup = null;
        rootNode.childrenAfterAggFilter = null;
        rootNode.childrenAfterSort = null;
        rootNode.childrenMapped = null;
        rootNode.updateHasChildren();
        this.nextId = 0;
        this.allNodesMap = {};
        if (rowData) {
          rootNode.allLeafChildren = rowData.map(function(dataItem) {
            return _this.createNode(dataItem, _this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
          });
        } else {
          rootNode.allLeafChildren = [];
          rootNode.childrenAfterGroup = [];
        }
        if (sibling) {
          sibling.childrenAfterFilter = rootNode.childrenAfterFilter;
          sibling.childrenAfterGroup = rootNode.childrenAfterGroup;
          sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;
          sibling.childrenAfterSort = rootNode.childrenAfterSort;
          sibling.childrenMapped = rootNode.childrenMapped;
          sibling.allLeafChildren = rootNode.allLeafChildren;
        }
      };
      ClientSideNodeManager2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
        this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);
        var rowNodeTransaction = {
          remove: [],
          update: [],
          add: []
        };
        var nodesToUnselect = [];
        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);
        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);
        this.executeAdd(rowDataTran, rowNodeTransaction);
        this.updateSelection(nodesToUnselect, "rowDataChanged");
        if (rowNodeOrder) {
          _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);
        }
        return rowNodeTransaction;
      };
      ClientSideNodeManager2.prototype.dispatchRowDataUpdateStartedEvent = function(rowData) {
        var event = {
          type: Events.EVENT_ROW_DATA_UPDATE_STARTED,
          firstRowData: (rowData === null || rowData === void 0 ? void 0 : rowData.length) ? rowData[0] : null
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideNodeManager2.prototype.updateSelection = function(nodesToUnselect, source) {
        var selectionChanged = nodesToUnselect.length > 0;
        if (selectionChanged) {
          this.selectionService.setNodesSelected({
            newValue: false,
            nodes: nodesToUnselect,
            suppressFinishActions: true,
            source
          });
        }
        this.selectionService.updateGroupsFromChildrenSelections(source);
        if (selectionChanged) {
          var event_1 = {
            type: Events.EVENT_SELECTION_CHANGED,
            source
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      ClientSideNodeManager2.prototype.executeAdd = function(rowDataTran, rowNodeTransaction) {
        var _this = this;
        var _a;
        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;
        if (_.missingOrEmpty(add)) {
          return;
        }
        var newNodes = add.map(function(item) {
          return _this.createNode(item, _this.rootNode, ClientSideNodeManager2.TOP_LEVEL);
        });
        if (typeof addIndex === "number" && addIndex >= 0) {
          var allLeafChildren = this.rootNode.allLeafChildren;
          var len = allLeafChildren.length;
          var normalisedAddIndex = addIndex;
          var isTreeData = this.gridOptionsService.is("treeData");
          if (isTreeData && addIndex > 0 && len > 0) {
            for (var i = 0; i < len; i++) {
              if (((_a = allLeafChildren[i]) === null || _a === void 0 ? void 0 : _a.rowIndex) == addIndex - 1) {
                normalisedAddIndex = i + 1;
                break;
              }
            }
          }
          var nodesBeforeIndex = allLeafChildren.slice(0, normalisedAddIndex);
          var nodesAfterIndex = allLeafChildren.slice(normalisedAddIndex, allLeafChildren.length);
          this.rootNode.allLeafChildren = __spreadArray$1(__spreadArray$1(__spreadArray$1([], __read$2(nodesBeforeIndex)), __read$2(newNodes)), __read$2(nodesAfterIndex));
        } else {
          this.rootNode.allLeafChildren = __spreadArray$1(__spreadArray$1([], __read$2(this.rootNode.allLeafChildren)), __read$2(newNodes));
        }
        if (this.rootNode.sibling) {
          this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;
        }
        rowNodeTransaction.add = newNodes;
      };
      ClientSideNodeManager2.prototype.executeRemove = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
        var _this = this;
        var remove = rowDataTran.remove;
        if (_.missingOrEmpty(remove)) {
          return;
        }
        var rowIdsRemoved = {};
        remove.forEach(function(item) {
          var rowNode = _this.lookupRowNode(item);
          if (!rowNode) {
            return;
          }
          if (rowNode.isSelected()) {
            nodesToUnselect.push(rowNode);
          }
          rowNode.clearRowTopAndRowIndex();
          rowIdsRemoved[rowNode.id] = true;
          delete _this.allNodesMap[rowNode.id];
          rowNodeTransaction.remove.push(rowNode);
        });
        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function(rowNode) {
          return !rowIdsRemoved[rowNode.id];
        });
        if (this.rootNode.sibling) {
          this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;
        }
      };
      ClientSideNodeManager2.prototype.executeUpdate = function(rowDataTran, rowNodeTransaction, nodesToUnselect) {
        var _this = this;
        var update = rowDataTran.update;
        if (_.missingOrEmpty(update)) {
          return;
        }
        update.forEach(function(item) {
          var rowNode = _this.lookupRowNode(item);
          if (!rowNode) {
            return;
          }
          rowNode.updateData(item);
          if (!rowNode.selectable && rowNode.isSelected()) {
            nodesToUnselect.push(rowNode);
          }
          _this.setMasterForRow(rowNode, item, ClientSideNodeManager2.TOP_LEVEL, false);
          rowNodeTransaction.update.push(rowNode);
        });
      };
      ClientSideNodeManager2.prototype.lookupRowNode = function(data) {
        var getRowIdFunc = this.gridOptionsService.getCallback("getRowId");
        var rowNode;
        if (getRowIdFunc) {
          var id = getRowIdFunc({ data, level: 0 });
          rowNode = this.allNodesMap[id];
          if (!rowNode) {
            console.error("AG Grid: could not find row id=" + id + ", data item was not found for this id");
            return null;
          }
        } else {
          rowNode = this.rootNode.allLeafChildren.find(function(node) {
            return node.data === data;
          });
          if (!rowNode) {
            console.error("AG Grid: could not find data item as object was not found", data);
            console.error("Consider using getRowId to help the Grid find matching row data");
            return null;
          }
        }
        return rowNode || null;
      };
      ClientSideNodeManager2.prototype.createNode = function(dataItem, parent, level) {
        var node = new RowNode(this.beans);
        node.group = false;
        this.setMasterForRow(node, dataItem, level, true);
        if (parent && !this.suppressParentsInRowNodes) {
          node.parent = parent;
        }
        node.level = level;
        node.setDataAndId(dataItem, this.nextId.toString());
        if (this.allNodesMap[node.id]) {
          console.warn("AG Grid: duplicate node id '" + node.id + "' detected from getRowId callback, this could cause issues in your grid.");
        }
        this.allNodesMap[node.id] = node;
        this.nextId++;
        return node;
      };
      ClientSideNodeManager2.prototype.setMasterForRow = function(rowNode, data, level, setExpanded) {
        var isTreeData = this.gridOptionsService.is("treeData");
        if (isTreeData) {
          rowNode.setMaster(false);
          if (setExpanded) {
            rowNode.expanded = false;
          }
        } else {
          if (this.doingMasterDetail) {
            if (this.isRowMasterFunc) {
              rowNode.setMaster(this.isRowMasterFunc(data));
            } else {
              rowNode.setMaster(true);
            }
          } else {
            rowNode.setMaster(false);
          }
          if (setExpanded) {
            var rowGroupColumns = this.columnModel.getRowGroupColumns();
            var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;
            var masterRowLevel = level + numRowGroupColumns;
            rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;
          }
        }
      };
      ClientSideNodeManager2.prototype.isExpanded = function(level) {
        var expandByDefault = this.gridOptionsService.getNum("groupDefaultExpanded");
        if (expandByDefault === -1) {
          return true;
        }
        return level < expandByDefault;
      };
      ClientSideNodeManager2.TOP_LEVEL = 0;
      ClientSideNodeManager2.ROOT_NODE_ID = "ROOT_NODE_ID";
      return ClientSideNodeManager2;
    }();
    __extends$c = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$b = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read$1 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    (function(RecursionType2) {
      RecursionType2[RecursionType2["Normal"] = 0] = "Normal";
      RecursionType2[RecursionType2["AfterFilter"] = 1] = "AfterFilter";
      RecursionType2[RecursionType2["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
      RecursionType2[RecursionType2["PivotNodes"] = 3] = "PivotNodes";
    })(RecursionType || (RecursionType = {}));
    ClientSideRowModel = /** @class */
    function(_super) {
      __extends$c(ClientSideRowModel2, _super);
      function ClientSideRowModel2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onRowHeightChanged_debounced = _.debounce(_this.onRowHeightChanged.bind(_this), 100);
        _this.rowsToDisplay = [];
        return _this;
      }
      ClientSideRowModel2.prototype.init = function() {
        var _this = this;
        var refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });
        var animate = !this.gridOptionsService.is("suppressAnimationFrame");
        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {
          step: ClientSideRowModelSteps.EVERYTHING,
          afterColumnsChanged: true,
          keepRenderedRows: true,
          animate
        });
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }));
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);
        this.addManagedListener(this.eventService, Events.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanges.bind(this));
        var refreshMapListener = this.refreshModel.bind(this, {
          step: ClientSideRowModelSteps.MAP,
          keepRenderedRows: true,
          animate
        });
        this.addManagedPropertyListeners([
          "groupRemoveSingleChildren",
          "groupRemoveLowestSingleChildren",
          "groupIncludeFooter"
        ], refreshMapListener);
        var refreshAggListener = this.refreshModel.bind(this, {
          step: ClientSideRowModelSteps.AGGREGATE,
          keepRenderedRows: true,
          animate
        });
        this.addManagedPropertyListeners([
          "groupIncludeTotalFooter"
        ], refreshAggListener);
        this.rootNode = new RowNode(this.beans);
        this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsService, this.eventService, this.columnModel, this.selectionService, this.beans);
        this.addManagedPropertyListener("treeData", function() {
          _this.setRowData(_this.rootNode.allLeafChildren.map(function(child) {
            return child.data;
          }));
        });
      };
      ClientSideRowModel2.prototype.start = function() {
        var rowData = this.gridOptionsService.get("rowData");
        if (rowData) {
          this.setRowData(rowData);
        }
      };
      ClientSideRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        var atLeastOneChange;
        var res = false;
        do {
          atLeastOneChange = false;
          var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);
          var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);
          var firstRow = Math.max(rowAtStartPixel, startLimitIndex);
          var lastRow = Math.min(rowAtEndPixel, endLimitIndex);
          for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
            var rowNode = this.getRow(rowIndex);
            if (rowNode.rowHeightEstimated) {
              var rowHeight = this.gridOptionsService.getRowHeightForNode(rowNode);
              rowNode.setRowHeight(rowHeight.height);
              atLeastOneChange = true;
              res = true;
            }
          }
          if (atLeastOneChange) {
            this.setRowTopAndRowIndex();
          }
        } while (atLeastOneChange);
        return res;
      };
      ClientSideRowModel2.prototype.setRowTopAndRowIndex = function() {
        var defaultRowHeight = this.environment.getDefaultRowHeight();
        var nextRowTop = 0;
        var displayedRowsMapped = /* @__PURE__ */ new Set();
        var allowEstimate = this.gridOptionsService.isDomLayout("normal");
        for (var i = 0; i < this.rowsToDisplay.length; i++) {
          var rowNode = this.rowsToDisplay[i];
          if (rowNode.id != null) {
            displayedRowsMapped.add(rowNode.id);
          }
          if (rowNode.rowHeight == null) {
            var rowHeight = this.gridOptionsService.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);
            rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);
          }
          rowNode.setRowTop(nextRowTop);
          rowNode.setRowIndex(i);
          nextRowTop += rowNode.rowHeight;
        }
        return displayedRowsMapped;
      };
      ClientSideRowModel2.prototype.clearRowTopAndRowIndex = function(changedPath, displayedRowsMapped) {
        var changedPathActive = changedPath.isActive();
        var clearIfNotDisplayed = function(rowNode) {
          if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {
            rowNode.clearRowTopAndRowIndex();
          }
        };
        var recurse = function(rowNode) {
          clearIfNotDisplayed(rowNode);
          clearIfNotDisplayed(rowNode.detailNode);
          clearIfNotDisplayed(rowNode.sibling);
          if (rowNode.hasChildren()) {
            if (rowNode.childrenAfterGroup) {
              var isRootNode = rowNode.level == -1;
              var skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;
              if (!skipChildren) {
                rowNode.childrenAfterGroup.forEach(recurse);
              }
            }
          }
        };
        recurse(this.rootNode);
      };
      ClientSideRowModel2.prototype.ensureRowsAtPixel = function(rowNodes, pixel, increment) {
        var _this = this;
        if (increment === void 0) {
          increment = 0;
        }
        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);
        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);
        var animate = !this.gridOptionsService.is("suppressAnimationFrame");
        if (rowNodeAtPixelNow === rowNodes[0]) {
          return false;
        }
        rowNodes.forEach(function(rowNode) {
          _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);
        });
        rowNodes.forEach(function(rowNode, idx) {
          _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);
        });
        this.refreshModel({
          step: ClientSideRowModelSteps.EVERYTHING,
          keepRenderedRows: true,
          keepEditingRows: true,
          animate
        });
        return true;
      };
      ClientSideRowModel2.prototype.highlightRowAtPixel = function(rowNode, pixel) {
        var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;
        var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;
        if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {
          if (this.lastHighlightedRow) {
            this.lastHighlightedRow.setHighlighted(null);
            this.lastHighlightedRow = null;
          }
          return;
        }
        var highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);
        if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {
          this.lastHighlightedRow.setHighlighted(null);
          this.lastHighlightedRow = null;
        }
        rowNodeAtPixelNow.setHighlighted(highlight);
        this.lastHighlightedRow = rowNodeAtPixelNow;
      };
      ClientSideRowModel2.prototype.getHighlightPosition = function(pixel, rowNode) {
        if (!rowNode) {
          var index = this.getRowIndexAtPixel(pixel);
          rowNode = this.getRow(index || 0);
          if (!rowNode) {
            return RowHighlightPosition.Below;
          }
        }
        var rowTop = rowNode.rowTop, rowHeight = rowNode.rowHeight;
        return pixel - rowTop < rowHeight / 2 ? RowHighlightPosition.Above : RowHighlightPosition.Below;
      };
      ClientSideRowModel2.prototype.getLastHighlightedRowNode = function() {
        return this.lastHighlightedRow;
      };
      ClientSideRowModel2.prototype.isLastRowIndexKnown = function() {
        return true;
      };
      ClientSideRowModel2.prototype.getRowCount = function() {
        if (this.rowsToDisplay) {
          return this.rowsToDisplay.length;
        }
        return 0;
      };
      ClientSideRowModel2.prototype.getTopLevelRowCount = function() {
        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
        if (showingRootNode) {
          return 1;
        }
        var filteredChildren = this.rootNode.childrenAfterAggFilter;
        return filteredChildren ? filteredChildren.length : 0;
      };
      ClientSideRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;
        if (showingRootNode) {
          return topLevelIndex;
        }
        var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];
        if (this.gridOptionsService.is("groupHideOpenParents")) {
          while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {
            rowNode = rowNode.childrenAfterSort[0];
          }
        }
        return rowNode.rowIndex;
      };
      ClientSideRowModel2.prototype.getRowBounds = function(index) {
        if (_.missing(this.rowsToDisplay)) {
          return null;
        }
        var rowNode = this.rowsToDisplay[index];
        if (rowNode) {
          return {
            rowTop: rowNode.rowTop,
            rowHeight: rowNode.rowHeight
          };
        }
        return null;
      };
      ClientSideRowModel2.prototype.onRowGroupOpened = function() {
        var animate = this.gridOptionsService.isAnimateRows();
        this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });
      };
      ClientSideRowModel2.prototype.onFilterChanged = function(event) {
        if (event.afterDataChange) {
          return;
        }
        var animate = this.gridOptionsService.isAnimateRows();
        var primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some(function(col) {
          return col.isPrimary();
        });
        var step = primaryOrQuickFilterChanged ? ClientSideRowModelSteps.FILTER : ClientSideRowModelSteps.FILTER_AGGREGATES;
        this.refreshModel({ step, keepRenderedRows: true, animate });
      };
      ClientSideRowModel2.prototype.onSortChanged = function() {
        var animate = this.gridOptionsService.isAnimateRows();
        this.refreshModel({ step: ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate, keepEditingRows: true });
      };
      ClientSideRowModel2.prototype.getType = function() {
        return "clientSide";
      };
      ClientSideRowModel2.prototype.onValueChanged = function() {
        if (this.columnModel.isPivotActive()) {
          this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });
        } else {
          this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });
        }
      };
      ClientSideRowModel2.prototype.createChangePath = function(rowNodeTransactions) {
        var noTransactions = _.missingOrEmpty(rowNodeTransactions);
        var changedPath = new ChangedPath(false, this.rootNode);
        if (noTransactions || this.gridOptionsService.is("treeData")) {
          changedPath.setInactive();
        }
        return changedPath;
      };
      ClientSideRowModel2.prototype.isSuppressModelUpdateAfterUpdateTransaction = function(params) {
        if (!this.gridOptionsService.is("suppressModelUpdateAfterUpdateTransaction")) {
          return false;
        }
        if (params.rowNodeTransactions == null) {
          return false;
        }
        var transWithAddsOrDeletes = params.rowNodeTransactions.filter(function(tx) {
          return tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0;
        });
        var transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;
        return transactionsContainUpdatesOnly;
      };
      ClientSideRowModel2.prototype.buildRefreshModelParams = function(step) {
        var paramsStep = ClientSideRowModelSteps.EVERYTHING;
        var stepsMapped = {
          everything: ClientSideRowModelSteps.EVERYTHING,
          group: ClientSideRowModelSteps.EVERYTHING,
          filter: ClientSideRowModelSteps.FILTER,
          map: ClientSideRowModelSteps.MAP,
          aggregate: ClientSideRowModelSteps.AGGREGATE,
          sort: ClientSideRowModelSteps.SORT,
          pivot: ClientSideRowModelSteps.PIVOT
        };
        if (_.exists(step)) {
          paramsStep = stepsMapped[step];
        }
        if (_.missing(paramsStep)) {
          console.error("AG Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(", "));
          return void 0;
        }
        var animate = !this.gridOptionsService.is("suppressAnimationFrame");
        var modelParams = {
          step: paramsStep,
          keepRenderedRows: true,
          keepEditingRows: true,
          animate
        };
        return modelParams;
      };
      ClientSideRowModel2.prototype.refreshModel = function(paramsOrStep) {
        var params = typeof paramsOrStep === "object" && "step" in paramsOrStep ? paramsOrStep : this.buildRefreshModelParams(paramsOrStep);
        if (!params) {
          return;
        }
        if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {
          return;
        }
        var changedPath = this.createChangePath(params.rowNodeTransactions);
        switch (params.step) {
          case ClientSideRowModelSteps.EVERYTHING:
            this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, !!params.afterColumnsChanged);
          case ClientSideRowModelSteps.FILTER:
            this.doFilter(changedPath);
          case ClientSideRowModelSteps.PIVOT:
            this.doPivot(changedPath);
          case ClientSideRowModelSteps.AGGREGATE:
            this.doAggregate(changedPath);
          case ClientSideRowModelSteps.FILTER_AGGREGATES:
            this.doFilterAggregates(changedPath);
          case ClientSideRowModelSteps.SORT:
            this.doSort(params.rowNodeTransactions, changedPath);
          case ClientSideRowModelSteps.MAP:
            this.doRowsToDisplay();
        }
        var displayedNodesMapped = this.setRowTopAndRowIndex();
        this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);
        var event = {
          type: Events.EVENT_MODEL_UPDATED,
          animate: params.animate,
          keepRenderedRows: params.keepRenderedRows,
          newData: params.newData,
          newPage: false,
          keepUndoRedoStack: params.keepUndoRedoStack
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideRowModel2.prototype.isEmpty = function() {
        var rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
        return _.missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();
      };
      ClientSideRowModel2.prototype.isRowsToRender = function() {
        return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
      };
      ClientSideRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        var started = !lastInRange;
        var finished = false;
        var result = [];
        var groupsSelectChildren = this.gridOptionsService.is("groupSelectsChildren");
        this.forEachNodeAfterFilterAndSort(function(rowNode) {
          if (finished) {
            return;
          }
          if (started) {
            if (rowNode === lastInRange || rowNode === firstInRange) {
              finished = true;
              if (rowNode.group && groupsSelectChildren) {
                result.push.apply(result, __spreadArray([], __read$1(rowNode.allLeafChildren)));
                return;
              }
            }
          }
          if (!started) {
            if (rowNode !== lastInRange && rowNode !== firstInRange) {
              return;
            }
            started = true;
          }
          var includeThisNode = !rowNode.group || !groupsSelectChildren;
          if (includeThisNode) {
            result.push(rowNode);
            return;
          }
        });
        return result;
      };
      ClientSideRowModel2.prototype.setDatasource = function(datasource) {
        console.error("AG Grid: should never call setDatasource on clientSideRowController");
      };
      ClientSideRowModel2.prototype.getTopLevelNodes = function() {
        return this.rootNode ? this.rootNode.childrenAfterGroup : null;
      };
      ClientSideRowModel2.prototype.getRootNode = function() {
        return this.rootNode;
      };
      ClientSideRowModel2.prototype.getRow = function(index) {
        return this.rowsToDisplay[index];
      };
      ClientSideRowModel2.prototype.isRowPresent = function(rowNode) {
        return this.rowsToDisplay.indexOf(rowNode) >= 0;
      };
      ClientSideRowModel2.prototype.getRowIndexAtPixel = function(pixelToMatch) {
        if (this.isEmpty() || this.rowsToDisplay.length === 0) {
          return -1;
        }
        var bottomPointer = 0;
        var topPointer = this.rowsToDisplay.length - 1;
        if (pixelToMatch <= 0) {
          return 0;
        }
        var lastNode = _.last(this.rowsToDisplay);
        if (lastNode.rowTop <= pixelToMatch) {
          return this.rowsToDisplay.length - 1;
        }
        var oldBottomPointer = -1;
        var oldTopPointer = -1;
        while (true) {
          var midPointer = Math.floor((bottomPointer + topPointer) / 2);
          var currentRowNode = this.rowsToDisplay[midPointer];
          if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
            return midPointer;
          }
          if (currentRowNode.rowTop < pixelToMatch) {
            bottomPointer = midPointer + 1;
          } else if (currentRowNode.rowTop > pixelToMatch) {
            topPointer = midPointer - 1;
          }
          var caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;
          if (caughtInInfiniteLoop) {
            return midPointer;
          }
          oldBottomPointer = bottomPointer;
          oldTopPointer = topPointer;
        }
      };
      ClientSideRowModel2.prototype.isRowInPixel = function(rowNode, pixelToMatch) {
        var topPixel = rowNode.rowTop;
        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
        return pixelInRow;
      };
      ClientSideRowModel2.prototype.forEachLeafNode = function(callback) {
        if (this.rootNode.allLeafChildren) {
          this.rootNode.allLeafChildren.forEach(function(rowNode, index) {
            return callback(rowNode, index);
          });
        }
      };
      ClientSideRowModel2.prototype.forEachNode = function(callback, includeFooterNodes) {
        if (includeFooterNodes === void 0) {
          includeFooterNodes = false;
        }
        this.recursivelyWalkNodesAndCallback({
          nodes: __spreadArray([], __read$1(this.rootNode.childrenAfterGroup || [])),
          callback,
          recursionType: RecursionType.Normal,
          index: 0,
          includeFooterNodes
        });
      };
      ClientSideRowModel2.prototype.forEachNodeAfterFilter = function(callback, includeFooterNodes) {
        if (includeFooterNodes === void 0) {
          includeFooterNodes = false;
        }
        this.recursivelyWalkNodesAndCallback({
          nodes: __spreadArray([], __read$1(this.rootNode.childrenAfterAggFilter || [])),
          callback,
          recursionType: RecursionType.AfterFilter,
          index: 0,
          includeFooterNodes
        });
      };
      ClientSideRowModel2.prototype.forEachNodeAfterFilterAndSort = function(callback, includeFooterNodes) {
        if (includeFooterNodes === void 0) {
          includeFooterNodes = false;
        }
        this.recursivelyWalkNodesAndCallback({
          nodes: __spreadArray([], __read$1(this.rootNode.childrenAfterSort || [])),
          callback,
          recursionType: RecursionType.AfterFilterAndSort,
          index: 0,
          includeFooterNodes
        });
      };
      ClientSideRowModel2.prototype.forEachPivotNode = function(callback, includeFooterNodes) {
        if (includeFooterNodes === void 0) {
          includeFooterNodes = false;
        }
        this.recursivelyWalkNodesAndCallback({
          nodes: [this.rootNode],
          callback,
          recursionType: RecursionType.PivotNodes,
          index: 0,
          includeFooterNodes
        });
      };
      ClientSideRowModel2.prototype.recursivelyWalkNodesAndCallback = function(params) {
        var _a;
        var nodes = params.nodes, callback = params.callback, recursionType = params.recursionType, includeFooterNodes = params.includeFooterNodes;
        var index = params.index;
        for (var i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          callback(node, index++);
          if (node.hasChildren() && !node.footer) {
            var nodeChildren = null;
            switch (recursionType) {
              case RecursionType.Normal:
                nodeChildren = node.childrenAfterGroup;
                break;
              case RecursionType.AfterFilter:
                nodeChildren = node.childrenAfterAggFilter;
                break;
              case RecursionType.AfterFilterAndSort:
                nodeChildren = node.childrenAfterSort;
                break;
              case RecursionType.PivotNodes:
                nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
                break;
            }
            if (nodeChildren) {
              index = this.recursivelyWalkNodesAndCallback({
                nodes: __spreadArray([], __read$1(nodeChildren)),
                callback,
                recursionType,
                index,
                includeFooterNodes
              });
            }
          }
        }
        var parentNode = (_a = nodes[0]) === null || _a === void 0 ? void 0 : _a.parent;
        if (!includeFooterNodes || !parentNode)
          return index;
        var isRootNode = parentNode === this.rootNode;
        if (isRootNode) {
          var totalFooters = this.gridOptionsService.is("groupIncludeTotalFooter");
          if (!totalFooters)
            return index;
        } else {
          var isGroupIncludeFooter = this.gridOptionsService.getGroupIncludeFooter();
          if (!isGroupIncludeFooter({ node: parentNode }))
            return index;
        }
        parentNode.createFooter();
        callback(parentNode.sibling, index++);
        return index;
      };
      ClientSideRowModel2.prototype.doAggregate = function(changedPath) {
        if (this.aggregationStage) {
          this.aggregationStage.execute({ rowNode: this.rootNode, changedPath });
        }
      };
      ClientSideRowModel2.prototype.doFilterAggregates = function(changedPath) {
        if (this.filterAggregatesStage) {
          this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath });
        } else {
          this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;
        }
      };
      ClientSideRowModel2.prototype.expandOrCollapseAll = function(expand) {
        var usingTreeData = this.gridOptionsService.is("treeData");
        var usingPivotMode = this.columnModel.isPivotActive();
        var recursiveExpandOrCollapse = function(rowNodes) {
          if (!rowNodes) {
            return;
          }
          rowNodes.forEach(function(rowNode) {
            var actionRow = function() {
              rowNode.expanded = expand;
              recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
            };
            if (usingTreeData) {
              var hasChildren = _.exists(rowNode.childrenAfterGroup);
              if (hasChildren) {
                actionRow();
              }
              return;
            }
            if (usingPivotMode) {
              var notLeafGroup = !rowNode.leafGroup;
              if (notLeafGroup) {
                actionRow();
              }
              return;
            }
            var isRowGroup = rowNode.group;
            if (isRowGroup) {
              actionRow();
            }
          });
        };
        if (this.rootNode) {
          recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
        }
        this.refreshModel({ step: ClientSideRowModelSteps.MAP });
        var eventSource = expand ? "expandAll" : "collapseAll";
        var event = {
          type: Events.EVENT_EXPAND_COLLAPSE_ALL,
          source: eventSource
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideRowModel2.prototype.doSort = function(rowNodeTransactions, changedPath) {
        this.sortStage.execute({
          rowNode: this.rootNode,
          rowNodeTransactions,
          changedPath
        });
      };
      ClientSideRowModel2.prototype.doRowGrouping = function(groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {
        if (this.groupStage) {
          if (rowNodeTransactions) {
            this.groupStage.execute({
              rowNode: this.rootNode,
              rowNodeTransactions,
              rowNodeOrder,
              changedPath
            });
          } else {
            this.groupStage.execute({
              rowNode: this.rootNode,
              changedPath,
              afterColumnsChanged
            });
            this.restoreGroupState(groupState);
          }
          if (this.gridOptionsService.is("groupSelectsChildren")) {
            var selectionChanged = this.selectionService.updateGroupsFromChildrenSelections("rowGroupChanged", changedPath);
            if (selectionChanged) {
              var event_1 = {
                type: Events.EVENT_SELECTION_CHANGED,
                source: "rowGroupChanged"
              };
              this.eventService.dispatchEvent(event_1);
            }
          }
        } else {
          this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
          if (this.rootNode.sibling) {
            this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;
          }
          this.rootNode.updateHasChildren();
        }
      };
      ClientSideRowModel2.prototype.restoreGroupState = function(groupState) {
        if (!groupState) {
          return;
        }
        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
          if (typeof groupState[key] === "boolean") {
            node.expanded = groupState[key];
          }
        });
      };
      ClientSideRowModel2.prototype.doFilter = function(changedPath) {
        this.filterStage.execute({ rowNode: this.rootNode, changedPath });
      };
      ClientSideRowModel2.prototype.doPivot = function(changedPath) {
        if (this.pivotStage) {
          this.pivotStage.execute({ rowNode: this.rootNode, changedPath });
        }
      };
      ClientSideRowModel2.prototype.getGroupState = function() {
        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsService.is("rememberGroupStateWhenNewData")) {
          return null;
        }
        var result = {};
        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function(node, key) {
          return result[key] = node.expanded;
        });
        return result;
      };
      ClientSideRowModel2.prototype.getCopyOfNodesMap = function() {
        return this.nodeManager.getCopyOfNodesMap();
      };
      ClientSideRowModel2.prototype.getRowNode = function(id) {
        var idIsGroup = typeof id == "string" && id.indexOf(RowNode.ID_PREFIX_ROW_GROUP) == 0;
        if (idIsGroup) {
          var res_1 = void 0;
          this.forEachNode(function(node) {
            if (node.id === id) {
              res_1 = node;
            }
          });
          return res_1;
        }
        return this.nodeManager.getRowNode(id);
      };
      ClientSideRowModel2.prototype.setRowData = function(rowData) {
        var groupState = this.getGroupState();
        this.nodeManager.setRowData(rowData);
        this.selectionService.reset();
        this.filterManager.onNewRowsLoaded("rowDataUpdated");
        var rowDataUpdatedEvent = {
          type: Events.EVENT_ROW_DATA_UPDATED
        };
        this.eventService.dispatchEvent(rowDataUpdatedEvent);
        this.refreshModel({
          step: ClientSideRowModelSteps.EVERYTHING,
          groupState,
          newData: true
        });
      };
      ClientSideRowModel2.prototype.batchUpdateRowData = function(rowDataTransaction, callback) {
        var _this = this;
        if (this.applyAsyncTransactionsTimeout == null) {
          this.rowDataTransactionBatch = [];
          var waitMillis = this.gridOptionsService.getAsyncTransactionWaitMillis();
          this.applyAsyncTransactionsTimeout = window.setTimeout(function() {
            _this.executeBatchUpdateRowData();
          }, waitMillis);
        }
        this.rowDataTransactionBatch.push({ rowDataTransaction, callback });
      };
      ClientSideRowModel2.prototype.flushAsyncTransactions = function() {
        if (this.applyAsyncTransactionsTimeout != null) {
          clearTimeout(this.applyAsyncTransactionsTimeout);
          this.executeBatchUpdateRowData();
        }
      };
      ClientSideRowModel2.prototype.executeBatchUpdateRowData = function() {
        var _this = this;
        this.valueCache.onDataChanged();
        var callbackFuncsBound = [];
        var rowNodeTrans = [];
        var forceRowNodeOrder = false;
        if (this.rowDataTransactionBatch) {
          this.rowDataTransactionBatch.forEach(function(tranItem) {
            var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, void 0);
            rowNodeTrans.push(rowNodeTran);
            if (tranItem.callback) {
              callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));
            }
            if (typeof tranItem.rowDataTransaction.addIndex === "number") {
              forceRowNodeOrder = true;
            }
          });
        }
        this.commonUpdateRowData(rowNodeTrans, void 0, forceRowNodeOrder);
        if (callbackFuncsBound.length > 0) {
          window.setTimeout(function() {
            callbackFuncsBound.forEach(function(func) {
              return func();
            });
          }, 0);
        }
        if (rowNodeTrans.length > 0) {
          var event_2 = {
            type: Events.EVENT_ASYNC_TRANSACTIONS_FLUSHED,
            results: rowNodeTrans
          };
          this.eventService.dispatchEvent(event_2);
        }
        this.rowDataTransactionBatch = null;
        this.applyAsyncTransactionsTimeout = void 0;
      };
      ClientSideRowModel2.prototype.updateRowData = function(rowDataTran, rowNodeOrder) {
        this.valueCache.onDataChanged();
        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);
        var forceRowNodeOrder = typeof rowDataTran.addIndex === "number";
        this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);
        return rowNodeTran;
      };
      ClientSideRowModel2.prototype.createRowNodeOrder = function() {
        var suppressSortOrder = this.gridOptionsService.is("suppressMaintainUnsortedOrder");
        if (suppressSortOrder) {
          return;
        }
        var orderMap = {};
        if (this.rootNode && this.rootNode.allLeafChildren) {
          for (var index = 0; index < this.rootNode.allLeafChildren.length; index++) {
            var node = this.rootNode.allLeafChildren[index];
            orderMap[node.id] = index;
          }
        }
        return orderMap;
      };
      ClientSideRowModel2.prototype.commonUpdateRowData = function(rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {
        var animate = !this.gridOptionsService.is("suppressAnimationFrame");
        if (forceRowNodeOrder) {
          rowNodeOrder = this.createRowNodeOrder();
        }
        this.refreshModel({
          step: ClientSideRowModelSteps.EVERYTHING,
          rowNodeTransactions: rowNodeTrans,
          rowNodeOrder,
          keepRenderedRows: true,
          keepEditingRows: true,
          animate
        });
        this.filterManager.onNewRowsLoaded("rowDataUpdated");
        var event = {
          type: Events.EVENT_ROW_DATA_UPDATED
        };
        this.eventService.dispatchEvent(event);
      };
      ClientSideRowModel2.prototype.doRowsToDisplay = function() {
        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });
      };
      ClientSideRowModel2.prototype.onRowHeightChanged = function() {
        this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true, keepUndoRedoStack: true });
      };
      ClientSideRowModel2.prototype.onRowHeightChangedDebounced = function() {
        this.onRowHeightChanged_debounced();
      };
      ClientSideRowModel2.prototype.resetRowHeights = function() {
        var atLeastOne = this.resetRowHeightsForAllRowNodes();
        this.rootNode.setRowHeight(this.rootNode.rowHeight, true);
        if (this.rootNode.sibling) {
          this.rootNode.sibling.setRowHeight(this.rootNode.sibling.rowHeight, true);
        }
        if (atLeastOne) {
          this.onRowHeightChanged();
        }
      };
      ClientSideRowModel2.prototype.resetRowHeightsForAllRowNodes = function() {
        var atLeastOne = false;
        this.forEachNode(function(rowNode) {
          rowNode.setRowHeight(rowNode.rowHeight, true);
          var detailNode = rowNode.detailNode;
          if (detailNode) {
            detailNode.setRowHeight(detailNode.rowHeight, true);
          }
          if (rowNode.sibling) {
            rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);
          }
          atLeastOne = true;
        });
        return atLeastOne;
      };
      ClientSideRowModel2.prototype.onGridStylesChanges = function() {
        if (this.columnModel.isAutoRowHeightActive()) {
          return;
        }
        this.resetRowHeights();
      };
      __decorate$b([
        Autowired("columnModel")
      ], ClientSideRowModel2.prototype, "columnModel", void 0);
      __decorate$b([
        Autowired("selectionService")
      ], ClientSideRowModel2.prototype, "selectionService", void 0);
      __decorate$b([
        Autowired("filterManager")
      ], ClientSideRowModel2.prototype, "filterManager", void 0);
      __decorate$b([
        Autowired("valueCache")
      ], ClientSideRowModel2.prototype, "valueCache", void 0);
      __decorate$b([
        Autowired("beans")
      ], ClientSideRowModel2.prototype, "beans", void 0);
      __decorate$b([
        Autowired("filterStage")
      ], ClientSideRowModel2.prototype, "filterStage", void 0);
      __decorate$b([
        Autowired("sortStage")
      ], ClientSideRowModel2.prototype, "sortStage", void 0);
      __decorate$b([
        Autowired("flattenStage")
      ], ClientSideRowModel2.prototype, "flattenStage", void 0);
      __decorate$b([
        Optional("groupStage")
      ], ClientSideRowModel2.prototype, "groupStage", void 0);
      __decorate$b([
        Optional("aggregationStage")
      ], ClientSideRowModel2.prototype, "aggregationStage", void 0);
      __decorate$b([
        Optional("pivotStage")
      ], ClientSideRowModel2.prototype, "pivotStage", void 0);
      __decorate$b([
        Optional("filterAggregatesStage")
      ], ClientSideRowModel2.prototype, "filterAggregatesStage", void 0);
      __decorate$b([
        PostConstruct
      ], ClientSideRowModel2.prototype, "init", null);
      ClientSideRowModel2 = __decorate$b([
        Bean("rowModel")
      ], ClientSideRowModel2);
      return ClientSideRowModel2;
    }(BeanStub);
    __extends$b = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$a = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FilterStage = /** @class */
    function(_super) {
      __extends$b(FilterStage2, _super);
      function FilterStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FilterStage2.prototype.execute = function(params) {
        var changedPath = params.changedPath;
        this.filterService.filter(changedPath);
      };
      __decorate$a([
        Autowired("filterService")
      ], FilterStage2.prototype, "filterService", void 0);
      FilterStage2 = __decorate$a([
        Bean("filterStage")
      ], FilterStage2);
      return FilterStage2;
    }(BeanStub);
    __extends$a = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$9 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SortStage = /** @class */
    function(_super) {
      __extends$a(SortStage2, _super);
      function SortStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SortStage2.prototype.execute = function(params) {
        var _this = this;
        var sortOptions = this.sortController.getSortOptions();
        var sortActive = _.exists(sortOptions) && sortOptions.length > 0;
        var deltaSort = sortActive && _.exists(params.rowNodeTransactions) && this.gridOptionsService.is("deltaSort");
        var sortContainsGroupColumns = sortOptions.some(function(opt) {
          var isSortingCoupled = _this.gridOptionsService.isColumnsSortingCoupledToGroup();
          if (isSortingCoupled) {
            return opt.column.isPrimary() && opt.column.isRowGroupActive();
          }
          return !!opt.column.getColDef().showRowGroup;
        });
        this.sortService.sort(sortOptions, sortActive, deltaSort, params.rowNodeTransactions, params.changedPath, sortContainsGroupColumns);
      };
      __decorate$9([
        Autowired("sortService")
      ], SortStage2.prototype, "sortService", void 0);
      __decorate$9([
        Autowired("sortController")
      ], SortStage2.prototype, "sortController", void 0);
      __decorate$9([
        Autowired("columnModel")
      ], SortStage2.prototype, "columnModel", void 0);
      SortStage2 = __decorate$9([
        Bean("sortStage")
      ], SortStage2);
      return SortStage2;
    }(BeanStub);
    __extends$9 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$8 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FlattenStage = /** @class */
    function(_super) {
      __extends$9(FlattenStage2, _super);
      function FlattenStage2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FlattenStage2.prototype.execute = function(params) {
        var rootNode = params.rowNode;
        var result = [];
        var skipLeafNodes = this.columnModel.isPivotMode();
        var showRootNode = skipLeafNodes && rootNode.leafGroup;
        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
        var details = this.getFlattenDetails();
        this.recursivelyAddToRowsToDisplay(details, topList, result, skipLeafNodes, 0);
        var atLeastOneRowPresent = result.length > 0;
        var includeGroupTotalFooter = !showRootNode && atLeastOneRowPresent && details.groupIncludeTotalFooter;
        if (includeGroupTotalFooter) {
          rootNode.createFooter();
          this.addRowNodeToRowsToDisplay(details, rootNode.sibling, result, 0);
        }
        return result;
      };
      FlattenStage2.prototype.getFlattenDetails = function() {
        var groupRemoveSingleChildren = this.gridOptionsService.is("groupRemoveSingleChildren");
        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsService.is("groupRemoveLowestSingleChildren");
        return {
          groupRemoveLowestSingleChildren,
          groupRemoveSingleChildren,
          isGroupMultiAutoColumn: this.gridOptionsService.isGroupMultiAutoColumn(),
          hideOpenParents: this.gridOptionsService.is("groupHideOpenParents"),
          groupIncludeTotalFooter: this.gridOptionsService.is("groupIncludeTotalFooter"),
          getGroupIncludeFooter: this.gridOptionsService.getGroupIncludeFooter()
        };
      };
      FlattenStage2.prototype.recursivelyAddToRowsToDisplay = function(details, rowsToFlatten, result, skipLeafNodes, uiLevel) {
        if (_.missingOrEmpty(rowsToFlatten)) {
          return;
        }
        for (var i = 0; i < rowsToFlatten.length; i++) {
          var rowNode = rowsToFlatten[i];
          var isParent = rowNode.hasChildren();
          var isSkippedLeafNode = skipLeafNodes && !isParent;
          var isRemovedSingleChildrenGroup = details.groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;
          var isRemovedLowestSingleChildrenGroup = details.groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;
          var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;
          var isHiddenOpenParent = details.hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;
          var thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;
          if (thisRowShouldBeRendered) {
            this.addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel);
          }
          if (skipLeafNodes && rowNode.leafGroup) {
            continue;
          }
          if (isParent) {
            var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;
            if (rowNode.expanded || excludedParent) {
              var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;
              this.recursivelyAddToRowsToDisplay(details, rowNode.childrenAfterSort, result, skipLeafNodes, uiLevelForChildren);
              var doesRowShowFooter = details.getGroupIncludeFooter({ node: rowNode });
              if (doesRowShowFooter) {
                rowNode.createFooter();
                this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);
              } else {
                rowNode.destroyFooter();
              }
            }
          } else if (rowNode.master && rowNode.expanded) {
            var detailNode = this.createDetailNode(rowNode);
            this.addRowNodeToRowsToDisplay(details, detailNode, result, uiLevel);
          }
        }
      };
      FlattenStage2.prototype.addRowNodeToRowsToDisplay = function(details, rowNode, result, uiLevel) {
        result.push(rowNode);
        rowNode.setUiLevel(details.isGroupMultiAutoColumn ? 0 : uiLevel);
      };
      FlattenStage2.prototype.createDetailNode = function(masterNode) {
        if (_.exists(masterNode.detailNode)) {
          return masterNode.detailNode;
        }
        var detailNode = new RowNode(this.beans);
        detailNode.detail = true;
        detailNode.selectable = false;
        detailNode.parent = masterNode;
        if (_.exists(masterNode.id)) {
          detailNode.id = "detail_" + masterNode.id;
        }
        detailNode.data = masterNode.data;
        detailNode.level = masterNode.level + 1;
        masterNode.detailNode = detailNode;
        return detailNode;
      };
      __decorate$8([
        Autowired("columnModel")
      ], FlattenStage2.prototype, "columnModel", void 0);
      __decorate$8([
        Autowired("beans")
      ], FlattenStage2.prototype, "beans", void 0);
      FlattenStage2 = __decorate$8([
        Bean("flattenStage")
      ], FlattenStage2);
      return FlattenStage2;
    }(BeanStub);
    __extends$8 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$7 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    SortService = /** @class */
    function(_super) {
      __extends$8(SortService2, _super);
      function SortService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      SortService2.prototype.init = function() {
        this.postSortFunc = this.gridOptionsService.getCallback("postSortRows");
      };
      SortService2.prototype.sort = function(sortOptions, sortActive, useDeltaSort, rowNodeTransactions, changedPath, sortContainsGroupColumns) {
        var _this = this;
        var groupMaintainOrder = this.gridOptionsService.is("groupMaintainOrder");
        var groupColumnsPresent = this.columnModel.getAllGridColumns().some(function(c) {
          return c.isRowGroupActive();
        });
        var allDirtyNodes = {};
        if (useDeltaSort && rowNodeTransactions) {
          allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);
        }
        var isPivotMode = this.columnModel.isPivotMode();
        var callback = function(rowNode) {
          _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);
          var skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;
          var skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;
          if (skipSortingGroups) {
            var childrenToBeSorted = rowNode.childrenAfterAggFilter.slice(0);
            if (rowNode.childrenAfterSort) {
              var indexedOrders_1 = {};
              rowNode.childrenAfterSort.forEach(function(node, idx) {
                indexedOrders_1[node.id] = idx;
              });
              childrenToBeSorted.sort(function(row1, row2) {
                var _a, _b;
                return ((_a = indexedOrders_1[row1.id]) !== null && _a !== void 0 ? _a : 0) - ((_b = indexedOrders_1[row2.id]) !== null && _b !== void 0 ? _b : 0);
              });
            }
            rowNode.childrenAfterSort = childrenToBeSorted;
          } else if (!sortActive || skipSortingPivotLeafs) {
            rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter.slice(0);
          } else if (useDeltaSort) {
            rowNode.childrenAfterSort = _this.doDeltaSort(rowNode, allDirtyNodes, changedPath, sortOptions);
          } else {
            rowNode.childrenAfterSort = _this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter, sortOptions);
          }
          if (rowNode.sibling) {
            rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;
          }
          _this.updateChildIndexes(rowNode);
          if (_this.postSortFunc) {
            var params = { nodes: rowNode.childrenAfterSort };
            _this.postSortFunc(params);
          }
        };
        if (changedPath) {
          changedPath.forEachChangedNodeDepthFirst(callback);
        }
        this.updateGroupDataForHideOpenParents(changedPath);
      };
      SortService2.prototype.calculateDirtyNodes = function(rowNodeTransactions) {
        var dirtyNodes = {};
        var addNodesFunc = function(rowNodes) {
          if (rowNodes) {
            rowNodes.forEach(function(rowNode) {
              return dirtyNodes[rowNode.id] = true;
            });
          }
        };
        if (rowNodeTransactions) {
          rowNodeTransactions.forEach(function(tran) {
            addNodesFunc(tran.add);
            addNodesFunc(tran.update);
            addNodesFunc(tran.remove);
          });
        }
        return dirtyNodes;
      };
      SortService2.prototype.doDeltaSort = function(rowNode, allTouchedNodes, changedPath, sortOptions) {
        var _this = this;
        var unsortedRows = rowNode.childrenAfterAggFilter;
        var oldSortedRows = rowNode.childrenAfterSort;
        if (!oldSortedRows) {
          return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);
        }
        var untouchedRowsMap = {};
        var touchedRows = [];
        unsortedRows.forEach(function(row) {
          if (allTouchedNodes[row.id] || !changedPath.canSkip(row)) {
            touchedRows.push(row);
          } else {
            untouchedRowsMap[row.id] = true;
          }
        });
        var sortedUntouchedRows = oldSortedRows.filter(function(child) {
          return untouchedRowsMap[child.id];
        });
        var mapNodeToSortedNode = function(rowNode2, pos) {
          return { currentPos: pos, rowNode: rowNode2 };
        };
        var sortedChangedRows = touchedRows.map(mapNodeToSortedNode).sort(function(a, b) {
          return _this.rowNodeSorter.compareRowNodes(sortOptions, a, b);
        });
        return this.mergeSortedArrays(sortOptions, sortedChangedRows, sortedUntouchedRows.map(mapNodeToSortedNode)).map(function(_a) {
          var rowNode2 = _a.rowNode;
          return rowNode2;
        });
      };
      SortService2.prototype.mergeSortedArrays = function(sortOptions, arr1, arr2) {
        var res = [];
        var i = 0;
        var j = 0;
        while (i < arr1.length && j < arr2.length) {
          var compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);
          if (compareResult < 0) {
            res.push(arr1[i++]);
          } else {
            res.push(arr2[j++]);
          }
        }
        while (i < arr1.length) {
          res.push(arr1[i++]);
        }
        while (j < arr2.length) {
          res.push(arr2[j++]);
        }
        return res;
      };
      SortService2.prototype.updateChildIndexes = function(rowNode) {
        if (_.missing(rowNode.childrenAfterSort)) {
          return;
        }
        var listToSort = rowNode.childrenAfterSort;
        for (var i = 0; i < listToSort.length; i++) {
          var child = listToSort[i];
          var firstChild = i === 0;
          var lastChild = i === rowNode.childrenAfterSort.length - 1;
          child.setFirstChild(firstChild);
          child.setLastChild(lastChild);
          child.setChildIndex(i);
        }
      };
      SortService2.prototype.updateGroupDataForHideOpenParents = function(changedPath) {
        var _this = this;
        if (!this.gridOptionsService.is("groupHideOpenParents")) {
          return;
        }
        if (this.gridOptionsService.is("treeData")) {
          var msg_1 = "AG Grid: The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them (as opposed to Row Grouping, which only has Aggregated Values at the group level).";
          _.doOnce(function() {
            return console.warn(msg_1);
          }, "sortService.hideOpenParentsWithTreeData");
          return false;
        }
        var callback = function(rowNode) {
          _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);
          rowNode.childrenAfterSort.forEach(function(child) {
            if (child.hasChildren()) {
              callback(child);
            }
          });
        };
        if (changedPath) {
          changedPath.executeFromRootNode(function(rowNode) {
            return callback(rowNode);
          });
        }
      };
      SortService2.prototype.pullDownGroupDataForHideOpenParents = function(rowNodes, clearOperation) {
        var _this = this;
        if (!this.gridOptionsService.is("groupHideOpenParents") || _.missing(rowNodes)) {
          return;
        }
        rowNodes.forEach(function(childRowNode) {
          var groupDisplayCols = _this.columnModel.getGroupDisplayColumns();
          groupDisplayCols.forEach(function(groupDisplayCol) {
            var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
            if (typeof showRowGroup !== "string") {
              console.error("AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup");
              return;
            }
            var displayingGroupKey = showRowGroup;
            var rowGroupColumn = _this.columnModel.getPrimaryColumn(displayingGroupKey);
            var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
            if (thisRowNodeMatches) {
              return;
            }
            if (clearOperation) {
              childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);
            } else {
              var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
              if (parentToStealFrom) {
                childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
              }
            }
          });
        });
      };
      __decorate$7([
        Autowired("columnModel")
      ], SortService2.prototype, "columnModel", void 0);
      __decorate$7([
        Autowired("rowNodeSorter")
      ], SortService2.prototype, "rowNodeSorter", void 0);
      __decorate$7([
        PostConstruct
      ], SortService2.prototype, "init", null);
      SortService2 = __decorate$7([
        Bean("sortService")
      ], SortService2);
      return SortService2;
    }(BeanStub);
    __extends$7 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$6 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    FilterService = /** @class */
    function(_super) {
      __extends$7(FilterService2, _super);
      function FilterService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      FilterService2.prototype.filter = function(changedPath) {
        var filterActive = this.filterManager.isChildFilterPresent();
        this.filterNodes(filterActive, changedPath);
      };
      FilterService2.prototype.filterNodes = function(filterActive, changedPath) {
        var _this = this;
        var filterCallback = function(rowNode, includeChildNodes) {
          if (rowNode.hasChildren()) {
            if (filterActive && !includeChildNodes) {
              rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function(childNode) {
                var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;
                var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter({ rowNode: childNode });
                return passBecauseChildren || passBecauseDataPasses;
              });
            } else {
              rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
            }
          } else {
            rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;
          }
          if (rowNode.sibling) {
            rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;
          }
        };
        if (this.doingTreeDataFiltering()) {
          var treeDataDepthFirstFilter_1 = function(rowNode, alreadyFoundInParent) {
            if (rowNode.childrenAfterGroup) {
              for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
                var childNode = rowNode.childrenAfterGroup[i];
                var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter({ rowNode: childNode });
                if (childNode.childrenAfterGroup) {
                  treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);
                } else {
                  filterCallback(childNode, foundInParent);
                }
              }
            }
            filterCallback(rowNode, alreadyFoundInParent);
          };
          var treeDataFilterCallback = function(rowNode) {
            return treeDataDepthFirstFilter_1(rowNode, false);
          };
          changedPath.executeFromRootNode(treeDataFilterCallback);
        } else {
          var defaultFilterCallback = function(rowNode) {
            return filterCallback(rowNode, false);
          };
          changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);
        }
      };
      FilterService2.prototype.doingTreeDataFiltering = function() {
        return this.gridOptionsService.is("treeData") && !this.gridOptionsService.is("excludeChildrenWhenTreeDataFiltering");
      };
      __decorate$6([
        Autowired("filterManager")
      ], FilterService2.prototype, "filterManager", void 0);
      FilterService2 = __decorate$6([
        Bean("filterService")
      ], FilterService2);
      return FilterService2;
    }(BeanStub);
    __extends$6 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$5 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    ImmutableService = /** @class */
    function(_super) {
      __extends$6(ImmutableService2, _super);
      function ImmutableService2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      ImmutableService2.prototype.postConstruct = function() {
        if (this.rowModel.getType() === "clientSide") {
          this.clientSideRowModel = this.rowModel;
        }
      };
      ImmutableService2.prototype.isActive = function() {
        var getRowIdProvided = this.gridOptionsService.exists("getRowId");
        var resetRowDataOnUpdate = this.gridOptionsService.is("resetRowDataOnUpdate");
        if (resetRowDataOnUpdate) {
          return false;
        }
        return getRowIdProvided;
      };
      ImmutableService2.prototype.setRowData = function(rowData) {
        var transactionAndMap = this.createTransactionForRowData(rowData);
        if (!transactionAndMap) {
          return;
        }
        var _a = __read(transactionAndMap, 2), transaction = _a[0], orderIdMap = _a[1];
        this.clientSideRowModel.updateRowData(transaction, orderIdMap);
      };
      ImmutableService2.prototype.createTransactionForRowData = function(rowData) {
        if (_.missing(this.clientSideRowModel)) {
          console.error("AG Grid: ImmutableService only works with ClientSideRowModel");
          return;
        }
        var getRowIdFunc = this.gridOptionsService.getCallback("getRowId");
        if (getRowIdFunc == null) {
          console.error("AG Grid: ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!");
          return;
        }
        var transaction = {
          remove: [],
          update: [],
          add: []
        };
        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();
        var suppressSortOrder = this.gridOptionsService.is("suppressMaintainUnsortedOrder");
        var orderMap = suppressSortOrder ? void 0 : {};
        if (_.exists(rowData)) {
          rowData.forEach(function(data, index) {
            var id = getRowIdFunc({ data, level: 0 });
            var existingNode = existingNodesMap[id];
            if (orderMap) {
              orderMap[id] = index;
            }
            if (existingNode) {
              var dataHasChanged = existingNode.data !== data;
              if (dataHasChanged) {
                transaction.update.push(data);
              }
              existingNodesMap[id] = void 0;
            } else {
              transaction.add.push(data);
            }
          });
        }
        _.iterateObject(existingNodesMap, function(id, rowNode) {
          if (rowNode) {
            transaction.remove.push(rowNode.data);
          }
        });
        return [transaction, orderMap];
      };
      __decorate$5([
        Autowired("rowModel")
      ], ImmutableService2.prototype, "rowModel", void 0);
      __decorate$5([
        Autowired("rowRenderer")
      ], ImmutableService2.prototype, "rowRenderer", void 0);
      __decorate$5([
        PostConstruct
      ], ImmutableService2.prototype, "postConstruct", null);
      ImmutableService2 = __decorate$5([
        Bean("immutableService")
      ], ImmutableService2);
      return ImmutableService2;
    }(BeanStub);
    VERSION$2 = "30.2.1";
    ClientSideRowModelModule = {
      version: VERSION$2,
      moduleName: ModuleNames.ClientSideRowModelModule,
      rowModel: "clientSide",
      beans: [ClientSideRowModel, FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService]
    };
    __extends$5 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$4 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    InfiniteBlock = /** @class */
    function(_super) {
      __extends$5(InfiniteBlock2, _super);
      function InfiniteBlock2(id, parentCache, params) {
        var _this = _super.call(this, id) || this;
        _this.parentCache = parentCache;
        _this.params = params;
        _this.startRow = id * params.blockSize;
        _this.endRow = _this.startRow + params.blockSize;
        return _this;
      }
      InfiniteBlock2.prototype.postConstruct = function() {
        this.createRowNodes();
      };
      InfiniteBlock2.prototype.getBlockStateJson = function() {
        return {
          id: "" + this.getId(),
          state: {
            blockNumber: this.getId(),
            startRow: this.getStartRow(),
            endRow: this.getEndRow(),
            pageStatus: this.getState()
          }
        };
      };
      InfiniteBlock2.prototype.setDataAndId = function(rowNode, data, index) {
        if (_.exists(data)) {
          rowNode.setDataAndId(data, index.toString());
        } else {
          rowNode.setDataAndId(void 0, void 0);
        }
      };
      InfiniteBlock2.prototype.loadFromDatasource = function() {
        var _this = this;
        var params = this.createLoadParams();
        if (_.missing(this.params.datasource.getRows)) {
          console.warn("AG Grid: datasource is missing getRows method");
          return;
        }
        window.setTimeout(function() {
          _this.params.datasource.getRows(params);
        }, 0);
      };
      InfiniteBlock2.prototype.processServerFail = function() {
      };
      InfiniteBlock2.prototype.createLoadParams = function() {
        var params = {
          startRow: this.getStartRow(),
          endRow: this.getEndRow(),
          successCallback: this.pageLoaded.bind(this, this.getVersion()),
          failCallback: this.pageLoadFailed.bind(this, this.getVersion()),
          sortModel: this.params.sortModel,
          filterModel: this.params.filterModel,
          context: this.gridOptionsService.context
        };
        return params;
      };
      InfiniteBlock2.prototype.forEachNode = function(callback, sequence, rowCount) {
        var _this = this;
        this.rowNodes.forEach(function(rowNode, index) {
          var rowIndex = _this.startRow + index;
          if (rowIndex < rowCount) {
            callback(rowNode, sequence.next());
          }
        });
      };
      InfiniteBlock2.prototype.getLastAccessed = function() {
        return this.lastAccessed;
      };
      InfiniteBlock2.prototype.getRow = function(rowIndex, dontTouchLastAccessed) {
        if (dontTouchLastAccessed === void 0) {
          dontTouchLastAccessed = false;
        }
        if (!dontTouchLastAccessed) {
          this.lastAccessed = this.params.lastAccessedSequence.next();
        }
        var localIndex = rowIndex - this.startRow;
        return this.rowNodes[localIndex];
      };
      InfiniteBlock2.prototype.getStartRow = function() {
        return this.startRow;
      };
      InfiniteBlock2.prototype.getEndRow = function() {
        return this.endRow;
      };
      InfiniteBlock2.prototype.createRowNodes = function() {
        this.rowNodes = [];
        for (var i = 0; i < this.params.blockSize; i++) {
          var rowIndex = this.startRow + i;
          var rowNode = new RowNode(this.beans);
          rowNode.setRowHeight(this.params.rowHeight);
          rowNode.uiLevel = 0;
          rowNode.setRowIndex(rowIndex);
          rowNode.setRowTop(this.params.rowHeight * rowIndex);
          this.rowNodes.push(rowNode);
        }
      };
      InfiniteBlock2.prototype.processServerResult = function(params) {
        var _this = this;
        this.rowNodes.forEach(function(rowNode, index) {
          var data = params.rowData ? params.rowData[index] : void 0;
          if (!rowNode.id && rowNode.alreadyRendered && data) {
            _this.rowNodes[index] = new RowNode(_this.beans);
            _this.rowNodes[index].setRowIndex(rowNode.rowIndex);
            _this.rowNodes[index].setRowTop(rowNode.rowTop);
            _this.rowNodes[index].setRowHeight(rowNode.rowHeight);
            rowNode.clearRowTopAndRowIndex();
          }
          _this.setDataAndId(_this.rowNodes[index], data, _this.startRow + index);
        });
        var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : void 0;
        this.parentCache.pageLoaded(this, finalRowCount);
      };
      InfiniteBlock2.prototype.destroyRowNodes = function() {
        this.rowNodes.forEach(function(rowNode) {
          rowNode.clearRowTopAndRowIndex();
        });
      };
      __decorate$4([
        Autowired("beans")
      ], InfiniteBlock2.prototype, "beans", void 0);
      __decorate$4([
        PostConstruct
      ], InfiniteBlock2.prototype, "postConstruct", null);
      __decorate$4([
        PreDestroy
      ], InfiniteBlock2.prototype, "destroyRowNodes", null);
      return InfiniteBlock2;
    }(RowNodeBlock);
    __extends$4 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$3 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    InfiniteCache = /** @class */
    function(_super) {
      __extends$4(InfiniteCache2, _super);
      function InfiniteCache2(params) {
        var _this = _super.call(this) || this;
        _this.lastRowIndexKnown = false;
        _this.blocks = {};
        _this.blockCount = 0;
        _this.rowCount = params.initialRowCount;
        _this.params = params;
        return _this;
      }
      InfiniteCache2.prototype.setBeans = function(loggerFactory) {
        this.logger = loggerFactory.create("InfiniteCache");
      };
      InfiniteCache2.prototype.getRow = function(rowIndex, dontCreatePage) {
        if (dontCreatePage === void 0) {
          dontCreatePage = false;
        }
        var blockId = Math.floor(rowIndex / this.params.blockSize);
        var block = this.blocks[blockId];
        if (!block) {
          if (dontCreatePage) {
            return void 0;
          }
          block = this.createBlock(blockId);
        }
        return block.getRow(rowIndex);
      };
      InfiniteCache2.prototype.createBlock = function(blockNumber) {
        var newBlock = this.createBean(new InfiniteBlock(blockNumber, this, this.params));
        this.blocks[newBlock.getId()] = newBlock;
        this.blockCount++;
        this.purgeBlocksIfNeeded(newBlock);
        this.params.rowNodeBlockLoader.addBlock(newBlock);
        return newBlock;
      };
      InfiniteCache2.prototype.refreshCache = function() {
        var nothingToRefresh = this.blockCount == 0;
        if (nothingToRefresh) {
          this.purgeCache();
          return;
        }
        this.getBlocksInOrder().forEach(function(block) {
          return block.setStateWaitingToLoad();
        });
        this.params.rowNodeBlockLoader.checkBlockToLoad();
      };
      InfiniteCache2.prototype.destroyAllBlocks = function() {
        var _this = this;
        this.getBlocksInOrder().forEach(function(block) {
          return _this.destroyBlock(block);
        });
      };
      InfiniteCache2.prototype.getRowCount = function() {
        return this.rowCount;
      };
      InfiniteCache2.prototype.isLastRowIndexKnown = function() {
        return this.lastRowIndexKnown;
      };
      InfiniteCache2.prototype.pageLoaded = function(block, lastRow) {
        if (!this.isAlive()) {
          return;
        }
        this.logger.log("onPageLoaded: page = " + block.getId() + ", lastRow = " + lastRow);
        this.checkRowCount(block, lastRow);
        this.onCacheUpdated();
      };
      InfiniteCache2.prototype.purgeBlocksIfNeeded = function(blockToExclude) {
        var _this = this;
        var blocksForPurging = this.getBlocksInOrder().filter(function(b) {
          return b != blockToExclude;
        });
        var lastAccessedComparator = function(a, b) {
          return b.getLastAccessed() - a.getLastAccessed();
        };
        blocksForPurging.sort(lastAccessedComparator);
        var maxBlocksProvided = this.params.maxBlocksInCache > 0;
        var blocksToKeep = maxBlocksProvided ? this.params.maxBlocksInCache - 1 : null;
        var emptyBlocksToKeep = InfiniteCache2.MAX_EMPTY_BLOCKS_TO_KEEP - 1;
        blocksForPurging.forEach(function(block, index) {
          var purgeBecauseBlockEmpty = block.getState() === InfiniteBlock.STATE_WAITING_TO_LOAD && index >= emptyBlocksToKeep;
          var purgeBecauseCacheFull = maxBlocksProvided ? index >= blocksToKeep : false;
          if (purgeBecauseBlockEmpty || purgeBecauseCacheFull) {
            if (_this.isBlockCurrentlyDisplayed(block)) {
              return;
            }
            if (_this.isBlockFocused(block)) {
              return;
            }
            _this.removeBlockFromCache(block);
          }
        });
      };
      InfiniteCache2.prototype.isBlockFocused = function(block) {
        var focusedCell = this.focusService.getFocusCellToUseAfterRefresh();
        if (!focusedCell) {
          return false;
        }
        if (focusedCell.rowPinned != null) {
          return false;
        }
        var blockIndexStart = block.getStartRow();
        var blockIndexEnd = block.getEndRow();
        var hasFocus = focusedCell.rowIndex >= blockIndexStart && focusedCell.rowIndex < blockIndexEnd;
        return hasFocus;
      };
      InfiniteCache2.prototype.isBlockCurrentlyDisplayed = function(block) {
        var startIndex = block.getStartRow();
        var endIndex = block.getEndRow() - 1;
        return this.rowRenderer.isRangeInRenderedViewport(startIndex, endIndex);
      };
      InfiniteCache2.prototype.removeBlockFromCache = function(blockToRemove) {
        if (!blockToRemove) {
          return;
        }
        this.destroyBlock(blockToRemove);
      };
      InfiniteCache2.prototype.checkRowCount = function(block, lastRow) {
        if (typeof lastRow === "number" && lastRow >= 0) {
          this.rowCount = lastRow;
          this.lastRowIndexKnown = true;
        } else if (!this.lastRowIndexKnown) {
          var lastRowIndex = (block.getId() + 1) * this.params.blockSize;
          var lastRowIndexPlusOverflow = lastRowIndex + this.params.overflowSize;
          if (this.rowCount < lastRowIndexPlusOverflow) {
            this.rowCount = lastRowIndexPlusOverflow;
          }
        }
      };
      InfiniteCache2.prototype.setRowCount = function(rowCount, lastRowIndexKnown) {
        this.rowCount = rowCount;
        if (_.exists(lastRowIndexKnown)) {
          this.lastRowIndexKnown = lastRowIndexKnown;
        }
        if (!this.lastRowIndexKnown) {
          if (this.rowCount % this.params.blockSize === 0) {
            this.rowCount++;
          }
        }
        this.onCacheUpdated();
      };
      InfiniteCache2.prototype.forEachNodeDeep = function(callback) {
        var _this = this;
        var sequence = new NumberSequence();
        this.getBlocksInOrder().forEach(function(block) {
          return block.forEachNode(callback, sequence, _this.rowCount);
        });
      };
      InfiniteCache2.prototype.getBlocksInOrder = function() {
        var blockComparator = function(a, b) {
          return a.getId() - b.getId();
        };
        var blocks = _.getAllValuesInObject(this.blocks).sort(blockComparator);
        return blocks;
      };
      InfiniteCache2.prototype.destroyBlock = function(block) {
        delete this.blocks[block.getId()];
        this.destroyBean(block);
        this.blockCount--;
        this.params.rowNodeBlockLoader.removeBlock(block);
      };
      InfiniteCache2.prototype.onCacheUpdated = function() {
        if (this.isAlive()) {
          this.destroyAllBlocksPastVirtualRowCount();
          var event_1 = {
            type: Events.EVENT_STORE_UPDATED
          };
          this.eventService.dispatchEvent(event_1);
        }
      };
      InfiniteCache2.prototype.destroyAllBlocksPastVirtualRowCount = function() {
        var _this = this;
        var blocksToDestroy = [];
        this.getBlocksInOrder().forEach(function(block) {
          var startRow = block.getId() * _this.params.blockSize;
          if (startRow >= _this.rowCount) {
            blocksToDestroy.push(block);
          }
        });
        if (blocksToDestroy.length > 0) {
          blocksToDestroy.forEach(function(block) {
            return _this.destroyBlock(block);
          });
        }
      };
      InfiniteCache2.prototype.purgeCache = function() {
        var _this = this;
        this.getBlocksInOrder().forEach(function(block) {
          return _this.removeBlockFromCache(block);
        });
        this.lastRowIndexKnown = false;
        if (this.rowCount === 0) {
          this.rowCount = this.params.initialRowCount;
        }
        this.onCacheUpdated();
      };
      InfiniteCache2.prototype.getRowNodesInRange = function(firstInRange, lastInRange) {
        var _this = this;
        var result = [];
        var lastBlockId = -1;
        var inActiveRange = false;
        var numberSequence = new NumberSequence();
        if (_.missing(firstInRange)) {
          inActiveRange = true;
        }
        var foundGapInSelection = false;
        this.getBlocksInOrder().forEach(function(block) {
          if (foundGapInSelection) {
            return;
          }
          if (inActiveRange && lastBlockId + 1 !== block.getId()) {
            foundGapInSelection = true;
            return;
          }
          lastBlockId = block.getId();
          block.forEachNode(function(rowNode) {
            var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
            if (inActiveRange || hitFirstOrLast) {
              result.push(rowNode);
            }
            if (hitFirstOrLast) {
              inActiveRange = !inActiveRange;
            }
          }, numberSequence, _this.rowCount);
        });
        var invalidRange = foundGapInSelection || inActiveRange;
        return invalidRange ? [] : result;
      };
      InfiniteCache2.MAX_EMPTY_BLOCKS_TO_KEEP = 2;
      __decorate$3([
        Autowired("rowRenderer")
      ], InfiniteCache2.prototype, "rowRenderer", void 0);
      __decorate$3([
        Autowired("focusService")
      ], InfiniteCache2.prototype, "focusService", void 0);
      __decorate$3([
        __param(0, Qualifier("loggerFactory"))
      ], InfiniteCache2.prototype, "setBeans", null);
      __decorate$3([
        PreDestroy
      ], InfiniteCache2.prototype, "destroyAllBlocks", null);
      return InfiniteCache2;
    }(BeanStub);
    __extends$3 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$2 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    InfiniteRowModel = /** @class */
    function(_super) {
      __extends$3(InfiniteRowModel2, _super);
      function InfiniteRowModel2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      InfiniteRowModel2.prototype.getRowBounds = function(index) {
        return {
          rowHeight: this.rowHeight,
          rowTop: this.rowHeight * index
        };
      };
      InfiniteRowModel2.prototype.ensureRowHeightsValid = function(startPixel, endPixel, startLimitIndex, endLimitIndex) {
        return false;
      };
      InfiniteRowModel2.prototype.init = function() {
        var _this = this;
        if (!this.gridOptionsService.isRowModelType("infinite")) {
          return;
        }
        this.rowHeight = this.gridOptionsService.getRowHeightAsNumber();
        this.addEventListeners();
        this.addDestroyFunc(function() {
          return _this.destroyCache();
        });
        this.verifyProps();
      };
      InfiniteRowModel2.prototype.verifyProps = function() {
        if (this.gridOptionsService.exists("initialGroupOrderComparator")) {
          var message_1 = "AG Grid: initialGroupOrderComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.";
          _.doOnce(function() {
            return console.warn(message_1);
          }, "IRM.InitialGroupOrderComparator");
        }
      };
      InfiniteRowModel2.prototype.start = function() {
        this.setDatasource(this.gridOptionsService.get("datasource"));
      };
      InfiniteRowModel2.prototype.destroyDatasource = function() {
        if (this.datasource) {
          this.getContext().destroyBean(this.datasource);
          this.rowRenderer.datasourceChanged();
          this.datasource = null;
        }
      };
      InfiniteRowModel2.prototype.addEventListeners = function() {
        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));
        this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));
      };
      InfiniteRowModel2.prototype.onFilterChanged = function() {
        this.reset();
      };
      InfiniteRowModel2.prototype.onSortChanged = function() {
        this.reset();
      };
      InfiniteRowModel2.prototype.onColumnEverything = function() {
        var resetRequired;
        if (this.cacheParams) {
          resetRequired = this.isSortModelDifferent();
        } else {
          resetRequired = true;
        }
        if (resetRequired) {
          this.reset();
        }
      };
      InfiniteRowModel2.prototype.isSortModelDifferent = function() {
        return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());
      };
      InfiniteRowModel2.prototype.getType = function() {
        return "infinite";
      };
      InfiniteRowModel2.prototype.setDatasource = function(datasource) {
        this.destroyDatasource();
        this.datasource = datasource;
        if (datasource) {
          this.reset();
        }
      };
      InfiniteRowModel2.prototype.isEmpty = function() {
        return !this.infiniteCache;
      };
      InfiniteRowModel2.prototype.isRowsToRender = function() {
        return !!this.infiniteCache;
      };
      InfiniteRowModel2.prototype.getNodesInRangeForSelection = function(firstInRange, lastInRange) {
        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];
      };
      InfiniteRowModel2.prototype.reset = function() {
        if (!this.datasource) {
          return;
        }
        var getRowIdFunc = this.gridOptionsService.getCallback("getRowId");
        var userGeneratingIds = getRowIdFunc != null;
        if (!userGeneratingIds) {
          this.selectionService.reset();
        }
        this.resetCache();
        var event = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(event);
      };
      InfiniteRowModel2.prototype.createModelUpdatedEvent = function() {
        return {
          type: Events.EVENT_MODEL_UPDATED,
          // not sure if these should all be false - noticed if after implementing,
          // maybe they should be true?
          newPage: false,
          newData: false,
          keepRenderedRows: true,
          animate: false
        };
      };
      InfiniteRowModel2.prototype.resetCache = function() {
        this.destroyCache();
        this.cacheParams = {
          // the user provided datasource
          datasource: this.datasource,
          // sort and filter model
          filterModel: this.filterManager.getFilterModel(),
          sortModel: this.sortController.getSortModel(),
          rowNodeBlockLoader: this.rowNodeBlockLoader,
          // properties - this way we take a snapshot of them, so if user changes any, they will be
          // used next time we create a new cache, which is generally after a filter or sort change,
          // or a new datasource is set
          initialRowCount: this.defaultIfInvalid(this.gridOptionsService.getNum("infiniteInitialRowCount"), 1),
          maxBlocksInCache: this.gridOptionsService.getNum("maxBlocksInCache"),
          rowHeight: this.gridOptionsService.getRowHeightAsNumber(),
          // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
          // the current page and request first row of next page
          overflowSize: this.defaultIfInvalid(this.gridOptionsService.getNum("cacheOverflowSize"), 1),
          // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
          // server for one page at a time. so the default if not specified is 100.
          blockSize: this.defaultIfInvalid(this.gridOptionsService.getNum("cacheBlockSize"), 100),
          // the cache could create this, however it is also used by the pages, so handy to create it
          // here as the settings are also passed to the pages
          lastAccessedSequence: new NumberSequence()
        };
        this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));
      };
      InfiniteRowModel2.prototype.defaultIfInvalid = function(value, defaultValue) {
        return value > 0 ? value : defaultValue;
      };
      InfiniteRowModel2.prototype.destroyCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache = this.destroyBean(this.infiniteCache);
        }
      };
      InfiniteRowModel2.prototype.onCacheUpdated = function() {
        var event = this.createModelUpdatedEvent();
        this.eventService.dispatchEvent(event);
      };
      InfiniteRowModel2.prototype.getRow = function(rowIndex) {
        if (!this.infiniteCache) {
          return void 0;
        }
        if (rowIndex >= this.infiniteCache.getRowCount()) {
          return void 0;
        }
        return this.infiniteCache.getRow(rowIndex);
      };
      InfiniteRowModel2.prototype.getRowNode = function(id) {
        var result;
        this.forEachNode(function(rowNode) {
          if (rowNode.id === id) {
            result = rowNode;
          }
        });
        return result;
      };
      InfiniteRowModel2.prototype.forEachNode = function(callback) {
        if (this.infiniteCache) {
          this.infiniteCache.forEachNodeDeep(callback);
        }
      };
      InfiniteRowModel2.prototype.getTopLevelRowCount = function() {
        return this.getRowCount();
      };
      InfiniteRowModel2.prototype.getTopLevelRowDisplayedIndex = function(topLevelIndex) {
        return topLevelIndex;
      };
      InfiniteRowModel2.prototype.getRowIndexAtPixel = function(pixel) {
        if (this.rowHeight !== 0) {
          var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
          var lastRowIndex = this.getRowCount() - 1;
          if (rowIndexForPixel > lastRowIndex) {
            return lastRowIndex;
          }
          return rowIndexForPixel;
        }
        return 0;
      };
      InfiniteRowModel2.prototype.getRowCount = function() {
        return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;
      };
      InfiniteRowModel2.prototype.isRowPresent = function(rowNode) {
        var foundRowNode = this.getRowNode(rowNode.id);
        return !!foundRowNode;
      };
      InfiniteRowModel2.prototype.refreshCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache.refreshCache();
        }
      };
      InfiniteRowModel2.prototype.purgeCache = function() {
        if (this.infiniteCache) {
          this.infiniteCache.purgeCache();
        }
      };
      InfiniteRowModel2.prototype.isLastRowIndexKnown = function() {
        if (this.infiniteCache) {
          return this.infiniteCache.isLastRowIndexKnown();
        }
        return false;
      };
      InfiniteRowModel2.prototype.setRowCount = function(rowCount, lastRowIndexKnown) {
        if (this.infiniteCache) {
          this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);
        }
      };
      __decorate$2([
        Autowired("filterManager")
      ], InfiniteRowModel2.prototype, "filterManager", void 0);
      __decorate$2([
        Autowired("sortController")
      ], InfiniteRowModel2.prototype, "sortController", void 0);
      __decorate$2([
        Autowired("selectionService")
      ], InfiniteRowModel2.prototype, "selectionService", void 0);
      __decorate$2([
        Autowired("rowRenderer")
      ], InfiniteRowModel2.prototype, "rowRenderer", void 0);
      __decorate$2([
        Autowired("rowNodeBlockLoader")
      ], InfiniteRowModel2.prototype, "rowNodeBlockLoader", void 0);
      __decorate$2([
        PostConstruct
      ], InfiniteRowModel2.prototype, "init", null);
      __decorate$2([
        PreDestroy
      ], InfiniteRowModel2.prototype, "destroyDatasource", null);
      InfiniteRowModel2 = __decorate$2([
        Bean("rowModel")
      ], InfiniteRowModel2);
      return InfiniteRowModel2;
    }(BeanStub);
    VERSION$1 = "30.2.1";
    InfiniteRowModelModule = {
      version: VERSION$1,
      moduleName: ModuleNames.InfiniteRowModelModule,
      rowModel: "infinite",
      beans: [InfiniteRowModel]
    };
    BaseCreator = /** @class */
    function() {
      function BaseCreator2() {
      }
      BaseCreator2.prototype.setBeans = function(beans) {
        this.beans = beans;
      };
      BaseCreator2.prototype.getFileName = function(fileName) {
        var extension = this.getDefaultFileExtension();
        if (fileName == null || !fileName.length) {
          fileName = this.getDefaultFileName();
        }
        return fileName.indexOf(".") === -1 ? fileName + "." + extension : fileName;
      };
      BaseCreator2.prototype.getData = function(params) {
        var serializingSession = this.createSerializingSession(params);
        var data = this.beans.gridSerializer.serialize(serializingSession, params);
        return data;
      };
      return BaseCreator2;
    }();
    BaseGridSerializingSession = /** @class */
    function() {
      function BaseGridSerializingSession2(config) {
        this.groupColumns = [];
        var columnModel = config.columnModel, valueService = config.valueService, gridOptionsService = config.gridOptionsService, valueFormatterService = config.valueFormatterService, valueParserService = config.valueParserService, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;
        this.columnModel = columnModel;
        this.valueService = valueService;
        this.gridOptionsService = gridOptionsService;
        this.valueFormatterService = valueFormatterService;
        this.valueParserService = valueParserService;
        this.processCellCallback = processCellCallback;
        this.processHeaderCallback = processHeaderCallback;
        this.processGroupHeaderCallback = processGroupHeaderCallback;
        this.processRowGroupCallback = processRowGroupCallback;
      }
      BaseGridSerializingSession2.prototype.prepare = function(columnsToExport) {
        this.groupColumns = columnsToExport.filter(function(col) {
          return !!col.getColDef().showRowGroup;
        });
      };
      BaseGridSerializingSession2.prototype.extractHeaderValue = function(column) {
        var value = this.getHeaderName(this.processHeaderCallback, column);
        return value != null ? value : "";
      };
      BaseGridSerializingSession2.prototype.extractRowCellValue = function(column, index, accumulatedRowIndex, type, node) {
        var hideOpenParents = this.gridOptionsService.is("groupHideOpenParents");
        var value = (!hideOpenParents || node.footer) && this.shouldRenderGroupSummaryCell(node, column, index) ? this.createValueForGroupNode(node) : this.valueService.getValue(column, node);
        var processedValue = this.processCell({
          accumulatedRowIndex,
          rowNode: node,
          column,
          value,
          processCellCallback: this.processCellCallback,
          type
        });
        return processedValue;
      };
      BaseGridSerializingSession2.prototype.shouldRenderGroupSummaryCell = function(node, column, currentColumnIndex) {
        var _a;
        var isGroupNode = node && node.group;
        if (!isGroupNode) {
          return false;
        }
        var currentColumnGroupIndex = this.groupColumns.indexOf(column);
        if (currentColumnGroupIndex !== -1) {
          if (((_a = node.groupData) === null || _a === void 0 ? void 0 : _a[column.getId()]) != null) {
            return true;
          }
          if (this.gridOptionsService.isRowModelType("serverSide") && node.group) {
            return true;
          }
          if (node.footer && node.level === -1) {
            var colDef = column.getColDef();
            var isFullWidth = colDef == null || colDef.showRowGroup === true;
            return isFullWidth || colDef.showRowGroup === this.columnModel.getRowGroupColumns()[0].getId();
          }
        }
        var isGroupUseEntireRow = this.gridOptionsService.isGroupUseEntireRow(this.columnModel.isPivotMode());
        return currentColumnIndex === 0 && isGroupUseEntireRow;
      };
      BaseGridSerializingSession2.prototype.getHeaderName = function(callback, column) {
        if (callback) {
          return callback({
            column,
            api: this.gridOptionsService.api,
            columnApi: this.gridOptionsService.columnApi,
            context: this.gridOptionsService.context
          });
        }
        return this.columnModel.getDisplayNameForColumn(column, "csv", true);
      };
      BaseGridSerializingSession2.prototype.createValueForGroupNode = function(node) {
        if (this.processRowGroupCallback) {
          return this.processRowGroupCallback({
            node,
            api: this.gridOptionsService.api,
            columnApi: this.gridOptionsService.columnApi,
            context: this.gridOptionsService.context
          });
        }
        var isFooter = node.footer;
        var keys2 = [node.key];
        if (!this.gridOptionsService.isGroupMultiAutoColumn()) {
          while (node.parent) {
            node = node.parent;
            keys2.push(node.key);
          }
        }
        var groupValue = keys2.reverse().join(" -> ");
        return isFooter ? "Total " + groupValue : groupValue;
      };
      BaseGridSerializingSession2.prototype.processCell = function(params) {
        var _this = this;
        var _a;
        var accumulatedRowIndex = params.accumulatedRowIndex, rowNode = params.rowNode, column = params.column, value = params.value, processCellCallback = params.processCellCallback, type = params.type;
        if (processCellCallback) {
          return {
            value: (_a = processCellCallback({
              accumulatedRowIndex,
              column,
              node: rowNode,
              value,
              api: this.gridOptionsService.api,
              columnApi: this.gridOptionsService.columnApi,
              context: this.gridOptionsService.context,
              type,
              parseValue: function(valueToParse) {
                return _this.valueParserService.parseValue(column, rowNode, valueToParse, _this.valueService.getValue(column, rowNode));
              },
              formatValue: function(valueToFormat) {
                var _a2;
                return (_a2 = _this.valueFormatterService.formatValue(column, rowNode, valueToFormat)) !== null && _a2 !== void 0 ? _a2 : valueToFormat;
              }
            })) !== null && _a !== void 0 ? _a : ""
          };
        }
        if (column.getColDef().useValueFormatterForExport) {
          return {
            value: value !== null && value !== void 0 ? value : "",
            valueFormatted: this.valueFormatterService.formatValue(column, rowNode, value)
          };
        }
        return { value: value !== null && value !== void 0 ? value : "" };
      };
      return BaseGridSerializingSession2;
    }();
    Downloader = /** @class */
    function() {
      function Downloader2() {
      }
      Downloader2.download = function(fileName, content) {
        var win = document.defaultView || window;
        if (!win) {
          console.warn("AG Grid: There is no `window` associated with the current `document`");
          return;
        }
        var element = document.createElement("a");
        var url = win.URL.createObjectURL(content);
        element.setAttribute("href", url);
        element.setAttribute("download", fileName);
        element.style.display = "none";
        document.body.appendChild(element);
        element.dispatchEvent(new MouseEvent("click", {
          bubbles: false,
          cancelable: true,
          view: win
        }));
        document.body.removeChild(element);
        win.setTimeout(function() {
          win.URL.revokeObjectURL(url);
        }, 0);
      };
      return Downloader2;
    }();
    __extends$2 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    LINE_SEPARATOR$1 = "\r\n";
    CsvSerializingSession = /** @class */
    function(_super) {
      __extends$2(CsvSerializingSession2, _super);
      function CsvSerializingSession2(config) {
        var _this = _super.call(this, config) || this;
        _this.isFirstLine = true;
        _this.result = "";
        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;
        _this.suppressQuotes = suppressQuotes;
        _this.columnSeparator = columnSeparator;
        return _this;
      }
      CsvSerializingSession2.prototype.addCustomContent = function(content) {
        var _this = this;
        if (!content) {
          return;
        }
        if (typeof content === "string") {
          if (!/^\s*\n/.test(content)) {
            this.beginNewLine();
          }
          content = content.replace(/\r?\n/g, LINE_SEPARATOR$1);
          this.result += content;
        } else {
          content.forEach(function(row) {
            _this.beginNewLine();
            row.forEach(function(cell, index) {
              if (index !== 0) {
                _this.result += _this.columnSeparator;
              }
              _this.result += _this.putInQuotes(cell.data.value || "");
              if (cell.mergeAcross) {
                _this.appendEmptyCells(cell.mergeAcross);
              }
            });
          });
        }
      };
      CsvSerializingSession2.prototype.onNewHeaderGroupingRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewHeaderGroupingRowColumn = function(columnGroup, header, index, span) {
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        this.result += this.putInQuotes(header);
        this.appendEmptyCells(span);
      };
      CsvSerializingSession2.prototype.appendEmptyCells = function(count) {
        for (var i = 1; i <= count; i++) {
          this.result += this.columnSeparator + this.putInQuotes("");
        }
      };
      CsvSerializingSession2.prototype.onNewHeaderRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewHeaderRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewHeaderRowColumn = function(column, index) {
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        this.result += this.putInQuotes(this.extractHeaderValue(column));
      };
      CsvSerializingSession2.prototype.onNewBodyRow = function() {
        this.beginNewLine();
        return {
          onColumn: this.onNewBodyRowColumn.bind(this)
        };
      };
      CsvSerializingSession2.prototype.onNewBodyRowColumn = function(column, index, node) {
        var _a;
        if (index != 0) {
          this.result += this.columnSeparator;
        }
        var rowCellValue = this.extractRowCellValue(column, index, index, "csv", node);
        this.result += this.putInQuotes((_a = rowCellValue.valueFormatted) !== null && _a !== void 0 ? _a : rowCellValue.value);
      };
      CsvSerializingSession2.prototype.putInQuotes = function(value) {
        if (this.suppressQuotes) {
          return value;
        }
        if (value === null || value === void 0) {
          return '""';
        }
        var stringValue;
        if (typeof value === "string") {
          stringValue = value;
        } else if (typeof value.toString === "function") {
          stringValue = value.toString();
        } else {
          console.warn("AG Grid: unknown value type during csv conversion");
          stringValue = "";
        }
        var valueEscaped = stringValue.replace(/"/g, '""');
        return '"' + valueEscaped + '"';
      };
      CsvSerializingSession2.prototype.parse = function() {
        return this.result;
      };
      CsvSerializingSession2.prototype.beginNewLine = function() {
        if (!this.isFirstLine) {
          this.result += LINE_SEPARATOR$1;
        }
        this.isFirstLine = false;
      };
      return CsvSerializingSession2;
    }(BaseGridSerializingSession);
    __extends$1 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate$1 = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    CsvCreator = /** @class */
    function(_super) {
      __extends$1(CsvCreator2, _super);
      function CsvCreator2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      CsvCreator2.prototype.postConstruct = function() {
        this.setBeans({
          gridSerializer: this.gridSerializer,
          gridOptionsService: this.gridOptionsService
        });
      };
      CsvCreator2.prototype.getMergedParams = function(params) {
        var baseParams = this.gridOptionsService.get("defaultCsvExportParams");
        return Object.assign({}, baseParams, params);
      };
      CsvCreator2.prototype.export = function(userParams) {
        if (this.isExportSuppressed()) {
          console.warn("AG Grid: Export cancelled. Export is not allowed as per your configuration.");
          return "";
        }
        var mergedParams = this.getMergedParams(userParams);
        var data = this.getData(mergedParams);
        var packagedFile = new Blob(["\uFEFF", data], { type: "text/plain" });
        Downloader.download(this.getFileName(mergedParams.fileName), packagedFile);
        return data;
      };
      CsvCreator2.prototype.exportDataAsCsv = function(params) {
        return this.export(params);
      };
      CsvCreator2.prototype.getDataAsCsv = function(params, skipDefaultParams) {
        if (skipDefaultParams === void 0) {
          skipDefaultParams = false;
        }
        var mergedParams = skipDefaultParams ? Object.assign({}, params) : this.getMergedParams(params);
        return this.getData(mergedParams);
      };
      CsvCreator2.prototype.getDefaultFileName = function() {
        return "export.csv";
      };
      CsvCreator2.prototype.getDefaultFileExtension = function() {
        return "csv";
      };
      CsvCreator2.prototype.createSerializingSession = function(params) {
        var _a = this, columnModel = _a.columnModel, valueService = _a.valueService, gridOptionsService = _a.gridOptionsService, valueFormatterService = _a.valueFormatterService, valueParserService = _a.valueParserService;
        var _b = params, processCellCallback = _b.processCellCallback, processHeaderCallback = _b.processHeaderCallback, processGroupHeaderCallback = _b.processGroupHeaderCallback, processRowGroupCallback = _b.processRowGroupCallback, suppressQuotes = _b.suppressQuotes, columnSeparator = _b.columnSeparator;
        return new CsvSerializingSession({
          columnModel,
          valueService,
          gridOptionsService,
          valueFormatterService,
          valueParserService,
          processCellCallback: processCellCallback || void 0,
          processHeaderCallback: processHeaderCallback || void 0,
          processGroupHeaderCallback: processGroupHeaderCallback || void 0,
          processRowGroupCallback: processRowGroupCallback || void 0,
          suppressQuotes: suppressQuotes || false,
          columnSeparator: columnSeparator || ","
        });
      };
      CsvCreator2.prototype.isExportSuppressed = function() {
        return this.gridOptionsService.is("suppressCsvExport");
      };
      __decorate$1([
        Autowired("columnModel")
      ], CsvCreator2.prototype, "columnModel", void 0);
      __decorate$1([
        Autowired("valueService")
      ], CsvCreator2.prototype, "valueService", void 0);
      __decorate$1([
        Autowired("gridSerializer")
      ], CsvCreator2.prototype, "gridSerializer", void 0);
      __decorate$1([
        Autowired("gridOptionsService")
      ], CsvCreator2.prototype, "gridOptionsService", void 0);
      __decorate$1([
        Autowired("valueFormatterService")
      ], CsvCreator2.prototype, "valueFormatterService", void 0);
      __decorate$1([
        Autowired("valueParserService")
      ], CsvCreator2.prototype, "valueParserService", void 0);
      __decorate$1([
        PostConstruct
      ], CsvCreator2.prototype, "postConstruct", null);
      CsvCreator2 = __decorate$1([
        Bean("csvCreator")
      ], CsvCreator2);
      return CsvCreator2;
    }(BaseCreator);
    __extends = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    (function(RowType2) {
      RowType2[RowType2["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
      RowType2[RowType2["HEADER"] = 1] = "HEADER";
      RowType2[RowType2["BODY"] = 2] = "BODY";
    })(RowType || (RowType = {}));
    GridSerializer = /** @class */
    function(_super) {
      __extends(GridSerializer2, _super);
      function GridSerializer2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      GridSerializer2.prototype.serialize = function(gridSerializingSession, params) {
        if (params === void 0) {
          params = {};
        }
        var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);
        var serializeChain = _.compose(
          // first pass, put in the header names of the cols
          this.prepareSession(columnsToExport),
          this.prependContent(params),
          this.exportColumnGroups(params, columnsToExport),
          this.exportHeaders(params, columnsToExport),
          this.processPinnedTopRows(params, columnsToExport),
          this.processRows(params, columnsToExport),
          this.processPinnedBottomRows(params, columnsToExport),
          this.appendContent(params)
        );
        return serializeChain(gridSerializingSession).parse();
      };
      GridSerializer2.prototype.processRow = function(gridSerializingSession, params, columnsToExport, node) {
        var rowSkipper = params.shouldRowBeSkipped || function() {
          return false;
        };
        var context = this.gridOptionsService.context;
        var api = this.gridOptionsService.api;
        var columnApi = this.gridOptionsService.columnApi;
        var skipSingleChildrenGroup = this.gridOptionsService.is("groupRemoveSingleChildren");
        var skipLowestSingleChildrenGroup = this.gridOptionsService.is("groupRemoveLowestSingleChildren");
        var isClipboardExport = params.rowPositions != null;
        var isExplicitExportSelection = isClipboardExport || !!params.onlySelected;
        var hideOpenParents = this.gridOptionsService.is("groupHideOpenParents") && !isExplicitExportSelection;
        var isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;
        var isFooter = !!node.footer;
        var skipRowGroups = params.skipGroups || params.skipRowGroups;
        var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;
        var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);
        if (skipRowGroups && params.skipGroups) {
          _.doOnce(function() {
            return console.warn("AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.");
          }, "gridSerializer-skipGroups");
        }
        if (!isLeafNode && !isFooter && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents) || params.onlySelected && !node.isSelected() || params.skipPinnedTop && node.rowPinned === "top" || params.skipPinnedBottom && node.rowPinned === "bottom") {
          return;
        }
        var nodeIsRootNode = node.level === -1;
        if (nodeIsRootNode && !isLeafNode && !isFooter) {
          return;
        }
        var shouldRowBeSkipped = rowSkipper({ node, api, columnApi, context });
        if (shouldRowBeSkipped) {
          return;
        }
        var rowAccumulator = gridSerializingSession.onNewBodyRow(node);
        columnsToExport.forEach(function(column, index) {
          rowAccumulator.onColumn(column, index, node);
        });
        if (params.getCustomContentBelowRow) {
          var content = params.getCustomContentBelowRow({ node, api, columnApi, context });
          if (content) {
            gridSerializingSession.addCustomContent(content);
          }
        }
      };
      GridSerializer2.prototype.appendContent = function(params) {
        return function(gridSerializingSession) {
          var appendContent = params.customFooter || params.appendContent;
          if (appendContent) {
            if (params.customFooter) {
              _.doOnce(function() {
                return console.warn("AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.");
              }, "gridSerializer-customFooter");
            }
            gridSerializingSession.addCustomContent(appendContent);
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.prependContent = function(params) {
        return function(gridSerializingSession) {
          var prependContent = params.customHeader || params.prependContent;
          if (prependContent) {
            if (params.customHeader) {
              _.doOnce(function() {
                return console.warn("AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.");
              }, "gridSerializer-customHeader");
            }
            gridSerializingSession.addCustomContent(prependContent);
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.prepareSession = function(columnsToExport) {
        return function(gridSerializingSession) {
          gridSerializingSession.prepare(columnsToExport);
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.exportColumnGroups = function(params, columnsToExport) {
        var _this = this;
        return function(gridSerializingSession) {
          if (!params.skipColumnGroupHeaders) {
            var groupInstanceIdCreator = new GroupInstanceIdCreator();
            var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, groupInstanceIdCreator, null);
            _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);
          } else if (params.columnGroups) {
            _.doOnce(function() {
              return console.warn("AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.");
            }, "gridSerializer-columnGroups");
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.exportHeaders = function(params, columnsToExport) {
        return function(gridSerializingSession) {
          if (!params.skipHeader && !params.skipColumnHeaders) {
            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
            columnsToExport.forEach(function(column, index) {
              gridRowIterator_1.onColumn(column, index, void 0);
            });
          } else if (params.skipHeader) {
            _.doOnce(function() {
              return console.warn("AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.");
            }, "gridSerializer-skipHeader");
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.processPinnedTopRows = function(params, columnsToExport) {
        var _this = this;
        return function(gridSerializingSession) {
          var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
          if (params.rowPositions) {
            params.rowPositions.filter(function(position) {
              return position.rowPinned === "top";
            }).sort(function(a, b) {
              return a.rowIndex - b.rowIndex;
            }).map(function(position) {
              return _this.pinnedRowModel.getPinnedTopRow(position.rowIndex);
            }).forEach(processRow);
          } else {
            _this.pinnedRowModel.forEachPinnedTopRow(processRow);
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.processRows = function(params, columnsToExport) {
        var _this = this;
        return function(gridSerializingSession) {
          var rowModel = _this.rowModel;
          var rowModelType = rowModel.getType();
          var usingCsrm = rowModelType === "clientSide";
          var usingSsrm = rowModelType === "serverSide";
          var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;
          var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
          var _a = params.exportedRows, exportedRows = _a === void 0 ? "filteredAndSorted" : _a;
          if (params.rowPositions) {
            params.rowPositions.filter(function(position) {
              return position.rowPinned == null;
            }).sort(function(a, b) {
              return a.rowIndex - b.rowIndex;
            }).map(function(position) {
              return rowModel.getRow(position.rowIndex);
            }).forEach(processRow);
          } else if (_this.columnModel.isPivotMode()) {
            if (usingCsrm) {
              rowModel.forEachPivotNode(processRow, true);
            } else if (usingSsrm) {
              rowModel.forEachNodeAfterFilterAndSort(processRow, true);
            } else {
              rowModel.forEachNode(processRow);
            }
          } else {
            if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {
              var selectedNodes = _this.selectionService.getSelectedNodes();
              _this.replicateSortedOrder(selectedNodes);
              selectedNodes.forEach(processRow);
            } else {
              if (exportedRows === "all") {
                rowModel.forEachNode(processRow);
              } else if (usingCsrm) {
                rowModel.forEachNodeAfterFilterAndSort(processRow, true);
              } else if (usingSsrm) {
                rowModel.forEachNodeAfterFilterAndSort(processRow, true);
              } else {
                rowModel.forEachNode(processRow);
              }
            }
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.replicateSortedOrder = function(rows) {
        var _this = this;
        var sortOptions = this.sortController.getSortOptions();
        var compareNodes = function(rowA, rowB) {
          var _a, _b, _c, _d;
          if (rowA.rowIndex != null && rowB.rowIndex != null) {
            return rowA.rowIndex - rowB.rowIndex;
          }
          if (rowA.level === rowB.level) {
            if (((_a = rowA.parent) === null || _a === void 0 ? void 0 : _a.id) === ((_b = rowB.parent) === null || _b === void 0 ? void 0 : _b.id)) {
              return _this.rowNodeSorter.compareRowNodes(sortOptions, {
                rowNode: rowA,
                currentPos: (_c = rowA.rowIndex) !== null && _c !== void 0 ? _c : -1
              }, {
                rowNode: rowB,
                currentPos: (_d = rowB.rowIndex) !== null && _d !== void 0 ? _d : -1
              });
            }
            return compareNodes(rowA.parent, rowB.parent);
          }
          if (rowA.level > rowB.level) {
            return compareNodes(rowA.parent, rowB);
          }
          return compareNodes(rowA, rowB.parent);
        };
        rows.sort(compareNodes);
      };
      GridSerializer2.prototype.processPinnedBottomRows = function(params, columnsToExport) {
        var _this = this;
        return function(gridSerializingSession) {
          var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);
          if (params.rowPositions) {
            params.rowPositions.filter(function(position) {
              return position.rowPinned === "bottom";
            }).sort(function(a, b) {
              return a.rowIndex - b.rowIndex;
            }).map(function(position) {
              return _this.pinnedRowModel.getPinnedBottomRow(position.rowIndex);
            }).forEach(processRow);
          } else {
            _this.pinnedRowModel.forEachPinnedBottomRow(processRow);
          }
          return gridSerializingSession;
        };
      };
      GridSerializer2.prototype.getColumnsToExport = function(allColumns, columnKeys) {
        if (allColumns === void 0) {
          allColumns = false;
        }
        var isPivotMode = this.columnModel.isPivotMode();
        if (columnKeys && columnKeys.length) {
          return this.columnModel.getGridColumns(columnKeys);
        }
        if (allColumns && !isPivotMode) {
          var columns = this.gridOptionsService.is("treeData") ? this.columnModel.getGridColumns([GROUP_AUTO_COLUMN_ID]) : [];
          return columns.concat(this.columnModel.getAllGridColumns() || []);
        }
        return this.columnModel.getAllDisplayedColumns();
      };
      GridSerializer2.prototype.recursivelyAddHeaderGroups = function(displayedGroups, gridSerializingSession, processGroupHeaderCallback) {
        var directChildrenHeaderGroups = [];
        displayedGroups.forEach(function(columnGroupChild) {
          var columnGroup = columnGroupChild;
          if (!columnGroup.getChildren) {
            return;
          }
          columnGroup.getChildren().forEach(function(it) {
            return directChildrenHeaderGroups.push(it);
          });
        });
        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {
          this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);
        }
        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
          this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);
        }
      };
      GridSerializer2.prototype.doAddHeaderHeader = function(gridSerializingSession, displayedGroups, processGroupHeaderCallback) {
        var _this = this;
        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
        var columnIndex = 0;
        displayedGroups.forEach(function(columnGroupChild) {
          var columnGroup = columnGroupChild;
          var name;
          if (processGroupHeaderCallback) {
            name = processGroupHeaderCallback({
              columnGroup,
              api: _this.gridOptionsService.api,
              columnApi: _this.gridOptionsService.columnApi,
              context: _this.gridOptionsService.context
            });
          } else {
            name = _this.columnModel.getDisplayNameForColumnGroup(columnGroup, "header");
          }
          var collapsibleGroupRanges = columnGroup.getLeafColumns().reduce(function(collapsibleGroups, currentColumn, currentIdx, arr) {
            var lastGroup = _.last(collapsibleGroups);
            var groupShow = currentColumn.getColumnGroupShow() === "open";
            if (!groupShow) {
              if (lastGroup && lastGroup[1] == null) {
                lastGroup[1] = currentIdx - 1;
              }
            } else if (!lastGroup || lastGroup[1] != null) {
              lastGroup = [currentIdx];
              collapsibleGroups.push(lastGroup);
            }
            if (currentIdx === arr.length - 1 && lastGroup && lastGroup[1] == null) {
              lastGroup[1] = currentIdx;
            }
            return collapsibleGroups;
          }, []);
          gridRowIterator.onColumn(columnGroup, name || "", columnIndex++, columnGroup.getLeafColumns().length - 1, collapsibleGroupRanges);
        });
      };
      __decorate([
        Autowired("displayedGroupCreator")
      ], GridSerializer2.prototype, "displayedGroupCreator", void 0);
      __decorate([
        Autowired("columnModel")
      ], GridSerializer2.prototype, "columnModel", void 0);
      __decorate([
        Autowired("rowModel")
      ], GridSerializer2.prototype, "rowModel", void 0);
      __decorate([
        Autowired("pinnedRowModel")
      ], GridSerializer2.prototype, "pinnedRowModel", void 0);
      __decorate([
        Autowired("selectionService")
      ], GridSerializer2.prototype, "selectionService", void 0);
      __decorate([
        Autowired("rowNodeSorter")
      ], GridSerializer2.prototype, "rowNodeSorter", void 0);
      __decorate([
        Autowired("sortController")
      ], GridSerializer2.prototype, "sortController", void 0);
      GridSerializer2 = __decorate([
        Bean("gridSerializer")
      ], GridSerializer2);
      return GridSerializer2;
    }(BeanStub);
    VERSION = "30.2.1";
    CsvExportModule = {
      version: VERSION,
      moduleName: ModuleNames.CsvExportModule,
      beans: [CsvCreator, GridSerializer]
    };
    LINE_SEPARATOR = "\r\n";
    XmlFactory = /** @class */
    function() {
      function XmlFactory2() {
      }
      XmlFactory2.createHeader = function(headerElement) {
        if (headerElement === void 0) {
          headerElement = {};
        }
        var headerStart = "<?";
        var headerEnd = "?>";
        var keys2 = ["version"];
        if (!headerElement.version) {
          headerElement.version = "1.0";
        }
        if (headerElement.encoding) {
          keys2.push("encoding");
        }
        if (headerElement.standalone) {
          keys2.push("standalone");
        }
        var att = keys2.map(function(key) {
          return key + '="' + headerElement[key] + '"';
        }).join(" ");
        return headerStart + "xml " + att + " " + headerEnd;
      };
      XmlFactory2.createXml = function(xmlElement, booleanTransformer) {
        var _this = this;
        var props = "";
        if (xmlElement.properties) {
          if (xmlElement.properties.prefixedAttributes) {
            xmlElement.properties.prefixedAttributes.forEach(function(prefixedSet) {
              Object.keys(prefixedSet.map).forEach(function(key) {
                props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
              });
            });
          }
          if (xmlElement.properties.rawMap) {
            Object.keys(xmlElement.properties.rawMap).forEach(function(key) {
              props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
            });
          }
        }
        var result = "<" + xmlElement.name + props;
        if (!xmlElement.children && xmlElement.textNode == null) {
          return result + "/>" + LINE_SEPARATOR;
        }
        if (xmlElement.textNode != null) {
          return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
        }
        result += ">" + LINE_SEPARATOR;
        if (xmlElement.children) {
          xmlElement.children.forEach(function(it) {
            result += _this.createXml(it, booleanTransformer);
          });
        }
        return result + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
      };
      XmlFactory2.returnAttributeIfPopulated = function(key, value, booleanTransformer) {
        if (!value && value !== "" && value !== 0) {
          return "";
        }
        var xmlValue = value;
        if (typeof value === "boolean") {
          if (booleanTransformer) {
            xmlValue = booleanTransformer(value);
          }
        }
        return " " + key + '="' + xmlValue + '"';
      };
      return XmlFactory2;
    }();
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    crcTable = new Uint32Array([
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ]);
    ZipContainer = /** @class */
    function() {
      function ZipContainer2() {
      }
      ZipContainer2.addFolders = function(paths) {
        paths.forEach(this.addFolder.bind(this));
      };
      ZipContainer2.addFolder = function(path) {
        this.folders.push({
          path,
          created: /* @__PURE__ */ new Date(),
          isBase64: false
        });
      };
      ZipContainer2.addFile = function(path, content, isBase64) {
        if (isBase64 === void 0) {
          isBase64 = false;
        }
        this.files.push({
          path,
          created: /* @__PURE__ */ new Date(),
          content,
          isBase64
        });
      };
      ZipContainer2.getContent = function(mimeType) {
        if (mimeType === void 0) {
          mimeType = "application/zip";
        }
        var textOutput = this.buildFileStream();
        var uInt8Output = this.buildUint8Array(textOutput);
        this.clearStream();
        return new Blob([uInt8Output], { type: mimeType });
      };
      ZipContainer2.clearStream = function() {
        this.folders = [];
        this.files = [];
      };
      ZipContainer2.buildFileStream = function(fData) {
        var e_1, _a;
        if (fData === void 0) {
          fData = "";
        }
        var totalFiles = this.folders.concat(this.files);
        var len = totalFiles.length;
        var foData = "";
        var lL = 0;
        var cL = 0;
        try {
          for (var totalFiles_1 = __values(totalFiles), totalFiles_1_1 = totalFiles_1.next(); !totalFiles_1_1.done; totalFiles_1_1 = totalFiles_1.next()) {
            var currentFile = totalFiles_1_1.value;
            var _b = this.getHeader(currentFile, lL), fileHeader = _b.fileHeader, folderHeader = _b.folderHeader, content = _b.content;
            lL += fileHeader.length + content.length;
            cL += folderHeader.length;
            fData += fileHeader + content;
            foData += folderHeader;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (totalFiles_1_1 && !totalFiles_1_1.done && (_a = totalFiles_1.return))
              _a.call(totalFiles_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        var foEnd = this.buildFolderEnd(len, cL, lL);
        return fData + foData + foEnd;
      };
      ZipContainer2.getHeader = function(currentFile, offset) {
        var content = currentFile.content, path = currentFile.path, created = currentFile.created, isBase64 = currentFile.isBase64;
        var utf8_encode2 = _.utf8_encode, decToHex2 = _.decToHex;
        var utfPath = utf8_encode2(path);
        var isUTF8 = utfPath !== path;
        var time = this.convertTime(created);
        var dt = this.convertDate(created);
        var extraFields = "";
        if (isUTF8) {
          var uExtraFieldPath = decToHex2(1, 1) + decToHex2(this.getFromCrc32Table(utfPath), 4) + utfPath;
          extraFields = "up" + decToHex2(uExtraFieldPath.length, 2) + uExtraFieldPath;
        }
        var _a = !content ? { size: 0, content: "" } : this.getConvertedContent(content, isBase64), size = _a.size, convertedContent = _a.content;
        var header = "\n\0" + (isUTF8 ? "\0\b" : "\0\0") + "\0\0" + decToHex2(time, 2) + // last modified time
        decToHex2(dt, 2) + // last modified date
        decToHex2(size ? this.getFromCrc32Table(convertedContent) : 0, 4) + decToHex2(size, 4) + // compressed size
        decToHex2(size, 4) + // uncompressed size
        decToHex2(utfPath.length, 2) + // file name length
        decToHex2(extraFields.length, 2);
        var fileHeader = "PK" + header + utfPath + extraFields;
        var folderHeader = "PK\0" + header + // file header
        "\0\0\0\0\0\0" + (content ? "\0\0\0\0" : "\0\0\0") + // external file attributes
        decToHex2(offset, 4) + // relative offset of local header
        utfPath + // file name
        extraFields;
        return { fileHeader, folderHeader, content: convertedContent || "" };
      };
      ZipContainer2.getConvertedContent = function(content, isBase64) {
        if (isBase64 === void 0) {
          isBase64 = false;
        }
        if (isBase64) {
          content = content.split(";base64,")[1];
        }
        content = isBase64 ? atob(content) : content;
        return {
          size: content.length,
          content
        };
      };
      ZipContainer2.buildFolderEnd = function(tLen, cLen, lLen) {
        var decToHex2 = _.decToHex;
        return "PK\0\0\0\0" + decToHex2(tLen, 2) + // total number of entries in the central folder
        decToHex2(tLen, 2) + // total number of entries in the central folder
        decToHex2(cLen, 4) + // size of the central folder
        decToHex2(lLen, 4) + // central folder start offset
        "\0\0";
      };
      ZipContainer2.buildUint8Array = function(content) {
        var uint8 = new Uint8Array(content.length);
        for (var i = 0; i < uint8.length; i++) {
          uint8[i] = content.charCodeAt(i);
        }
        return uint8;
      };
      ZipContainer2.getFromCrc32Table = function(content) {
        if (!content.length) {
          return 0;
        }
        var size = content.length;
        var iterable = new Uint8Array(size);
        for (var i = 0; i < size; i++) {
          iterable[i] = content.charCodeAt(i);
        }
        var crc = 0 ^ -1;
        var j = 0;
        var k = 0;
        var l = 0;
        for (var i = 0; i < size; i++) {
          j = iterable[i];
          k = (crc ^ j) & 255;
          l = crcTable[k];
          crc = crc >>> 8 ^ l;
        }
        return crc ^ -1;
      };
      ZipContainer2.convertTime = function(date) {
        var time = date.getHours();
        time <<= 6;
        time = time | date.getMinutes();
        time <<= 5;
        time = time | date.getSeconds() / 2;
        return time;
      };
      ZipContainer2.convertDate = function(date) {
        var dt = date.getFullYear() - 1980;
        dt <<= 4;
        dt = dt | date.getMonth() + 1;
        dt <<= 5;
        dt = dt | date.getDate();
        return dt;
      };
      ZipContainer2.folders = [];
      ZipContainer2.files = [];
      return ZipContainer2;
    }();
    AllCommunityModules = [ClientSideRowModelModule, InfiniteRowModelModule, CsvExportModule];
    ModuleRegistry.registerModules(AllCommunityModules);
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/ag-grid-react/lib/shared/reactComponent.js
var require_reactComponent = __commonJS({
  "node_modules/ag-grid-react/lib/shared/reactComponent.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReactComponent = void 0;
    var BaseReactComponent = (
      /** @class */
      function() {
        function BaseReactComponent2() {
        }
        return BaseReactComponent2;
      }()
    );
    var ReactComponent = (
      /** @class */
      function(_super) {
        __extends2(ReactComponent2, _super);
        function ReactComponent2(reactComponent, portalManager, componentType) {
          var _this = _super.call(this) || this;
          _this.portal = null;
          _this.reactComponent = reactComponent;
          _this.portalManager = portalManager;
          _this.componentType = componentType;
          _this.statelessComponent = _this.isStateless(_this.reactComponent);
          return _this;
        }
        ReactComponent2.prototype.getGui = function() {
          return this.eParentElement;
        };
        ReactComponent2.prototype.destroy = function() {
          if (this.componentInstance && typeof this.componentInstance.destroy == "function") {
            this.componentInstance.destroy();
          }
          return this.portalManager.destroyPortal(this.portal);
        };
        ReactComponent2.prototype.createParentElement = function(params) {
          var componentWrappingElement = this.portalManager.getComponentWrappingElement();
          var eParentElement = document.createElement(componentWrappingElement || "div");
          eParentElement.classList.add("ag-react-container");
          params.reactContainer = eParentElement;
          return eParentElement;
        };
        ReactComponent2.prototype.addParentContainerStyleAndClasses = function() {
          var _this = this;
          if (!this.componentInstance) {
            return;
          }
          if (this.componentInstance.getReactContainerStyle && this.componentInstance.getReactContainerStyle()) {
            Object.assign(this.eParentElement.style, this.componentInstance.getReactContainerStyle());
          }
          if (this.componentInstance.getReactContainerClasses && this.componentInstance.getReactContainerClasses()) {
            var parentContainerClasses = this.componentInstance.getReactContainerClasses();
            parentContainerClasses.forEach(function(className) {
              return _this.eParentElement.classList.add(className);
            });
          }
        };
        ReactComponent2.prototype.statelessComponentRendered = function() {
          return this.eParentElement.childElementCount > 0 || this.eParentElement.childNodes.length > 0;
        };
        ReactComponent2.prototype.getFrameworkComponentInstance = function() {
          return this.componentInstance;
        };
        ReactComponent2.prototype.isStatelessComponent = function() {
          return this.statelessComponent;
        };
        ReactComponent2.prototype.getReactComponentName = function() {
          return this.reactComponent.name;
        };
        ReactComponent2.prototype.getMemoType = function() {
          return this.hasSymbol() ? Symbol.for("react.memo") : 60115;
        };
        ReactComponent2.prototype.hasSymbol = function() {
          return typeof Symbol === "function" && Symbol.for;
        };
        ReactComponent2.prototype.isStateless = function(Component2) {
          return typeof Component2 === "function" && !(Component2.prototype && Component2.prototype.isReactComponent) || typeof Component2 === "object" && Component2.$$typeof === this.getMemoType();
        };
        ReactComponent2.prototype.hasMethod = function(name) {
          var frameworkComponentInstance = this.getFrameworkComponentInstance();
          return !!frameworkComponentInstance && frameworkComponentInstance[name] !== null || this.fallbackMethodAvailable(name);
        };
        ReactComponent2.prototype.callMethod = function(name, args) {
          var _this = this;
          var frameworkComponentInstance = this.getFrameworkComponentInstance();
          if (this.isStatelessComponent()) {
            return this.fallbackMethod(name, !!args && args[0] ? args[0] : {});
          } else if (!!!frameworkComponentInstance) {
            setTimeout(function() {
              return _this.callMethod(name, args);
            });
            return;
          }
          var method = frameworkComponentInstance[name];
          if (!!method) {
            return method.apply(frameworkComponentInstance, args);
          }
          if (this.fallbackMethodAvailable(name)) {
            return this.fallbackMethod(name, !!args && args[0] ? args[0] : {});
          }
        };
        ReactComponent2.prototype.addMethod = function(name, callback) {
          this[name] = callback;
        };
        return ReactComponent2;
      }(BaseReactComponent)
    );
    exports.ReactComponent = ReactComponent;
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
var require_react_dom_server_legacy_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require_react();
        var ReactVersion = "18.2.0";
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback) {
          callback();
        }
        function beginWriting(destination) {
        }
        function writeChunk(destination, chunk) {
          writeChunkAndReturn(destination, chunk);
        }
        function writeChunkAndReturn(destination, chunk) {
          return destination.push(chunk);
        }
        function completeWriting(destination) {
        }
        function close(destination) {
          destination.push(null);
        }
        function stringToChunk(content) {
          return content;
        }
        function stringToPrecomputedChunk(content) {
          return content;
        }
        function closeWithError(destination, error2) {
          destination.destroy(error2);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_2, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.substring(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            startInlineScript: inlineScriptWithNonce,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            sentCompleteSegmentFunction: false,
            sentCompleteBoundaryFunction: false,
            sentClientRenderFunction: false
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_MODE = 1;
        var SVG_MODE = 2;
        var MATHML_MODE = 3;
        var HTML_TABLE_MODE = 4;
        var HTML_TABLE_BODY_MODE = 5;
        var HTML_TABLE_ROW_MODE = 6;
        var HTML_COLGROUP_MODE = 7;
        function createFormatContext(insertionMode, selectedValue) {
          return {
            insertionMode,
            selectedValue
          };
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
            case "svg":
              return createFormatContext(SVG_MODE, null);
            case "math":
              return createFormatContext(MATHML_MODE, null);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text, responseState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyle(target, responseState, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle$1(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushAttribute(target, responseState, name, value) {
          switch (name) {
            case "style": {
              pushStyle(target, responseState, value);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
          }
          if (
            // shouldIgnoreAttribute
            // We have already filtered out null/undefined and reserved words.
            name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
          ) {
            return;
          }
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                if (!propertyInfo.acceptsBooleans) {
                  return;
                }
              }
            }
            var attributeName = propertyInfo.attributeName;
            var attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                if (value) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                }
                return;
              case OVERLOADED_BOOLEAN:
                if (value === true) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                } else if (value === false)
                  ;
                else {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                return;
              case NUMERIC:
                if (!isNaN(value)) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              case POSITIVE_NUMERIC:
                if (!isNaN(value) && value >= 1) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              default:
                if (propertyInfo.sanitizeURL) {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  value = "" + value;
                  sanitizeURL(value);
                }
                target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return;
                }
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props, responseState) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, responseState, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function pushInput(target, props, responseState) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          target.push(startChunkForTag("input"));
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (checked !== null) {
            pushAttribute(target, responseState, "checked", checked);
          } else if (defaultChecked !== null) {
            pushAttribute(target, responseState, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, responseState, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, responseState, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartTextArea(target, props, responseState) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushSelfClosing(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props, responseState) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushStartTitle(target, props, responseState) {
          target.push(startChunkForTag("title"));
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
            if (Array.isArray(children) && children.length > 1) {
              error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && child.$$typeof != null) {
              error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && typeof child !== "string" && typeof child !== "number") {
              error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            }
          }
          return children;
        }
        function pushStartGenericElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, responseState, formatContext) {
          {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "select":
              return pushStartSelect(target, props, responseState);
            case "option":
              return pushStartOption(target, props, responseState, formatContext);
            case "textarea":
              return pushStartTextArea(target, props, responseState);
            case "input":
              return pushInput(target, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target, props, responseState);
            case "title":
              return pushStartTitle(target, props, responseState);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type, responseState);
            }
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type, responseState);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              return pushStartGenericElement(target, props, type, responseState);
            }
            case "html": {
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                target.push(DOCTYPE);
              }
              return pushStartGenericElement(target, props, type, responseState);
            }
            default: {
              if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                return pushStartGenericElement(target, props, type, responseState);
              } else {
                return pushStartCustomElement(target, props, type, responseState);
              }
            }
          }
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target, type, props) {
          switch (type) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              break;
            }
            default: {
              target.push(endTag1, stringToChunk(type), endTag2);
            }
          }
        }
        function writeCompletedRoot(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            return writeChunkAndReturn(destination, bootstrapChunks[i]);
          }
          return true;
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
        var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
        var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteSegmentFunction) {
            responseState.sentCompleteSegmentFunction = true;
            writeChunk(destination, completeSegmentScript1Full);
          } else {
            writeChunk(destination, completeSegmentScript1Partial);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          writeChunk(destination, completeSegmentScript2);
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, completeSegmentScript3);
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteBoundaryFunction) {
            responseState.sentCompleteBoundaryFunction = true;
            writeChunk(destination, completeBoundaryScript1Full);
          } else {
            writeChunk(destination, completeBoundaryScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          writeChunk(destination, completeBoundaryScript2);
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          return writeChunkAndReturn(destination, completeBoundaryScript3);
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentClientRenderFunction) {
            responseState.sentClientRenderFunction = true;
            writeChunk(destination, clientRenderScript1Full);
          } else {
            writeChunk(destination, clientRenderScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          writeChunk(destination, clientRenderScript1A);
          if (errorDigest || errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
          }
          if (errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
          }
          if (errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
          }
          return writeChunkAndReturn(destination, clientRenderScript2);
        }
        var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        function createResponseState$1(generateStaticMarkup, identifierPrefix) {
          var responseState = createResponseState(identifierPrefix, void 0);
          return {
            // Keep this in sync with ReactDOMServerFormatConfig
            bootstrapChunks: responseState.bootstrapChunks,
            startInlineScript: responseState.startInlineScript,
            placeholderPrefix: responseState.placeholderPrefix,
            segmentPrefix: responseState.segmentPrefix,
            boundaryPrefix: responseState.boundaryPrefix,
            idPrefix: responseState.idPrefix,
            nextSuspenseID: responseState.nextSuspenseID,
            sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
            sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
            sentClientRenderFunction: responseState.sentClientRenderFunction,
            // This is an extra field for the legacy renderer
            generateStaticMarkup
          };
        }
        function createRootFormatContext() {
          return {
            insertionMode: HTML_MODE,
            // We skip the root mode because we don't want to emit the DOCTYPE in legacy mode.
            selectedValue: null
          };
        }
        function pushTextInstance$1(target, text, responseState, textEmbedded) {
          if (responseState.generateStaticMarkup) {
            target.push(stringToChunk(escapeTextForBrowser(text)));
            return false;
          } else {
            return pushTextInstance(target, text, responseState, textEmbedded);
          }
        }
        function pushSegmentFinale$1(target, responseState, lastPushedText, textEmbedded) {
          if (responseState.generateStaticMarkup) {
            return;
          } else {
            return pushSegmentFinale(target, responseState, lastPushedText, textEmbedded);
          }
        }
        function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartCompletedSuspenseBoundary(destination);
        }
        function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
        }
        function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndCompletedSuspenseBoundary(destination);
        }
        function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndClientRenderedSuspenseBoundary(destination);
        }
        var assign = Object.assign;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue2 = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue2 = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue2;
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var _value = prevSnapshot.parentValue;
            if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue2 = _value;
            }
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext(context) {
          var value = context._currentValue2;
          return value;
        }
        function get2(key) {
          return key._reactInternals;
        }
        function set2(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          enqueueSetState: function(inst, payload, callback) {
            var internals = get2(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get2(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
              }
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var internals = get2(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set2(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
        }
        function finishHooks(Component2, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component2(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext$1(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function useLayoutEffect(create, inputs) {
          {
            currentHookNameInDev = "useLayoutEffect";
            error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function useMutableSource(source, getSnapshot, subscribe) {
          resolveCurrentlyRenderingComponent();
          return getSnapshot(source._source);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value) {
          resolveCurrentlyRenderingComponent();
          return value;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function noop2() {
        }
        var Dispatcher = {
          readContext: readContext$1,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState,
          useInsertionEffect: noop2,
          useLayoutEffect,
          useCallback,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop2,
          // Effects are not run in the server environment.
          useEffect: noop2,
          // Debugging effect
          useDebugValue: noop2,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useMutableSource,
          useSyncExternalStore
        };
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop$1() {
        }
        function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError2 === void 0 ? defaultErrorHandler : onError2,
            onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
            onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
            onShellError: onShellError === void 0 ? noop$1 : onShellError,
            onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (pingedTasks.length === 1) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null
          };
        }
        function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        var lastBoundaryErrorComponentStackDev = null;
        function captureBoundaryErrorDetailsDev(boundary, error2) {
          {
            var errorMessage;
            if (typeof error2 === "string") {
              errorMessage = error2;
            } else if (error2 && typeof error2.message === "string") {
              errorMessage = error2.message;
            } else {
              errorMessage = String(error2);
            }
            var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
            lastBoundaryErrorComponentStackDev = null;
            boundary.errorMessage = errorMessage;
            boundary.errorComponentStack = errorComponentStack;
          }
        }
        function logRecoverableError(request, error2) {
          var errorDigest = request.onError(error2);
          if (errorDigest != null && typeof errorDigest !== "string") {
            throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          try {
            renderNode(request, task, content);
            pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.forceClientRender = true;
            newBoundary.errorDigest = logRecoverableError(request, error2);
            {
              captureBoundaryErrorDetailsDev(newBoundary, error2);
            }
          } finally {
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
          segment.lastPushedText = false;
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type);
          segment.lastPushedText = false;
          popComponentStackInDEV(task);
        }
        function shouldConstruct$1(Component2) {
          return Component2.prototype && Component2.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, Component2, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity);
          var result = Component2(props, secondArg);
          return finishHooks(Component2, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component2, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component2.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component2, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, nextChildren);
        }
        function renderClassComponent(request, task, Component2, props) {
          pushClassComponentStackInDEV(task, Component2);
          var maskedContext = getMaskedContext(Component2, task.legacyContext);
          var instance = constructClassInstance(Component2, props, maskedContext);
          mountClassInstance(instance, Component2, props, maskedContext);
          finishClassComponent(request, task, instance, Component2, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, Component2, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component2, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component2);
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, Component2, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component2, props, legacyContext);
            finishClassComponent(request, task, value, Component2, props);
          } else {
            {
              validateFunctionComponentInDev(Component2);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, value);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, value);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component2.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children = renderWithHooks(request, task, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            try {
              renderNodeDestructive(request, task, children);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, children);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext(context);
          var newChildren = render(newValue);
          renderNodeDestructive(request, task, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value);
          renderNodeDestructive(request, task, children);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component2 = init(payload);
          var resolvedProps = resolveDefaultProps(Component2, props);
          renderElement(request, task, Component2, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderElement(request, task, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, props.children);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
            iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, node) {
          {
            try {
              return renderNodeDestructiveImpl(request, task, node);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function")
                ;
              else {
                lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
              }
              throw x;
            }
          }
        }
        function renderNodeDestructiveImpl(request, task, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var props = element.props;
                var ref = element.ref;
                renderElement(request, task, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode;
                {
                  try {
                    resolvedNode = init(payload);
                  } catch (x) {
                    if (typeof x === "object" && x !== null && typeof x.then === "function") {
                      pushBuiltInComponentStackInDEV(task, "Lazy");
                    }
                    throw x;
                  }
                }
                renderNodeDestructive(request, task, resolvedNode);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children);
                  return;
                }
                return;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
            return;
          }
          if (typeof node === "number") {
            var _segment = task.blockedSegment;
            _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            return;
          }
          {
            if (typeof node === "function") {
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children) {
          var totalChildren = children.length;
          for (var i = 0; i < totalChildren; i++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
            try {
              renderNode(request, task, children[i]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            segment.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, node);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              spawnNewSuspendedTask(request, task, x);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error2) {
          var errorDigest = logRecoverableError(request, error2);
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = errorDigest;
              {
                captureBoundaryErrorDetailsDev(boundary, error2);
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task, request, reason) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSED) {
              request.status = CLOSED;
              if (request.destination !== null) {
                close(request.destination);
              }
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              boundary.errorDigest = request.onError(_error);
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                if (_error && typeof _error.message === "string") {
                  _error = errorPrefix + _error.message;
                } else {
                  _error = errorPrefix + String(_error);
                }
                var previousTaskInDev = currentTaskInDEV;
                currentTaskInDEV = task;
                try {
                  captureBoundaryErrorDetailsDev(boundary, _error);
                } finally {
                  currentTaskInDEV = previousTaskInDev;
                }
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, reason);
            });
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop$1;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender)
              ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node);
            pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher$1.current = prevDispatcher;
            {
              ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === Dispatcher) {
              switchContext(prevContext);
            }
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else {
            writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          return true;
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          try {
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null && request.pendingRootTasks === 0) {
              flushSegment(request, destination, completedRootSegment);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            var i;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
            }
          }
        }
        function startWork(request) {
          scheduleWork(function() {
            return performWork(request);
          });
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            abortableTasks.forEach(function(task) {
              return abortTask(task, request, reason);
            });
            abortableTasks.clear();
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function onError() {
        }
        function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
          var didFatal = false;
          var fatalError2 = null;
          var result = "";
          var destination = {
            push: function(chunk) {
              if (chunk !== null) {
                result += chunk;
              }
              return true;
            },
            destroy: function(error2) {
              didFatal = true;
              fatalError2 = error2;
            }
          };
          var readyToStream = false;
          function onShellReady() {
            readyToStream = true;
          }
          var request = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), createRootFormatContext(), Infinity, onError, void 0, onShellReady, void 0, void 0);
          startWork(request);
          abort(request, abortReason);
          startFlowing(request, destination);
          if (didFatal) {
            throw fatalError2;
          }
          if (!readyToStream) {
            throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          }
          return result;
        }
        function renderToString(children, options) {
          return renderToStringImpl(children, options, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
        }
        function renderToStaticMarkup(children, options) {
          return renderToStringImpl(children, options, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
        }
        function renderToNodeStream() {
          throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
        }
        function renderToStaticNodeStream() {
          throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
        }
        exports.renderToNodeStream = renderToNodeStream;
        exports.renderToStaticMarkup = renderToStaticMarkup;
        exports.renderToStaticNodeStream = renderToStaticNodeStream;
        exports.renderToString = renderToString;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server.browser.development.js
var require_react_dom_server_browser_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React = require_react();
        var ReactVersion = "18.2.0";
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback) {
          callback();
        }
        var VIEW_SIZE = 512;
        var currentView = null;
        var writtenBytes = 0;
        function beginWriting(destination) {
          currentView = new Uint8Array(VIEW_SIZE);
          writtenBytes = 0;
        }
        function writeChunk(destination, chunk) {
          if (chunk.length === 0) {
            return;
          }
          if (chunk.length > VIEW_SIZE) {
            if (writtenBytes > 0) {
              destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            destination.enqueue(chunk);
            return;
          }
          var bytesToWrite = chunk;
          var allowableBytes = currentView.length - writtenBytes;
          if (allowableBytes < bytesToWrite.length) {
            if (allowableBytes === 0) {
              destination.enqueue(currentView);
            } else {
              currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
              destination.enqueue(currentView);
              bytesToWrite = bytesToWrite.subarray(allowableBytes);
            }
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          currentView.set(bytesToWrite, writtenBytes);
          writtenBytes += bytesToWrite.length;
        }
        function writeChunkAndReturn(destination, chunk) {
          writeChunk(destination, chunk);
          return true;
        }
        function completeWriting(destination) {
          if (currentView && writtenBytes > 0) {
            destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
            currentView = null;
            writtenBytes = 0;
          }
        }
        function close(destination) {
          destination.close();
        }
        var textEncoder = new TextEncoder();
        function stringToChunk(content) {
          return textEncoder.encode(content);
        }
        function stringToPrecomputedChunk(content) {
          return textEncoder.encode(content);
        }
        function closeWithError(destination, error2) {
          if (typeof destination.error === "function") {
            destination.error(error2);
          } else {
            destination.close();
          }
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_2, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.substring(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i])), endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            startInlineScript: inlineScriptWithNonce,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            sentCompleteSegmentFunction: false,
            sentCompleteBoundaryFunction: false,
            sentClientRenderFunction: false
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_MODE = 1;
        var SVG_MODE = 2;
        var MATHML_MODE = 3;
        var HTML_TABLE_MODE = 4;
        var HTML_TABLE_BODY_MODE = 5;
        var HTML_TABLE_ROW_MODE = 6;
        var HTML_COLGROUP_MODE = 7;
        function createFormatContext(insertionMode, selectedValue) {
          return {
            insertionMode,
            selectedValue
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
            case "svg":
              return createFormatContext(SVG_MODE, null);
            case "math":
              return createFormatContext(MATHML_MODE, null);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text, responseState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale(target, responseState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyle(target, responseState, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle$1(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !hasOwnProperty.call(isUnitlessNumber, styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushAttribute(target, responseState, name, value) {
          switch (name) {
            case "style": {
              pushStyle(target, responseState, value);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
          }
          if (
            // shouldIgnoreAttribute
            // We have already filtered out null/undefined and reserved words.
            name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
          ) {
            return;
          }
          var propertyInfo = getPropertyInfo(name);
          if (propertyInfo !== null) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                if (!propertyInfo.acceptsBooleans) {
                  return;
                }
              }
            }
            var attributeName = propertyInfo.attributeName;
            var attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                if (value) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                }
                return;
              case OVERLOADED_BOOLEAN:
                if (value === true) {
                  target.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                } else if (value === false)
                  ;
                else {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                return;
              case NUMERIC:
                if (!isNaN(value)) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              case POSITIVE_NUMERIC:
                if (!isNaN(value) && value >= 1) {
                  target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
                }
                break;
              default:
                if (propertyInfo.sanitizeURL) {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  value = "" + value;
                  sanitizeURL(value);
                }
                target.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name)) {
            switch (typeof value) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return;
                }
              }
            }
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target, props, responseState) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, responseState, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function pushInput(target, props, responseState) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          target.push(startChunkForTag("input"));
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (checked !== null) {
            pushAttribute(target, responseState, "checked", checked);
          } else if (defaultChecked !== null) {
            pushAttribute(target, responseState, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, responseState, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, responseState, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartTextArea(target, props, responseState) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushSelfClosing(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props, responseState) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushStartTitle(target, props, responseState) {
          target.push(startChunkForTag("title"));
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            var child = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
            if (Array.isArray(children) && children.length > 1) {
              error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && child.$$typeof != null) {
              error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            } else if (child != null && typeof child !== "string" && typeof child !== "number") {
              error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
            }
          }
          return children;
        }
        function pushStartGenericElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag, responseState) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, responseState, formatContext) {
          {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "select":
              return pushStartSelect(target, props, responseState);
            case "option":
              return pushStartOption(target, props, responseState, formatContext);
            case "textarea":
              return pushStartTextArea(target, props, responseState);
            case "input":
              return pushInput(target, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target, props, responseState);
            case "title":
              return pushStartTitle(target, props, responseState);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type, responseState);
            }
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type, responseState);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              return pushStartGenericElement(target, props, type, responseState);
            }
            case "html": {
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                target.push(DOCTYPE);
              }
              return pushStartGenericElement(target, props, type, responseState);
            }
            default: {
              if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                return pushStartGenericElement(target, props, type, responseState);
              } else {
                return pushStartCustomElement(target, props, type, responseState);
              }
            }
          }
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target, type, props) {
          switch (type) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              break;
            }
            default: {
              target.push(endTag1, stringToChunk(type), endTag2);
            }
          }
        }
        function writeCompletedRoot(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            return writeChunkAndReturn(destination, bootstrapChunks[i]);
          }
          return true;
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMesssage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
        var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
        var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteSegmentFunction) {
            responseState.sentCompleteSegmentFunction = true;
            writeChunk(destination, completeSegmentScript1Full);
          } else {
            writeChunk(destination, completeSegmentScript1Partial);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          writeChunk(destination, completeSegmentScript2);
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, completeSegmentScript3);
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteBoundaryFunction) {
            responseState.sentCompleteBoundaryFunction = true;
            writeChunk(destination, completeBoundaryScript1Full);
          } else {
            writeChunk(destination, completeBoundaryScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          writeChunk(destination, completeBoundaryScript2);
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          return writeChunkAndReturn(destination, completeBoundaryScript3);
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentClientRenderFunction) {
            responseState.sentClientRenderFunction = true;
            writeChunk(destination, clientRenderScript1Full);
          } else {
            writeChunk(destination, clientRenderScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          writeChunk(destination, clientRenderScript1A);
          if (errorDigest || errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
          }
          if (errorMessage || errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
          }
          if (errorComponentStack) {
            writeChunk(destination, clientRenderErrorScriptArgInterstitial);
            writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
          }
          return writeChunkAndReturn(destination, clientRenderScript2);
        }
        var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var assign = Object.assign;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue;
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var value = prevSnapshot.parentValue;
            if (value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue = value;
            }
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext(context) {
          var value = context._currentValue;
          return value;
        }
        function get2(key) {
          return key._reactInternals;
        }
        function set2(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          enqueueSetState: function(inst, payload, callback) {
            var internals = get2(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get2(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback, "setState");
              }
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var internals = get2(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set2(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
        }
        function finishHooks(Component2, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component2(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext$1(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function useLayoutEffect(create, inputs) {
          {
            currentHookNameInDev = "useLayoutEffect";
            error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function useMutableSource(source, getSnapshot, subscribe) {
          resolveCurrentlyRenderingComponent();
          return getSnapshot(source._source);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value) {
          resolveCurrentlyRenderingComponent();
          return value;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function noop2() {
        }
        var Dispatcher = {
          readContext: readContext$1,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState,
          useInsertionEffect: noop2,
          useLayoutEffect,
          useCallback,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop2,
          // Effects are not run in the server environment.
          useEffect: noop2,
          // Debugging effect
          useDebugValue: noop2,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useMutableSource,
          useSyncExternalStore
        };
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop$1() {
        }
        function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError === void 0 ? defaultErrorHandler : onError,
            onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
            onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
            onShellError: onShellError === void 0 ? noop$1 : onShellError,
            onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, children, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (pingedTasks.length === 1) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null
          };
        }
        function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        var lastBoundaryErrorComponentStackDev = null;
        function captureBoundaryErrorDetailsDev(boundary, error2) {
          {
            var errorMessage;
            if (typeof error2 === "string") {
              errorMessage = error2;
            } else if (error2 && typeof error2.message === "string") {
              errorMessage = error2.message;
            } else {
              errorMessage = String(error2);
            }
            var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
            lastBoundaryErrorComponentStackDev = null;
            boundary.errorMessage = errorMessage;
            boundary.errorComponentStack = errorComponentStack;
          }
        }
        function logRecoverableError(request, error2) {
          var errorDigest = request.onError(error2);
          if (errorDigest != null && typeof errorDigest !== "string") {
            throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            parentSegment.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          try {
            renderNode(request, task, content);
            pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.forceClientRender = true;
            newBoundary.errorDigest = logRecoverableError(request, error2);
            {
              captureBoundaryErrorDetailsDev(newBoundary, error2);
            }
          } finally {
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
          segment.lastPushedText = false;
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type);
          segment.lastPushedText = false;
          popComponentStackInDEV(task);
        }
        function shouldConstruct$1(Component2) {
          return Component2.prototype && Component2.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, Component2, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity);
          var result = Component2(props, secondArg);
          return finishHooks(Component2, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component2, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component2.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component2, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, nextChildren);
        }
        function renderClassComponent(request, task, Component2, props) {
          pushClassComponentStackInDEV(task, Component2);
          var maskedContext = getMaskedContext(Component2, task.legacyContext);
          var instance = constructClassInstance(Component2, props, maskedContext);
          mountClassInstance(instance, Component2, props, maskedContext);
          finishClassComponent(request, task, instance, Component2, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, Component2, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component2, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component2);
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, Component2, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value, Component2, props, legacyContext);
            finishClassComponent(request, task, value, Component2, props);
          } else {
            {
              validateFunctionComponentInDev(Component2);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
              try {
                renderNodeDestructive(request, task, value);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, value);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component2.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children = renderWithHooks(request, task, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            try {
              renderNodeDestructive(request, task, children);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, children);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext(context);
          var newChildren = render(newValue);
          renderNodeDestructive(request, task, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value);
          renderNodeDestructive(request, task, children);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component2 = init(payload);
          var resolvedProps = resolveDefaultProps(Component2, props);
          renderElement(request, task, Component2, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderElement(request, task, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, props.children);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
            iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, node) {
          {
            try {
              return renderNodeDestructiveImpl(request, task, node);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function")
                ;
              else {
                lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
              }
              throw x;
            }
          }
        }
        function renderNodeDestructiveImpl(request, task, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var props = element.props;
                var ref = element.ref;
                renderElement(request, task, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode;
                {
                  try {
                    resolvedNode = init(payload);
                  } catch (x) {
                    if (typeof x === "object" && x !== null && typeof x.then === "function") {
                      pushBuiltInComponentStackInDEV(task, "Lazy");
                    }
                    throw x;
                  }
                }
                renderNodeDestructive(request, task, resolvedNode);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children);
                  return;
                }
                return;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
            return;
          }
          if (typeof node === "number") {
            var _segment = task.blockedSegment;
            _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            return;
          }
          {
            if (typeof node === "function") {
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children) {
          var totalChildren = children.length;
          for (var i = 0; i < totalChildren; i++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
            try {
              renderNode(request, task, children[i]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            segment.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, node);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              spawnNewSuspendedTask(request, task, x);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error2) {
          var errorDigest = logRecoverableError(request, error2);
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              boundary.errorDigest = errorDigest;
              {
                captureBoundaryErrorDetailsDev(boundary, error2);
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task, request, reason) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSED) {
              request.status = CLOSED;
              if (request.destination !== null) {
                close(request.destination);
              }
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              boundary.errorDigest = request.onError(_error);
              {
                var errorPrefix = "The server did not finish this Suspense boundary: ";
                if (_error && typeof _error.message === "string") {
                  _error = errorPrefix + _error.message;
                } else {
                  _error = errorPrefix + String(_error);
                }
                var previousTaskInDev = currentTaskInDEV;
                currentTaskInDEV = task;
                try {
                  captureBoundaryErrorDetailsDev(boundary, _error);
                } finally {
                  currentTaskInDEV = previousTaskInDev;
                }
              }
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, reason);
            });
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop$1;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender)
              ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node);
            pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher$1.current = prevDispatcher;
            {
              ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === Dispatcher) {
              switchContext(prevContext);
            }
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else {
            writeStartCompletedSuspenseBoundary(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          return true;
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          beginWriting();
          try {
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null && request.pendingRootTasks === 0) {
              flushSegment(request, destination, completedRootSegment);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            var i;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            completeWriting(destination);
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
            }
          }
        }
        function startWork(request) {
          scheduleWork(function() {
            return performWork(request);
          });
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            abortableTasks.forEach(function(task) {
              return abortTask(task, request, reason);
            });
            abortableTasks.clear();
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            logRecoverableError(request, error2);
            fatalError(request, error2);
          }
        }
        function renderToReadableStream(children, options) {
          return new Promise(function(resolve, reject) {
            var onFatalError;
            var onAllReady;
            var allReady = new Promise(function(res, rej) {
              onAllReady = res;
              onFatalError = rej;
            });
            function onShellReady() {
              var stream = new ReadableStream(
                {
                  type: "bytes",
                  pull: function(controller) {
                    startFlowing(request, controller);
                  },
                  cancel: function(reason) {
                    abort(request);
                  }
                },
                // $FlowFixMe size() methods are not allowed on byte streams.
                {
                  highWaterMark: 0
                }
              );
              stream.allReady = allReady;
              resolve(stream);
            }
            function onShellError(error2) {
              allReady.catch(function() {
              });
              reject(error2);
            }
            var request = createRequest(children, createResponseState(options ? options.identifierPrefix : void 0, options ? options.nonce : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
            if (options && options.signal) {
              var signal = options.signal;
              var listener = function() {
                abort(request, signal.reason);
                signal.removeEventListener("abort", listener);
              };
              signal.addEventListener("abort", listener);
            }
            startWork(request);
          });
        }
        exports.renderToReadableStream = renderToReadableStream;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/server.browser.js
var require_server_browser = __commonJS({
  "node_modules/react-dom/server.browser.js"(exports) {
    "use strict";
    var l;
    var s;
    if (false) {
      l = null;
      s = null;
    } else {
      l = require_react_dom_server_legacy_browser_development();
      s = require_react_dom_server_browser_development();
    }
    exports.version = l.version;
    exports.renderToString = l.renderToString;
    exports.renderToStaticMarkup = l.renderToStaticMarkup;
    exports.renderToNodeStream = l.renderToNodeStream;
    exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
    exports.renderToReadableStream = s.renderToReadableStream;
  }
});

// node_modules/ag-grid-react/lib/shared/keyGenerator.js
var require_keyGenerator = __commonJS({
  "node_modules/ag-grid-react/lib/shared/keyGenerator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var counter = 0;
    function generateNewKey() {
      return "agPortalKey_" + ++counter;
    }
    exports.default = generateNewKey;
  }
});

// node_modules/ag-grid-react/lib/legacy/legacyReactComponent.js
var require_legacyReactComponent = __commonJS({
  "node_modules/ag-grid-react/lib/legacy/legacyReactComponent.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyReactComponent = void 0;
    var react_1 = require_react();
    var react_dom_1 = require_react_dom();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var reactComponent_1 = require_reactComponent();
    var server_1 = require_server_browser();
    var keyGenerator_1 = __importDefault(require_keyGenerator());
    var LegacyReactComponent = (
      /** @class */
      function(_super) {
        __extends2(LegacyReactComponent2, _super);
        function LegacyReactComponent2(reactComponent, parentComponent, portalManager, componentType) {
          var _this = _super.call(this, reactComponent, portalManager, componentType) || this;
          _this.staticMarkup = null;
          _this.staticRenderTime = 0;
          _this.parentComponent = parentComponent;
          return _this;
        }
        LegacyReactComponent2.prototype.init = function(params) {
          var _this = this;
          this.eParentElement = this.createParentElement(params);
          this.renderStaticMarkup(params);
          return new ag_grid_community_1.AgPromise(function(resolve) {
            return _this.createReactComponent(params, resolve);
          });
        };
        LegacyReactComponent2.prototype.createReactComponent = function(params, resolve) {
          var _this = this;
          if (!this.isStatelessComponent()) {
            params.ref = function(element) {
              _this.componentInstance = element;
              _this.addParentContainerStyleAndClasses();
              _this.removeStaticMarkup();
            };
          }
          var reactComponent = react_1.createElement(this.reactComponent, params);
          var portal = react_dom_1.createPortal(
            reactComponent,
            this.eParentElement,
            keyGenerator_1.default()
            // fixed deltaRowModeRefreshCompRenderer
          );
          this.portal = portal;
          this.portalManager.mountReactPortal(portal, this, function(value) {
            resolve(value);
            if (_this.isStatelessComponent()) {
              if (_this.isSlowRenderer()) {
                _this.removeStaticMarkup();
              }
              setTimeout(function() {
                _this.removeStaticMarkup();
              });
            }
          });
        };
        LegacyReactComponent2.prototype.fallbackMethodAvailable = function(name) {
          return false;
        };
        LegacyReactComponent2.prototype.fallbackMethod = function(name, params) {
        };
        LegacyReactComponent2.prototype.isSlowRenderer = function() {
          return this.staticRenderTime >= LegacyReactComponent2.SLOW_RENDERING_THRESHOLD;
        };
        LegacyReactComponent2.prototype.isNullValue = function() {
          return this.staticMarkup === "";
        };
        LegacyReactComponent2.prototype.renderStaticMarkup = function(params) {
          if (this.parentComponent.isDisableStaticMarkup() || !this.componentType.cellRenderer) {
            return;
          }
          var originalConsoleError = console.error;
          var reactComponent = react_1.createElement(this.reactComponent, params);
          try {
            console.error = function() {
            };
            var start = Date.now();
            var staticMarkup = server_1.renderToStaticMarkup(reactComponent);
            this.staticRenderTime = Date.now() - start;
            console.error = originalConsoleError;
            if (staticMarkup === "") {
              this.staticMarkup = staticMarkup;
            } else {
              if (staticMarkup) {
                this.staticMarkup = document.createElement("span");
                this.staticMarkup.innerHTML = staticMarkup;
                this.eParentElement.appendChild(this.staticMarkup);
              }
            }
          } catch (e) {
          } finally {
            console.error = originalConsoleError;
          }
        };
        LegacyReactComponent2.prototype.removeStaticMarkup = function() {
          if (this.parentComponent.isDisableStaticMarkup() || !this.componentType.cellRenderer) {
            return;
          }
          if (this.staticMarkup) {
            if (this.staticMarkup.remove) {
              this.staticMarkup.remove();
              this.staticMarkup = null;
            } else if (this.eParentElement.removeChild) {
              this.eParentElement.removeChild(this.staticMarkup);
              this.staticMarkup = null;
            }
          }
        };
        LegacyReactComponent2.prototype.rendered = function() {
          return this.isNullValue() || !!this.staticMarkup || this.isStatelessComponent() && this.statelessComponentRendered() || !!(!this.isStatelessComponent() && this.getFrameworkComponentInstance());
        };
        LegacyReactComponent2.SLOW_RENDERING_THRESHOLD = 3;
        return LegacyReactComponent2;
      }(reactComponent_1.ReactComponent)
    );
    exports.LegacyReactComponent = LegacyReactComponent;
  }
});

// node_modules/ag-grid-react/lib/shared/newReactComponent.js
var require_newReactComponent = __commonJS({
  "node_modules/ag-grid-react/lib/shared/newReactComponent.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NewReactComponent = void 0;
    var react_1 = require_react();
    var react_dom_1 = require_react_dom();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var reactComponent_1 = require_reactComponent();
    var server_1 = require_server_browser();
    var keyGenerator_1 = __importDefault(require_keyGenerator());
    var NewReactComponent = (
      /** @class */
      function(_super) {
        __extends2(NewReactComponent2, _super);
        function NewReactComponent2(reactComponent, parentComponent, componentType) {
          var _this = _super.call(this, reactComponent, parentComponent, componentType) || this;
          _this.oldPortal = null;
          _this.key = keyGenerator_1.default();
          _this.portalKey = keyGenerator_1.default();
          return _this;
        }
        NewReactComponent2.prototype.init = function(params) {
          var _this = this;
          this.eParentElement = this.createParentElement(params);
          this.params = params;
          this.createOrUpdatePortal(params);
          return new ag_grid_community_1.AgPromise(function(resolve) {
            return _this.createReactComponent(resolve);
          });
        };
        NewReactComponent2.prototype.createOrUpdatePortal = function(params) {
          var _this = this;
          if (!this.isStatelessComponent()) {
            params.ref = function(element) {
              _this.componentInstance = element;
              _this.addParentContainerStyleAndClasses();
            };
          }
          this.reactElement = react_1.createElement(this.reactComponent, __assign2(__assign2({}, params), { key: this.key }));
          this.portal = react_dom_1.createPortal(
            this.reactElement,
            this.eParentElement,
            this.portalKey
            // fixed deltaRowModeRefreshCompRenderer
          );
        };
        NewReactComponent2.prototype.createReactComponent = function(resolve) {
          this.portalManager.mountReactPortal(this.portal, this, function(value) {
            resolve(value);
          });
        };
        NewReactComponent2.prototype.isNullValue = function() {
          return this.valueRenderedIsNull(this.params);
        };
        NewReactComponent2.prototype.rendered = function() {
          return this.isStatelessComponent() && this.statelessComponentRendered() || !!(!this.isStatelessComponent() && this.getFrameworkComponentInstance());
        };
        NewReactComponent2.prototype.valueRenderedIsNull = function(params) {
          if (!this.componentType.cellRenderer) {
            return false;
          }
          var originalConsoleError = console.error;
          try {
            console.error = function() {
            };
            var staticMarkup = server_1.renderToStaticMarkup(react_1.createElement(this.reactComponent, params));
            return staticMarkup === "";
          } catch (ignore) {
          } finally {
            console.error = originalConsoleError;
          }
          return false;
        };
        NewReactComponent2.prototype.refreshComponent = function(args) {
          this.oldPortal = this.portal;
          this.createOrUpdatePortal(args);
          this.portalManager.updateReactPortal(this.oldPortal, this.portal);
        };
        NewReactComponent2.prototype.fallbackMethod = function(name, params) {
          var method = this[name + "Component"];
          if (!!method) {
            return method.bind(this)(params);
          }
        };
        NewReactComponent2.prototype.fallbackMethodAvailable = function(name) {
          var method = this[name + "Component"];
          return !!method;
        };
        return NewReactComponent2;
      }(reactComponent_1.ReactComponent)
    );
    exports.NewReactComponent = NewReactComponent;
  }
});

// node_modules/ag-grid-react/lib/shared/portalManager.js
var require_portalManager = __commonJS({
  "node_modules/ag-grid-react/lib/shared/portalManager.js"(exports) {
    "use strict";
    var __spreadArray2 = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PortalManager = exports.LegacyPortalManager = void 0;
    var LegacyPortalManager = (
      /** @class */
      function() {
        function LegacyPortalManager2(parent, wrappingElement, maxComponentCreationTimeMs) {
          this.destroyed = false;
          this.portals = [];
          this.hasPendingPortalUpdate = false;
          this.wrappingElement = wrappingElement ? wrappingElement : "div";
          this.parent = parent;
          this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : LegacyPortalManager2.MAX_COMPONENT_CREATION_TIME_IN_MS;
        }
        LegacyPortalManager2.prototype.getPortals = function() {
          return this.portals;
        };
        LegacyPortalManager2.prototype.destroy = function() {
          this.destroyed = true;
        };
        LegacyPortalManager2.prototype.destroyPortal = function(portal) {
          this.portals = this.portals.filter(function(curPortal) {
            return curPortal !== portal;
          });
          this.batchUpdate();
        };
        LegacyPortalManager2.prototype.getComponentWrappingElement = function() {
          return this.wrappingElement;
        };
        LegacyPortalManager2.prototype.mountReactPortal = function(portal, reactComponent, resolve) {
          this.portals = __spreadArray2(__spreadArray2([], this.portals), [portal]);
          this.waitForInstance(reactComponent, resolve);
          this.batchUpdate();
        };
        LegacyPortalManager2.prototype.updateReactPortal = function(oldPortal, newPortal) {
          this.portals[this.portals.indexOf(oldPortal)] = newPortal;
          this.batchUpdate();
        };
        LegacyPortalManager2.prototype.batchUpdate = function() {
          var _this = this;
          if (this.hasPendingPortalUpdate) {
            return;
          }
          setTimeout(function() {
            if (!_this.destroyed) {
              _this.parent.forceUpdate(function() {
                _this.hasPendingPortalUpdate = false;
              });
            }
          });
          this.hasPendingPortalUpdate = true;
        };
        LegacyPortalManager2.prototype.waitForInstance = function(reactComponent, resolve, startTime) {
          var _this = this;
          if (startTime === void 0) {
            startTime = Date.now();
          }
          if (this.destroyed) {
            resolve(null);
            return;
          }
          if (reactComponent.rendered()) {
            resolve(reactComponent);
          } else {
            if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {
              if (reactComponent.isNullValue()) {
                resolve(reactComponent);
                return;
              }
              console.error("AG Grid: React Component '" + reactComponent.getReactComponentName() + "' not created within " + this.maxComponentCreationTimeMs + "ms");
              return;
            }
            window.setTimeout(function() {
              _this.waitForInstance(reactComponent, resolve, startTime);
            });
          }
        };
        LegacyPortalManager2.MAX_COMPONENT_CREATION_TIME_IN_MS = 1e3;
        return LegacyPortalManager2;
      }()
    );
    exports.LegacyPortalManager = LegacyPortalManager;
    var PortalManager = (
      /** @class */
      function() {
        function PortalManager2(refresher, wrappingElement, maxComponentCreationTimeMs) {
          this.destroyed = false;
          this.portals = [];
          this.hasPendingPortalUpdate = false;
          this.wrappingElement = wrappingElement ? wrappingElement : "div";
          this.refresher = refresher;
          this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager2.MAX_COMPONENT_CREATION_TIME_IN_MS;
        }
        PortalManager2.prototype.getPortals = function() {
          return this.portals;
        };
        PortalManager2.prototype.destroy = function() {
          this.destroyed = true;
        };
        PortalManager2.prototype.destroyPortal = function(portal) {
          this.portals = this.portals.filter(function(curPortal) {
            return curPortal !== portal;
          });
          this.batchUpdate();
        };
        PortalManager2.prototype.getComponentWrappingElement = function() {
          return this.wrappingElement;
        };
        PortalManager2.prototype.mountReactPortal = function(portal, reactComponent, resolve) {
          this.portals = __spreadArray2(__spreadArray2([], this.portals), [portal]);
          this.waitForInstance(reactComponent, resolve);
          this.batchUpdate();
        };
        PortalManager2.prototype.updateReactPortal = function(oldPortal, newPortal) {
          this.portals[this.portals.indexOf(oldPortal)] = newPortal;
          this.batchUpdate();
        };
        PortalManager2.prototype.batchUpdate = function() {
          var _this = this;
          if (this.hasPendingPortalUpdate) {
            return;
          }
          setTimeout(function() {
            if (!_this.destroyed) {
              _this.refresher();
              _this.hasPendingPortalUpdate = false;
            }
          });
          this.hasPendingPortalUpdate = true;
        };
        PortalManager2.prototype.waitForInstance = function(reactComponent, resolve, startTime) {
          var _this = this;
          if (startTime === void 0) {
            startTime = Date.now();
          }
          if (this.destroyed) {
            resolve(null);
            return;
          }
          if (reactComponent.rendered()) {
            resolve(reactComponent);
          } else {
            if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {
              if (reactComponent.isNullValue()) {
                resolve(reactComponent);
                return;
              }
              console.error("AG Grid: React Component '" + reactComponent.getReactComponentName() + "' not created within " + this.maxComponentCreationTimeMs + "ms");
              return;
            }
            window.setTimeout(function() {
              _this.waitForInstance(reactComponent, resolve, startTime);
            });
          }
        };
        PortalManager2.MAX_COMPONENT_CREATION_TIME_IN_MS = 1e3;
        return PortalManager2;
      }()
    );
    exports.PortalManager = PortalManager;
  }
});

// node_modules/ag-grid-react/lib/reactUi/beansContext.js
var require_beansContext = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/beansContext.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BeansContext = void 0;
    var react_1 = __importDefault(require_react());
    exports.BeansContext = react_1.default.createContext({});
  }
});

// node_modules/ag-grid-react/lib/reactUi/jsComp.js
var require_jsComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/jsComp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSyncJsComp = exports.showJsComp = void 0;
    var showJsComp = function(compDetails, context, eParent, ref) {
      var doNothing = !compDetails || compDetails.componentFromFramework || context.isDestroyed();
      if (doNothing) {
        return;
      }
      var promise = compDetails.newAgStackInstance();
      if (!promise) {
        return;
      }
      var comp;
      var compGui;
      var destroyed = false;
      promise.then(function(c) {
        if (destroyed) {
          context.destroyBean(c);
          return;
        }
        comp = c;
        compGui = comp.getGui();
        eParent.appendChild(compGui);
        setRef(ref, comp);
      });
      return function() {
        destroyed = true;
        if (!comp) {
          return;
        }
        if (compGui && compGui.parentElement) {
          compGui.parentElement.removeChild(compGui);
        }
        context.destroyBean(comp);
        if (ref) {
          setRef(ref, void 0);
        }
      };
    };
    exports.showJsComp = showJsComp;
    var setRef = function(ref, value) {
      if (!ref) {
        return;
      }
      if (ref instanceof Function) {
        var refCallback = ref;
        refCallback(value);
      } else {
        var refObj = ref;
        refObj.current = value;
      }
    };
    var createSyncJsComp = function(compDetails) {
      var promise = compDetails.newAgStackInstance();
      if (!promise) {
        return;
      }
      return promise.resolveNow(null, function(x) {
        return x;
      });
    };
    exports.createSyncJsComp = createSyncJsComp;
  }
});

// node_modules/ag-grid-react/lib/reactUi/utils.js
var require_utils = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/utils.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __spreadArray2 = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getNextValueIfDifferent = exports.agFlushSync = exports.isComponentStateless = exports.CssClasses = exports.classesList = void 0;
    var react_dom_1 = __importDefault(require_react_dom());
    var classesList = function() {
      var list = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        list[_i] = arguments[_i];
      }
      var filtered = list.filter(function(s) {
        return s != null && s !== "";
      });
      return filtered.join(" ");
    };
    exports.classesList = classesList;
    var CssClasses = (
      /** @class */
      function() {
        function CssClasses2() {
          var _this = this;
          var initialClasses = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            initialClasses[_i] = arguments[_i];
          }
          this.classesMap = {};
          initialClasses.forEach(function(className) {
            _this.classesMap[className] = true;
          });
        }
        CssClasses2.prototype.setClass = function(className, on) {
          var nothingHasChanged = !!this.classesMap[className] == on;
          if (nothingHasChanged) {
            return this;
          }
          var res = new CssClasses2();
          res.classesMap = __assign2({}, this.classesMap);
          res.classesMap[className] = on;
          return res;
        };
        CssClasses2.prototype.toString = function() {
          var _this = this;
          var res = Object.keys(this.classesMap).filter(function(key) {
            return _this.classesMap[key];
          }).join(" ");
          return res;
        };
        return CssClasses2;
      }()
    );
    exports.CssClasses = CssClasses;
    var isComponentStateless = function(Component2) {
      var hasSymbol = function() {
        return typeof Symbol === "function" && Symbol.for;
      };
      var getMemoType = function() {
        return hasSymbol() ? Symbol.for("react.memo") : 60115;
      };
      return typeof Component2 === "function" && !(Component2.prototype && Component2.prototype.isReactComponent) || typeof Component2 === "object" && Component2.$$typeof === getMemoType();
    };
    exports.isComponentStateless = isComponentStateless;
    var createRootAndFlushSyncAvailable = react_dom_1.default.createRoot != null && react_dom_1.default.flushSync != null;
    var agFlushSync = function(useFlushSync, fn) {
      if (createRootAndFlushSyncAvailable && useFlushSync) {
        react_dom_1.default.flushSync(fn);
      } else {
        fn();
      }
    };
    exports.agFlushSync = agFlushSync;
    function getNextValueIfDifferent(prev, next, maintainOrder) {
      if (next == null || prev == null) {
        return next;
      }
      if (prev === next || next.length === 0 && prev.length === 0) {
        return prev;
      }
      if (maintainOrder || prev.length === 0 && next.length > 0 || prev.length > 0 && next.length === 0) {
        return next;
      }
      var oldValues = [];
      var newValues = [];
      var prevMap = /* @__PURE__ */ new Map();
      var nextMap = /* @__PURE__ */ new Map();
      for (var i = 0; i < next.length; i++) {
        var c = next[i];
        nextMap.set(c.getInstanceId(), c);
      }
      for (var i = 0; i < prev.length; i++) {
        var c = prev[i];
        prevMap.set(c.getInstanceId(), c);
        if (nextMap.has(c.getInstanceId())) {
          oldValues.push(c);
        }
      }
      for (var i = 0; i < next.length; i++) {
        var c = next[i];
        var instanceId = c.getInstanceId();
        if (!prevMap.has(instanceId)) {
          newValues.push(c);
        }
      }
      if (oldValues.length === prev.length && newValues.length === 0) {
        return prev;
      }
      if (oldValues.length === 0 && newValues.length === next.length) {
        return next;
      }
      return __spreadArray2(__spreadArray2([], oldValues), newValues);
    }
    exports.getNextValueIfDifferent = getNextValueIfDifferent;
  }
});

// node_modules/ag-grid-react/lib/reactUi/cellRenderer/groupCellRenderer.js
var require_groupCellRenderer = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cellRenderer/groupCellRenderer.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var jsComp_1 = require_jsComp();
    var utils_1 = require_utils();
    var GroupCellRenderer2 = react_1.forwardRef(function(props, ref) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var eGui = react_1.useRef(null);
      var eValueRef = react_1.useRef(null);
      var eCheckboxRef = react_1.useRef(null);
      var eExpandedRef = react_1.useRef(null);
      var eContractedRef = react_1.useRef(null);
      var ctrlRef = react_1.useRef();
      var _a = react_1.useState(), innerCompDetails = _a[0], setInnerCompDetails = _a[1];
      var _b = react_1.useState(), childCount = _b[0], setChildCount = _b[1];
      var _c = react_1.useState(), value = _c[0], setValue = _c[1];
      var _d = react_1.useState(function() {
        return new utils_1.CssClasses();
      }), cssClasses = _d[0], setCssClasses = _d[1];
      var _e = react_1.useState(function() {
        return new utils_1.CssClasses("ag-hidden");
      }), expandedCssClasses = _e[0], setExpandedCssClasses = _e[1];
      var _f = react_1.useState(function() {
        return new utils_1.CssClasses("ag-hidden");
      }), contractedCssClasses = _f[0], setContractedCssClasses = _f[1];
      var _g = react_1.useState(function() {
        return new utils_1.CssClasses("ag-invisible");
      }), checkboxCssClasses = _g[0], setCheckboxCssClasses = _g[1];
      react_1.useImperativeHandle(ref, function() {
        return {
          // force new instance when grid tries to refresh
          refresh: function() {
            return false;
          }
        };
      });
      react_1.useLayoutEffect(function() {
        return jsComp_1.showJsComp(innerCompDetails, context, eValueRef.current);
      }, [innerCompDetails]);
      var setRef = react_1.useCallback(function(ref2) {
        eGui.current = ref2;
        if (!eGui.current) {
          context.destroyBean(ctrlRef.current);
          ctrlRef.current = null;
          return;
        }
        var compProxy = {
          setInnerRenderer: function(details, valueToDisplay) {
            setInnerCompDetails(details);
            setValue(valueToDisplay);
          },
          setChildCount: function(count) {
            return setChildCount(count);
          },
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setContractedDisplayed: function(displayed) {
            return setContractedCssClasses(function(prev) {
              return prev.setClass("ag-hidden", !displayed);
            });
          },
          setExpandedDisplayed: function(displayed) {
            return setExpandedCssClasses(function(prev) {
              return prev.setClass("ag-hidden", !displayed);
            });
          },
          setCheckboxVisible: function(visible) {
            return setCheckboxCssClasses(function(prev) {
              return prev.setClass("ag-invisible", !visible);
            });
          }
        };
        ctrlRef.current = context.createBean(new ag_grid_community_1.GroupCellRendererCtrl());
        ctrlRef.current.init(compProxy, eGui.current, eCheckboxRef.current, eExpandedRef.current, eContractedRef.current, GroupCellRenderer2, props);
      }, []);
      var className = react_1.useMemo(function() {
        return "ag-cell-wrapper " + cssClasses.toString();
      }, [cssClasses]);
      var expandedClassName = react_1.useMemo(function() {
        return "ag-group-expanded " + expandedCssClasses.toString();
      }, [expandedCssClasses]);
      var contractedClassName = react_1.useMemo(function() {
        return "ag-group-contracted " + contractedCssClasses.toString();
      }, [contractedCssClasses]);
      var checkboxClassName = react_1.useMemo(function() {
        return "ag-group-checkbox " + checkboxCssClasses.toString();
      }, [checkboxCssClasses]);
      var useFwRenderer = innerCompDetails && innerCompDetails.componentFromFramework;
      var FwRenderer = useFwRenderer ? innerCompDetails.componentClass : void 0;
      var useValue = innerCompDetails == null && value != null;
      var escapedValue = ag_grid_community_1._.escapeString(value, true);
      return react_1.default.createElement(
        "span",
        __assign2({ className, ref: setRef }, !props.colDef ? { role: "gridcell" } : {}),
        react_1.default.createElement("span", { className: expandedClassName, ref: eExpandedRef }),
        react_1.default.createElement("span", { className: contractedClassName, ref: eContractedRef }),
        react_1.default.createElement("span", { className: checkboxClassName, ref: eCheckboxRef }),
        react_1.default.createElement(
          "span",
          { className: "ag-group-value", ref: eValueRef },
          useValue && react_1.default.createElement(react_1.default.Fragment, null, escapedValue),
          useFwRenderer && react_1.default.createElement(FwRenderer, __assign2({}, innerCompDetails.params))
        ),
        react_1.default.createElement("span", { className: "ag-group-child-count" }, childCount)
      );
    });
    exports.default = GroupCellRenderer2;
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerCellComp.js
var require_headerCellComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerCellComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var utils_1 = require_utils();
    var jsComp_1 = require_jsComp();
    var HeaderCellComp2 = function(props) {
      var ctrl = props.ctrl;
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var colId = ctrl.getColId();
      var _a = react_1.useState(), userCompDetails = _a[0], setUserCompDetails = _a[1];
      var eGui = react_1.useRef(null);
      var eResize = react_1.useRef(null);
      var eHeaderCompWrapper = react_1.useRef(null);
      var userCompRef = react_1.useRef();
      var cssClassManager = react_1.useRef();
      if (!cssClassManager.current) {
        cssClassManager.current = new ag_grid_community_1.CssClassManager(function() {
          return eGui.current;
        });
      }
      var setRef = react_1.useCallback(function(e) {
        var _a2;
        eGui.current = e;
        if (!eGui.current) {
          return;
        }
        var compProxy = {
          setWidth: function(width) {
            if (eGui.current) {
              eGui.current.style.width = width;
            }
          },
          addOrRemoveCssClass: function(name, on) {
            return cssClassManager.current.addOrRemoveCssClass(name, on);
          },
          setAriaDescription: function(label) {
            if (eGui.current) {
              ag_grid_community_1._.setAriaDescription(eGui.current, label);
            }
          },
          setAriaSort: function(sort) {
            if (eGui.current) {
              sort ? ag_grid_community_1._.setAriaSort(eGui.current, sort) : ag_grid_community_1._.removeAriaSort(eGui.current);
            }
          },
          setUserCompDetails: function(compDetails) {
            return setUserCompDetails(compDetails);
          },
          getUserCompInstance: function() {
            return userCompRef.current || void 0;
          }
        };
        ctrl.setComp(compProxy, eGui.current, eResize.current, eHeaderCompWrapper.current);
        var selectAllGui = ctrl.getSelectAllGui();
        (_a2 = eResize.current) === null || _a2 === void 0 ? void 0 : _a2.insertAdjacentElement("afterend", selectAllGui);
      }, []);
      react_1.useLayoutEffect(function() {
        return jsComp_1.showJsComp(userCompDetails, context, eHeaderCompWrapper.current, userCompRef);
      }, [userCompDetails]);
      react_1.useEffect(function() {
        ctrl.setDragSource(eGui.current);
      }, [userCompDetails]);
      var userCompStateless = react_1.useMemo(function() {
        var res = (userCompDetails === null || userCompDetails === void 0 ? void 0 : userCompDetails.componentFromFramework) && utils_1.isComponentStateless(userCompDetails.componentClass);
        return !!res;
      }, [userCompDetails]);
      var reactUserComp = userCompDetails && userCompDetails.componentFromFramework;
      var UserCompClass = userCompDetails && userCompDetails.componentClass;
      return react_1.default.createElement(
        "div",
        { ref: setRef, className: "ag-header-cell", "col-id": colId, role: "columnheader", tabIndex: -1 },
        react_1.default.createElement("div", { ref: eResize, className: "ag-header-cell-resize", role: "presentation" }),
        react_1.default.createElement(
          "div",
          { ref: eHeaderCompWrapper, className: "ag-header-cell-comp-wrapper", role: "presentation" },
          reactUserComp && userCompStateless && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params)),
          reactUserComp && !userCompStateless && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params, { ref: userCompRef }))
        )
      );
    };
    exports.default = react_1.memo(HeaderCellComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerGroupCellComp.js
var require_headerGroupCellComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerGroupCellComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var jsComp_1 = require_jsComp();
    var utils_1 = require_utils();
    var HeaderGroupCellComp2 = function(props) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var ctrl = props.ctrl;
      var _a = react_1.useState(function() {
        return new utils_1.CssClasses();
      }), cssClasses = _a[0], setCssClasses = _a[1];
      var _b = react_1.useState(function() {
        return new utils_1.CssClasses();
      }), cssResizableClasses = _b[0], setResizableCssClasses = _b[1];
      var _c = react_1.useState("false"), resizableAriaHidden = _c[0], setResizableAriaHidden = _c[1];
      var _d = react_1.useState(), ariaExpanded = _d[0], setAriaExpanded2 = _d[1];
      var _e = react_1.useState(), userCompDetails = _e[0], setUserCompDetails = _e[1];
      var colId = react_1.useMemo(function() {
        return ctrl.getColId();
      }, []);
      var eGui = react_1.useRef(null);
      var eResize = react_1.useRef(null);
      var setRef = react_1.useCallback(function(e) {
        eGui.current = e;
        if (!eGui.current) {
          return;
        }
        var compProxy = {
          setWidth: function(width) {
            if (eGui.current) {
              eGui.current.style.width = width;
            }
          },
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setUserCompDetails: function(compDetails) {
            return setUserCompDetails(compDetails);
          },
          setResizableDisplayed: function(displayed) {
            setResizableCssClasses(function(prev) {
              return prev.setClass("ag-hidden", !displayed);
            });
            setResizableAriaHidden(!displayed ? "true" : "false");
          },
          setAriaExpanded: function(expanded) {
            return setAriaExpanded2(expanded);
          }
        };
        ctrl.setComp(compProxy, eGui.current, eResize.current);
      }, []);
      react_1.useLayoutEffect(function() {
        return jsComp_1.showJsComp(userCompDetails, context, eGui.current);
      }, [userCompDetails]);
      react_1.useEffect(function() {
        if (eGui.current) {
          ctrl.setDragSource(eGui.current);
        }
      }, [userCompDetails]);
      var className = react_1.useMemo(function() {
        return "ag-header-group-cell " + cssClasses.toString();
      }, [cssClasses]);
      var resizableClassName = react_1.useMemo(function() {
        return "ag-header-cell-resize " + cssResizableClasses.toString();
      }, [cssResizableClasses]);
      var reactUserComp = userCompDetails && userCompDetails.componentFromFramework;
      var UserCompClass = userCompDetails && userCompDetails.componentClass;
      return react_1.default.createElement(
        "div",
        { ref: setRef, className, "col-id": colId, role: "columnheader", tabIndex: -1, "aria-expanded": ariaExpanded },
        reactUserComp && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params)),
        react_1.default.createElement("div", { ref: eResize, "aria-hidden": resizableAriaHidden, className: resizableClassName })
      );
    };
    exports.default = react_1.memo(HeaderGroupCellComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerFilterCellComp.js
var require_headerFilterCellComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerFilterCellComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var utils_1 = require_utils();
    var jsComp_1 = require_jsComp();
    var HeaderFilterCellComp2 = function(props) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var _a = react_1.useState(function() {
        return new utils_1.CssClasses("ag-header-cell", "ag-floating-filter");
      }), cssClasses = _a[0], setCssClasses = _a[1];
      var _b = react_1.useState(function() {
        return new utils_1.CssClasses();
      }), cssBodyClasses = _b[0], setBodyCssClasses = _b[1];
      var _c = react_1.useState(function() {
        return new utils_1.CssClasses("ag-floating-filter-button", "ag-hidden");
      }), cssButtonWrapperClasses = _c[0], setButtonWrapperCssClasses = _c[1];
      var _d = react_1.useState("false"), buttonWrapperAriaHidden = _d[0], setButtonWrapperAriaHidden = _d[1];
      var _e = react_1.useState(), userCompDetails = _e[0], setUserCompDetails = _e[1];
      var eGui = react_1.useRef(null);
      var eFloatingFilterBody = react_1.useRef(null);
      var eButtonWrapper = react_1.useRef(null);
      var eButtonShowMainFilter = react_1.useRef(null);
      var userCompResolve = react_1.useRef();
      var userCompPromise = react_1.useRef();
      var userCompRef = function(value) {
        if (value == null) {
          return;
        }
        userCompResolve.current && userCompResolve.current(value);
      };
      var ctrl = props.ctrl;
      var setRef = react_1.useCallback(function(e) {
        eGui.current = e;
        if (!eGui.current) {
          return;
        }
        userCompPromise.current = new ag_grid_community_1.AgPromise(function(resolve) {
          userCompResolve.current = resolve;
        });
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          addOrRemoveBodyCssClass: function(name, on) {
            return setBodyCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setButtonWrapperDisplayed: function(displayed) {
            setButtonWrapperCssClasses(function(prev) {
              return prev.setClass("ag-hidden", !displayed);
            });
            setButtonWrapperAriaHidden(!displayed ? "true" : "false");
          },
          setWidth: function(width) {
            if (eGui.current) {
              eGui.current.style.width = width;
            }
          },
          setCompDetails: function(compDetails) {
            return setUserCompDetails(compDetails);
          },
          getFloatingFilterComp: function() {
            return userCompPromise.current ? userCompPromise.current : null;
          },
          setMenuIcon: function(eIcon) {
            var _a2;
            return (_a2 = eButtonShowMainFilter.current) === null || _a2 === void 0 ? void 0 : _a2.appendChild(eIcon);
          }
        };
        ctrl.setComp(compProxy, eGui.current, eButtonShowMainFilter.current, eFloatingFilterBody.current);
      }, []);
      react_1.useLayoutEffect(function() {
        return jsComp_1.showJsComp(userCompDetails, context, eFloatingFilterBody.current, userCompRef);
      }, [userCompDetails]);
      var className = react_1.useMemo(function() {
        return cssClasses.toString();
      }, [cssClasses]);
      var bodyClassName = react_1.useMemo(function() {
        return cssBodyClasses.toString();
      }, [cssBodyClasses]);
      var buttonWrapperClassName = react_1.useMemo(function() {
        return cssButtonWrapperClasses.toString();
      }, [cssButtonWrapperClasses]);
      var userCompStateless = react_1.useMemo(function() {
        var res = userCompDetails && userCompDetails.componentFromFramework && utils_1.isComponentStateless(userCompDetails.componentClass);
        return !!res;
      }, [userCompDetails]);
      var reactUserComp = userCompDetails && userCompDetails.componentFromFramework;
      var UserCompClass = userCompDetails && userCompDetails.componentClass;
      return react_1.default.createElement(
        "div",
        { ref: setRef, className, role: "gridcell", tabIndex: -1 },
        react_1.default.createElement(
          "div",
          { ref: eFloatingFilterBody, className: bodyClassName, role: "presentation" },
          reactUserComp && userCompStateless && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params)),
          reactUserComp && !userCompStateless && react_1.default.createElement(UserCompClass, __assign2({}, userCompDetails.params, { ref: userCompRef }))
        ),
        react_1.default.createElement(
          "div",
          { ref: eButtonWrapper, "aria-hidden": buttonWrapperAriaHidden, className: buttonWrapperClassName, role: "presentation" },
          react_1.default.createElement("button", { ref: eButtonShowMainFilter, type: "button", className: "ag-button ag-floating-filter-button-button", tabIndex: -1 })
        )
      );
    };
    exports.default = react_1.memo(HeaderFilterCellComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerRowComp.js
var require_headerRowComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerRowComp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var headerCellComp_1 = __importDefault(require_headerCellComp());
    var headerGroupCellComp_1 = __importDefault(require_headerGroupCellComp());
    var headerFilterCellComp_1 = __importDefault(require_headerFilterCellComp());
    var utils_1 = require_utils();
    var HeaderRowComp2 = function(props) {
      var ctrl = props.ctrl;
      var _a = react_1.useMemo(function() {
        return ctrl.getTopAndHeight();
      }, []), topOffset = _a.topOffset, rowHeight = _a.rowHeight;
      var ariaRowIndex = ctrl.getAriaRowIndex();
      var className = ctrl.getHeaderRowClass();
      var transform = react_1.useMemo(function() {
        return ctrl.getTransform();
      }, []);
      var _b = react_1.useState(function() {
        return rowHeight + "px";
      }), height = _b[0], setHeight = _b[1];
      var _c = react_1.useState(function() {
        return topOffset + "px";
      }), top = _c[0], setTop = _c[1];
      var _d = react_1.useState(function() {
        return ctrl.getHeaderCtrls();
      }), cellCtrls = _d[0], setCellCtrls = _d[1];
      var eGui = react_1.useRef(null);
      var setRef = react_1.useCallback(function(e) {
        eGui.current = e;
        if (!e) {
          return;
        }
        var compProxy = {
          setHeight: function(height2) {
            return setHeight(height2);
          },
          setTop: function(top2) {
            return setTop(top2);
          },
          setHeaderCtrls: function(ctrls, forceOrder, afterScroll) {
            utils_1.agFlushSync(afterScroll, function() {
              setCellCtrls(function(prev) {
                return utils_1.getNextValueIfDifferent(prev, ctrls, forceOrder);
              });
            });
          },
          setWidth: function(width) {
            if (eGui.current) {
              eGui.current.style.width = width;
            }
          }
        };
        ctrl.setComp(compProxy, false);
      }, []);
      var style = react_1.useMemo(function() {
        return {
          transform,
          height,
          top
        };
      }, [transform, height, top]);
      var createCellJsx = react_1.useCallback(function(cellCtrl) {
        switch (ctrl.getType()) {
          case ag_grid_community_1.HeaderRowType.COLUMN_GROUP:
            return react_1.default.createElement(headerGroupCellComp_1.default, { ctrl: cellCtrl, key: cellCtrl.getInstanceId() });
          case ag_grid_community_1.HeaderRowType.FLOATING_FILTER:
            return react_1.default.createElement(headerFilterCellComp_1.default, { ctrl: cellCtrl, key: cellCtrl.getInstanceId() });
          default:
            return react_1.default.createElement(headerCellComp_1.default, { ctrl: cellCtrl, key: cellCtrl.getInstanceId() });
        }
      }, []);
      return react_1.default.createElement("div", { ref: setRef, className, role: "row", style, "aria-rowindex": ariaRowIndex }, cellCtrls.map(createCellJsx));
    };
    exports.default = react_1.memo(HeaderRowComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/headerRowContainerComp.js
var require_headerRowContainerComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/headerRowContainerComp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var headerRowComp_1 = __importDefault(require_headerRowComp());
    var HeaderRowContainerComp2 = function(props) {
      var _a = react_1.useState(true), displayed = _a[0], setDisplayed2 = _a[1];
      var _b = react_1.useState([]), headerRowCtrls = _b[0], setHeaderRowCtrls = _b[1];
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var eGui = react_1.useRef(null);
      var eCenterContainer = react_1.useRef(null);
      var headerRowCtrlRef = react_1.useRef(null);
      var pinnedLeft = props.pinned === "left";
      var pinnedRight = props.pinned === "right";
      var centre = !pinnedLeft && !pinnedRight;
      var setRef = react_1.useCallback(function(e) {
        eGui.current = e;
        if (!eGui.current) {
          context.destroyBean(headerRowCtrlRef.current);
          headerRowCtrlRef.current = null;
          return;
        }
        var compProxy = {
          setDisplayed: setDisplayed2,
          setCtrls: function(ctrls) {
            return setHeaderRowCtrls(ctrls);
          },
          // centre only
          setCenterWidth: function(width) {
            if (eCenterContainer.current) {
              eCenterContainer.current.style.width = width;
            }
          },
          setViewportScrollLeft: function(left) {
            if (eGui.current) {
              eGui.current.scrollLeft = left;
            }
          },
          // pinned only
          setPinnedContainerWidth: function(width) {
            if (eGui.current) {
              eGui.current.style.width = width;
              eGui.current.style.minWidth = width;
              eGui.current.style.maxWidth = width;
            }
          }
        };
        headerRowCtrlRef.current = context.createBean(new ag_grid_community_1.HeaderRowContainerCtrl(props.pinned));
        headerRowCtrlRef.current.setComp(compProxy, eGui.current);
      }, []);
      var className = !displayed ? "ag-hidden" : "";
      var insertRowsJsx = function() {
        return headerRowCtrls.map(function(ctrl) {
          return react_1.default.createElement(headerRowComp_1.default, { ctrl, key: ctrl.getInstanceId() });
        });
      };
      return react_1.default.createElement(
        react_1.default.Fragment,
        null,
        pinnedLeft && react_1.default.createElement("div", { ref: setRef, className: "ag-pinned-left-header " + className, "aria-hidden": !displayed, role: "presentation" }, insertRowsJsx()),
        pinnedRight && react_1.default.createElement("div", { ref: setRef, className: "ag-pinned-right-header " + className, "aria-hidden": !displayed, role: "presentation" }, insertRowsJsx()),
        centre && react_1.default.createElement(
          "div",
          { ref: setRef, className: "ag-header-viewport " + className, role: "presentation" },
          react_1.default.createElement("div", { ref: eCenterContainer, className: "ag-header-container", role: "rowgroup" }, insertRowsJsx())
        )
      );
    };
    exports.default = react_1.memo(HeaderRowContainerComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/header/gridHeaderComp.js
var require_gridHeaderComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/header/gridHeaderComp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var utils_1 = require_utils();
    var headerRowContainerComp_1 = __importDefault(require_headerRowContainerComp());
    var GridHeaderComp2 = function() {
      var _a = react_1.useState(function() {
        return new utils_1.CssClasses();
      }), cssClasses = _a[0], setCssClasses = _a[1];
      var _b = react_1.useState(), height = _b[0], setHeight = _b[1];
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var eGui = react_1.useRef(null);
      var gridCtrlRef = react_1.useRef(null);
      var setRef = react_1.useCallback(function(e) {
        eGui.current = e;
        if (!e) {
          context.destroyBean(gridCtrlRef.current);
          gridCtrlRef.current = null;
          return;
        }
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setHeightAndMinHeight: function(height2) {
            return setHeight(height2);
          }
        };
        gridCtrlRef.current = context.createBean(new ag_grid_community_1.GridHeaderCtrl());
        gridCtrlRef.current.setComp(compProxy, eGui.current, eGui.current);
      }, []);
      var className = react_1.useMemo(function() {
        var res = cssClasses.toString();
        return "ag-header " + res;
      }, [cssClasses]);
      var style = react_1.useMemo(function() {
        return {
          height,
          minHeight: height
        };
      }, [height]);
      return react_1.default.createElement(
        "div",
        { ref: setRef, className, style, role: "presentation" },
        react_1.default.createElement(headerRowContainerComp_1.default, { pinned: "left" }),
        react_1.default.createElement(headerRowContainerComp_1.default, { pinned: null }),
        react_1.default.createElement(headerRowContainerComp_1.default, { pinned: "right" })
      );
    };
    exports.default = react_1.memo(GridHeaderComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/reactComment.js
var require_reactComment = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/reactComment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    var useReactCommentEffect = function(comment, eForCommentRef) {
      react_1.useEffect(function() {
        var eForComment = eForCommentRef.current;
        if (eForComment) {
          var eParent_1 = eForComment.parentElement;
          if (eParent_1) {
            var eComment_1 = document.createComment(comment);
            eParent_1.insertBefore(eComment_1, eForComment);
            return function() {
              eParent_1.removeChild(eComment_1);
            };
          }
        }
      }, [comment]);
    };
    exports.default = useReactCommentEffect;
  }
});

// node_modules/ag-grid-react/lib/reactUi/useEffectOnce.js
var require_useEffectOnce = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/useEffectOnce.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useEffectOnce = void 0;
    var react_1 = require_react();
    var useEffectOnce = function(effect) {
      var effectFn = react_1.useRef(effect);
      var destroyFn = react_1.useRef();
      var effectCalled = react_1.useRef(false);
      var rendered = react_1.useRef(false);
      var _a = react_1.useState(0), setVal = _a[1];
      if (effectCalled.current) {
        rendered.current = true;
      }
      react_1.useEffect(function() {
        if (!effectCalled.current) {
          destroyFn.current = effectFn.current();
          effectCalled.current = true;
        }
        setVal(function(val) {
          return val + 1;
        });
        return function() {
          if (!rendered.current) {
            return;
          }
          if (destroyFn.current) {
            destroyFn.current();
          }
        };
      }, []);
    };
    exports.useEffectOnce = useEffectOnce;
  }
});

// node_modules/ag-grid-react/lib/reactUi/cells/popupEditorComp.js
var require_popupEditorComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cells/popupEditorComp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var react_dom_1 = require_react_dom();
    var beansContext_1 = require_beansContext();
    var useEffectOnce_1 = require_useEffectOnce();
    var PopupEditorComp = function(props) {
      var _a = react_1.useState(), popupEditorWrapper = _a[0], setPopupEditorWrapper = _a[1];
      var _b = react_1.useContext(beansContext_1.BeansContext), context = _b.context, popupService = _b.popupService, localeService = _b.localeService, gridOptionsService = _b.gridOptionsService;
      useEffectOnce_1.useEffectOnce(function() {
        var editDetails = props.editDetails, cellCtrl = props.cellCtrl, eParentCell = props.eParentCell;
        var compDetails = editDetails.compDetails;
        var useModelPopup = gridOptionsService.is("stopEditingWhenCellsLoseFocus");
        var wrapper = context.createBean(new ag_grid_community_1.PopupEditorWrapper(compDetails.params));
        var ePopupGui = wrapper.getGui();
        if (props.jsChildComp) {
          var eChildGui = props.jsChildComp.getGui();
          if (eChildGui) {
            ePopupGui.appendChild(eChildGui);
          }
        }
        var positionParams = {
          column: cellCtrl.getColumn(),
          rowNode: cellCtrl.getRowNode(),
          type: "popupCellEditor",
          eventSource: eParentCell,
          ePopup: ePopupGui,
          position: editDetails.popupPosition,
          keepWithinBounds: true
        };
        var positionCallback = popupService.positionPopupByComponent.bind(popupService, positionParams);
        var translate = localeService.getLocaleTextFunc();
        var addPopupRes = popupService.addPopup({
          modal: useModelPopup,
          eChild: ePopupGui,
          closeOnEsc: true,
          closedCallback: function() {
            cellCtrl.onPopupEditorClosed();
          },
          anchorToElement: eParentCell,
          positionCallback,
          ariaLabel: translate("ariaLabelCellEditor", "Cell Editor")
        });
        var hideEditorPopup = addPopupRes ? addPopupRes.hideFunc : void 0;
        setPopupEditorWrapper(wrapper);
        props.jsChildComp && props.jsChildComp.afterGuiAttached && props.jsChildComp.afterGuiAttached();
        return function() {
          if (hideEditorPopup != null) {
            hideEditorPopup();
          }
          context.destroyBean(wrapper);
        };
      });
      return react_1.default.createElement(react_1.default.Fragment, null, popupEditorWrapper && props.wrappedContent && react_dom_1.createPortal(props.wrappedContent, popupEditorWrapper.getGui()));
    };
    exports.default = react_1.memo(PopupEditorComp);
  }
});

// node_modules/ag-grid-react/lib/reactUi/cells/showJsRenderer.js
var require_showJsRenderer = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cells/showJsRenderer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    var beansContext_1 = require_beansContext();
    var useJsCellRenderer = function(showDetails, showTools, eCellValue, cellValueVersion, jsCellRendererRef, eGui) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var destroyCellRenderer = react_1.useCallback(function() {
        var comp = jsCellRendererRef.current;
        if (!comp) {
          return;
        }
        var compGui = comp.getGui();
        if (compGui && compGui.parentElement) {
          compGui.parentElement.removeChild(compGui);
        }
        context.destroyBean(comp);
        jsCellRendererRef.current = void 0;
      }, []);
      react_1.useEffect(function() {
        var showValue = showDetails != null;
        var jsCompDetails = showDetails && showDetails.compDetails && !showDetails.compDetails.componentFromFramework;
        var waitingForToolsSetup = showTools && eCellValue == null;
        var showComp = showValue && jsCompDetails && !waitingForToolsSetup;
        if (!showComp) {
          destroyCellRenderer();
          return;
        }
        var compDetails = showDetails.compDetails;
        if (jsCellRendererRef.current) {
          var comp_1 = jsCellRendererRef.current;
          var attemptRefresh = comp_1.refresh != null && showDetails.force == false;
          var refreshResult = attemptRefresh ? comp_1.refresh(compDetails.params) : false;
          var refreshWorked = refreshResult === true || refreshResult === void 0;
          if (refreshWorked) {
            return;
          }
          destroyCellRenderer();
        }
        var promise = compDetails.newAgStackInstance();
        ;
        if (!promise) {
          return;
        }
        var comp = promise.resolveNow(null, function(x) {
          return x;
        });
        if (!comp) {
          return;
        }
        var compGui = comp.getGui();
        if (!compGui) {
          return;
        }
        var parent = showTools ? eCellValue : eGui.current;
        parent.appendChild(compGui);
        jsCellRendererRef.current = comp;
      }, [showDetails, showTools, cellValueVersion]);
      react_1.useEffect(function() {
        return destroyCellRenderer;
      }, []);
    };
    exports.default = useJsCellRenderer;
  }
});

// node_modules/ag-grid-react/lib/reactUi/cells/cellComp.js
var require_cellComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cells/cellComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CellCompState = void 0;
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var utils_1 = require_utils();
    var popupEditorComp_1 = __importDefault(require_popupEditorComp());
    var showJsRenderer_1 = __importDefault(require_showJsRenderer());
    var beansContext_1 = require_beansContext();
    var jsComp_1 = require_jsComp();
    var CellCompState;
    (function(CellCompState2) {
      CellCompState2[CellCompState2["ShowValue"] = 0] = "ShowValue";
      CellCompState2[CellCompState2["EditValue"] = 1] = "EditValue";
    })(CellCompState = exports.CellCompState || (exports.CellCompState = {}));
    var checkCellEditorDeprecations = function(popup, cellEditor, cellCtrl) {
      var col = cellCtrl.getColumn();
      if (!popup && cellEditor.isPopup && cellEditor.isPopup()) {
        var msg_1 = "AG Grid: Found an issue in column " + col.getColId() + ". If using React, specify an editor is a popup using colDef.cellEditorPopup=true. AG Grid React cannot depend on the editor component specifying if it's in a popup (via the isPopup() method on the editor), as React needs to know this information BEFORE the component is created.";
        ag_grid_community_1._.doOnce(function() {
          return console.warn(msg_1);
        }, "jsEditorComp-isPopup-" + cellCtrl.getColumn().getColId());
      }
      if (popup && cellEditor.getPopupPosition && cellEditor.getPopupPosition() != null) {
        var msg_2 = "AG Grid: Found an issue in column " + col.getColId() + ". If using React, specify an editor popup position using colDef.cellEditorPopupPosition=true. AG Grid React cannot depend on the editor component specifying it's position (via the getPopupPosition() method on the editor), as React needs to know this information BEFORE the component is created.";
        ag_grid_community_1._.doOnce(function() {
          return console.warn(msg_2);
        }, "jsEditorComp-getPopupPosition-" + cellCtrl.getColumn().getColId());
      }
    };
    var jsxEditValue = function(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui, cellCtrl, jsEditorComp) {
      var compDetails = editDetails.compDetails;
      var CellEditorClass = compDetails.componentClass;
      var reactInlineEditor = compDetails.componentFromFramework && !editDetails.popup;
      var reactPopupEditor = compDetails.componentFromFramework && editDetails.popup;
      var jsPopupEditor = !compDetails.componentFromFramework && editDetails.popup;
      return react_1.default.createElement(
        react_1.default.Fragment,
        null,
        reactInlineEditor && react_1.default.createElement(CellEditorClass, __assign2({}, editDetails.compDetails.params, { ref: setInlineCellEditorRef })),
        reactPopupEditor && react_1.default.createElement(popupEditorComp_1.default, { editDetails, cellCtrl, eParentCell: eGui, wrappedContent: react_1.default.createElement(CellEditorClass, __assign2({}, editDetails.compDetails.params, { ref: setPopupCellEditorRef })) }),
        jsPopupEditor && jsEditorComp && react_1.default.createElement(popupEditorComp_1.default, { editDetails, cellCtrl, eParentCell: eGui, jsChildComp: jsEditorComp })
      );
    };
    var jsxShowValue = function(showDetails, key, parentId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setECellValue) {
      var compDetails = showDetails.compDetails, value = showDetails.value;
      var noCellRenderer = !compDetails;
      var reactCellRenderer = compDetails && compDetails.componentFromFramework;
      var CellRendererClass = compDetails && compDetails.componentClass;
      var valueForNoCellRenderer = (value === null || value === void 0 ? void 0 : value.toString) ? value.toString() : value;
      var bodyJsxFunc = function() {
        return react_1.default.createElement(
          react_1.default.Fragment,
          null,
          noCellRenderer && react_1.default.createElement(react_1.default.Fragment, null, valueForNoCellRenderer),
          reactCellRenderer && !reactCellRendererStateless && react_1.default.createElement(CellRendererClass, __assign2({}, compDetails.params, { key, ref: cellRendererRef })),
          reactCellRenderer && reactCellRendererStateless && react_1.default.createElement(CellRendererClass, __assign2({}, compDetails.params, { key }))
        );
      };
      return react_1.default.createElement(react_1.default.Fragment, null, showCellWrapper ? react_1.default.createElement("span", { role: "presentation", id: "cell-" + parentId, className: "ag-cell-value", ref: setECellValue }, bodyJsxFunc()) : bodyJsxFunc());
    };
    var CellComp2 = function(props) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var cellCtrl = props.cellCtrl, printLayout = props.printLayout, editingRow = props.editingRow;
      var tabIndex = cellCtrl.getTabIndex();
      var colId = cellCtrl.getColumnIdSanitised();
      var cellInstanceId = cellCtrl.getInstanceId();
      var _a = react_1.useState(function() {
        return cellCtrl.getIsCellRenderer() ? void 0 : { compDetails: void 0, value: cellCtrl.getValueToDisplay(), force: false };
      }), renderDetails = _a[0], setRenderDetails = _a[1];
      var _b = react_1.useState(), editDetails = _b[0], setEditDetails = _b[1];
      var _c = react_1.useState(1), renderKey = _c[0], setRenderKey = _c[1];
      var _d = react_1.useState(), userStyles = _d[0], setUserStyles = _d[1];
      var _e = react_1.useState(false), includeSelection = _e[0], setIncludeSelection = _e[1];
      var _f = react_1.useState(false), includeRowDrag = _f[0], setIncludeRowDrag = _f[1];
      var _g = react_1.useState(false), includeDndSource = _g[0], setIncludeDndSource = _g[1];
      var _h = react_1.useState(), jsEditorComp = _h[0], setJsEditorComp = _h[1];
      var forceWrapper = react_1.useMemo(function() {
        return cellCtrl.isForceWrapper();
      }, [cellCtrl]);
      var eGui = react_1.useRef(null);
      var cellRendererRef = react_1.useRef(null);
      var jsCellRendererRef = react_1.useRef();
      var cellEditorRef = react_1.useRef();
      var eCellWrapper = react_1.useRef();
      var cellWrapperDestroyFuncs = react_1.useRef([]);
      var eCellValue = react_1.useRef();
      var _j = react_1.useState(0), cellValueVersion = _j[0], setCellValueVersion = _j[1];
      var setCellValueRef = react_1.useCallback(function(ref) {
        eCellValue.current = ref;
        setCellValueVersion(function(v) {
          return v + 1;
        });
      }, []);
      var showTools = renderDetails != null && (includeSelection || includeDndSource || includeRowDrag);
      var showCellWrapper = forceWrapper || showTools;
      var setCellEditorRef = react_1.useCallback(function(popup, cellEditor) {
        cellEditorRef.current = cellEditor;
        if (cellEditor) {
          checkCellEditorDeprecations(popup, cellEditor, cellCtrl);
          var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();
          if (editingCancelledByUserComp) {
            setTimeout(function() {
              cellCtrl.stopEditing(true);
              cellCtrl.focusCell(true);
            });
          }
        }
      }, [cellCtrl]);
      var setPopupCellEditorRef = react_1.useCallback(function(cellRenderer) {
        return setCellEditorRef(true, cellRenderer);
      }, [setCellEditorRef]);
      var setInlineCellEditorRef = react_1.useCallback(function(cellRenderer) {
        return setCellEditorRef(false, cellRenderer);
      }, [setCellEditorRef]);
      var cssClassManager = react_1.useRef();
      if (!cssClassManager.current) {
        cssClassManager.current = new ag_grid_community_1.CssClassManager(function() {
          return eGui.current;
        });
      }
      showJsRenderer_1.default(renderDetails, showCellWrapper, eCellValue.current, cellValueVersion, jsCellRendererRef, eGui);
      var lastRenderDetails = react_1.useRef();
      react_1.useLayoutEffect(function() {
        var oldDetails = lastRenderDetails.current;
        var newDetails = renderDetails;
        lastRenderDetails.current = renderDetails;
        if (oldDetails == null || oldDetails.compDetails == null || newDetails == null || newDetails.compDetails == null) {
          return;
        }
        var oldCompDetails = oldDetails.compDetails;
        var newCompDetails = newDetails.compDetails;
        if (oldCompDetails.componentClass != newCompDetails.componentClass) {
          return;
        }
        if (cellRendererRef.current == null || cellRendererRef.current.refresh == null) {
          return;
        }
        var result = cellRendererRef.current.refresh(newCompDetails.params);
        if (result != true) {
          setRenderKey(function(prev) {
            return prev + 1;
          });
        }
      }, [renderDetails]);
      react_1.useLayoutEffect(function() {
        var doingJsEditor = editDetails && !editDetails.compDetails.componentFromFramework;
        if (!doingJsEditor) {
          return;
        }
        var compDetails = editDetails.compDetails;
        var isPopup = editDetails.popup === true;
        var cellEditor = jsComp_1.createSyncJsComp(compDetails);
        if (!cellEditor) {
          return;
        }
        var compGui = cellEditor.getGui();
        setCellEditorRef(isPopup, cellEditor);
        if (!isPopup) {
          var parentEl = (forceWrapper ? eCellWrapper : eGui).current;
          parentEl === null || parentEl === void 0 ? void 0 : parentEl.appendChild(compGui);
          cellEditor.afterGuiAttached && cellEditor.afterGuiAttached();
        }
        setJsEditorComp(cellEditor);
        return function() {
          context.destroyBean(cellEditor);
          setCellEditorRef(isPopup, void 0);
          setJsEditorComp(void 0);
          if (compGui && compGui.parentElement) {
            compGui.parentElement.removeChild(compGui);
          }
        };
      }, [editDetails]);
      var setCellWrapperRef = react_1.useCallback(function(ref) {
        eCellWrapper.current = ref;
        if (!eCellWrapper.current) {
          cellWrapperDestroyFuncs.current.forEach(function(f) {
            return f();
          });
          cellWrapperDestroyFuncs.current = [];
          return;
        }
        var addComp = function(comp) {
          var _a2;
          if (comp) {
            var eGui_1 = comp.getGui();
            (_a2 = eCellWrapper.current) === null || _a2 === void 0 ? void 0 : _a2.insertAdjacentElement("afterbegin", eGui_1);
            cellWrapperDestroyFuncs.current.push(function() {
              context.destroyBean(comp);
              ag_grid_community_1._.removeFromParent(eGui_1);
            });
          }
          return comp;
        };
        if (includeSelection) {
          var checkboxSelectionComp = cellCtrl.createSelectionCheckbox();
          addComp(checkboxSelectionComp);
        }
        if (includeDndSource) {
          addComp(cellCtrl.createDndSource());
        }
        if (includeRowDrag) {
          addComp(cellCtrl.createRowDragComp());
        }
      }, [cellCtrl, context, includeDndSource, includeRowDrag, includeSelection]);
      var setRef = react_1.useCallback(function(ref) {
        eGui.current = ref;
        if (!eGui.current) {
          return;
        }
        if (!cellCtrl) {
          return;
        }
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return cssClassManager.current.addOrRemoveCssClass(name, on);
          },
          setUserStyles: function(styles) {
            return setUserStyles(styles);
          },
          getFocusableElement: function() {
            return eGui.current;
          },
          setIncludeSelection: function(include) {
            return setIncludeSelection(include);
          },
          setIncludeRowDrag: function(include) {
            return setIncludeRowDrag(include);
          },
          setIncludeDndSource: function(include) {
            return setIncludeDndSource(include);
          },
          getCellEditor: function() {
            return cellEditorRef.current || null;
          },
          getCellRenderer: function() {
            return cellRendererRef.current ? cellRendererRef.current : jsCellRendererRef.current;
          },
          getParentOfValue: function() {
            return eCellValue.current ? eCellValue.current : eCellWrapper.current ? eCellWrapper.current : eGui.current;
          },
          setRenderDetails: function(compDetails, value, force) {
            setRenderDetails(function(prev) {
              if ((prev === null || prev === void 0 ? void 0 : prev.compDetails) !== compDetails || (prev === null || prev === void 0 ? void 0 : prev.value) !== value || (prev === null || prev === void 0 ? void 0 : prev.force) !== force) {
                return {
                  value,
                  compDetails,
                  force
                };
              } else {
                return prev;
              }
            });
          },
          setEditDetails: function(compDetails, popup, popupPosition) {
            if (compDetails) {
              setEditDetails({
                compDetails,
                popup,
                popupPosition
              });
              if (!popup) {
                setRenderDetails(void 0);
              }
            } else {
              setEditDetails(void 0);
            }
          }
        };
        var cellWrapperOrUndefined = eCellWrapper.current || void 0;
        cellCtrl.setComp(compProxy, eGui.current, cellWrapperOrUndefined, printLayout, editingRow);
      }, []);
      var reactCellRendererStateless = react_1.useMemo(function() {
        var res = renderDetails && renderDetails.compDetails && renderDetails.compDetails.componentFromFramework && utils_1.isComponentStateless(renderDetails.compDetails.componentClass);
        return !!res;
      }, [renderDetails]);
      react_1.useLayoutEffect(function() {
        var _a2;
        if (!eGui.current) {
          return;
        }
        cssClassManager.current.addOrRemoveCssClass("ag-cell-value", !showCellWrapper);
        cssClassManager.current.addOrRemoveCssClass("ag-cell-inline-editing", !!editDetails && !editDetails.popup);
        cssClassManager.current.addOrRemoveCssClass("ag-cell-popup-editing", !!editDetails && !!editDetails.popup);
        cssClassManager.current.addOrRemoveCssClass("ag-cell-not-inline-editing", !editDetails || !!editDetails.popup);
        (_a2 = cellCtrl.getRowCtrl()) === null || _a2 === void 0 ? void 0 : _a2.setInlineEditingCss(!!editDetails);
        if (cellCtrl.shouldRestoreFocus() && !cellCtrl.isEditing()) {
          eGui.current.focus({ preventScroll: true });
        }
      });
      var showContents = function() {
        return react_1.default.createElement(
          react_1.default.Fragment,
          null,
          renderDetails != null && jsxShowValue(renderDetails, renderKey, cellInstanceId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setCellValueRef),
          editDetails != null && jsxEditValue(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui.current, cellCtrl, jsEditorComp)
        );
      };
      return react_1.default.createElement("div", { ref: setRef, style: userStyles, tabIndex, role: "gridcell", "col-id": colId }, showCellWrapper ? react_1.default.createElement("div", { className: "ag-cell-wrapper", role: "presentation", ref: setCellWrapperRef }, showContents()) : showContents());
    };
    exports.default = react_1.memo(CellComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/rows/rowComp.js
var require_rowComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/rows/rowComp.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var jsComp_1 = require_jsComp();
    var utils_1 = require_utils();
    var beansContext_1 = require_beansContext();
    var cellComp_1 = __importDefault(require_cellComp());
    var RowComp2 = function(params) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var rowCtrl = params.rowCtrl, containerType = params.containerType;
      var tabIndex = rowCtrl.getTabIndex();
      var domOrderRef = react_1.useRef(rowCtrl.getDomOrder());
      var isFullWidth = rowCtrl.isFullWidth();
      var isDisplayed = rowCtrl.getRowNode().displayed;
      var _a = react_1.useState(function() {
        return isDisplayed ? rowCtrl.getRowIndex() : null;
      }), rowIndex = _a[0], setRowIndex = _a[1];
      var _b = react_1.useState(function() {
        return rowCtrl.getRowId();
      }), rowId = _b[0], setRowId = _b[1];
      var _c = react_1.useState(function() {
        return rowCtrl.getBusinessKey();
      }), rowBusinessKey = _c[0], setRowBusinessKey = _c[1];
      var _d = react_1.useState(function() {
        return rowCtrl.getRowStyles();
      }), userStyles = _d[0], setUserStyles = _d[1];
      var _e = react_1.useState(function() {
        return null;
      }), cellCtrls = _e[0], setCellCtrls = _e[1];
      var _f = react_1.useState(), fullWidthCompDetails = _f[0], setFullWidthCompDetails = _f[1];
      var _g = react_1.useState(function() {
        return isDisplayed ? rowCtrl.getInitialRowTop(containerType) : void 0;
      }), top = _g[0], setTop = _g[1];
      var _h = react_1.useState(function() {
        return isDisplayed ? rowCtrl.getInitialTransform(containerType) : void 0;
      }), transform = _h[0], setTransform = _h[1];
      var eGui = react_1.useRef(null);
      var fullWidthCompRef = react_1.useRef();
      var autoHeightSetup = react_1.useRef(false);
      var _j = react_1.useState(0), autoHeightSetupAttempt = _j[0], setAutoHeightSetupAttempt = _j[1];
      react_1.useEffect(function() {
        var _a2;
        if (autoHeightSetup.current) {
          return;
        }
        if (!fullWidthCompDetails) {
          return;
        }
        if (autoHeightSetupAttempt > 10) {
          return;
        }
        var eChild = (_a2 = eGui.current) === null || _a2 === void 0 ? void 0 : _a2.firstChild;
        if (eChild) {
          rowCtrl.setupDetailRowAutoHeight(eChild);
          autoHeightSetup.current = true;
        } else {
          setAutoHeightSetupAttempt(function(prev) {
            return prev + 1;
          });
        }
      }, [fullWidthCompDetails, autoHeightSetupAttempt]);
      var cssClassManager = react_1.useRef();
      if (!cssClassManager.current) {
        cssClassManager.current = new ag_grid_community_1.CssClassManager(function() {
          return eGui.current;
        });
      }
      var setRef = react_1.useCallback(function(e) {
        eGui.current = e;
        if (!eGui.current) {
          rowCtrl.unsetComp(containerType);
          return;
        }
        if (!rowCtrl.isAlive()) {
          return;
        }
        var compProxy = {
          // the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)
          // as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.
          setTop,
          setTransform,
          // i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of
          // React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.
          addOrRemoveCssClass: function(name, on) {
            return cssClassManager.current.addOrRemoveCssClass(name, on);
          },
          setDomOrder: function(domOrder) {
            return domOrderRef.current = domOrder;
          },
          setRowIndex,
          setRowId,
          setRowBusinessKey,
          setUserStyles,
          // if we don't maintain the order, then cols will be ripped out and into the dom
          // when cols reordered, which would stop the CSS transitions from working
          setCellCtrls: function(next, useFlushSync) {
            utils_1.agFlushSync(useFlushSync, function() {
              setCellCtrls(function(prev) {
                return utils_1.getNextValueIfDifferent(prev, next, domOrderRef.current);
              });
            });
          },
          showFullWidth: function(compDetails) {
            return setFullWidthCompDetails(compDetails);
          },
          getFullWidthCellRenderer: function() {
            return fullWidthCompRef.current;
          }
        };
        rowCtrl.setComp(compProxy, eGui.current, containerType);
      }, []);
      react_1.useLayoutEffect(function() {
        return jsComp_1.showJsComp(fullWidthCompDetails, context, eGui.current, fullWidthCompRef);
      }, [fullWidthCompDetails]);
      var rowStyles = react_1.useMemo(function() {
        var res = { top, transform };
        Object.assign(res, userStyles);
        return res;
      }, [top, transform, userStyles]);
      var showFullWidthFramework = isFullWidth && fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;
      var showCells = !isFullWidth && cellCtrls != null;
      var reactFullWidthCellRendererStateless = react_1.useMemo(function() {
        var res = (fullWidthCompDetails === null || fullWidthCompDetails === void 0 ? void 0 : fullWidthCompDetails.componentFromFramework) && utils_1.isComponentStateless(fullWidthCompDetails.componentClass);
        return !!res;
      }, [fullWidthCompDetails]);
      var showCellsJsx = function() {
        return cellCtrls === null || cellCtrls === void 0 ? void 0 : cellCtrls.map(function(cellCtrl) {
          return react_1.default.createElement(cellComp_1.default, { cellCtrl, editingRow: rowCtrl.isEditing(), printLayout: rowCtrl.isPrintLayout(), key: cellCtrl.getInstanceId() });
        });
      };
      var showFullWidthFrameworkJsx = function() {
        var FullWidthComp = fullWidthCompDetails.componentClass;
        return react_1.default.createElement(
          react_1.default.Fragment,
          null,
          reactFullWidthCellRendererStateless && react_1.default.createElement(FullWidthComp, __assign2({}, fullWidthCompDetails.params)),
          !reactFullWidthCellRendererStateless && react_1.default.createElement(FullWidthComp, __assign2({}, fullWidthCompDetails.params, { ref: fullWidthCompRef }))
        );
      };
      return react_1.default.createElement(
        "div",
        { ref: setRef, role: "row", style: rowStyles, "row-index": rowIndex, "row-id": rowId, "row-business-key": rowBusinessKey, tabIndex },
        showCells && showCellsJsx(),
        showFullWidthFramework && showFullWidthFrameworkJsx()
      );
    };
    exports.default = react_1.memo(RowComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/rows/rowContainerComp.js
var require_rowContainerComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/rows/rowContainerComp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var utils_1 = require_utils();
    var reactComment_1 = __importDefault(require_reactComment());
    var rowComp_1 = __importDefault(require_rowComp());
    var beansContext_1 = require_beansContext();
    var RowContainerComp2 = function(params) {
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var name = params.name;
      var containerType = react_1.useMemo(function() {
        return ag_grid_community_1.getRowContainerTypeForName(name);
      }, [name]);
      var eViewport = react_1.useRef(null);
      var eContainer = react_1.useRef(null);
      var rowCtrlsRef = react_1.useRef([]);
      var _a = react_1.useState(function() {
        return [];
      }), rowCtrlsOrdered = _a[0], setRowCtrlsOrdered = _a[1];
      var domOrderRef = react_1.useRef(false);
      var rowContainerCtrlRef = react_1.useRef();
      var cssClasses = react_1.useMemo(function() {
        return ag_grid_community_1.RowContainerCtrl.getRowContainerCssClasses(name);
      }, [name]);
      var viewportClasses = react_1.useMemo(function() {
        return utils_1.classesList(cssClasses.viewport);
      }, [cssClasses]);
      var containerClasses = react_1.useMemo(function() {
        return utils_1.classesList(cssClasses.container);
      }, [cssClasses]);
      var centerTemplate = name === ag_grid_community_1.RowContainerName.CENTER || name === ag_grid_community_1.RowContainerName.TOP_CENTER || name === ag_grid_community_1.RowContainerName.BOTTOM_CENTER || name === ag_grid_community_1.RowContainerName.STICKY_TOP_CENTER;
      var topLevelRef = centerTemplate ? eViewport : eContainer;
      reactComment_1.default(" AG Row Container " + name + " ", topLevelRef);
      var areElementsReady = react_1.useCallback(function() {
        if (centerTemplate) {
          return eViewport.current != null && eContainer.current != null;
        }
        return eContainer.current != null;
      }, []);
      var areElementsRemoved = react_1.useCallback(function() {
        if (centerTemplate) {
          return eViewport.current == null && eContainer.current == null;
        }
        return eContainer.current == null;
      }, []);
      var setRef = react_1.useCallback(function() {
        if (areElementsRemoved()) {
          context.destroyBean(rowContainerCtrlRef.current);
          rowContainerCtrlRef.current = null;
        }
        if (areElementsReady()) {
          var updateRowCtrlsOrdered_1 = function(useFlushSync) {
            utils_1.agFlushSync(useFlushSync, function() {
              setRowCtrlsOrdered(function(prev) {
                return utils_1.getNextValueIfDifferent(prev, rowCtrlsRef.current, domOrderRef.current);
              });
            });
          };
          var compProxy = {
            setViewportHeight: function(height) {
              if (eViewport.current) {
                eViewport.current.style.height = height;
              }
            },
            setRowCtrls: function(rowCtrls, useFlushSync) {
              var useFlush = useFlushSync && rowCtrlsRef.current.length > 0 && rowCtrls.length > 0;
              rowCtrlsRef.current = rowCtrls;
              updateRowCtrlsOrdered_1(useFlush);
            },
            setDomOrder: function(domOrder) {
              if (domOrderRef.current != domOrder) {
                domOrderRef.current = domOrder;
                updateRowCtrlsOrdered_1(false);
              }
            },
            setContainerWidth: function(width) {
              if (eContainer.current) {
                eContainer.current.style.width = width;
              }
            }
          };
          rowContainerCtrlRef.current = context.createBean(new ag_grid_community_1.RowContainerCtrl(name));
          rowContainerCtrlRef.current.setComp(compProxy, eContainer.current, eViewport.current);
        }
      }, [areElementsReady, areElementsRemoved]);
      var setContainerRef = react_1.useCallback(function(e) {
        eContainer.current = e;
        setRef();
      }, [setRef]);
      var setViewportRef = react_1.useCallback(function(e) {
        eViewport.current = e;
        setRef();
      }, [setRef]);
      var buildContainer = function() {
        return react_1.default.createElement("div", { className: containerClasses, ref: setContainerRef, role: rowCtrlsOrdered.length ? "rowgroup" : "presentation" }, rowCtrlsOrdered.map(function(rowCtrl) {
          return react_1.default.createElement(rowComp_1.default, { rowCtrl, containerType, key: rowCtrl.getInstanceId() });
        }));
      };
      return react_1.default.createElement(react_1.default.Fragment, null, centerTemplate ? react_1.default.createElement("div", { className: viewportClasses, ref: setViewportRef, role: "presentation" }, buildContainer()) : buildContainer());
    };
    exports.default = react_1.memo(RowContainerComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/gridBodyComp.js
var require_gridBodyComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/gridBodyComp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var gridHeaderComp_1 = __importDefault(require_gridHeaderComp());
    var reactComment_1 = __importDefault(require_reactComment());
    var rowContainerComp_1 = __importDefault(require_rowContainerComp());
    var utils_1 = require_utils();
    var GridBodyComp2 = function() {
      var _a = react_1.useContext(beansContext_1.BeansContext), context = _a.context, agStackComponentsRegistry = _a.agStackComponentsRegistry, resizeObserverService = _a.resizeObserverService;
      var _b = react_1.useState(""), rowAnimationClass = _b[0], setRowAnimationClass = _b[1];
      var _c = react_1.useState(0), topHeight = _c[0], setTopHeight = _c[1];
      var _d = react_1.useState(0), bottomHeight = _d[0], setBottomHeight = _d[1];
      var _e = react_1.useState("0px"), stickyTopHeight = _e[0], setStickyTopHeight = _e[1];
      var _f = react_1.useState("0px"), stickyTopTop = _f[0], setStickyTopTop = _f[1];
      var _g = react_1.useState("100%"), stickyTopWidth = _g[0], setStickyTopWidth = _g[1];
      var _h = react_1.useState(""), topDisplay = _h[0], setTopDisplay = _h[1];
      var _j = react_1.useState(""), bottomDisplay = _j[0], setBottomDisplay = _j[1];
      var _k = react_1.useState(null), forceVerticalScrollClass = _k[0], setForceVerticalScrollClass = _k[1];
      var _l = react_1.useState(""), topAndBottomOverflowY = _l[0], setTopAndBottomOverflowY = _l[1];
      var _m = react_1.useState(null), cellSelectableCss = _m[0], setCellSelectableCss = _m[1];
      var _o = react_1.useState("ag-layout-normal"), layoutClass = _o[0], setLayoutClass = _o[1];
      var cssClassManager = react_1.useRef();
      if (!cssClassManager.current) {
        cssClassManager.current = new ag_grid_community_1.CssClassManager(function() {
          return eRoot.current;
        });
      }
      var eRoot = react_1.useRef(null);
      var eTop = react_1.useRef(null);
      var eStickyTop = react_1.useRef(null);
      var eBody = react_1.useRef(null);
      var eBodyViewport = react_1.useRef(null);
      var eBottom = react_1.useRef(null);
      var beansToDestroy = react_1.useRef([]);
      var destroyFuncs = react_1.useRef([]);
      reactComment_1.default(" AG Grid Body ", eRoot);
      reactComment_1.default(" AG Pinned Top ", eTop);
      reactComment_1.default(" AG Sticky Top ", eStickyTop);
      reactComment_1.default(" AG Middle ", eBodyViewport);
      reactComment_1.default(" AG Pinned Bottom ", eBottom);
      var setRef = react_1.useCallback(function(e) {
        eRoot.current = e;
        if (!eRoot.current) {
          context.destroyBeans(beansToDestroy.current);
          destroyFuncs.current.forEach(function(f) {
            return f();
          });
          beansToDestroy.current = [];
          destroyFuncs.current = [];
          return;
        }
        if (!context) {
          return;
        }
        var newComp = function(tag) {
          var CompClass = agStackComponentsRegistry.getComponentClass(tag);
          var comp = context.createBean(new CompClass());
          beansToDestroy.current.push(comp);
          return comp;
        };
        var attachToDom = function(eParent, eChild) {
          eParent.appendChild(eChild);
          destroyFuncs.current.push(function() {
            return eParent.removeChild(eChild);
          });
        };
        attachToDom(eRoot.current, document.createComment(" AG Fake Horizontal Scroll "));
        attachToDom(eRoot.current, newComp("AG-FAKE-HORIZONTAL-SCROLL").getGui());
        attachToDom(eRoot.current, document.createComment(" AG Overlay Wrapper "));
        attachToDom(eRoot.current, newComp("AG-OVERLAY-WRAPPER").getGui());
        if (eBody.current) {
          attachToDom(eBody.current, document.createComment(" AG Fake Vertical Scroll "));
          attachToDom(eBody.current, newComp("AG-FAKE-VERTICAL-SCROLL").getGui());
        }
        var compProxy = {
          setRowAnimationCssOnBodyViewport: setRowAnimationClass,
          setColumnCount: function(count) {
            if (eRoot.current) {
              ag_grid_community_1._.setAriaColCount(eRoot.current, count);
            }
          },
          setRowCount: function(count) {
            if (eRoot.current) {
              ag_grid_community_1._.setAriaRowCount(eRoot.current, count);
            }
          },
          setTopHeight,
          setBottomHeight,
          setStickyTopHeight,
          setStickyTopTop,
          setStickyTopWidth,
          setTopDisplay,
          setBottomDisplay,
          setColumnMovingCss: function(cssClass, flag) {
            return cssClassManager.current.addOrRemoveCssClass(cssClass, flag);
          },
          updateLayoutClasses: setLayoutClass,
          setAlwaysVerticalScrollClass: setForceVerticalScrollClass,
          setPinnedTopBottomOverflowY: setTopAndBottomOverflowY,
          setCellSelectableCss: function(cssClass, flag) {
            return setCellSelectableCss(flag ? cssClass : null);
          },
          setBodyViewportWidth: function(width) {
            if (eBodyViewport.current) {
              eBodyViewport.current.style.width = width;
            }
          },
          registerBodyViewportResizeListener: function(listener) {
            if (eBodyViewport.current) {
              var unsubscribeFromResize_1 = resizeObserverService.observeResize(eBodyViewport.current, listener);
              destroyFuncs.current.push(function() {
                return unsubscribeFromResize_1();
              });
            }
          }
        };
        var ctrl = context.createBean(new ag_grid_community_1.GridBodyCtrl());
        beansToDestroy.current.push(ctrl);
        ctrl.setComp(compProxy, eRoot.current, eBodyViewport.current, eTop.current, eBottom.current, eStickyTop.current);
      }, []);
      var rootClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-root", "ag-unselectable", layoutClass);
      }, [layoutClass]);
      var bodyViewportClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-body-viewport", rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss);
      }, [rowAnimationClass, layoutClass, forceVerticalScrollClass, cellSelectableCss]);
      var bodyClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-body", layoutClass);
      }, [layoutClass]);
      var topClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-floating-top", cellSelectableCss);
      }, [cellSelectableCss]);
      var stickyTopClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-sticky-top", cellSelectableCss);
      }, [cellSelectableCss]);
      var bottomClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-floating-bottom", cellSelectableCss);
      }, [cellSelectableCss]);
      var topStyle = react_1.useMemo(function() {
        return {
          height: topHeight,
          minHeight: topHeight,
          display: topDisplay,
          overflowY: topAndBottomOverflowY
        };
      }, [topHeight, topDisplay, topAndBottomOverflowY]);
      var stickyTopStyle = react_1.useMemo(function() {
        return {
          height: stickyTopHeight,
          top: stickyTopTop,
          width: stickyTopWidth
        };
      }, [stickyTopHeight, stickyTopTop, stickyTopWidth]);
      var bottomStyle = react_1.useMemo(function() {
        return {
          height: bottomHeight,
          minHeight: bottomHeight,
          display: bottomDisplay,
          overflowY: topAndBottomOverflowY
        };
      }, [bottomHeight, bottomDisplay, topAndBottomOverflowY]);
      var createRowContainer = function(container) {
        return react_1.default.createElement(rowContainerComp_1.default, { name: container, key: container + "-container" });
      };
      var createSection = function(_a2) {
        var section = _a2.section, children = _a2.children, className = _a2.className, style = _a2.style;
        return react_1.default.createElement("div", { ref: section, className, role: "presentation", style }, children.map(createRowContainer));
      };
      return react_1.default.createElement(
        "div",
        { ref: setRef, className: rootClasses, role: "treegrid" },
        react_1.default.createElement(gridHeaderComp_1.default, null),
        createSection({ section: eTop, className: topClasses, style: topStyle, children: [
          ag_grid_community_1.RowContainerName.TOP_LEFT,
          ag_grid_community_1.RowContainerName.TOP_CENTER,
          ag_grid_community_1.RowContainerName.TOP_RIGHT,
          ag_grid_community_1.RowContainerName.TOP_FULL_WIDTH
        ] }),
        react_1.default.createElement("div", { className: bodyClasses, ref: eBody, role: "presentation" }, createSection({
          section: eBodyViewport,
          className: bodyViewportClasses,
          children: [
            ag_grid_community_1.RowContainerName.LEFT,
            ag_grid_community_1.RowContainerName.CENTER,
            ag_grid_community_1.RowContainerName.RIGHT,
            ag_grid_community_1.RowContainerName.FULL_WIDTH
          ]
        })),
        createSection({ section: eStickyTop, className: stickyTopClasses, style: stickyTopStyle, children: [
          ag_grid_community_1.RowContainerName.STICKY_TOP_LEFT,
          ag_grid_community_1.RowContainerName.STICKY_TOP_CENTER,
          ag_grid_community_1.RowContainerName.STICKY_TOP_RIGHT,
          ag_grid_community_1.RowContainerName.STICKY_TOP_FULL_WIDTH
        ] }),
        createSection({ section: eBottom, className: bottomClasses, style: bottomStyle, children: [
          ag_grid_community_1.RowContainerName.BOTTOM_LEFT,
          ag_grid_community_1.RowContainerName.BOTTOM_CENTER,
          ag_grid_community_1.RowContainerName.BOTTOM_RIGHT,
          ag_grid_community_1.RowContainerName.BOTTOM_FULL_WIDTH
        ] })
      );
    };
    exports.default = react_1.memo(GridBodyComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/tabGuardComp.js
var require_tabGuardComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/tabGuardComp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var beansContext_1 = require_beansContext();
    var TabGuardCompRef = function(props, forwardRef) {
      var children = props.children, eFocusableElement = props.eFocusableElement, onTabKeyDown = props.onTabKeyDown, gridCtrl = props.gridCtrl;
      var context = react_1.useContext(beansContext_1.BeansContext).context;
      var topTabGuardRef = react_1.useRef(null);
      var bottomTabGuardRef = react_1.useRef(null);
      var tabGuardCtrlRef = react_1.useRef();
      var setTabIndex = function(value) {
        var processedValue = value == null ? void 0 : parseInt(value, 10).toString();
        [topTabGuardRef, bottomTabGuardRef].forEach(function(tabGuard) {
          var _a, _b;
          if (processedValue === void 0) {
            (_a = tabGuard.current) === null || _a === void 0 ? void 0 : _a.removeAttribute("tabindex");
          } else {
            (_b = tabGuard.current) === null || _b === void 0 ? void 0 : _b.setAttribute("tabindex", processedValue);
          }
        });
      };
      react_1.useImperativeHandle(forwardRef, function() {
        return {
          forceFocusOutOfContainer: function() {
            var _a;
            (_a = tabGuardCtrlRef.current) === null || _a === void 0 ? void 0 : _a.forceFocusOutOfContainer();
          }
        };
      });
      var setupCtrl = react_1.useCallback(function() {
        if (!topTabGuardRef.current && !bottomTabGuardRef.current) {
          context.destroyBean(tabGuardCtrlRef.current);
          tabGuardCtrlRef.current = null;
          return;
        }
        if (topTabGuardRef.current && bottomTabGuardRef.current) {
          var compProxy = {
            setTabIndex
          };
          tabGuardCtrlRef.current = context.createBean(new ag_grid_community_1.TabGuardCtrl({
            comp: compProxy,
            eTopGuard: topTabGuardRef.current,
            eBottomGuard: bottomTabGuardRef.current,
            eFocusableElement,
            onTabKeyDown,
            focusInnerElement: function(fromBottom) {
              return gridCtrl.focusInnerElement(fromBottom);
            }
          }));
        }
      }, []);
      var setTopRef = react_1.useCallback(function(e) {
        topTabGuardRef.current = e;
        setupCtrl();
      }, [setupCtrl]);
      var setBottomRef = react_1.useCallback(function(e) {
        bottomTabGuardRef.current = e;
        setupCtrl();
      }, [setupCtrl]);
      var createTabGuard = function(side) {
        var className = side === "top" ? ag_grid_community_1.TabGuardClassNames.TAB_GUARD_TOP : ag_grid_community_1.TabGuardClassNames.TAB_GUARD_BOTTOM;
        return react_1.default.createElement("div", { className: ag_grid_community_1.TabGuardClassNames.TAB_GUARD + " " + className, role: "presentation", ref: side === "top" ? setTopRef : setBottomRef });
      };
      return react_1.default.createElement(
        react_1.default.Fragment,
        null,
        createTabGuard("top"),
        children,
        createTabGuard("bottom")
      );
    };
    var TabGuardComp2 = react_1.forwardRef(TabGuardCompRef);
    exports.default = react_1.memo(TabGuardComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/gridComp.js
var require_gridComp = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/gridComp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var beansContext_1 = require_beansContext();
    var gridBodyComp_1 = __importDefault(require_gridBodyComp());
    var reactComment_1 = __importDefault(require_reactComment());
    var tabGuardComp_1 = __importDefault(require_tabGuardComp());
    var utils_1 = require_utils();
    var GridComp2 = function(_a) {
      var context = _a.context;
      var _b = react_1.useState(""), rtlClass = _b[0], setRtlClass = _b[1];
      var _c = react_1.useState(""), keyboardFocusClass = _c[0], setKeyboardFocusClass = _c[1];
      var _d = react_1.useState(""), layoutClass = _d[0], setLayoutClass = _d[1];
      var _e = react_1.useState(null), cursor = _e[0], setCursor = _e[1];
      var _f = react_1.useState(null), userSelect = _f[0], setUserSelect = _f[1];
      var _g = react_1.useState(false), initialised = _g[0], setInitialised = _g[1];
      var _h = react_1.useState(), tabGuardReady = _h[0], setTabGuardReady = _h[1];
      var gridCtrlRef = react_1.useRef(null);
      var eRootWrapperRef = react_1.useRef(null);
      var tabGuardRef = react_1.useRef();
      var _j = react_1.useState(null), eGridBodyParent = _j[0], setGridBodyParent = _j[1];
      var focusInnerElementRef = react_1.useRef(function() {
        return void 0;
      });
      var onTabKeyDown = react_1.useCallback(function() {
        return void 0;
      }, []);
      var beans = react_1.useMemo(function() {
        if (context.isDestroyed()) {
          return null;
        }
        return context.getBean("beans");
      }, [context]);
      reactComment_1.default(" AG Grid ", eRootWrapperRef);
      var setRef = react_1.useCallback(function(e) {
        eRootWrapperRef.current = e;
        if (!eRootWrapperRef.current) {
          context.destroyBean(gridCtrlRef.current);
          gridCtrlRef.current = null;
          return;
        }
        if (context.isDestroyed()) {
          return;
        }
        gridCtrlRef.current = context.createBean(new ag_grid_community_1.GridCtrl());
        var gridCtrl = gridCtrlRef.current;
        focusInnerElementRef.current = gridCtrl.focusInnerElement.bind(gridCtrl);
        var compProxy = {
          destroyGridUi: function() {
          },
          setRtlClass,
          addOrRemoveKeyboardFocusClass: function(addOrRemove) {
            return setKeyboardFocusClass(addOrRemove ? ag_grid_community_1.FocusService.AG_KEYBOARD_FOCUS : "");
          },
          forceFocusOutOfContainer: function() {
            var _a2;
            (_a2 = tabGuardRef.current) === null || _a2 === void 0 ? void 0 : _a2.forceFocusOutOfContainer();
          },
          updateLayoutClasses: setLayoutClass,
          getFocusableContainers: function() {
            var _a2, _b2;
            var els = [];
            var gridBodyCompEl = (_a2 = eRootWrapperRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector(".ag-root");
            var sideBarEl = (_b2 = eRootWrapperRef.current) === null || _b2 === void 0 ? void 0 : _b2.querySelector(".ag-side-bar:not(.ag-hidden)");
            if (gridBodyCompEl) {
              els.push(gridBodyCompEl);
            }
            if (sideBarEl) {
              els.push(sideBarEl);
            }
            return els;
          },
          setCursor,
          setUserSelect
        };
        gridCtrl.setComp(compProxy, eRootWrapperRef.current, eRootWrapperRef.current);
        setInitialised(true);
      }, []);
      react_1.useEffect(function() {
        if (!tabGuardReady || !beans || !gridCtrlRef.current || !eGridBodyParent || !eRootWrapperRef.current) {
          return;
        }
        var gridCtrl = gridCtrlRef.current;
        var beansToDestroy = [];
        var agStackComponentsRegistry = beans.agStackComponentsRegistry;
        var HeaderDropZonesClass = agStackComponentsRegistry.getComponentClass("AG-GRID-HEADER-DROP-ZONES");
        var SideBarClass = agStackComponentsRegistry.getComponentClass("AG-SIDE-BAR");
        var StatusBarClass = agStackComponentsRegistry.getComponentClass("AG-STATUS-BAR");
        var WatermarkClass = agStackComponentsRegistry.getComponentClass("AG-WATERMARK");
        var PaginationClass = agStackComponentsRegistry.getComponentClass("AG-PAGINATION");
        var additionalEls = [];
        var eRootWrapper = eRootWrapperRef.current;
        if (gridCtrl.showDropZones() && HeaderDropZonesClass) {
          var headerDropZonesComp = context.createBean(new HeaderDropZonesClass());
          var eGui = headerDropZonesComp.getGui();
          eRootWrapper.insertAdjacentElement("afterbegin", eGui);
          additionalEls.push(eGui);
          beansToDestroy.push(headerDropZonesComp);
        }
        if (gridCtrl.showSideBar() && SideBarClass) {
          var sideBarComp = context.createBean(new SideBarClass());
          var eGui = sideBarComp.getGui();
          var bottomTabGuard = eGridBodyParent.querySelector(".ag-tab-guard-bottom");
          if (bottomTabGuard) {
            bottomTabGuard.insertAdjacentElement("beforebegin", eGui);
            additionalEls.push(eGui);
          }
          beansToDestroy.push(sideBarComp);
        }
        if (gridCtrl.showStatusBar() && StatusBarClass) {
          var statusBarComp = context.createBean(new StatusBarClass());
          var eGui = statusBarComp.getGui();
          eRootWrapper.insertAdjacentElement("beforeend", eGui);
          additionalEls.push(eGui);
          beansToDestroy.push(statusBarComp);
        }
        if (PaginationClass) {
          var paginationComp = context.createBean(new PaginationClass());
          var eGui = paginationComp.getGui();
          eRootWrapper.insertAdjacentElement("beforeend", eGui);
          additionalEls.push(eGui);
          beansToDestroy.push(paginationComp);
        }
        if (gridCtrl.showWatermark() && WatermarkClass) {
          var watermarkComp = context.createBean(new WatermarkClass());
          var eGui = watermarkComp.getGui();
          eRootWrapper.insertAdjacentElement("beforeend", eGui);
          additionalEls.push(eGui);
          beansToDestroy.push(watermarkComp);
        }
        return function() {
          context.destroyBeans(beansToDestroy);
          additionalEls.forEach(function(el) {
            if (el.parentElement) {
              el.parentElement.removeChild(el);
            }
          });
        };
      }, [tabGuardReady, eGridBodyParent, beans]);
      var rootWrapperClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-root-wrapper", rtlClass, keyboardFocusClass, layoutClass);
      }, [rtlClass, keyboardFocusClass, layoutClass]);
      var rootWrapperBodyClasses = react_1.useMemo(function() {
        return utils_1.classesList("ag-root-wrapper-body", "ag-focus-managed", layoutClass);
      }, [layoutClass]);
      var topStyle = react_1.useMemo(function() {
        return {
          userSelect: userSelect != null ? userSelect : "",
          WebkitUserSelect: userSelect != null ? userSelect : "",
          cursor: cursor != null ? cursor : ""
        };
      }, [userSelect, cursor]);
      var setTabGuardCompRef = react_1.useCallback(function(ref) {
        tabGuardRef.current = ref;
        setTabGuardReady(ref !== null);
      }, []);
      return react_1.default.createElement(
        "div",
        { ref: setRef, className: rootWrapperClasses, style: topStyle, role: "presentation" },
        react_1.default.createElement("div", { className: rootWrapperBodyClasses, ref: setGridBodyParent, role: "presentation" }, initialised && eGridBodyParent && beans && react_1.default.createElement(
          beansContext_1.BeansContext.Provider,
          { value: beans },
          react_1.default.createElement(
            tabGuardComp_1.default,
            { ref: setTabGuardCompRef, eFocusableElement: eGridBodyParent, onTabKeyDown, gridCtrl: gridCtrlRef.current },
            // we wait for initialised before rending the children, so GridComp has created and registered with it's
            // GridCtrl before we create the child GridBodyComp. Otherwise the GridBodyComp would initialise first,
            // before we have set the the Layout CSS classes, causing the GridBodyComp to render rows to a grid that
            // doesn't have it's height specified, which would result if all the rows getting rendered (and if many rows,
            // hangs the UI)
            react_1.default.createElement(gridBodyComp_1.default, null)
          )
        ))
      );
    };
    exports.default = react_1.memo(GridComp2);
  }
});

// node_modules/ag-grid-react/lib/reactUi/agGridReactUi.js
var require_agGridReactUi = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/agGridReactUi.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgGridReactUi = void 0;
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var react_1 = __importStar(require_react());
    var newReactComponent_1 = require_newReactComponent();
    var portalManager_1 = require_portalManager();
    var reactFrameworkOverrides_1 = require_reactFrameworkOverrides();
    var gridComp_1 = __importDefault(require_gridComp());
    function debug(msg, obj) {
    }
    var AgGridReactUi = function(props) {
      var _a, _b;
      var gridOptionsRef = react_1.useRef(null);
      var eGui = react_1.useRef(null);
      var portalManager = react_1.useRef(null);
      var destroyFuncs = react_1.useRef([]);
      var whenReadyFuncs = react_1.useRef([]);
      var prevProps = react_1.useRef(props);
      var ready = react_1.useRef(false);
      var _c = react_1.useState(void 0), context = _c[0], setContext = _c[1];
      var checkForDeprecations = react_1.useCallback(function(props2) {
        if (props2.rowDataChangeDetectionStrategy) {
          ag_grid_community_1._.doOnce(function() {
            return console.warn("AG Grid: Since v29 rowDataChangeDetectionStrategy has been deprecated. Row data property changes will be compared by reference via triple equals ===. See https://ag-grid.com/react-data-grid/react-hooks/");
          }, "rowDataChangeDetectionStrategy_Deprecation");
        }
      }, []);
      var _d = react_1.useState(0), setPortalRefresher = _d[1];
      var setRef = react_1.useCallback(function(e) {
        eGui.current = e;
        if (!eGui.current) {
          debug("AgGridReactUi.destroy");
          destroyFuncs.current.forEach(function(f) {
            return f();
          });
          destroyFuncs.current.length = 0;
          return;
        }
        var modules = props.modules || [];
        if (!portalManager.current) {
          portalManager.current = new portalManager_1.PortalManager(function() {
            return setPortalRefresher(function(prev) {
              return prev + 1;
            });
          }, props.componentWrappingElement, props.maxComponentCreationTimeMs);
          destroyFuncs.current.push(function() {
            var _a2;
            (_a2 = portalManager.current) === null || _a2 === void 0 ? void 0 : _a2.destroy();
            portalManager.current = null;
          });
        }
        var gridParams = {
          providedBeanInstances: {
            frameworkComponentWrapper: new ReactFrameworkComponentWrapper(portalManager.current)
          },
          modules,
          frameworkOverrides: new reactFrameworkOverrides_1.ReactFrameworkOverrides(true)
        };
        gridOptionsRef.current = props.gridOptions || {};
        gridOptionsRef.current = ag_grid_community_1.ComponentUtil.copyAttributesToGridOptions(gridOptionsRef.current, props);
        checkForDeprecations(props);
        var createUiCallback = function(context2) {
          setContext(context2);
          destroyFuncs.current.push(function() {
            context2.destroy();
          });
          var ctrlsService = context2.getBean(ag_grid_community_1.CtrlsService.NAME);
          ctrlsService.whenReady(function() {
            debug("AgGridReactUi. ctlService is ready");
            if (context2.isDestroyed()) {
              return;
            }
            if (gridOptionsRef.current) {
              var api = gridOptionsRef.current.api;
              if (api) {
                if (props.setGridApi) {
                  props.setGridApi(api, gridOptionsRef.current.columnApi);
                }
              }
            }
          });
        };
        var acceptChangesCallback = function(context2) {
          var ctrlsService = context2.getBean(ag_grid_community_1.CtrlsService.NAME);
          ctrlsService.whenReady(function() {
            debug("AgGridReactUi.acceptChangesCallback");
            whenReadyFuncs.current.forEach(function(f) {
              return f();
            });
            whenReadyFuncs.current.length = 0;
            ready.current = true;
          });
        };
        var gridCoreCreator = new ag_grid_community_1.GridCoreCreator();
        gridCoreCreator.create(eGui.current, gridOptionsRef.current, createUiCallback, acceptChangesCallback, gridParams);
      }, []);
      var style = react_1.useMemo(function() {
        return __assign2({ height: "100%" }, props.containerStyle || {});
      }, [props.containerStyle]);
      var processWhenReady = react_1.useCallback(function(func) {
        if (ready.current) {
          debug("AgGridReactUi.processWhenReady sync");
          func();
        } else {
          debug("AgGridReactUi.processWhenReady async");
          whenReadyFuncs.current.push(func);
        }
      }, []);
      react_1.useEffect(function() {
        var changes = {};
        extractGridPropertyChanges(prevProps.current, props, changes);
        prevProps.current = props;
        processWhenReady(function() {
          var _a2;
          if ((_a2 = gridOptionsRef.current) === null || _a2 === void 0 ? void 0 : _a2.api) {
            ag_grid_community_1.ComponentUtil.processOnChange(changes, gridOptionsRef.current.api);
          }
        });
      }, [props]);
      return react_1.default.createElement(
        "div",
        { style, className: props.className, ref: setRef },
        context && !context.isDestroyed() ? react_1.default.createElement(gridComp_1.default, { context }) : null,
        (_b = (_a = portalManager.current) === null || _a === void 0 ? void 0 : _a.getPortals()) !== null && _b !== void 0 ? _b : null
      );
    };
    exports.AgGridReactUi = AgGridReactUi;
    var ReactFrameworkComponentWrapper = (
      /** @class */
      function(_super) {
        __extends2(ReactFrameworkComponentWrapper2, _super);
        function ReactFrameworkComponentWrapper2(parent) {
          var _this = _super.call(this) || this;
          _this.parent = parent;
          return _this;
        }
        ReactFrameworkComponentWrapper2.prototype.createWrapper = function(UserReactComponent, componentType) {
          return new newReactComponent_1.NewReactComponent(UserReactComponent, this.parent, componentType);
        };
        return ReactFrameworkComponentWrapper2;
      }(ag_grid_community_1.BaseComponentWrapper)
    );
    function extractGridPropertyChanges(prevProps, nextProps, changes) {
      var debugLogging = !!nextProps.debug;
      Object.keys(nextProps).forEach(function(propKey) {
        if (ag_grid_community_1.ComponentUtil.ALL_PROPERTIES_SET.has(propKey)) {
          if (prevProps[propKey] !== nextProps[propKey]) {
            if (debugLogging) {
              console.log(" agGridReact: [" + propKey + "] property changed");
            }
            changes[propKey] = {
              previousValue: prevProps[propKey],
              currentValue: nextProps[propKey]
            };
          }
        }
      });
      ag_grid_community_1.ComponentUtil.EVENT_CALLBACKS.forEach(function(funcName) {
        if (prevProps[funcName] !== nextProps[funcName]) {
          if (debugLogging) {
            console.log("agGridReact: [" + funcName + "] event callback changed");
          }
          changes[funcName] = {
            previousValue: prevProps[funcName],
            currentValue: nextProps[funcName]
          };
        }
      });
    }
  }
});

// node_modules/ag-grid-react/lib/reactUi/cellRenderer/detailCellRenderer.js
var require_detailCellRenderer = __commonJS({
  "node_modules/ag-grid-react/lib/reactUi/cellRenderer/detailCellRenderer.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importStar(require_react());
    var utils_1 = require_utils();
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var beansContext_1 = require_beansContext();
    var agGridReactUi_1 = require_agGridReactUi();
    var DetailCellRenderer = function(props, ref) {
      var _a = react_1.useContext(beansContext_1.BeansContext), ctrlsFactory = _a.ctrlsFactory, context = _a.context, gridOptionsService = _a.gridOptionsService, resizeObserverService = _a.resizeObserverService, clientSideRowModel = _a.clientSideRowModel, serverSideRowModel = _a.serverSideRowModel;
      var _b = react_1.useState(function() {
        return new utils_1.CssClasses();
      }), cssClasses = _b[0], setCssClasses = _b[1];
      var _c = react_1.useState(function() {
        return new utils_1.CssClasses();
      }), gridCssClasses = _c[0], setGridCssClasses = _c[1];
      var _d = react_1.useState(), detailGridOptions = _d[0], setDetailGridOptions = _d[1];
      var _e = react_1.useState(), detailRowData = _e[0], setDetailRowData = _e[1];
      var ctrlRef = react_1.useRef();
      var eGuiRef = react_1.useRef(null);
      var resizeObserverDestroyFunc = react_1.useRef();
      var parentModules = react_1.useMemo(function() {
        return ag_grid_community_1.ModuleRegistry.__getGridRegisteredModules(props.api.getGridId());
      }, [props]);
      var topClassName = react_1.useMemo(function() {
        return cssClasses.toString() + " ag-details-row";
      }, [cssClasses]);
      var gridClassName = react_1.useMemo(function() {
        return gridCssClasses.toString() + " ag-details-grid";
      }, [gridCssClasses]);
      if (ref) {
        react_1.useImperativeHandle(ref, function() {
          return {
            refresh: function() {
              var _a2, _b2;
              return (_b2 = (_a2 = ctrlRef.current) === null || _a2 === void 0 ? void 0 : _a2.refresh()) !== null && _b2 !== void 0 ? _b2 : false;
            }
          };
        });
      }
      if (props.template) {
        ag_grid_community_1._.doOnce(function() {
          return console.warn("AG Grid: detailCellRendererParams.template is not supported by AG Grid React. To change the template, provide a Custom Detail Cell Renderer. See https://ag-grid.com/react-data-grid/master-detail-custom-detail/");
        }, "React_detailCellRenderer.template");
      }
      var setRef = react_1.useCallback(function(e) {
        eGuiRef.current = e;
        if (!eGuiRef.current) {
          context.destroyBean(ctrlRef.current);
          if (resizeObserverDestroyFunc.current) {
            resizeObserverDestroyFunc.current();
          }
          return;
        }
        var compProxy = {
          addOrRemoveCssClass: function(name, on) {
            return setCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          addOrRemoveDetailGridCssClass: function(name, on) {
            return setGridCssClasses(function(prev) {
              return prev.setClass(name, on);
            });
          },
          setDetailGrid: function(gridOptions) {
            return setDetailGridOptions(gridOptions);
          },
          setRowData: function(rowData) {
            return setDetailRowData(rowData);
          },
          getGui: function() {
            return eGuiRef.current;
          }
        };
        var ctrl = ctrlsFactory.getInstance("detailCellRenderer");
        if (!ctrl) {
          return;
        }
        context.createBean(ctrl);
        ctrl.init(compProxy, props);
        ctrlRef.current = ctrl;
        if (gridOptionsService.is("detailRowAutoHeight")) {
          var checkRowSizeFunc = function() {
            if (eGuiRef.current == null) {
              return;
            }
            var clientHeight = eGuiRef.current.clientHeight;
            if (clientHeight != null && clientHeight > 0) {
              var updateRowHeightFunc = function() {
                props.node.setRowHeight(clientHeight);
                if (clientSideRowModel) {
                  clientSideRowModel.onRowHeightChanged();
                } else if (serverSideRowModel) {
                  serverSideRowModel.onRowHeightChanged();
                }
              };
              setTimeout(updateRowHeightFunc, 0);
            }
          };
          resizeObserverDestroyFunc.current = resizeObserverService.observeResize(eGuiRef.current, checkRowSizeFunc);
          checkRowSizeFunc();
        }
      }, []);
      var setGridApi = react_1.useCallback(function(api, columnApi) {
        var _a2;
        (_a2 = ctrlRef.current) === null || _a2 === void 0 ? void 0 : _a2.registerDetailWithMaster(api, columnApi);
      }, []);
      return react_1.default.createElement("div", { className: topClassName, ref: setRef }, detailGridOptions && react_1.default.createElement(agGridReactUi_1.AgGridReactUi, __assign2({ className: gridClassName }, detailGridOptions, { modules: parentModules, rowData: detailRowData, setGridApi })));
    };
    exports.default = react_1.forwardRef(DetailCellRenderer);
  }
});

// node_modules/ag-grid-react/lib/shared/reactFrameworkOverrides.js
var require_reactFrameworkOverrides = __commonJS({
  "node_modules/ag-grid-react/lib/shared/reactFrameworkOverrides.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReactFrameworkOverrides = void 0;
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var groupCellRenderer_1 = __importDefault(require_groupCellRenderer());
    var detailCellRenderer_1 = __importDefault(require_detailCellRenderer());
    var ReactFrameworkOverrides = (
      /** @class */
      function(_super) {
        __extends2(ReactFrameworkOverrides2, _super);
        function ReactFrameworkOverrides2(reactUi) {
          var _this = _super.call(this) || this;
          _this.frameworkComponents = {
            agGroupCellRenderer: groupCellRenderer_1.default,
            agGroupRowRenderer: groupCellRenderer_1.default,
            agDetailCellRenderer: detailCellRenderer_1.default
          };
          _this.reactUi = reactUi;
          _this.renderingEngine = reactUi ? "react" : "vanilla";
          return _this;
        }
        ReactFrameworkOverrides2.prototype.frameworkComponent = function(name) {
          if (!this.reactUi) {
            return;
          }
          return this.frameworkComponents[name];
        };
        ReactFrameworkOverrides2.prototype.isFrameworkComponent = function(comp) {
          if (!comp) {
            return false;
          }
          var prototype = comp.prototype;
          var isJsComp = prototype && "getGui" in prototype;
          return !isJsComp;
        };
        return ReactFrameworkOverrides2;
      }(ag_grid_community_1.VanillaFrameworkOverrides)
    );
    exports.ReactFrameworkOverrides = ReactFrameworkOverrides;
  }
});

// node_modules/ag-grid-react/lib/legacy/agGridReactLegacy.js
var require_agGridReactLegacy = __commonJS({
  "node_modules/ag-grid-react/lib/legacy/agGridReactLegacy.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgGridReactLegacy = void 0;
    var ag_grid_community_1 = (init_ag_grid_community_auto_esm(), __toCommonJS(ag_grid_community_auto_esm_exports));
    var prop_types_1 = __importDefault(require_prop_types());
    var react_1 = __importStar(require_react());
    var legacyReactComponent_1 = require_legacyReactComponent();
    var newReactComponent_1 = require_newReactComponent();
    var portalManager_1 = require_portalManager();
    var reactFrameworkOverrides_1 = require_reactFrameworkOverrides();
    var AgGridReactLegacy = (
      /** @class */
      function(_super) {
        __extends2(AgGridReactLegacy2, _super);
        function AgGridReactLegacy2(props) {
          var _this = _super.call(this, props) || this;
          _this.props = props;
          _this.api = null;
          _this.destroyed = false;
          _this.SYNCHRONOUS_CHANGE_PROPERTIES = ["context"];
          _this.portalManager = new portalManager_1.LegacyPortalManager(_this, props.componentWrappingElement, props.maxComponentCreationTimeMs);
          return _this;
        }
        AgGridReactLegacy2.prototype.render = function() {
          var _this = this;
          return react_1.default.createElement("div", {
            style: this.createStyleForDiv(),
            className: this.props.className,
            ref: function(e) {
              _this.eGridDiv = e;
            }
          }, this.portalManager.getPortals());
        };
        AgGridReactLegacy2.prototype.createStyleForDiv = function() {
          return __assign2({ height: "100%" }, this.props.containerStyle || {});
        };
        AgGridReactLegacy2.prototype.componentDidMount = function() {
          var modules = this.props.modules || [];
          var gridParams = {
            providedBeanInstances: {
              agGridReact: this,
              frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this, this.portalManager)
            },
            modules,
            frameworkOverrides: new reactFrameworkOverrides_1.ReactFrameworkOverrides(false)
          };
          var gridOptions = this.props.gridOptions || {};
          this.gridOptions = ag_grid_community_1.ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props);
          this.checkForDeprecations(this.props);
          new ag_grid_community_1.Grid(this.eGridDiv, this.gridOptions, gridParams);
          this.api = this.gridOptions.api;
          this.columnApi = this.gridOptions.columnApi;
          this.props.setGridApi(this.api, this.columnApi);
        };
        AgGridReactLegacy2.prototype.checkForDeprecations = function(props) {
          if (props.rowDataChangeDetectionStrategy) {
            ag_grid_community_1._.doOnce(function() {
              return console.warn("AG Grid: Since v29 rowDataChangeDetectionStrategy has been deprecated. Row data property changes will be compared by reference via triple equals ===. See https://ag-grid.com/react-data-grid/react-hooks/");
            }, "rowDataChangeDetectionStrategy_Deprecation");
          }
        };
        AgGridReactLegacy2.prototype.shouldComponentUpdate = function(nextProps) {
          this.processPropsChanges(this.props, nextProps);
          return false;
        };
        AgGridReactLegacy2.prototype.componentDidUpdate = function(prevProps) {
          this.processPropsChanges(prevProps, this.props);
        };
        AgGridReactLegacy2.prototype.processPropsChanges = function(prevProps, nextProps) {
          var changes = {};
          this.extractGridPropertyChanges(prevProps, nextProps, changes);
          this.processSynchronousChanges(changes);
          this.processAsynchronousChanges(changes);
        };
        AgGridReactLegacy2.prototype.extractGridPropertyChanges = function(prevProps, nextProps, changes) {
          var debugLogging = !!nextProps.debug;
          Object.keys(nextProps).forEach(function(propKey) {
            if (ag_grid_community_1.ComponentUtil.ALL_PROPERTIES_SET.has(propKey)) {
              if (prevProps[propKey] !== nextProps[propKey]) {
                if (debugLogging) {
                  console.log("agGridReact: [" + propKey + "] property changed");
                }
                changes[propKey] = {
                  previousValue: prevProps[propKey],
                  currentValue: nextProps[propKey]
                };
              }
            }
          });
          ag_grid_community_1.ComponentUtil.EVENT_CALLBACKS.forEach(function(funcName) {
            if (prevProps[funcName] !== nextProps[funcName]) {
              if (debugLogging) {
                console.log("agGridReact: [" + funcName + "] event callback changed");
              }
              changes[funcName] = {
                previousValue: prevProps[funcName],
                currentValue: nextProps[funcName]
              };
            }
          });
        };
        AgGridReactLegacy2.prototype.componentWillUnmount = function() {
          if (this.api) {
            this.api.destroy();
            this.api = null;
          }
          this.destroyed = true;
          this.portalManager.destroy();
        };
        AgGridReactLegacy2.prototype.isDisableStaticMarkup = function() {
          return this.props.disableStaticMarkup === true;
        };
        AgGridReactLegacy2.prototype.isLegacyComponentRendering = function() {
          return this.props.legacyComponentRendering === true;
        };
        AgGridReactLegacy2.prototype.processSynchronousChanges = function(changes) {
          var asyncChanges = __assign2({}, changes);
          if (Object.keys(asyncChanges).length > 0) {
            var synchronousChanges_1 = {};
            this.SYNCHRONOUS_CHANGE_PROPERTIES.forEach(function(synchronousChangeProperty) {
              if (asyncChanges[synchronousChangeProperty]) {
                synchronousChanges_1[synchronousChangeProperty] = asyncChanges[synchronousChangeProperty];
                delete asyncChanges[synchronousChangeProperty];
              }
            });
            if (Object.keys(synchronousChanges_1).length > 0 && !!this.api) {
              ag_grid_community_1.ComponentUtil.processOnChange(synchronousChanges_1, this.api);
            }
          }
          return asyncChanges;
        };
        AgGridReactLegacy2.prototype.processAsynchronousChanges = function(changes) {
          var _this = this;
          if (Object.keys(changes).length > 0) {
            window.setTimeout(function() {
              if (_this.api) {
                ag_grid_community_1.ComponentUtil.processOnChange(changes, _this.api);
              }
            });
          }
        };
        AgGridReactLegacy2.MAX_COMPONENT_CREATION_TIME_IN_MS = 1e3;
        AgGridReactLegacy2.defaultProps = {
          legacyComponentRendering: false,
          disableStaticMarkup: false,
          maxComponentCreationTimeMs: AgGridReactLegacy2.MAX_COMPONENT_CREATION_TIME_IN_MS
        };
        return AgGridReactLegacy2;
      }(react_1.Component)
    );
    exports.AgGridReactLegacy = AgGridReactLegacy;
    AgGridReactLegacy.propTypes = {
      gridOptions: prop_types_1.default.object
    };
    addProperties(ag_grid_community_1.ComponentUtil.EVENT_CALLBACKS, prop_types_1.default.func);
    addProperties(ag_grid_community_1.ComponentUtil.BOOLEAN_PROPERTIES, prop_types_1.default.bool);
    addProperties(ag_grid_community_1.ComponentUtil.STRING_PROPERTIES, prop_types_1.default.string);
    addProperties(ag_grid_community_1.ComponentUtil.OBJECT_PROPERTIES, prop_types_1.default.object);
    addProperties(ag_grid_community_1.ComponentUtil.ARRAY_PROPERTIES, prop_types_1.default.array);
    addProperties(ag_grid_community_1.ComponentUtil.NUMBER_PROPERTIES, prop_types_1.default.number);
    addProperties(ag_grid_community_1.ComponentUtil.FUNCTION_PROPERTIES, prop_types_1.default.func);
    function addProperties(listOfProps, propType) {
      listOfProps.forEach(function(propKey) {
        AgGridReactLegacy[propKey] = propType;
      });
    }
    var ReactFrameworkComponentWrapper = (
      /** @class */
      function(_super) {
        __extends2(ReactFrameworkComponentWrapper2, _super);
        function ReactFrameworkComponentWrapper2(agGridReact, portalManager) {
          var _this = _super.call(this) || this;
          _this.agGridReact = agGridReact;
          _this.portalManager = portalManager;
          return _this;
        }
        ReactFrameworkComponentWrapper2.prototype.createWrapper = function(UserReactComponent, componentType) {
          if (this.agGridReact.isLegacyComponentRendering()) {
            return new legacyReactComponent_1.LegacyReactComponent(UserReactComponent, this.agGridReact, this.portalManager, componentType);
          } else {
            return new newReactComponent_1.NewReactComponent(UserReactComponent, this.portalManager, componentType);
          }
        };
        return ReactFrameworkComponentWrapper2;
      }(ag_grid_community_1.BaseComponentWrapper)
    );
  }
});

// node_modules/ag-grid-react/lib/agGridReact.js
var require_agGridReact = __commonJS({
  "node_modules/ag-grid-react/lib/agGridReact.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgGridReact = void 0;
    var react_1 = __importStar(require_react());
    var agGridReactLegacy_1 = require_agGridReactLegacy();
    var agGridReactUi_1 = require_agGridReactUi();
    var AgGridReact = (
      /** @class */
      function(_super) {
        __extends2(AgGridReact2, _super);
        function AgGridReact2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.setGridApi = function(api, columnApi) {
            _this.api = api;
            _this.columnApi = columnApi;
          };
          return _this;
        }
        AgGridReact2.prototype.render = function() {
          var ReactComponentToUse = this.props.suppressReactUi ? react_1.default.createElement(agGridReactLegacy_1.AgGridReactLegacy, __assign2({}, this.props, { setGridApi: this.setGridApi })) : react_1.default.createElement(agGridReactUi_1.AgGridReactUi, __assign2({}, this.props, { setGridApi: this.setGridApi }));
          return ReactComponentToUse;
        };
        return AgGridReact2;
      }(react_1.Component)
    );
    exports.AgGridReact = AgGridReact;
  }
});

// node_modules/ag-grid-react/lib/shared/interfaces.js
var require_interfaces = __commonJS({
  "node_modules/ag-grid-react/lib/shared/interfaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChangeDetectionStrategyType = void 0;
    var ChangeDetectionStrategyType;
    (function(ChangeDetectionStrategyType2) {
      ChangeDetectionStrategyType2["IdentityCheck"] = "IdentityCheck";
      ChangeDetectionStrategyType2["DeepValueCheck"] = "DeepValueCheck";
      ChangeDetectionStrategyType2["NoCheck"] = "NoCheck";
    })(ChangeDetectionStrategyType = exports.ChangeDetectionStrategyType || (exports.ChangeDetectionStrategyType = {}));
  }
});

// node_modules/ag-grid-react/lib/main.js
var require_main = __commonJS({
  "node_modules/ag-grid-react/lib/main.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AgGridReactFire = exports.AgGridReactLegacy = exports.AgGridReact = void 0;
    var agGridReact_1 = require_agGridReact();
    Object.defineProperty(exports, "AgGridReact", { enumerable: true, get: function() {
      return agGridReact_1.AgGridReact;
    } });
    var agGridReactLegacy_1 = require_agGridReactLegacy();
    Object.defineProperty(exports, "AgGridReactLegacy", { enumerable: true, get: function() {
      return agGridReactLegacy_1.AgGridReactLegacy;
    } });
    var agGridReactUi_1 = require_agGridReactUi();
    Object.defineProperty(exports, "AgGridReactFire", { enumerable: true, get: function() {
      return agGridReactUi_1.AgGridReactUi;
    } });
    __exportStar(require_interfaces(), exports);
  }
});
export default require_main();
/*! Bundled license information:

ag-grid-community/dist/ag-grid-community.auto.esm.js:
  (**
            * @ag-grid-community/all-modules - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue * @version v30.2.1
            * @link https://www.ag-grid.com/
            * @license MIT
            *)
  (**
   * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / Typescript / React / Angular / Vue
   * @version v30.2.1
   * @link https://www.ag-grid.com/
   * @license MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-dom/cjs/react-dom-server-legacy.browser.development.js:
  (**
   * @license React
   * react-dom-server-legacy.browser.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.browser.development.js:
  (**
   * @license React
   * react-dom-server.browser.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=ag-grid-react.js.map
